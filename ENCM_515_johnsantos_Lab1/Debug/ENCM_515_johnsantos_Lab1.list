
ENCM_515_johnsantos_Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800c0c8  0800c0c8  0001c0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c524  0800c524  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c52c  0800c52c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c52c  0800c52c  0001c52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c530  0800c530  0001c530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  200001f4  0800c728  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c5c  0800c728  00020c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015966  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cbe  00000000  00000000  00035c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00039900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc4  00000000  00000000  0003ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2cc  00000000  00000000  0003b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fc9  00000000  00000000  00055bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000915d3  00000000  00000000  0006ebb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c20  00000000  00000000  0010018c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00105dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000545  00000000  00000000  00105e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000050  00000000  00000000  00106371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c0b0 	.word	0x0800c0b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800c0b0 	.word	0x0800c0b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ebc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d013      	beq.n	8000ef4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ecc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ed0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ed4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000edc:	e000      	b.n	8000ee0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ede:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f000 fd9c 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f844 	bl	8000f98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f10:	f000 f8aa 	bl	8001068 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f000 f98a 	bl	800122c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f18:	f000 f8c6 	bl	80010a8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000f1c:	f000 f8f2 	bl	8001104 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000f20:	f000 f91e 	bl	8001160 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f24:	f000 f94c 	bl	80011c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f28:	f007 ff9e 	bl	8008e68 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_SuspendTick();
 8000f2c:	f000 fe20 	bl	8001b70 <HAL_SuspendTick>
  printf("Names:Kushal and John, Date: 27/01/2024, and Dark mode is better than light mode as it attracts bugs :)\n");
 8000f30:	4815      	ldr	r0, [pc, #84]	; (8000f88 <main+0x84>)
 8000f32:	f009 f9d5 	bl	800a2e0 <puts>

  printf("\n Testing float print: %f \n\r", 0.50);
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <main+0x88>)
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <main+0x8c>)
 8000f3e:	f009 f969 	bl	800a214 <iprintf>
  ITM_Port32(31) = 1;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <main+0x90>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
  BasicLoopTest();
 8000f48:	f000 fa66 	bl	8001418 <BasicLoopTest>
  ITM_Port32(31) = 2;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <main+0x90>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	601a      	str	r2, [r3, #0]

  ITM_Port32(31) = 3;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <main+0x90>)
 8000f54:	2203      	movs	r2, #3
 8000f56:	601a      	str	r2, [r3, #0]
  FloatingExperiment();
 8000f58:	f000 fa74 	bl	8001444 <FloatingExperiment>
  ITM_Port32(31) = 4;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <main+0x90>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	601a      	str	r2, [r3, #0]

  ITM_Port32(31) = 5;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <main+0x90>)
 8000f64:	2205      	movs	r2, #5
 8000f66:	601a      	str	r2, [r3, #0]
  FixedExperiment();
 8000f68:	f000 fa84 	bl	8001474 <FixedExperiment>
  ITM_Port32(31) = 6;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <main+0x90>)
 8000f6e:	2206      	movs	r2, #6
 8000f70:	601a      	str	r2, [r3, #0]

  ITM_Port32(31) = 7;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <main+0x90>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
  CMSISExperiment();
 8000f78:	f000 fa9a 	bl	80014b0 <CMSISExperiment>
  ITM_Port32(31) = 8;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <main+0x90>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f82:	f007 ff97 	bl	8008eb4 <MX_USB_HOST_Process>
 8000f86:	e7fc      	b.n	8000f82 <main+0x7e>
 8000f88:	0800c0c8 	.word	0x0800c0c8
 8000f8c:	3fe00000 	.word	0x3fe00000
 8000f90:	0800c130 	.word	0x0800c130
 8000f94:	e000007c 	.word	0xe000007c

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2230      	movs	r2, #48	; 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f009 fa7a 	bl	800a4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <SystemClock_Config+0xc8>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a26      	ldr	r2, [pc, #152]	; (8001060 <SystemClock_Config+0xc8>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <SystemClock_Config+0xc8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <SystemClock_Config+0xcc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <SystemClock_Config+0xcc>)
 8000fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <SystemClock_Config+0xcc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800100c:	23c0      	movs	r3, #192	; 0xc0
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001010:	2304      	movs	r3, #4
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001014:	2308      	movs	r3, #8
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4618      	mov	r0, r3
 800101e:	f003 ff65 	bl	8004eec <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001028:	f000 fa66 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001038:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2103      	movs	r1, #3
 8001048:	4618      	mov	r0, r3
 800104a:	f004 f9c7 	bl	80053dc <HAL_RCC_ClockConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001054:	f000 fa50 	bl	80014f8 <Error_Handler>
  }
}
 8001058:	bf00      	nop
 800105a:	3750      	adds	r7, #80	; 0x50
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800107e:	2301      	movs	r3, #1
 8001080:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001082:	23c8      	movs	r3, #200	; 0xc8
 8001084:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001086:	2305      	movs	r3, #5
 8001088:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4618      	mov	r0, r3
 8001092:	f004 fbaf 	bl	80057f4 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800109c:	f000 fa2c 	bl	80014f8 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <MX_I2C1_Init+0x54>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_I2C1_Init+0x58>)
 80010b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_I2C1_Init+0x50>)
 80010e6:	f003 f91d 	bl	8004324 <HAL_I2C_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f0:	f000 fa02 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000210 	.word	0x20000210
 80010fc:	40005400 	.word	0x40005400
 8001100:	000186a0 	.word	0x000186a0

08001104 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2S2_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_I2S2_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2S2_Init+0x50>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2S2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <MX_I2S2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_I2S2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_I2S2_Init+0x50>)
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <MX_I2S2_Init+0x58>)
 800112c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_I2S2_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_I2S2_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_I2S2_Init+0x50>)
 800113c:	2201      	movs	r2, #1
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_I2S2_Init+0x50>)
 8001142:	f003 fa33 	bl	80045ac <HAL_I2S_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 f9d4 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000264 	.word	0x20000264
 8001158:	40003800 	.word	0x40003800
 800115c:	00017700 	.word	0x00017700

08001160 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_I2S3_Init+0x54>)
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <MX_I2S3_Init+0x58>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_I2S3_Init+0x54>)
 800116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001170:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_I2S3_Init+0x54>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_I2S3_Init+0x54>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_I2S3_Init+0x54>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_I2S3_Init+0x54>)
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <MX_I2S3_Init+0x5c>)
 800118a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_I2S3_Init+0x54>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_I2S3_Init+0x54>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_I2S3_Init+0x54>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_I2S3_Init+0x54>)
 80011a0:	f003 fa04 	bl	80045ac <HAL_I2S_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80011aa:	f000 f9a5 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200002ac 	.word	0x200002ac
 80011b8:	40003c00 	.word	0x40003c00
 80011bc:	00017700 	.word	0x00017700

080011c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_SPI1_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_SPI1_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_SPI1_Init+0x64>)
 80011cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_SPI1_Init+0x64>)
 80011ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_SPI1_Init+0x64>)
 800120c:	220a      	movs	r2, #10
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_SPI1_Init+0x64>)
 8001212:	f004 fc41 	bl	8005a98 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 f96c 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200002f4 	.word	0x200002f4
 8001228:	40013000 	.word	0x40013000

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	4b61      	ldr	r3, [pc, #388]	; (80013cc <MX_GPIO_Init+0x1a0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a60      	ldr	r2, [pc, #384]	; (80013cc <MX_GPIO_Init+0x1a0>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <MX_GPIO_Init+0x1a0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <MX_GPIO_Init+0x1a0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a59      	ldr	r2, [pc, #356]	; (80013cc <MX_GPIO_Init+0x1a0>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <MX_GPIO_Init+0x1a0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <MX_GPIO_Init+0x1a0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a52      	ldr	r2, [pc, #328]	; (80013cc <MX_GPIO_Init+0x1a0>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <MX_GPIO_Init+0x1a0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <MX_GPIO_Init+0x1a0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <MX_GPIO_Init+0x1a0>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <MX_GPIO_Init+0x1a0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b45      	ldr	r3, [pc, #276]	; (80013cc <MX_GPIO_Init+0x1a0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a44      	ldr	r2, [pc, #272]	; (80013cc <MX_GPIO_Init+0x1a0>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <MX_GPIO_Init+0x1a0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <MX_GPIO_Init+0x1a0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <MX_GPIO_Init+0x1a0>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <MX_GPIO_Init+0x1a0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2108      	movs	r1, #8
 80012ee:	4838      	ldr	r0, [pc, #224]	; (80013d0 <MX_GPIO_Init+0x1a4>)
 80012f0:	f000 fee4 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2101      	movs	r1, #1
 80012f8:	4836      	ldr	r0, [pc, #216]	; (80013d4 <MX_GPIO_Init+0x1a8>)
 80012fa:	f000 fedf 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012fe:	2200      	movs	r2, #0
 8001300:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001304:	4834      	ldr	r0, [pc, #208]	; (80013d8 <MX_GPIO_Init+0x1ac>)
 8001306:	f000 fed9 	bl	80020bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800130a:	2304      	movs	r3, #4
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	482c      	ldr	r0, [pc, #176]	; (80013d0 <MX_GPIO_Init+0x1a4>)
 800131e:	f000 fd49 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001322:	2308      	movs	r3, #8
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4825      	ldr	r0, [pc, #148]	; (80013d0 <MX_GPIO_Init+0x1a4>)
 800133a:	f000 fd3b 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800133e:	2332      	movs	r3, #50	; 0x32
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001342:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	481f      	ldr	r0, [pc, #124]	; (80013d0 <MX_GPIO_Init+0x1a4>)
 8001354:	f000 fd2e 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4819      	ldr	r0, [pc, #100]	; (80013d4 <MX_GPIO_Init+0x1a8>)
 8001370:	f000 fd20 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001378:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_GPIO_Init+0x1b0>)
 800138a:	f000 fd13 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800138e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001392:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_GPIO_Init+0x1ac>)
 80013a8:	f000 fd04 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013ac:	2320      	movs	r3, #32
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_GPIO_Init+0x1ac>)
 80013c0:	f000 fcf8 	bl	8001db4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c4:	bf00      	nop
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40020000 	.word	0x40020000

080013e0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char* ptr, int len) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e009      	b.n	8001406 <_write+0x26>
		ITM_SendChar(*ptr++);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fd5a 	bl	8000eb4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	dbf1      	blt.n	80013f2 <_write+0x12>
	}
	return len;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <BasicLoopTest>:

void BasicLoopTest(void){
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
	for (int i=0; i<2000000; i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	e002      	b.n	800142a <BasicLoopTest+0x12>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3301      	adds	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <BasicLoopTest+0x28>)
 800142e:	4293      	cmp	r3, r2
 8001430:	ddf8      	ble.n	8001424 <BasicLoopTest+0xc>
	}
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	001e847f 	.word	0x001e847f

08001444 <FloatingExperiment>:

void FloatingExperiment(void) {
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
	float a = 0.5;
 800144a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800144e:	60fb      	str	r3, [r7, #12]
	float b = 0.125;
 8001450:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8001454:	60bb      	str	r3, [r7, #8]
	float c = a * b;
 8001456:	ed97 7a03 	vldr	s14, [r7, #12]
 800145a:	edd7 7a02 	vldr	s15, [r7, #8]
 800145e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001462:	edc7 7a01 	vstr	s15, [r7, #4]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <FixedExperiment>:

void FixedExperiment(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	// Assume the following values are in Q1.15 format.
	int16_t a = 0x4000; // Should be 0.50
 800147a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800147e:	80fb      	strh	r3, [r7, #6]
	int16_t b = 0x1000; // Should be 0.125
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	80bb      	strh	r3, [r7, #4]
	 * The output of c in decimal is 2048. This is because binary in C is not
	 * immediately interpreted as fixed point. For example the output in binary is:
	 * 0000_1000_0000_0000 => 2048 in decimal. However as a fixed point number
	 * this is 0.000100000000000 = 0.0625 = 2048/2^15.
	 */
	int16_t c = (a * b)>>15;
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	13db      	asrs	r3, r3, #15
 8001494:	807b      	strh	r3, [r7, #2]

	printf("\n The value of c is: %d \n\r", c);
 8001496:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800149a:	4619      	mov	r1, r3
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <FixedExperiment+0x38>)
 800149e:	f008 feb9 	bl	800a214 <iprintf>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	0800c150 	.word	0x0800c150

080014b0 <CMSISExperiment>:

void CMSISExperiment(void){
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b09a      	sub	sp, #104	; 0x68
 80014b4:	af00      	add	r7, sp, #0
	float float_array[10] = {-0.9, -0.7, 0, 0.5, 1.5, 0.2, -0.1, -1.5, 0.6, 0.45};
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <CMSISExperiment+0x44>)
 80014b8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80014bc:	461d      	mov	r5, r3
 80014be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014ca:	e884 0003 	stmia.w	r4, {r0, r1}
	q15_t q15_array[10];
	float32_t f32_array[10];
	arm_float_to_q15(&float_array, &q15_array, 10);
 80014ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80014d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d6:	220a      	movs	r2, #10
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 f81f 	bl	800951c <arm_float_to_q15>
	arm_q15_to_float(&q15_array, &f32_array, 10);
 80014de:	1d39      	adds	r1, r7, #4
 80014e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e4:	220a      	movs	r2, #10
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 ffc8 	bl	800947c <arm_q15_to_float>
}
 80014ec:	bf00      	nop
 80014ee:	3768      	adds	r7, #104	; 0x68
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bdb0      	pop	{r4, r5, r7, pc}
 80014f4:	0800c16c 	.word	0x0800c16c

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001542:	2007      	movs	r0, #7
 8001544:	f000 fbf4 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_I2C_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12c      	bne.n	80015d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_I2C_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_I2C_MspInit+0x88>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_I2C_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001592:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001598:	2312      	movs	r3, #18
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a4:	2304      	movs	r3, #4
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <HAL_I2C_MspInit+0x8c>)
 80015b0:	f000 fc00 	bl	8001db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40005400 	.word	0x40005400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400

080015e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08e      	sub	sp, #56	; 0x38
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a59      	ldr	r2, [pc, #356]	; (8001768 <HAL_I2S_MspInit+0x184>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d15b      	bne.n	80016be <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <HAL_I2S_MspInit+0x188>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a57      	ldr	r2, [pc, #348]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b55      	ldr	r3, [pc, #340]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	623b      	str	r3, [r7, #32]
 8001620:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a50      	ldr	r2, [pc, #320]	; (800176c <HAL_I2S_MspInit+0x188>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a49      	ldr	r2, [pc, #292]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800165a:	2304      	movs	r3, #4
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800166a:	2306      	movs	r3, #6
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	483e      	ldr	r0, [pc, #248]	; (8001770 <HAL_I2S_MspInit+0x18c>)
 8001676:	f000 fb9d 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800167a:	2308      	movs	r3, #8
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800168a:	2305      	movs	r3, #5
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	4619      	mov	r1, r3
 8001694:	4836      	ldr	r0, [pc, #216]	; (8001770 <HAL_I2S_MspInit+0x18c>)
 8001696:	f000 fb8d 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800169a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ac:	2305      	movs	r3, #5
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	482f      	ldr	r0, [pc, #188]	; (8001774 <HAL_I2S_MspInit+0x190>)
 80016b8:	f000 fb7c 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016bc:	e04f      	b.n	800175e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <HAL_I2S_MspInit+0x194>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d14a      	bne.n	800175e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_I2S_MspInit+0x188>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a26      	ldr	r2, [pc, #152]	; (800176c <HAL_I2S_MspInit+0x188>)
 80016d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_I2S_MspInit+0x188>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_I2S_MspInit+0x188>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_I2S_MspInit+0x188>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_I2S_MspInit+0x188>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_I2S_MspInit+0x188>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_I2S_MspInit+0x188>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800171c:	2310      	movs	r3, #16
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800172c:	2306      	movs	r3, #6
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4811      	ldr	r0, [pc, #68]	; (800177c <HAL_I2S_MspInit+0x198>)
 8001738:	f000 fb3c 	bl	8001db4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800173c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800174e:	2306      	movs	r3, #6
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_I2S_MspInit+0x18c>)
 800175a:	f000 fb2b 	bl	8001db4 <HAL_GPIO_Init>
}
 800175e:	bf00      	nop
 8001760:	3738      	adds	r7, #56	; 0x38
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40003800 	.word	0x40003800
 800176c:	40023800 	.word	0x40023800
 8001770:	40020800 	.word	0x40020800
 8001774:	40020400 	.word	0x40020400
 8001778:	40003c00 	.word	0x40003c00
 800177c:	40020000 	.word	0x40020000

08001780 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_SPI_MspInit+0x84>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12b      	bne.n	80017fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_SPI_MspInit+0x88>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_SPI_MspInit+0x88>)
 80017ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_SPI_MspInit+0x88>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_SPI_MspInit+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_SPI_MspInit+0x88>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_SPI_MspInit+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017da:	23e0      	movs	r3, #224	; 0xe0
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ea:	2305      	movs	r3, #5
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_SPI_MspInit+0x8c>)
 80017f6:	f000 fadd 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40013000 	.word	0x40013000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 f944 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <OTG_FS_IRQHandler+0x10>)
 800186a:	f000 ff21 	bl	80026b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000730 	.word	0x20000730

08001878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return 1;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_kill>:

int _kill(int pid, int sig)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001892:	f008 fe67 	bl	800a564 <__errno>
 8001896:	4603      	mov	r3, r0
 8001898:	2216      	movs	r2, #22
 800189a:	601a      	str	r2, [r3, #0]
  return -1;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_exit>:

void _exit (int status)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ffe7 	bl	8001888 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ba:	e7fe      	b.n	80018ba <_exit+0x12>

080018bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e00a      	b.n	80018e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ce:	f3af 8000 	nop.w
 80018d2:	4601      	mov	r1, r0
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf0      	blt.n	80018ce <_read+0x12>
  }

  return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191e:	605a      	str	r2, [r3, #4]
  return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_isatty>:

int _isatty(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f008 fde8 	bl	800a564 <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20020000 	.word	0x20020000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	2000034c 	.word	0x2000034c
 80019c8:	20000c60 	.word	0x20000c60

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f4:	f7ff ffea 	bl	80019cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fa:	490d      	ldr	r1, [pc, #52]	; (8001a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f008 fda7 	bl	800a570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7ff fa6f 	bl	8000f04 <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001a34:	0800c534 	.word	0x0800c534
  ldr r2, =_sbss
 8001a38:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001a3c:	20000c5c 	.word	0x20000c5c

08001a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <HAL_Init+0x40>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_Init+0x40>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x40>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f95f 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fd44 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f977 	bl	8001d9a <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f93f 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000350 	.word	0x20000350

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000350 	.word	0x20000350

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_Delay+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008

08001b70 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_SuspendTick+0x1c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_SuspendTick+0x1c>)
 8001b7a:	f023 0302 	bic.w	r3, r3, #2
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <__NVIC_SetPriorityGrouping>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff29 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff3e 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff31 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e159      	b.n	8002084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8148 	bne.w	800207e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d005      	beq.n	8001e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d130      	bne.n	8001e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d017      	beq.n	8001ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a2 	beq.w	800207e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b57      	ldr	r3, [pc, #348]	; (800209c <HAL_GPIO_Init+0x2e8>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a56      	ldr	r2, [pc, #344]	; (800209c <HAL_GPIO_Init+0x2e8>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b54      	ldr	r3, [pc, #336]	; (800209c <HAL_GPIO_Init+0x2e8>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f56:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_GPIO_Init+0x2ec>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a49      	ldr	r2, [pc, #292]	; (80020a4 <HAL_GPIO_Init+0x2f0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d019      	beq.n	8001fb6 <HAL_GPIO_Init+0x202>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_GPIO_Init+0x2f4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0x1fe>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a47      	ldr	r2, [pc, #284]	; (80020ac <HAL_GPIO_Init+0x2f8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_GPIO_Init+0x1fa>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <HAL_GPIO_Init+0x2fc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x1f6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a45      	ldr	r2, [pc, #276]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_GPIO_Init+0x1f2>
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f002 0203 	and.w	r2, r2, #3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x2ec>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a2f      	ldr	r2, [pc, #188]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_GPIO_Init+0x304>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800204e:	4a1a      	ldr	r2, [pc, #104]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_GPIO_Init+0x304>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	f67f aea2 	bls.w	8001dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40013c00 	.word	0x40013c00

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	619a      	str	r2, [r3, #24]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af02      	add	r7, sp, #8
 80020f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e059      	b.n	80021b4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f006 ff02 	bl	8008f24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2203      	movs	r2, #3
 8002124:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800212e:	d102      	bne.n	8002136 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 fdaa 	bl	8005c94 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7c1a      	ldrb	r2, [r3, #16]
 8002148:	f88d 2000 	strb.w	r2, [sp]
 800214c:	3304      	adds	r3, #4
 800214e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002150:	f003 fd2b 	bl	8005baa <USB_CoreInit>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e026      	b.n	80021b4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2101      	movs	r1, #1
 800216c:	4618      	mov	r0, r3
 800216e:	f003 fda2 	bl	8005cb6 <USB_SetCurrentMode>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e017      	b.n	80021b4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7c1a      	ldrb	r2, [r3, #16]
 800218c:	f88d 2000 	strb.w	r2, [sp]
 8002190:	3304      	adds	r3, #4
 8002192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002194:	f003 ff44 	bl	8006020 <USB_HostInit>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e004      	b.n	80021b4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b08b      	sub	sp, #44	; 0x2c
 80021c0:	af04      	add	r7, sp, #16
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	70fb      	strb	r3, [r7, #3]
 80021ce:	460b      	mov	r3, r1
 80021d0:	70bb      	strb	r3, [r7, #2]
 80021d2:	4613      	mov	r3, r2
 80021d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80021d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80021d8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_HCD_HC_Init+0x2c>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e09d      	b.n	8002324 <HAL_HCD_HC_Init+0x168>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	3319      	adds	r3, #25
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3314      	adds	r3, #20
 8002214:	787a      	ldrb	r2, [r7, #1]
 8002216:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3315      	adds	r3, #21
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3326      	adds	r3, #38	; 0x26
 800223c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002240:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	78bb      	ldrb	r3, [r7, #2]
 8002246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800224a:	b2d8      	uxtb	r0, r3
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3316      	adds	r3, #22
 800225a:	4602      	mov	r2, r0
 800225c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fbc8 	bl	80029f8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800226c:	2b00      	cmp	r3, #0
 800226e:	da0a      	bge.n	8002286 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3317      	adds	r3, #23
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	e009      	b.n	800229a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3317      	adds	r3, #23
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f80c 	bl	80062bc <USB_GetHostSpeed>
 80022a4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80022a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10b      	bne.n	80022c6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80022ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_HCD_HC_Init+0x10a>
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2bbc      	cmp	r3, #188	; 0xbc
 80022c0:	d901      	bls.n	80022c6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80022c2:	23bc      	movs	r3, #188	; 0xbc
 80022c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3318      	adds	r3, #24
 80022d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80022da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	b298      	uxth	r0, r3
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3328      	adds	r3, #40	; 0x28
 80022f0:	4602      	mov	r2, r0
 80022f2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	787c      	ldrb	r4, [r7, #1]
 80022fe:	78ba      	ldrb	r2, [r7, #2]
 8002300:	78f9      	ldrb	r1, [r7, #3]
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	4623      	mov	r3, r4
 8002312:	f003 fffb 	bl	800630c <USB_HC_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_HCD_HC_Halt+0x1e>
 8002346:	2302      	movs	r3, #2
 8002348:	e00f      	b.n	800236a <HAL_HCD_HC_Halt+0x3e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f004 fb41 	bl	80069e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	70fb      	strb	r3, [r7, #3]
 8002386:	460b      	mov	r3, r1
 8002388:	70bb      	strb	r3, [r7, #2]
 800238a:	4613      	mov	r3, r2
 800238c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3317      	adds	r3, #23
 800239e:	78ba      	ldrb	r2, [r7, #2]
 80023a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3326      	adds	r3, #38	; 0x26
 80023b2:	787a      	ldrb	r2, [r7, #1]
 80023b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023b6:	7c3b      	ldrb	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d114      	bne.n	80023e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	332a      	adds	r3, #42	; 0x2a
 80023cc:	2203      	movs	r2, #3
 80023ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3319      	adds	r3, #25
 80023e0:	7f3a      	ldrb	r2, [r7, #28]
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e009      	b.n	80023fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	332a      	adds	r3, #42	; 0x2a
 80023f6:	2202      	movs	r2, #2
 80023f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023fa:	787b      	ldrb	r3, [r7, #1]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	f200 8102 	bhi.w	8002606 <HAL_HCD_HC_SubmitRequest+0x292>
 8002402:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002408:	08002419 	.word	0x08002419
 800240c:	080025f1 	.word	0x080025f1
 8002410:	080024dd 	.word	0x080024dd
 8002414:	08002567 	.word	0x08002567
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002418:	7c3b      	ldrb	r3, [r7, #16]
 800241a:	2b01      	cmp	r3, #1
 800241c:	f040 80f5 	bne.w	800260a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002420:	78bb      	ldrb	r3, [r7, #2]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d12d      	bne.n	8002482 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002426:	8b3b      	ldrh	r3, [r7, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	333d      	adds	r3, #61	; 0x3d
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	333d      	adds	r3, #61	; 0x3d
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	332a      	adds	r3, #42	; 0x2a
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800246a:	e0ce      	b.n	800260a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	332a      	adds	r3, #42	; 0x2a
 800247c:	2202      	movs	r2, #2
 800247e:	701a      	strb	r2, [r3, #0]
      break;
 8002480:	e0c3      	b.n	800260a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	331a      	adds	r3, #26
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 80b8 	bne.w	800260a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	333c      	adds	r3, #60	; 0x3c
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	332a      	adds	r3, #42	; 0x2a
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
      break;
 80024c4:	e0a1      	b.n	800260a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	332a      	adds	r3, #42	; 0x2a
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
      break;
 80024da:	e096      	b.n	800260a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024dc:	78bb      	ldrb	r3, [r7, #2]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d120      	bne.n	8002524 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	333d      	adds	r3, #61	; 0x3d
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	332a      	adds	r3, #42	; 0x2a
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800250c:	e07e      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	332a      	adds	r3, #42	; 0x2a
 800251e:	2202      	movs	r2, #2
 8002520:	701a      	strb	r2, [r3, #0]
      break;
 8002522:	e073      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	333c      	adds	r3, #60	; 0x3c
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	332a      	adds	r3, #42	; 0x2a
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
      break;
 800254e:	e05d      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	332a      	adds	r3, #42	; 0x2a
 8002560:	2202      	movs	r2, #2
 8002562:	701a      	strb	r2, [r3, #0]
      break;
 8002564:	e052      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002566:	78bb      	ldrb	r3, [r7, #2]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d120      	bne.n	80025ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	333d      	adds	r3, #61	; 0x3d
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10a      	bne.n	8002598 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	332a      	adds	r3, #42	; 0x2a
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002596:	e039      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	332a      	adds	r3, #42	; 0x2a
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
      break;
 80025ac:	e02e      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	333c      	adds	r3, #60	; 0x3c
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	332a      	adds	r3, #42	; 0x2a
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
      break;
 80025d8:	e018      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	332a      	adds	r3, #42	; 0x2a
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
      break;
 80025ee:	e00d      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	332a      	adds	r3, #42	; 0x2a
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
      break;
 8002604:	e002      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002606:	bf00      	nop
 8002608:	e000      	b.n	800260c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800260a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	332c      	adds	r3, #44	; 0x2c
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	8b39      	ldrh	r1, [r7, #24]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4403      	add	r3, r0
 8002630:	3334      	adds	r3, #52	; 0x34
 8002632:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	334c      	adds	r3, #76	; 0x4c
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	3338      	adds	r3, #56	; 0x38
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3315      	adds	r3, #21
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	334d      	adds	r3, #77	; 0x4d
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	3310      	adds	r3, #16
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	1d19      	adds	r1, r3, #4
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	799b      	ldrb	r3, [r3, #6]
 800269e:	461a      	mov	r2, r3
 80026a0:	f003 ff4a 	bl	8006538 <USB_HC_StartXfer>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop

080026b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fc6b 	bl	8005fa2 <USB_GetMode>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	f040 80fb 	bne.w	80028ca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 fc2e 	bl	8005f3a <USB_ReadInterrupts>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80f1 	beq.w	80028c8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fc25 	bl	8005f3a <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026fa:	d104      	bne.n	8002706 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002704:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f003 fc15 	bl	8005f3a <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800271a:	d104      	bne.n	8002726 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002724:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f003 fc05 	bl	8005f3a <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800273a:	d104      	bne.n	8002746 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002744:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f003 fbf5 	bl	8005f3a <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d103      	bne.n	8002762 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2202      	movs	r2, #2
 8002760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fbe7 	bl	8005f3a <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002776:	d120      	bne.n	80027ba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002780:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d113      	bne.n	80027ba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002792:	2110      	movs	r1, #16
 8002794:	6938      	ldr	r0, [r7, #16]
 8002796:	f003 fada 	bl	8005d4e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800279a:	6938      	ldr	r0, [r7, #16]
 800279c:	f003 fb09 	bl	8005db2 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7a5b      	ldrb	r3, [r3, #9]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d105      	bne.n	80027b4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fce4 	bl	800617c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f006 fc33 	bl	8009020 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fbbb 	bl	8005f3a <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ce:	d102      	bne.n	80027d6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f001 fd33 	bl	800423c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fbad 	bl	8005f3a <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d106      	bne.n	80027f8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f006 fbfc 	bl	8008fe8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fb9c 	bl	8005f3a <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800280c:	d139      	bne.n	8002882 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f004 f8d4 	bl	80069c0 <USB_HC_ReadInterrupt>
 8002818:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e025      	b.n	800286c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d018      	beq.n	8002866 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284a:	d106      	bne.n	800285a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f905 	bl	8002a62 <HCD_HC_IN_IRQHandler>
 8002858:	e005      	b.n	8002866 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 ff67 	bl	8003734 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3301      	adds	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	795b      	ldrb	r3, [r3, #5]
 8002870:	461a      	mov	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	4293      	cmp	r3, r2
 8002876:	d3d3      	bcc.n	8002820 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fb57 	bl	8005f3a <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b10      	cmp	r3, #16
 8002894:	d101      	bne.n	800289a <HAL_HCD_IRQHandler+0x1ea>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_HCD_IRQHandler+0x1ec>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d014      	beq.n	80028ca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0210 	bic.w	r2, r2, #16
 80028ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f001 fbe4 	bl	800407e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0210 	orr.w	r2, r2, #16
 80028c4:	619a      	str	r2, [r3, #24]
 80028c6:	e000      	b.n	80028ca <HAL_HCD_IRQHandler+0x21a>
      return;
 80028c8:	bf00      	nop
    }
  }
}
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_HCD_Start+0x16>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e013      	b.n	800290e <HAL_HCD_Start+0x3e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 fca8 	bl	800624a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 f9b7 	bl	8005c72 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_HCD_Stop+0x16>
 8002928:	2302      	movs	r3, #2
 800292a:	e00d      	b.n	8002948 <HAL_HCD_Stop+0x32>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f004 f972 	bl	8006c22 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 fc4a 	bl	80061f6 <USB_ResetPort>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334c      	adds	r3, #76	; 0x4c
 8002988:	781b      	ldrb	r3, [r3, #0]
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3338      	adds	r3, #56	; 0x38
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fc8c 	bl	80062ea <USB_GetCurrentFrame>
 80029d2:	4603      	mov	r3, r0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fc67 	bl	80062bc <USB_GetHostSpeed>
 80029ee:	4603      	mov	r3, r0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	331a      	adds	r3, #26
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	331b      	adds	r3, #27
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3325      	adds	r3, #37	; 0x25
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3324      	adds	r3, #36	; 0x24
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 fa6d 	bl	8005f60 <USB_ReadChInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d11a      	bne.n	8002ac6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	334d      	adds	r3, #77	; 0x4d
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 ff8f 	bl	80069e2 <USB_HC_Halt>
 8002ac4:	e09e      	b.n	8002c04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fa46 	bl	8005f60 <USB_ReadChInterrupts>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ade:	d11b      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334d      	adds	r3, #77	; 0x4d
 8002b04:	2208      	movs	r2, #8
 8002b06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 ff66 	bl	80069e2 <USB_HC_Halt>
 8002b16:	e075      	b.n	8002c04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fa1d 	bl	8005f60 <USB_ReadChInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d11a      	bne.n	8002b66 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2308      	movs	r3, #8
 8002b40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	334d      	adds	r3, #77	; 0x4d
 8002b52:	2206      	movs	r2, #6
 8002b54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 ff3f 	bl	80069e2 <USB_HC_Halt>
 8002b64:	e04e      	b.n	8002c04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 f9f6 	bl	8005f60 <USB_ReadChInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7e:	d11b      	bne.n	8002bb8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	334d      	adds	r3, #77	; 0x4d
 8002ba4:	2209      	movs	r2, #9
 8002ba6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 ff16 	bl	80069e2 <USB_HC_Halt>
 8002bb6:	e025      	b.n	8002c04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 f9cd 	bl	8005f60 <USB_ReadChInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d119      	bne.n	8002c04 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	334d      	adds	r3, #77	; 0x4d
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 feef 	bl	80069e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f9a7 	bl	8005f60 <USB_ReadChInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1c:	d112      	bne.n	8002c44 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fedb 	bl	80069e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c3e:	6093      	str	r3, [r2, #8]
 8002c40:	f000 bd75 	b.w	800372e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f003 f987 	bl	8005f60 <USB_ReadChInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	f040 8128 	bne.w	8002eae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	331b      	adds	r3, #27
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d119      	bne.n	8002cba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	331b      	adds	r3, #27
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	0151      	lsls	r1, r2, #5
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	440a      	add	r2, r1
 8002cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	799b      	ldrb	r3, [r3, #6]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01b      	beq.n	8002cfa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3330      	adds	r3, #48	; 0x30
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	1ac9      	subs	r1, r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3338      	adds	r3, #56	; 0x38
 8002cf8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	334d      	adds	r3, #77	; 0x4d
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3344      	adds	r3, #68	; 0x44
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2301      	movs	r3, #1
 8002d32:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3326      	adds	r3, #38	; 0x26
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3326      	adds	r3, #38	; 0x26
 8002d5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d110      	bne.n	8002d82 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 fe3a 	bl	80069e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	6093      	str	r3, [r2, #8]
 8002d80:	e03d      	b.n	8002dfe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3326      	adds	r3, #38	; 0x26
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d00a      	beq.n	8002dae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3326      	adds	r3, #38	; 0x26
 8002da8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d127      	bne.n	8002dfe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	0151      	lsls	r1, r2, #5
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	440a      	add	r2, r1
 8002dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dcc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	334c      	adds	r3, #76	; 0x4c
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	334c      	adds	r3, #76	; 0x4c
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f006 f91f 	bl	800903c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	799b      	ldrb	r3, [r3, #6]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d13b      	bne.n	8002e7e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3338      	adds	r3, #56	; 0x38
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4403      	add	r3, r0
 8002e26:	3328      	adds	r3, #40	; 0x28
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	440b      	add	r3, r1
 8002e2c:	1e59      	subs	r1, r3, #1
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4403      	add	r3, r0
 8002e3c:	3328      	adds	r3, #40	; 0x28
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8470 	beq.w	800372e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	333c      	adds	r3, #60	; 0x3c
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2d8      	uxtb	r0, r3
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	333c      	adds	r3, #60	; 0x3c
 8002e76:	4602      	mov	r2, r0
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	f000 bc58 	b.w	800372e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	333c      	adds	r3, #60	; 0x3c
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	f083 0301 	eor.w	r3, r3, #1
 8002e96:	b2d8      	uxtb	r0, r3
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	333c      	adds	r3, #60	; 0x3c
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	f000 bc40 	b.w	800372e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 f852 	bl	8005f60 <USB_ReadChInterrupts>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d131      	bne.n	8002f2a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	331a      	adds	r3, #26
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f040 841f 	bne.w	800372e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	331b      	adds	r3, #27
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	334d      	adds	r3, #77	; 0x4d
 8002f14:	2203      	movs	r2, #3
 8002f16:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 fd5e 	bl	80069e2 <USB_HC_Halt>
 8002f26:	f000 bc02 	b.w	800372e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 f814 	bl	8005f60 <USB_ReadChInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	f040 8305 	bne.w	800354e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	461a      	mov	r2, r3
 8002f52:	2302      	movs	r3, #2
 8002f54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	334d      	adds	r3, #77	; 0x4d
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d114      	bne.n	8002f96 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334d      	adds	r3, #77	; 0x4d
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334c      	adds	r3, #76	; 0x4c
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e2cc      	b.n	8003530 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	334d      	adds	r3, #77	; 0x4d
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	d114      	bne.n	8002fd6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	334d      	adds	r3, #77	; 0x4d
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	334c      	adds	r3, #76	; 0x4c
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e2ac      	b.n	8003530 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334d      	adds	r3, #77	; 0x4d
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b07      	cmp	r3, #7
 8002fea:	d00b      	beq.n	8003004 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	334d      	adds	r3, #77	; 0x4d
 8002ffc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ffe:	2b09      	cmp	r3, #9
 8003000:	f040 80a6 	bne.w	8003150 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	334d      	adds	r3, #77	; 0x4d
 8003014:	2202      	movs	r2, #2
 8003016:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3344      	adds	r3, #68	; 0x44
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4403      	add	r3, r0
 8003038:	3344      	adds	r3, #68	; 0x44
 800303a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3344      	adds	r3, #68	; 0x44
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d943      	bls.n	80030da <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3344      	adds	r3, #68	; 0x44
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	331a      	adds	r3, #26
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d123      	bne.n	80030c4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	331b      	adds	r3, #27
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	331c      	adds	r3, #28
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	0151      	lsls	r1, r2, #5
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	440a      	add	r2, r1
 80030ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	334c      	adds	r3, #76	; 0x4c
 80030d4:	2204      	movs	r2, #4
 80030d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030d8:	e229      	b.n	800352e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	; 0x4c
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3326      	adds	r3, #38	; 0x26
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3326      	adds	r3, #38	; 0x26
 8003114:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003116:	2b02      	cmp	r3, #2
 8003118:	f040 8209 	bne.w	800352e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003132:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800313a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800314e:	e1ee      	b.n	800352e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	334d      	adds	r3, #77	; 0x4d
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b05      	cmp	r3, #5
 8003164:	f040 80c8 	bne.w	80032f8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334d      	adds	r3, #77	; 0x4d
 8003178:	2202      	movs	r2, #2
 800317a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	331b      	adds	r3, #27
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b01      	cmp	r3, #1
 8003190:	f040 81ce 	bne.w	8003530 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3326      	adds	r3, #38	; 0x26
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d16b      	bne.n	8003282 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3348      	adds	r3, #72	; 0x48
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	1c59      	adds	r1, r3, #1
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4403      	add	r3, r0
 80031ca:	3348      	adds	r3, #72	; 0x48
 80031cc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3348      	adds	r3, #72	; 0x48
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d943      	bls.n	800326c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3348      	adds	r3, #72	; 0x48
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	331b      	adds	r3, #27
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3344      	adds	r3, #68	; 0x44
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d809      	bhi.n	8003236 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	331c      	adds	r3, #28
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	0151      	lsls	r1, r2, #5
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	440a      	add	r2, r1
 800324c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334c      	adds	r3, #76	; 0x4c
 8003266:	2204      	movs	r2, #4
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e014      	b.n	8003296 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334c      	adds	r3, #76	; 0x4c
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e009      	b.n	8003296 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	334c      	adds	r3, #76	; 0x4c
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3326      	adds	r3, #38	; 0x26
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3326      	adds	r3, #38	; 0x26
 80032bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032be:	2b02      	cmp	r3, #2
 80032c0:	f040 8136 	bne.w	8003530 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	461a      	mov	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e11b      	b.n	8003530 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	; 0x4d
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b03      	cmp	r3, #3
 800330c:	f040 8081 	bne.w	8003412 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	334d      	adds	r3, #77	; 0x4d
 8003320:	2202      	movs	r2, #2
 8003322:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	331b      	adds	r3, #27
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	f040 80fa 	bne.w	8003530 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334c      	adds	r3, #76	; 0x4c
 800334c:	2202      	movs	r2, #2
 800334e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	440a      	add	r2, r1
 8003366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	0151      	lsls	r1, r2, #5
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	440a      	add	r2, r1
 8003386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800338a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033aa:	f023 0320 	bic.w	r3, r3, #32
 80033ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3326      	adds	r3, #38	; 0x26
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3326      	adds	r3, #38	; 0x26
 80033d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f040 80a9 	bne.w	8003530 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	e08e      	b.n	8003530 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	; 0x4d
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d143      	bne.n	80034b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334d      	adds	r3, #77	; 0x4d
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334c      	adds	r3, #76	; 0x4c
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3326      	adds	r3, #38	; 0x26
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3326      	adds	r3, #38	; 0x26
 8003476:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003478:	2b02      	cmp	r3, #2
 800347a:	d159      	bne.n	8003530 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003492:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800349a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	461a      	mov	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e03f      	b.n	8003530 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334d      	adds	r3, #77	; 0x4d
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d126      	bne.n	8003514 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334d      	adds	r3, #77	; 0x4d
 80034d6:	2202      	movs	r2, #2
 80034d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3344      	adds	r3, #68	; 0x44
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1c59      	adds	r1, r3, #1
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4403      	add	r3, r0
 80034fa:	3344      	adds	r3, #68	; 0x44
 80034fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	334c      	adds	r3, #76	; 0x4c
 800350e:	2204      	movs	r2, #4
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e00d      	b.n	8003530 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	334d      	adds	r3, #77	; 0x4d
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	f000 8100 	beq.w	800372c <HCD_HC_IN_IRQHandler+0xcca>
 800352c:	e000      	b.n	8003530 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800352e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	334c      	adds	r3, #76	; 0x4c
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f005 fd78 	bl	800903c <HAL_HCD_HC_NotifyURBChange_Callback>
 800354c:	e0ef      	b.n	800372e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f002 fd02 	bl	8005f60 <USB_ReadChInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d12f      	bne.n	80035c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	461a      	mov	r2, r3
 8003574:	2340      	movs	r3, #64	; 0x40
 8003576:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	334d      	adds	r3, #77	; 0x4d
 8003588:	2205      	movs	r2, #5
 800358a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	331a      	adds	r3, #26
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3344      	adds	r3, #68	; 0x44
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f003 fa0f 	bl	80069e2 <USB_HC_Halt>
 80035c4:	e0b3      	b.n	800372e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f002 fcc6 	bl	8005f60 <USB_ReadChInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b10      	cmp	r3, #16
 80035dc:	f040 80a7 	bne.w	800372e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3326      	adds	r3, #38	; 0x26
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d11b      	bne.n	800362e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3344      	adds	r3, #68	; 0x44
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	334d      	adds	r3, #77	; 0x4d
 800361a:	2204      	movs	r2, #4
 800361c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f003 f9db 	bl	80069e2 <USB_HC_Halt>
 800362c:	e03f      	b.n	80036ae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3326      	adds	r3, #38	; 0x26
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3326      	adds	r3, #38	; 0x26
 8003654:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003656:	2b02      	cmp	r3, #2
 8003658:	d129      	bne.n	80036ae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3344      	adds	r3, #68	; 0x44
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	799b      	ldrb	r3, [r3, #6]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HCD_HC_IN_IRQHandler+0xc2a>
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	331b      	adds	r3, #27
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d110      	bne.n	80036ae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	; 0x4d
 800369c:	2204      	movs	r2, #4
 800369e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 f99a 	bl	80069e2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	331b      	adds	r3, #27
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d129      	bne.n	8003718 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	331b      	adds	r3, #27
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	0151      	lsls	r1, r2, #5
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	440a      	add	r2, r1
 80036ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	0151      	lsls	r1, r2, #5
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	440a      	add	r2, r1
 800370e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003712:	f043 0320 	orr.w	r3, r3, #32
 8003716:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	2310      	movs	r3, #16
 8003728:	6093      	str	r3, [r2, #8]
 800372a:	e000      	b.n	800372e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800372c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f002 fc04 	bl	8005f60 <USB_ReadChInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d11b      	bne.n	800379a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376e:	461a      	mov	r2, r3
 8003770:	2304      	movs	r3, #4
 8003772:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	334d      	adds	r3, #77	; 0x4d
 8003784:	2207      	movs	r2, #7
 8003786:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f003 f926 	bl	80069e2 <USB_HC_Halt>
 8003796:	f000 bc6f 	b.w	8004078 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f002 fbdc 	bl	8005f60 <USB_ReadChInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	f040 8082 	bne.w	80038b8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	461a      	mov	r2, r3
 80037c2:	2320      	movs	r3, #32
 80037c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3319      	adds	r3, #25
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d124      	bne.n	8003826 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3319      	adds	r3, #25
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	334c      	adds	r3, #76	; 0x4c
 8003800:	2202      	movs	r2, #2
 8003802:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	334d      	adds	r3, #77	; 0x4d
 8003814:	2203      	movs	r2, #3
 8003816:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f003 f8de 	bl	80069e2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	331a      	adds	r3, #26
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 841d 	bne.w	8004078 <HCD_HC_OUT_IRQHandler+0x944>
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	331b      	adds	r3, #27
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f040 8411 	bne.w	8004078 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3326      	adds	r3, #38	; 0x26
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d009      	beq.n	8003880 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	331b      	adds	r3, #27
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	334d      	adds	r3, #77	; 0x4d
 8003890:	2203      	movs	r2, #3
 8003892:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f003 f8a0 	bl	80069e2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	3344      	adds	r3, #68	; 0x44
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e3df      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 fb4d 	bl	8005f60 <USB_ReadChInterrupts>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d0:	d111      	bne.n	80038f6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038de:	461a      	mov	r2, r3
 80038e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 f877 	bl	80069e2 <USB_HC_Halt>
 80038f4:	e3c0      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f002 fb2e 	bl	8005f60 <USB_ReadChInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d168      	bne.n	80039e0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3344      	adds	r3, #68	; 0x44
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f002 fb18 	bl	8005f60 <USB_ReadChInterrupts>
 8003930:	4603      	mov	r3, r0
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d112      	bne.n	8003960 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3319      	adds	r3, #25
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	461a      	mov	r2, r3
 800395c:	2340      	movs	r3, #64	; 0x40
 800395e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	331b      	adds	r3, #27
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d019      	beq.n	80039aa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	331b      	adds	r3, #27
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4413      	add	r3, r2
 8003992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b6:	461a      	mov	r2, r3
 80039b8:	2301      	movs	r3, #1
 80039ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334d      	adds	r3, #77	; 0x4d
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 f802 	bl	80069e2 <USB_HC_Halt>
 80039de:	e34b      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f002 fab9 	bl	8005f60 <USB_ReadChInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d139      	bne.n	8003a6c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	334d      	adds	r3, #77	; 0x4d
 8003a08:	2205      	movs	r2, #5
 8003a0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	331a      	adds	r3, #26
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3319      	adds	r3, #25
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	3344      	adds	r3, #68	; 0x44
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 ffc5 	bl	80069e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2340      	movs	r3, #64	; 0x40
 8003a68:	6093      	str	r3, [r2, #8]
 8003a6a:	e305      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f002 fa73 	bl	8005f60 <USB_ReadChInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d11a      	bne.n	8003aba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a90:	461a      	mov	r2, r3
 8003a92:	2308      	movs	r3, #8
 8003a94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	334d      	adds	r3, #77	; 0x4d
 8003aa6:	2206      	movs	r2, #6
 8003aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 ff95 	bl	80069e2 <USB_HC_Halt>
 8003ab8:	e2de      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fa4c 	bl	8005f60 <USB_ReadChInterrupts>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d144      	bne.n	8003b5c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3344      	adds	r3, #68	; 0x44
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	334d      	adds	r3, #77	; 0x4d
 8003af6:	2204      	movs	r2, #4
 8003af8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3319      	adds	r3, #25
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d114      	bne.n	8003b3a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3318      	adds	r3, #24
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3319      	adds	r3, #25
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f002 ff4d 	bl	80069e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b54:	461a      	mov	r2, r3
 8003b56:	2310      	movs	r3, #16
 8003b58:	6093      	str	r3, [r2, #8]
 8003b5a:	e28d      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f002 f9fb 	bl	8005f60 <USB_ReadChInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d169      	bne.n	8003c48 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	799b      	ldrb	r3, [r3, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d111      	bne.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334d      	adds	r3, #77	; 0x4d
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f002 ff22 	bl	80069e2 <USB_HC_Halt>
 8003b9e:	e049      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3344      	adds	r3, #68	; 0x44
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	1c59      	adds	r1, r3, #1
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4403      	add	r3, r0
 8003bc0:	3344      	adds	r3, #68	; 0x44
 8003bc2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3344      	adds	r3, #68	; 0x44
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d922      	bls.n	8003c20 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3344      	adds	r3, #68	; 0x44
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	334c      	adds	r3, #76	; 0x4c
 8003bfe:	2204      	movs	r2, #4
 8003c00:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	334c      	adds	r3, #76	; 0x4c
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f005 fa0f 	bl	800903c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c1e:	e009      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334c      	adds	r3, #76	; 0x4c
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	461a      	mov	r2, r3
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	6093      	str	r3, [r2, #8]
 8003c46:	e217      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f002 f985 	bl	8005f60 <USB_ReadChInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c60:	d11b      	bne.n	8003c9a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334d      	adds	r3, #77	; 0x4d
 8003c72:	2209      	movs	r2, #9
 8003c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f002 feaf 	bl	80069e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	461a      	mov	r2, r3
 8003c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	e1ee      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 f95c 	bl	8005f60 <USB_ReadChInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	f040 81df 	bne.w	8004072 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	334d      	adds	r3, #77	; 0x4d
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 8093 	bne.w	8003e04 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	334d      	adds	r3, #77	; 0x4d
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	334c      	adds	r3, #76	; 0x4c
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	3326      	adds	r3, #38	; 0x26
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d00b      	beq.n	8003d34 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	3326      	adds	r3, #38	; 0x26
 8003d2c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	f040 8190 	bne.w	8004054 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	799b      	ldrb	r3, [r3, #6]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d115      	bne.n	8003d68 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	333d      	adds	r3, #61	; 0x3d
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	f083 0301 	eor.w	r3, r3, #1
 8003d54:	b2d8      	uxtb	r0, r3
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	333d      	adds	r3, #61	; 0x3d
 8003d64:	4602      	mov	r2, r0
 8003d66:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	799b      	ldrb	r3, [r3, #6]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	f040 8171 	bne.w	8004054 <HCD_HC_OUT_IRQHandler+0x920>
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3334      	adds	r3, #52	; 0x34
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8165 	beq.w	8004054 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3334      	adds	r3, #52	; 0x34
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4403      	add	r3, r0
 8003daa:	3328      	adds	r3, #40	; 0x28
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	440b      	add	r3, r1
 8003db0:	1e59      	subs	r1, r3, #1
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4403      	add	r3, r0
 8003dc0:	3328      	adds	r3, #40	; 0x28
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 813f 	beq.w	8004054 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	333d      	adds	r3, #61	; 0x3d
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	f083 0301 	eor.w	r3, r3, #1
 8003dee:	b2d8      	uxtb	r0, r3
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	333d      	adds	r3, #61	; 0x3d
 8003dfe:	4602      	mov	r2, r0
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e127      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	334d      	adds	r3, #77	; 0x4d
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d120      	bne.n	8003e5c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	334d      	adds	r3, #77	; 0x4d
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	331b      	adds	r3, #27
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	f040 8107 	bne.w	8004054 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	334c      	adds	r3, #76	; 0x4c
 8003e56:	2202      	movs	r2, #2
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e0fb      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334d      	adds	r3, #77	; 0x4d
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d13a      	bne.n	8003ee8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	334d      	adds	r3, #77	; 0x4d
 8003e82:	2202      	movs	r2, #2
 8003e84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	334c      	adds	r3, #76	; 0x4c
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	331b      	adds	r3, #27
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	f040 80d1 	bne.w	8004054 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	331b      	adds	r3, #27
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee4:	6053      	str	r3, [r2, #4]
 8003ee6:	e0b5      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	334d      	adds	r3, #77	; 0x4d
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b05      	cmp	r3, #5
 8003efc:	d114      	bne.n	8003f28 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	334d      	adds	r3, #77	; 0x4d
 8003f0e:	2202      	movs	r2, #2
 8003f10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	334c      	adds	r3, #76	; 0x4c
 8003f22:	2202      	movs	r2, #2
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e095      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334d      	adds	r3, #77	; 0x4d
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d114      	bne.n	8003f68 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	334d      	adds	r3, #77	; 0x4d
 8003f4e:	2202      	movs	r2, #2
 8003f50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334c      	adds	r3, #76	; 0x4c
 8003f62:	2205      	movs	r2, #5
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e075      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	334d      	adds	r3, #77	; 0x4d
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b07      	cmp	r3, #7
 8003f7c:	d00a      	beq.n	8003f94 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	334d      	adds	r3, #77	; 0x4d
 8003f8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	d170      	bne.n	8004076 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	334d      	adds	r3, #77	; 0x4d
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3344      	adds	r3, #68	; 0x44
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1c59      	adds	r1, r3, #1
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4403      	add	r3, r0
 8003fc8:	3344      	adds	r3, #68	; 0x44
 8003fca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3344      	adds	r3, #68	; 0x44
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d914      	bls.n	800400c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3344      	adds	r3, #68	; 0x44
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	334c      	adds	r3, #76	; 0x4c
 8004006:	2204      	movs	r2, #4
 8004008:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800400a:	e022      	b.n	8004052 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	334c      	adds	r3, #76	; 0x4c
 800401c:	2202      	movs	r2, #2
 800401e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4413      	add	r3, r2
 8004028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004036:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800403e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4413      	add	r3, r2
 8004048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404c:	461a      	mov	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004052:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	334c      	adds	r3, #76	; 0x4c
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f004 ffe6 	bl	800903c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004070:	e002      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004076:	bf00      	nop
  }
}
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b08a      	sub	sp, #40	; 0x28
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	0c5b      	lsrs	r3, r3, #17
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040b2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d004      	beq.n	80040c4 <HCD_RXQLVL_IRQHandler+0x46>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b05      	cmp	r3, #5
 80040be:	f000 80b6 	beq.w	800422e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040c2:	e0b7      	b.n	8004234 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80b3 	beq.w	8004232 <HCD_RXQLVL_IRQHandler+0x1b4>
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	332c      	adds	r3, #44	; 0x2c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80a7 	beq.w	8004232 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4613      	mov	r3, r2
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	3338      	adds	r3, #56	; 0x38
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	18d1      	adds	r1, r2, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4613      	mov	r3, r2
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4403      	add	r3, r0
 8004108:	3334      	adds	r3, #52	; 0x34
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4299      	cmp	r1, r3
 800410e:	f200 8083 	bhi.w	8004218 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	332c      	adds	r3, #44	; 0x2c
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	b292      	uxth	r2, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f001 feac 	bl	8005e8a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	332c      	adds	r3, #44	; 0x2c
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	18d1      	adds	r1, r2, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4403      	add	r3, r0
 8004156:	332c      	adds	r3, #44	; 0x2c
 8004158:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3338      	adds	r3, #56	; 0x38
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	18d1      	adds	r1, r2, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4403      	add	r3, r0
 800417e:	3338      	adds	r3, #56	; 0x38
 8004180:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	4413      	add	r3, r2
 800418a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	0cdb      	lsrs	r3, r3, #19
 8004192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004196:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3328      	adds	r3, #40	; 0x28
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d13f      	bne.n	8004232 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d03c      	beq.n	8004232 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e4:	461a      	mov	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	333c      	adds	r3, #60	; 0x3c
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	f083 0301 	eor.w	r3, r3, #1
 8004200:	b2d8      	uxtb	r0, r3
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4613      	mov	r3, r2
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	333c      	adds	r3, #60	; 0x3c
 8004212:	4602      	mov	r2, r0
 8004214:	701a      	strb	r2, [r3, #0]
      break;
 8004216:	e00c      	b.n	8004232 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	334c      	adds	r3, #76	; 0x4c
 8004228:	2204      	movs	r2, #4
 800422a:	701a      	strb	r2, [r3, #0]
      break;
 800422c:	e001      	b.n	8004232 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004232:	bf00      	nop
  }
}
 8004234:	bf00      	nop
 8004236:	3728      	adds	r7, #40	; 0x28
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004268:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b02      	cmp	r3, #2
 8004272:	d10b      	bne.n	800428c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d102      	bne.n	8004284 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f004 fec0 	bl	8009004 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f043 0302 	orr.w	r3, r3, #2
 800428a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d132      	bne.n	80042fc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f043 0308 	orr.w	r3, r3, #8
 800429c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d126      	bne.n	80042f6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	7a5b      	ldrb	r3, [r3, #9]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d113      	bne.n	80042d8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80042b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ba:	d106      	bne.n	80042ca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 ff5a 	bl	800617c <USB_InitFSLSPClkSel>
 80042c8:	e011      	b.n	80042ee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2101      	movs	r1, #1
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 ff53 	bl	800617c <USB_InitFSLSPClkSel>
 80042d6:	e00a      	b.n	80042ee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	79db      	ldrb	r3, [r3, #7]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d106      	bne.n	80042ee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042e6:	461a      	mov	r2, r3
 80042e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80042ec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f004 feb2 	bl	8009058 <HAL_HCD_PortEnabled_Callback>
 80042f4:	e002      	b.n	80042fc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f004 febc 	bl	8009074 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b20      	cmp	r3, #32
 8004304:	d103      	bne.n	800430e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6013      	str	r3, [r2, #0]
}
 800431a:	bf00      	nop
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e12b      	b.n	800458e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fd f902 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2224      	movs	r2, #36	; 0x24
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004388:	f001 fa20 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 800438c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4a81      	ldr	r2, [pc, #516]	; (8004598 <HAL_I2C_Init+0x274>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d807      	bhi.n	80043a8 <HAL_I2C_Init+0x84>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a80      	ldr	r2, [pc, #512]	; (800459c <HAL_I2C_Init+0x278>)
 800439c:	4293      	cmp	r3, r2
 800439e:	bf94      	ite	ls
 80043a0:	2301      	movls	r3, #1
 80043a2:	2300      	movhi	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e006      	b.n	80043b6 <HAL_I2C_Init+0x92>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a7d      	ldr	r2, [pc, #500]	; (80045a0 <HAL_I2C_Init+0x27c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bf94      	ite	ls
 80043b0:	2301      	movls	r3, #1
 80043b2:	2300      	movhi	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0e7      	b.n	800458e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a78      	ldr	r2, [pc, #480]	; (80045a4 <HAL_I2C_Init+0x280>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0c9b      	lsrs	r3, r3, #18
 80043c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4a6a      	ldr	r2, [pc, #424]	; (8004598 <HAL_I2C_Init+0x274>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d802      	bhi.n	80043f8 <HAL_I2C_Init+0xd4>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3301      	adds	r3, #1
 80043f6:	e009      	b.n	800440c <HAL_I2C_Init+0xe8>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	4a69      	ldr	r2, [pc, #420]	; (80045a8 <HAL_I2C_Init+0x284>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	3301      	adds	r3, #1
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	430b      	orrs	r3, r1
 8004412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800441e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	495c      	ldr	r1, [pc, #368]	; (8004598 <HAL_I2C_Init+0x274>)
 8004428:	428b      	cmp	r3, r1
 800442a:	d819      	bhi.n	8004460 <HAL_I2C_Init+0x13c>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e59      	subs	r1, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	fbb1 f3f3 	udiv	r3, r1, r3
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004440:	400b      	ands	r3, r1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_I2C_Init+0x138>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1e59      	subs	r1, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fbb1 f3f3 	udiv	r3, r1, r3
 8004454:	3301      	adds	r3, #1
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	e051      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 800445c:	2304      	movs	r3, #4
 800445e:	e04f      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d111      	bne.n	800448c <HAL_I2C_Init+0x168>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1e58      	subs	r0, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	440b      	add	r3, r1
 8004476:	fbb0 f3f3 	udiv	r3, r0, r3
 800447a:	3301      	adds	r3, #1
 800447c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e012      	b.n	80044b2 <HAL_I2C_Init+0x18e>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e58      	subs	r0, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	0099      	lsls	r1, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Init+0x196>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e022      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10e      	bne.n	80044e0 <HAL_I2C_Init+0x1bc>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1e58      	subs	r0, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	440b      	add	r3, r1
 80044d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d4:	3301      	adds	r3, #1
 80044d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044de:	e00f      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1e58      	subs	r0, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	0099      	lsls	r1, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f6:	3301      	adds	r3, #1
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	6809      	ldr	r1, [r1, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800452e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6911      	ldr	r1, [r2, #16]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68d2      	ldr	r2, [r2, #12]
 800453a:	4311      	orrs	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	000186a0 	.word	0x000186a0
 800459c:	001e847f 	.word	0x001e847f
 80045a0:	003d08ff 	.word	0x003d08ff
 80045a4:	431bde83 	.word	0x431bde83
 80045a8:	10624dd3 	.word	0x10624dd3

080045ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e128      	b.n	8004810 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a90      	ldr	r2, [pc, #576]	; (8004818 <HAL_I2S_Init+0x26c>)
 80045d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fd f803 	bl	80015e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045f4:	f023 030f 	bic.w	r3, r3, #15
 80045f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2202      	movs	r2, #2
 8004600:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d060      	beq.n	80046cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004612:	2310      	movs	r3, #16
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e001      	b.n	800461c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b20      	cmp	r3, #32
 8004622:	d802      	bhi.n	800462a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800462a:	2001      	movs	r0, #1
 800462c:	f001 f9d2 	bl	80059d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004630:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463a:	d125      	bne.n	8004688 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	fbb2 f2f3 	udiv	r2, r2, r3
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	3305      	adds	r3, #5
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	e01f      	b.n	80046a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	3305      	adds	r3, #5
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e00e      	b.n	80046a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	3305      	adds	r3, #5
 80046a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4a5c      	ldr	r2, [pc, #368]	; (800481c <HAL_I2S_Init+0x270>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	08db      	lsrs	r3, r3, #3
 80046b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e003      	b.n	80046d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80046cc:	2302      	movs	r3, #2
 80046ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d902      	bls.n	80046e0 <HAL_I2S_Init+0x134>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2bff      	cmp	r3, #255	; 0xff
 80046de:	d907      	bls.n	80046f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e4:	f043 0210 	orr.w	r2, r3, #16
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e08f      	b.n	8004810 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	ea42 0103 	orr.w	r1, r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	430a      	orrs	r2, r1
 8004702:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800470e:	f023 030f 	bic.w	r3, r3, #15
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6851      	ldr	r1, [r2, #4]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6892      	ldr	r2, [r2, #8]
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68d2      	ldr	r2, [r2, #12]
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6992      	ldr	r2, [r2, #24]
 8004726:	430a      	orrs	r2, r1
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004732:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d161      	bne.n	8004800 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a38      	ldr	r2, [pc, #224]	; (8004820 <HAL_I2S_Init+0x274>)
 8004740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a37      	ldr	r2, [pc, #220]	; (8004824 <HAL_I2S_Init+0x278>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d101      	bne.n	8004750 <HAL_I2S_Init+0x1a4>
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <HAL_I2S_Init+0x27c>)
 800474e:	e001      	b.n	8004754 <HAL_I2S_Init+0x1a8>
 8004750:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	4932      	ldr	r1, [pc, #200]	; (8004824 <HAL_I2S_Init+0x278>)
 800475c:	428a      	cmp	r2, r1
 800475e:	d101      	bne.n	8004764 <HAL_I2S_Init+0x1b8>
 8004760:	4a31      	ldr	r2, [pc, #196]	; (8004828 <HAL_I2S_Init+0x27c>)
 8004762:	e001      	b.n	8004768 <HAL_I2S_Init+0x1bc>
 8004764:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004768:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800476c:	f023 030f 	bic.w	r3, r3, #15
 8004770:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2b      	ldr	r2, [pc, #172]	; (8004824 <HAL_I2S_Init+0x278>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_I2S_Init+0x1d4>
 800477c:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <HAL_I2S_Init+0x27c>)
 800477e:	e001      	b.n	8004784 <HAL_I2S_Init+0x1d8>
 8004780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004784:	2202      	movs	r2, #2
 8004786:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a25      	ldr	r2, [pc, #148]	; (8004824 <HAL_I2S_Init+0x278>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_I2S_Init+0x1ea>
 8004792:	4b25      	ldr	r3, [pc, #148]	; (8004828 <HAL_I2S_Init+0x27c>)
 8004794:	e001      	b.n	800479a <HAL_I2S_Init+0x1ee>
 8004796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a6:	d003      	beq.n	80047b0 <HAL_I2S_Init+0x204>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80047b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e001      	b.n	80047bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047c6:	4313      	orrs	r3, r2
 80047c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047d0:	4313      	orrs	r3, r2
 80047d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047da:	4313      	orrs	r3, r2
 80047dc:	b29a      	uxth	r2, r3
 80047de:	897b      	ldrh	r3, [r7, #10]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <HAL_I2S_Init+0x278>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_I2S_Init+0x24c>
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <HAL_I2S_Init+0x27c>)
 80047f6:	e001      	b.n	80047fc <HAL_I2S_Init+0x250>
 80047f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047fc:	897a      	ldrh	r2, [r7, #10]
 80047fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3720      	adds	r7, #32
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	08004923 	.word	0x08004923
 800481c:	cccccccd 	.word	0xcccccccd
 8004820:	08004a39 	.word	0x08004a39
 8004824:	40003800 	.word	0x40003800
 8004828:	40003400 	.word	0x40003400

0800482c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10e      	bne.n	80048bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ffb8 	bl	800482c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	b292      	uxth	r2, r2
 80048d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	1c9a      	adds	r2, r3, #2
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10e      	bne.n	800491a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800490a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ff93 	bl	8004840 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b04      	cmp	r3, #4
 800493c:	d13a      	bne.n	80049b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d109      	bne.n	800495c <I2S_IRQHandler+0x3a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d102      	bne.n	800495c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ffb4 	bl	80048c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d126      	bne.n	80049b4 <I2S_IRQHandler+0x92>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b20      	cmp	r3, #32
 8004972:	d11f      	bne.n	80049b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004982:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	f043 0202 	orr.w	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ff50 	bl	8004854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d136      	bne.n	8004a2e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d109      	bne.n	80049de <I2S_IRQHandler+0xbc>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d102      	bne.n	80049de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff45 	bl	8004868 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d122      	bne.n	8004a2e <I2S_IRQHandler+0x10c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d11b      	bne.n	8004a2e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a04:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	f043 0204 	orr.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ff13 	bl	8004854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a92      	ldr	r2, [pc, #584]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004a52:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a54:	e001      	b.n	8004a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a8b      	ldr	r2, [pc, #556]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004a70:	4b8a      	ldr	r3, [pc, #552]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a72:	e001      	b.n	8004a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004a74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a84:	d004      	beq.n	8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 8099 	bne.w	8004bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d107      	bne.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f925 	bl	8004cf4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d107      	bne.n	8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9c8 	bl	8004e54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d13a      	bne.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d035      	beq.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a6e      	ldr	r2, [pc, #440]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004ae2:	4b6e      	ldr	r3, [pc, #440]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ae4:	e001      	b.n	8004aea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4969      	ldr	r1, [pc, #420]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004af2:	428b      	cmp	r3, r1
 8004af4:	d101      	bne.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004af6:	4b69      	ldr	r3, [pc, #420]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004af8:	e001      	b.n	8004afe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004afe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f043 0202 	orr.w	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fe88 	bl	8004854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	f040 80c3 	bne.w	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80bd 	beq.w	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a49      	ldr	r2, [pc, #292]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004b76:	4b49      	ldr	r3, [pc, #292]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b78:	e001      	b.n	8004b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4944      	ldr	r1, [pc, #272]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b86:	428b      	cmp	r3, r1
 8004b88:	d101      	bne.n	8004b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004b8a:	4b44      	ldr	r3, [pc, #272]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b8c:	e001      	b.n	8004b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004b8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f043 0204 	orr.w	r2, r3, #4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fe4a 	bl	8004854 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bc0:	e089      	b.n	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d107      	bne.n	8004bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8be 	bl	8004d58 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8fd 	bl	8004df0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d12f      	bne.n	8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d02a      	beq.n	8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c18:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c26:	e001      	b.n	8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4919      	ldr	r1, [pc, #100]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c34:	428b      	cmp	r3, r1
 8004c36:	d101      	bne.n	8004c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c38:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c3a:	e001      	b.n	8004c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f043 0202 	orr.w	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fdfa 	bl	8004854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d136      	bne.n	8004cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d031      	beq.n	8004cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d101      	bne.n	8004c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004c7e:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c80:	e001      	b.n	8004c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4902      	ldr	r1, [pc, #8]	; (8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c8e:	428b      	cmp	r3, r1
 8004c90:	d106      	bne.n	8004ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004c92:	4b02      	ldr	r3, [pc, #8]	; (8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c94:	e006      	b.n	8004ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004c96:	bf00      	nop
 8004c98:	40003800 	.word	0x40003800
 8004c9c:	40003400 	.word	0x40003400
 8004ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ca8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	f043 0204 	orr.w	r2, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fdc0 	bl	8004854 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cd4:	e000      	b.n	8004cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cd6:	bf00      	nop
}
 8004cd8:	bf00      	nop
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	1c99      	adds	r1, r3, #2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6251      	str	r1, [r2, #36]	; 0x24
 8004d06:	881a      	ldrh	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d113      	bne.n	8004d4e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ffc9 	bl	8004ce0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	1c99      	adds	r1, r3, #2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6251      	str	r1, [r2, #36]	; 0x24
 8004d6a:	8819      	ldrh	r1, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <I2SEx_TxISR_I2SExt+0x90>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d101      	bne.n	8004d7a <I2SEx_TxISR_I2SExt+0x22>
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <I2SEx_TxISR_I2SExt+0x94>)
 8004d78:	e001      	b.n	8004d7e <I2SEx_TxISR_I2SExt+0x26>
 8004d7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d7e:	460a      	mov	r2, r1
 8004d80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d121      	bne.n	8004dde <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <I2SEx_TxISR_I2SExt+0x90>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <I2SEx_TxISR_I2SExt+0x50>
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <I2SEx_TxISR_I2SExt+0x94>)
 8004da6:	e001      	b.n	8004dac <I2SEx_TxISR_I2SExt+0x54>
 8004da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	490d      	ldr	r1, [pc, #52]	; (8004de8 <I2SEx_TxISR_I2SExt+0x90>)
 8004db4:	428b      	cmp	r3, r1
 8004db6:	d101      	bne.n	8004dbc <I2SEx_TxISR_I2SExt+0x64>
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <I2SEx_TxISR_I2SExt+0x94>)
 8004dba:	e001      	b.n	8004dc0 <I2SEx_TxISR_I2SExt+0x68>
 8004dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff ff81 	bl	8004ce0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40003800 	.word	0x40003800
 8004dec:	40003400 	.word	0x40003400

08004df0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68d8      	ldr	r0, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	1c99      	adds	r1, r3, #2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e08:	b282      	uxth	r2, r0
 8004e0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d113      	bne.n	8004e4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ff4a 	bl	8004ce0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <I2SEx_RxISR_I2SExt+0x90>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <I2SEx_RxISR_I2SExt+0x16>
 8004e66:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <I2SEx_RxISR_I2SExt+0x94>)
 8004e68:	e001      	b.n	8004e6e <I2SEx_RxISR_I2SExt+0x1a>
 8004e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e6e:	68d8      	ldr	r0, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	1c99      	adds	r1, r3, #2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e7a:	b282      	uxth	r2, r0
 8004e7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d121      	bne.n	8004eda <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <I2SEx_RxISR_I2SExt+0x90>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <I2SEx_RxISR_I2SExt+0x50>
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <I2SEx_RxISR_I2SExt+0x94>)
 8004ea2:	e001      	b.n	8004ea8 <I2SEx_RxISR_I2SExt+0x54>
 8004ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	490d      	ldr	r1, [pc, #52]	; (8004ee4 <I2SEx_RxISR_I2SExt+0x90>)
 8004eb0:	428b      	cmp	r3, r1
 8004eb2:	d101      	bne.n	8004eb8 <I2SEx_RxISR_I2SExt+0x64>
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <I2SEx_RxISR_I2SExt+0x94>)
 8004eb6:	e001      	b.n	8004ebc <I2SEx_RxISR_I2SExt+0x68>
 8004eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ebc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff03 	bl	8004ce0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40003800 	.word	0x40003800
 8004ee8:	40003400 	.word	0x40003400

08004eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e267      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d075      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f0a:	4b88      	ldr	r3, [pc, #544]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d00c      	beq.n	8004f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f16:	4b85      	ldr	r3, [pc, #532]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d112      	bne.n	8004f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f22:	4b82      	ldr	r3, [pc, #520]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f2e:	d10b      	bne.n	8004f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f30:	4b7e      	ldr	r3, [pc, #504]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d05b      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x108>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d157      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e242      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f50:	d106      	bne.n	8004f60 <HAL_RCC_OscConfig+0x74>
 8004f52:	4b76      	ldr	r3, [pc, #472]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a75      	ldr	r2, [pc, #468]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e01d      	b.n	8004f9c <HAL_RCC_OscConfig+0xb0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x98>
 8004f6a:	4b70      	ldr	r3, [pc, #448]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6f      	ldr	r2, [pc, #444]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4b6d      	ldr	r3, [pc, #436]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a6c      	ldr	r2, [pc, #432]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e00b      	b.n	8004f9c <HAL_RCC_OscConfig+0xb0>
 8004f84:	4b69      	ldr	r3, [pc, #420]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a68      	ldr	r2, [pc, #416]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b66      	ldr	r3, [pc, #408]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a65      	ldr	r2, [pc, #404]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa4:	f7fc fdb4 	bl	8001b10 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fac:	f7fc fdb0 	bl	8001b10 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	; 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e207      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fbe:	4b5b      	ldr	r3, [pc, #364]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0xc0>
 8004fca:	e014      	b.n	8004ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fc fda0 	bl	8001b10 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd4:	f7fc fd9c 	bl	8001b10 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e1f3      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fe6:	4b51      	ldr	r3, [pc, #324]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0xe8>
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d063      	beq.n	80050ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005002:	4b4a      	ldr	r3, [pc, #296]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500e:	4b47      	ldr	r3, [pc, #284]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005016:	2b08      	cmp	r3, #8
 8005018:	d11c      	bne.n	8005054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800501a:	4b44      	ldr	r3, [pc, #272]	; (800512c <HAL_RCC_OscConfig+0x240>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d116      	bne.n	8005054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005026:	4b41      	ldr	r3, [pc, #260]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_RCC_OscConfig+0x152>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d001      	beq.n	800503e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e1c7      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503e:	4b3b      	ldr	r3, [pc, #236]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4937      	ldr	r1, [pc, #220]	; (800512c <HAL_RCC_OscConfig+0x240>)
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005052:	e03a      	b.n	80050ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800505c:	4b34      	ldr	r3, [pc, #208]	; (8005130 <HAL_RCC_OscConfig+0x244>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fc fd55 	bl	8001b10 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800506a:	f7fc fd51 	bl	8001b10 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e1a8      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507c:	4b2b      	ldr	r3, [pc, #172]	; (800512c <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4b28      	ldr	r3, [pc, #160]	; (800512c <HAL_RCC_OscConfig+0x240>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4925      	ldr	r1, [pc, #148]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]
 800509c:	e015      	b.n	80050ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <HAL_RCC_OscConfig+0x244>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fc fd34 	bl	8001b10 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ac:	f7fc fd30 	bl	8001b10 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e187      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050be:	4b1b      	ldr	r3, [pc, #108]	; (800512c <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d036      	beq.n	8005144 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050de:	4b15      	ldr	r3, [pc, #84]	; (8005134 <HAL_RCC_OscConfig+0x248>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fc fd14 	bl	8001b10 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fc fd10 	bl	8001b10 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e167      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <HAL_RCC_OscConfig+0x240>)
 8005100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x200>
 800510a:	e01b      	b.n	8005144 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <HAL_RCC_OscConfig+0x248>)
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005112:	f7fc fcfd 	bl	8001b10 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005118:	e00e      	b.n	8005138 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800511a:	f7fc fcf9 	bl	8001b10 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d907      	bls.n	8005138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e150      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
 800512c:	40023800 	.word	0x40023800
 8005130:	42470000 	.word	0x42470000
 8005134:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005138:	4b88      	ldr	r3, [pc, #544]	; (800535c <HAL_RCC_OscConfig+0x470>)
 800513a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1ea      	bne.n	800511a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8097 	beq.w	8005280 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005156:	4b81      	ldr	r3, [pc, #516]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10f      	bne.n	8005182 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	4b7d      	ldr	r3, [pc, #500]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4a7c      	ldr	r2, [pc, #496]	; (800535c <HAL_RCC_OscConfig+0x470>)
 800516c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005170:	6413      	str	r3, [r2, #64]	; 0x40
 8005172:	4b7a      	ldr	r3, [pc, #488]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517e:	2301      	movs	r3, #1
 8005180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005182:	4b77      	ldr	r3, [pc, #476]	; (8005360 <HAL_RCC_OscConfig+0x474>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d118      	bne.n	80051c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800518e:	4b74      	ldr	r3, [pc, #464]	; (8005360 <HAL_RCC_OscConfig+0x474>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a73      	ldr	r2, [pc, #460]	; (8005360 <HAL_RCC_OscConfig+0x474>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800519a:	f7fc fcb9 	bl	8001b10 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a2:	f7fc fcb5 	bl	8001b10 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e10c      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b4:	4b6a      	ldr	r3, [pc, #424]	; (8005360 <HAL_RCC_OscConfig+0x474>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d106      	bne.n	80051d6 <HAL_RCC_OscConfig+0x2ea>
 80051c8:	4b64      	ldr	r3, [pc, #400]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	4a63      	ldr	r2, [pc, #396]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6713      	str	r3, [r2, #112]	; 0x70
 80051d4:	e01c      	b.n	8005210 <HAL_RCC_OscConfig+0x324>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCC_OscConfig+0x30c>
 80051de:	4b5f      	ldr	r3, [pc, #380]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	4a5e      	ldr	r2, [pc, #376]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80051e4:	f043 0304 	orr.w	r3, r3, #4
 80051e8:	6713      	str	r3, [r2, #112]	; 0x70
 80051ea:	4b5c      	ldr	r3, [pc, #368]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4a5b      	ldr	r2, [pc, #364]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	6713      	str	r3, [r2, #112]	; 0x70
 80051f6:	e00b      	b.n	8005210 <HAL_RCC_OscConfig+0x324>
 80051f8:	4b58      	ldr	r3, [pc, #352]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	4a57      	ldr	r2, [pc, #348]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	6713      	str	r3, [r2, #112]	; 0x70
 8005204:	4b55      	ldr	r3, [pc, #340]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	4a54      	ldr	r2, [pc, #336]	; (800535c <HAL_RCC_OscConfig+0x470>)
 800520a:	f023 0304 	bic.w	r3, r3, #4
 800520e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d015      	beq.n	8005244 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005218:	f7fc fc7a 	bl	8001b10 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521e:	e00a      	b.n	8005236 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005220:	f7fc fc76 	bl	8001b10 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f241 3288 	movw	r2, #5000	; 0x1388
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e0cb      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005236:	4b49      	ldr	r3, [pc, #292]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0ee      	beq.n	8005220 <HAL_RCC_OscConfig+0x334>
 8005242:	e014      	b.n	800526e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005244:	f7fc fc64 	bl	8001b10 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800524a:	e00a      	b.n	8005262 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524c:	f7fc fc60 	bl	8001b10 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	; 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0b5      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005262:	4b3e      	ldr	r3, [pc, #248]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ee      	bne.n	800524c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d105      	bne.n	8005280 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005274:	4b39      	ldr	r3, [pc, #228]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	4a38      	ldr	r2, [pc, #224]	; (800535c <HAL_RCC_OscConfig+0x470>)
 800527a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800527e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80a1 	beq.w	80053cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800528a:	4b34      	ldr	r3, [pc, #208]	; (800535c <HAL_RCC_OscConfig+0x470>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	2b08      	cmp	r3, #8
 8005294:	d05c      	beq.n	8005350 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d141      	bne.n	8005322 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b31      	ldr	r3, [pc, #196]	; (8005364 <HAL_RCC_OscConfig+0x478>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fc fc34 	bl	8001b10 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fc fc30 	bl	8001b10 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e087      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	4b27      	ldr	r3, [pc, #156]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	019b      	lsls	r3, r3, #6
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	3b01      	subs	r3, #1
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	491b      	ldr	r1, [pc, #108]	; (800535c <HAL_RCC_OscConfig+0x470>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f4:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <HAL_RCC_OscConfig+0x478>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fa:	f7fc fc09 	bl	8001b10 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005302:	f7fc fc05 	bl	8001b10 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e05c      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005314:	4b11      	ldr	r3, [pc, #68]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x416>
 8005320:	e054      	b.n	80053cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <HAL_RCC_OscConfig+0x478>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fc fbf2 	bl	8001b10 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005330:	f7fc fbee 	bl	8001b10 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e045      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_RCC_OscConfig+0x470>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x444>
 800534e:	e03d      	b.n	80053cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d107      	bne.n	8005368 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e038      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
 800535c:	40023800 	.word	0x40023800
 8005360:	40007000 	.word	0x40007000
 8005364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <HAL_RCC_OscConfig+0x4ec>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d028      	beq.n	80053c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005380:	429a      	cmp	r2, r3
 8005382:	d121      	bne.n	80053c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d11a      	bne.n	80053c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800539e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d111      	bne.n	80053c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	3b01      	subs	r3, #1
 80053b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d107      	bne.n	80053c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800

080053dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0cc      	b.n	800558a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f0:	4b68      	ldr	r3, [pc, #416]	; (8005594 <HAL_RCC_ClockConfig+0x1b8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d90c      	bls.n	8005418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fe:	4b65      	ldr	r3, [pc, #404]	; (8005594 <HAL_RCC_ClockConfig+0x1b8>)
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005406:	4b63      	ldr	r3, [pc, #396]	; (8005594 <HAL_RCC_ClockConfig+0x1b8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0b8      	b.n	800558a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d020      	beq.n	8005466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005430:	4b59      	ldr	r3, [pc, #356]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	4a58      	ldr	r2, [pc, #352]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800543a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005448:	4b53      	ldr	r3, [pc, #332]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	4a52      	ldr	r2, [pc, #328]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005454:	4b50      	ldr	r3, [pc, #320]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	494d      	ldr	r1, [pc, #308]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d044      	beq.n	80054fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d107      	bne.n	800548a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	4b47      	ldr	r3, [pc, #284]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d119      	bne.n	80054ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e07f      	b.n	800558a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d003      	beq.n	800549a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005496:	2b03      	cmp	r3, #3
 8005498:	d107      	bne.n	80054aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800549a:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e06f      	b.n	800558a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054aa:	4b3b      	ldr	r3, [pc, #236]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e067      	b.n	800558a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ba:	4b37      	ldr	r3, [pc, #220]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f023 0203 	bic.w	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4934      	ldr	r1, [pc, #208]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054cc:	f7fc fb20 	bl	8001b10 <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d2:	e00a      	b.n	80054ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d4:	f7fc fb1c 	bl	8001b10 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e04f      	b.n	800558a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ea:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 020c 	and.w	r2, r3, #12
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d1eb      	bne.n	80054d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054fc:	4b25      	ldr	r3, [pc, #148]	; (8005594 <HAL_RCC_ClockConfig+0x1b8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d20c      	bcs.n	8005524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550a:	4b22      	ldr	r3, [pc, #136]	; (8005594 <HAL_RCC_ClockConfig+0x1b8>)
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005512:	4b20      	ldr	r3, [pc, #128]	; (8005594 <HAL_RCC_ClockConfig+0x1b8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d001      	beq.n	8005524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e032      	b.n	800558a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005530:	4b19      	ldr	r3, [pc, #100]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4916      	ldr	r1, [pc, #88]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 800553e:	4313      	orrs	r3, r2
 8005540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	490e      	ldr	r1, [pc, #56]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005562:	f000 f821 	bl	80055a8 <HAL_RCC_GetSysClockFreq>
 8005566:	4602      	mov	r2, r0
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	490a      	ldr	r1, [pc, #40]	; (800559c <HAL_RCC_ClockConfig+0x1c0>)
 8005574:	5ccb      	ldrb	r3, [r1, r3]
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <HAL_RCC_ClockConfig+0x1c4>)
 800557c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fc fa80 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40023c00 	.word	0x40023c00
 8005598:	40023800 	.word	0x40023800
 800559c:	0800c198 	.word	0x0800c198
 80055a0:	20000000 	.word	0x20000000
 80055a4:	20000004 	.word	0x20000004

080055a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055ac:	b094      	sub	sp, #80	; 0x50
 80055ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	647b      	str	r3, [r7, #68]	; 0x44
 80055b4:	2300      	movs	r3, #0
 80055b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b8:	2300      	movs	r3, #0
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055c0:	4b79      	ldr	r3, [pc, #484]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 030c 	and.w	r3, r3, #12
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d00d      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0x40>
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	f200 80e1 	bhi.w	8005794 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_RCC_GetSysClockFreq+0x34>
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d003      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80055da:	e0db      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055dc:	4b73      	ldr	r3, [pc, #460]	; (80057ac <HAL_RCC_GetSysClockFreq+0x204>)
 80055de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80055e0:	e0db      	b.n	800579a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055e2:	4b73      	ldr	r3, [pc, #460]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80055e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055e6:	e0d8      	b.n	800579a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055e8:	4b6f      	ldr	r3, [pc, #444]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055f2:	4b6d      	ldr	r3, [pc, #436]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d063      	beq.n	80056c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055fe:	4b6a      	ldr	r3, [pc, #424]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	099b      	lsrs	r3, r3, #6
 8005604:	2200      	movs	r2, #0
 8005606:	63bb      	str	r3, [r7, #56]	; 0x38
 8005608:	63fa      	str	r2, [r7, #60]	; 0x3c
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005610:	633b      	str	r3, [r7, #48]	; 0x30
 8005612:	2300      	movs	r3, #0
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
 8005616:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800561a:	4622      	mov	r2, r4
 800561c:	462b      	mov	r3, r5
 800561e:	f04f 0000 	mov.w	r0, #0
 8005622:	f04f 0100 	mov.w	r1, #0
 8005626:	0159      	lsls	r1, r3, #5
 8005628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800562c:	0150      	lsls	r0, r2, #5
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4621      	mov	r1, r4
 8005634:	1a51      	subs	r1, r2, r1
 8005636:	6139      	str	r1, [r7, #16]
 8005638:	4629      	mov	r1, r5
 800563a:	eb63 0301 	sbc.w	r3, r3, r1
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800564c:	4659      	mov	r1, fp
 800564e:	018b      	lsls	r3, r1, #6
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005656:	4651      	mov	r1, sl
 8005658:	018a      	lsls	r2, r1, #6
 800565a:	4651      	mov	r1, sl
 800565c:	ebb2 0801 	subs.w	r8, r2, r1
 8005660:	4659      	mov	r1, fp
 8005662:	eb63 0901 	sbc.w	r9, r3, r1
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800567a:	4690      	mov	r8, r2
 800567c:	4699      	mov	r9, r3
 800567e:	4623      	mov	r3, r4
 8005680:	eb18 0303 	adds.w	r3, r8, r3
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	462b      	mov	r3, r5
 8005688:	eb49 0303 	adc.w	r3, r9, r3
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800569a:	4629      	mov	r1, r5
 800569c:	024b      	lsls	r3, r1, #9
 800569e:	4621      	mov	r1, r4
 80056a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056a4:	4621      	mov	r1, r4
 80056a6:	024a      	lsls	r2, r1, #9
 80056a8:	4610      	mov	r0, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ae:	2200      	movs	r2, #0
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056b8:	f7fb fa7e 	bl	8000bb8 <__aeabi_uldivmod>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4613      	mov	r3, r2
 80056c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c4:	e058      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c6:	4b38      	ldr	r3, [pc, #224]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	099b      	lsrs	r3, r3, #6
 80056cc:	2200      	movs	r2, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	4611      	mov	r1, r2
 80056d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	2300      	movs	r3, #0
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
 80056dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056e0:	4642      	mov	r2, r8
 80056e2:	464b      	mov	r3, r9
 80056e4:	f04f 0000 	mov.w	r0, #0
 80056e8:	f04f 0100 	mov.w	r1, #0
 80056ec:	0159      	lsls	r1, r3, #5
 80056ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056f2:	0150      	lsls	r0, r2, #5
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4641      	mov	r1, r8
 80056fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80056fe:	4649      	mov	r1, r9
 8005700:	eb63 0b01 	sbc.w	fp, r3, r1
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005710:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005714:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005718:	ebb2 040a 	subs.w	r4, r2, sl
 800571c:	eb63 050b 	sbc.w	r5, r3, fp
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	00eb      	lsls	r3, r5, #3
 800572a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800572e:	00e2      	lsls	r2, r4, #3
 8005730:	4614      	mov	r4, r2
 8005732:	461d      	mov	r5, r3
 8005734:	4643      	mov	r3, r8
 8005736:	18e3      	adds	r3, r4, r3
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	464b      	mov	r3, r9
 800573c:	eb45 0303 	adc.w	r3, r5, r3
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800574e:	4629      	mov	r1, r5
 8005750:	028b      	lsls	r3, r1, #10
 8005752:	4621      	mov	r1, r4
 8005754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005758:	4621      	mov	r1, r4
 800575a:	028a      	lsls	r2, r1, #10
 800575c:	4610      	mov	r0, r2
 800575e:	4619      	mov	r1, r3
 8005760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005762:	2200      	movs	r2, #0
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	61fa      	str	r2, [r7, #28]
 8005768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800576c:	f7fb fa24 	bl	8000bb8 <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4613      	mov	r3, r2
 8005776:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	3301      	adds	r3, #1
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800578a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005792:	e002      	b.n	800579a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005796:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800579a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800579c:	4618      	mov	r0, r3
 800579e:	3750      	adds	r7, #80	; 0x50
 80057a0:	46bd      	mov	sp, r7
 80057a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800
 80057ac:	00f42400 	.word	0x00f42400
 80057b0:	007a1200 	.word	0x007a1200

080057b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b8:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ba:	681b      	ldr	r3, [r3, #0]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000000 	.word	0x20000000

080057cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057d0:	f7ff fff0 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0a9b      	lsrs	r3, r3, #10
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4903      	ldr	r1, [pc, #12]	; (80057f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40023800 	.word	0x40023800
 80057f0:	0800c1a8 	.word	0x0800c1a8

080057f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005818:	2b00      	cmp	r3, #0
 800581a:	d038      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800581c:	4b68      	ldr	r3, [pc, #416]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005822:	f7fc f975 	bl	8001b10 <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005828:	e008      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800582a:	f7fc f971 	bl	8001b10 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e0bd      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800583c:	4b61      	ldr	r3, [pc, #388]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	495a      	ldr	r1, [pc, #360]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005862:	4b57      	ldr	r3, [pc, #348]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005868:	f7fc f952 	bl	8001b10 <HAL_GetTick>
 800586c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005870:	f7fc f94e 	bl	8001b10 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e09a      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005882:	4b50      	ldr	r3, [pc, #320]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8083 	beq.w	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	4b48      	ldr	r3, [pc, #288]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	4a47      	ldr	r2, [pc, #284]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6413      	str	r3, [r2, #64]	; 0x40
 80058ac:	4b45      	ldr	r3, [pc, #276]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058b8:	4b43      	ldr	r3, [pc, #268]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a42      	ldr	r2, [pc, #264]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058c4:	f7fc f924 	bl	8001b10 <HAL_GetTick>
 80058c8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058cc:	f7fc f920 	bl	8001b10 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e06c      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058de:	4b3a      	ldr	r3, [pc, #232]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ea:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d02f      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	429a      	cmp	r2, r3
 8005906:	d028      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005908:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005912:	4b2e      	ldr	r3, [pc, #184]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800591e:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005924:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d114      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005930:	f7fc f8ee 	bl	8001b10 <HAL_GetTick>
 8005934:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005936:	e00a      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005938:	f7fc f8ea 	bl	8001b10 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e034      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0ee      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005966:	d10d      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005968:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597c:	4911      	ldr	r1, [pc, #68]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
 8005982:	e005      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4a0e      	ldr	r2, [pc, #56]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800598e:	6093      	str	r3, [r2, #8]
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599c:	4909      	ldr	r1, [pc, #36]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	7d1a      	ldrb	r2, [r3, #20]
 80059b2:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80059b4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	42470068 	.word	0x42470068
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40007000 	.word	0x40007000
 80059cc:	42470e40 	.word	0x42470e40
 80059d0:	424711e0 	.word	0x424711e0

080059d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d141      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059f2:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d006      	beq.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a08:	d131      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a0c:	617b      	str	r3, [r7, #20]
          break;
 8005a0e:	e031      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a10:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a1c:	d109      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a1e:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a28:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	e008      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a32:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a3c:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4a:	099b      	lsrs	r3, r3, #6
 8005a4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	fb02 f303 	mul.w	r3, r2, r3
 8005a56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5e:	0f1b      	lsrs	r3, r3, #28
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	617b      	str	r3, [r7, #20]
          break;
 8005a6c:	e002      	b.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
          break;
 8005a72:	bf00      	nop
        }
      }
      break;
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8005a76:	bf00      	nop
    }
  }
  return frequency;
 8005a78:	697b      	ldr	r3, [r7, #20]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	00bb8000 	.word	0x00bb8000
 8005a90:	007a1200 	.word	0x007a1200
 8005a94:	00f42400 	.word	0x00f42400

08005a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e07b      	b.n	8005ba2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d108      	bne.n	8005ac4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aba:	d009      	beq.n	8005ad0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	61da      	str	r2, [r3, #28]
 8005ac2:	e005      	b.n	8005ad0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fb fe48 	bl	8001780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b54:	ea42 0103 	orr.w	r1, r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	f003 0104 	and.w	r1, r3, #4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	f003 0210 	and.w	r2, r3, #16
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005baa:	b084      	sub	sp, #16
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	f107 001c 	add.w	r0, r7, #28
 8005bb8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d123      	bne.n	8005c0c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f9dc 	bl	8005fbe <USB_CoreReset>
 8005c06:	4603      	mov	r3, r0
 8005c08:	73fb      	strb	r3, [r7, #15]
 8005c0a:	e01b      	b.n	8005c44 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f9d0 	bl	8005fbe <USB_CoreReset>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
 8005c36:	e005      	b.n	8005c44 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c44:	7fbb      	ldrb	r3, [r7, #30]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10b      	bne.n	8005c62 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f043 0206 	orr.w	r2, r3, #6
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c6e:	b004      	add	sp, #16
 8005c70:	4770      	bx	lr

08005c72 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f043 0201 	orr.w	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f023 0201 	bic.w	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d115      	bne.n	8005d04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ce4:	200a      	movs	r0, #10
 8005ce6:	f7fb ff1f 	bl	8001b28 <HAL_Delay>
      ms += 10U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	330a      	adds	r3, #10
 8005cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f956 	bl	8005fa2 <USB_GetMode>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d01e      	beq.n	8005d3a <USB_SetCurrentMode+0x84>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2bc7      	cmp	r3, #199	; 0xc7
 8005d00:	d9f0      	bls.n	8005ce4 <USB_SetCurrentMode+0x2e>
 8005d02:	e01a      	b.n	8005d3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d115      	bne.n	8005d36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d16:	200a      	movs	r0, #10
 8005d18:	f7fb ff06 	bl	8001b28 <HAL_Delay>
      ms += 10U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	330a      	adds	r3, #10
 8005d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f93d 	bl	8005fa2 <USB_GetMode>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USB_SetCurrentMode+0x84>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2bc7      	cmp	r3, #199	; 0xc7
 8005d32:	d9f0      	bls.n	8005d16 <USB_SetCurrentMode+0x60>
 8005d34:	e001      	b.n	8005d3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e005      	b.n	8005d46 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2bc8      	cmp	r3, #200	; 0xc8
 8005d3e:	d101      	bne.n	8005d44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d68:	d901      	bls.n	8005d6e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e01b      	b.n	8005da6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	daf2      	bge.n	8005d5c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	f043 0220 	orr.w	r2, r3, #32
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d92:	d901      	bls.n	8005d98 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d0f0      	beq.n	8005d86 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005dca:	d901      	bls.n	8005dd0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e018      	b.n	8005e02 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	daf2      	bge.n	8005dbe <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2210      	movs	r2, #16
 8005de0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005dee:	d901      	bls.n	8005df4 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e006      	b.n	8005e02 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d0f0      	beq.n	8005de2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b089      	sub	sp, #36	; 0x24
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	71fb      	strb	r3, [r7, #7]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d123      	bne.n	8005e7c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e34:	88bb      	ldrh	r3, [r7, #4]
 8005e36:	3303      	adds	r3, #3
 8005e38:	089b      	lsrs	r3, r3, #2
 8005e3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e018      	b.n	8005e74 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	031a      	lsls	r2, r3, #12
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4e:	461a      	mov	r2, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	3301      	adds	r3, #1
 8005e66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61bb      	str	r3, [r7, #24]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3e2      	bcc.n	8005e42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3724      	adds	r7, #36	; 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b08b      	sub	sp, #44	; 0x2c
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	4613      	mov	r3, r2
 8005e96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	089b      	lsrs	r3, r3, #2
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	e014      	b.n	8005ee0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	3301      	adds	r3, #1
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	3301      	adds	r3, #1
 8005ede:	623b      	str	r3, [r7, #32]
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d3e6      	bcc.n	8005eb6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ee8:	8bfb      	ldrh	r3, [r7, #30]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01e      	beq.n	8005f2c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f107 0310 	add.w	r3, r7, #16
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	701a      	strb	r2, [r3, #0]
      i++;
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	3301      	adds	r3, #1
 8005f18:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f20:	8bfb      	ldrh	r3, [r7, #30]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f26:	8bfb      	ldrh	r3, [r7, #30]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1ea      	bne.n	8005f02 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	372c      	adds	r7, #44	; 0x2c
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f52:	68fb      	ldr	r3, [r7, #12]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	4013      	ands	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f94:	68bb      	ldr	r3, [r7, #8]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0301 	and.w	r3, r3, #1
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005fd6:	d901      	bls.n	8005fdc <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e01b      	b.n	8006014 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	daf2      	bge.n	8005fca <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f043 0201 	orr.w	r2, r3, #1
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006000:	d901      	bls.n	8006006 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e006      	b.n	8006014 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b01      	cmp	r3, #1
 8006010:	d0f0      	beq.n	8005ff4 <USB_CoreReset+0x36>

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006020:	b084      	sub	sp, #16
 8006022:	b580      	push	{r7, lr}
 8006024:	b086      	sub	sp, #24
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800602e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006040:	461a      	mov	r2, r3
 8006042:	2300      	movs	r3, #0
 8006044:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d119      	bne.n	80060aa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800607a:	2b01      	cmp	r3, #1
 800607c:	d10a      	bne.n	8006094 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800608c:	f043 0304 	orr.w	r3, r3, #4
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e014      	b.n	80060be <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060a2:	f023 0304 	bic.w	r3, r3, #4
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	e009      	b.n	80060be <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060b8:	f023 0304 	bic.w	r3, r3, #4
 80060bc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060be:	2110      	movs	r1, #16
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fe44 	bl	8005d4e <USB_FlushTxFifo>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff fe6e 	bl	8005db2 <USB_FlushRxFifo>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	e015      	b.n	8006112 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	461a      	mov	r2, r3
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295
 80060f8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006106:	461a      	mov	r2, r3
 8006108:	2300      	movs	r3, #0
 800610a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	3301      	adds	r3, #1
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006116:	461a      	mov	r2, r3
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4293      	cmp	r3, r2
 800611c:	d3e3      	bcc.n	80060e6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2280      	movs	r2, #128	; 0x80
 8006130:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a0e      	ldr	r2, [pc, #56]	; (8006170 <USB_HostInit+0x150>)
 8006136:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a0e      	ldr	r2, [pc, #56]	; (8006174 <USB_HostInit+0x154>)
 800613c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006144:	2b00      	cmp	r3, #0
 8006146:	d105      	bne.n	8006154 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	f043 0210 	orr.w	r2, r3, #16
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <USB_HostInit+0x158>)
 800615a:	4313      	orrs	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800616c:	b004      	add	sp, #16
 800616e:	4770      	bx	lr
 8006170:	00600080 	.word	0x00600080
 8006174:	004000e0 	.word	0x004000e0
 8006178:	a3200008 	.word	0xa3200008

0800617c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	68f9      	ldr	r1, [r7, #12]
 80061b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061b4:	4313      	orrs	r3, r2
 80061b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061c4:	461a      	mov	r2, r3
 80061c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80061ca:	6053      	str	r3, [r2, #4]
 80061cc:	e00c      	b.n	80061e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d107      	bne.n	80061e4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061da:	461a      	mov	r2, r3
 80061dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80061e0:	6053      	str	r3, [r2, #4]
 80061e2:	e001      	b.n	80061e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006216:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006224:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006226:	2064      	movs	r0, #100	; 0x64
 8006228:	f7fb fc7e 	bl	8001b28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006238:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800623a:	200a      	movs	r0, #10
 800623c:	f7fb fc74 	bl	8001b28 <HAL_Delay>

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800626e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <USB_DriveVbus+0x44>
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d106      	bne.n	800628e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800628c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006298:	d109      	bne.n	80062ae <USB_DriveVbus+0x64>
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ac:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	0c5b      	lsrs	r3, r3, #17
 80062da:	f003 0303 	and.w	r3, r3, #3
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	b29b      	uxth	r3, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4603      	mov	r3, r0
 800631c:	70fb      	strb	r3, [r7, #3]
 800631e:	460b      	mov	r3, r1
 8006320:	70bb      	strb	r3, [r7, #2]
 8006322:	4613      	mov	r3, r2
 8006324:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633a:	461a      	mov	r2, r3
 800633c:	f04f 33ff 	mov.w	r3, #4294967295
 8006340:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006342:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006346:	2b03      	cmp	r3, #3
 8006348:	d867      	bhi.n	800641a <USB_HC_Init+0x10e>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <USB_HC_Init+0x44>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006361 	.word	0x08006361
 8006354:	080063dd 	.word	0x080063dd
 8006358:	08006361 	.word	0x08006361
 800635c:	0800639f 	.word	0x0800639f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	461a      	mov	r2, r3
 800636e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006372:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006374:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006378:	2b00      	cmp	r3, #0
 800637a:	da51      	bge.n	8006420 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	440a      	add	r2, r1
 8006392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800639c:	e040      	b.n	8006420 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	461a      	mov	r2, r3
 80063ac:	f240 639d 	movw	r3, #1693	; 0x69d
 80063b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	da34      	bge.n	8006424 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80063da:	e023      	b.n	8006424 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e8:	461a      	mov	r2, r3
 80063ea:	f240 2325 	movw	r3, #549	; 0x225
 80063ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da17      	bge.n	8006428 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	78fa      	ldrb	r2, [r7, #3]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	440a      	add	r2, r1
 800640e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006412:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006416:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006418:	e006      	b.n	8006428 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	77fb      	strb	r3, [r7, #31]
      break;
 800641e:	e004      	b.n	800642a <USB_HC_Init+0x11e>
      break;
 8006420:	bf00      	nop
 8006422:	e002      	b.n	800642a <USB_HC_Init+0x11e>
      break;
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <USB_HC_Init+0x11e>
      break;
 8006428:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006436:	461a      	mov	r2, r3
 8006438:	2300      	movs	r3, #0
 800643a:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	440a      	add	r2, r1
 8006452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006456:	f043 0302 	orr.w	r3, r3, #2
 800645a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	2101      	movs	r1, #1
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	6939      	ldr	r1, [r7, #16]
 8006472:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006476:	4313      	orrs	r3, r2
 8006478:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006486:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da03      	bge.n	8006496 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800648e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006492:	61bb      	str	r3, [r7, #24]
 8006494:	e001      	b.n	800649a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ff0e 	bl	80062bc <USB_GetHostSpeed>
 80064a0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80064a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d106      	bne.n	80064b8 <USB_HC_Init+0x1ac>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d003      	beq.n	80064b8 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80064b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e001      	b.n	80064bc <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064bc:	787b      	ldrb	r3, [r7, #1]
 80064be:	059b      	lsls	r3, r3, #22
 80064c0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064c4:	78bb      	ldrb	r3, [r7, #2]
 80064c6:	02db      	lsls	r3, r3, #11
 80064c8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064cc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064d2:	049b      	lsls	r3, r3, #18
 80064d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80064da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80064dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064e0:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	431a      	orrs	r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064ea:	78fa      	ldrb	r2, [r7, #3]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80064f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064fa:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80064fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006500:	2b03      	cmp	r3, #3
 8006502:	d003      	beq.n	800650c <USB_HC_Init+0x200>
 8006504:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10f      	bne.n	800652c <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	78fa      	ldrb	r2, [r7, #3]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	440a      	add	r2, r1
 8006522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800652a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800652c:	7ffb      	ldrb	r3, [r7, #31]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3720      	adds	r7, #32
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop

08006538 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	; 0x30
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006554:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	799b      	ldrb	r3, [r3, #6]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d158      	bne.n	8006610 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800655e:	2301      	movs	r3, #1
 8006560:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	78db      	ldrb	r3, [r3, #3]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800656a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	8a92      	ldrh	r2, [r2, #20]
 8006570:	fb03 f202 	mul.w	r2, r3, r2
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61da      	str	r2, [r3, #28]
 8006578:	e079      	b.n	800666e <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	7c9b      	ldrb	r3, [r3, #18]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d130      	bne.n	80065e4 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	2bbc      	cmp	r3, #188	; 0xbc
 8006588:	d918      	bls.n	80065bc <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	8a9b      	ldrh	r3, [r3, #20]
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d003      	beq.n	80065ac <USB_HC_StartXfer+0x74>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d103      	bne.n	80065b4 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2202      	movs	r2, #2
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	e05c      	b.n	800666e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2201      	movs	r2, #1
 80065b8:	60da      	str	r2, [r3, #12]
 80065ba:	e058      	b.n	800666e <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d007      	beq.n	80065dc <USB_HC_StartXfer+0xa4>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d003      	beq.n	80065dc <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2204      	movs	r2, #4
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e048      	b.n	800666e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2203      	movs	r2, #3
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e044      	b.n	800666e <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d10d      	bne.n	8006606 <USB_HC_StartXfer+0xce>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	8a92      	ldrh	r2, [r2, #20]
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d907      	bls.n	8006606 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	8a92      	ldrh	r2, [r2, #20]
 80065fc:	fb03 f202 	mul.w	r2, r3, r2
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	61da      	str	r2, [r3, #28]
 8006604:	e033      	b.n	800666e <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6a1a      	ldr	r2, [r3, #32]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	61da      	str	r2, [r3, #28]
 800660e:	e02e      	b.n	800666e <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d018      	beq.n	800664a <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	8a92      	ldrh	r2, [r2, #20]
 8006620:	4413      	add	r3, r2
 8006622:	3b01      	subs	r3, #1
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	8a92      	ldrh	r2, [r2, #20]
 8006628:	fbb3 f3f2 	udiv	r3, r3, r2
 800662c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800662e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006630:	8b7b      	ldrh	r3, [r7, #26]
 8006632:	429a      	cmp	r2, r3
 8006634:	d90b      	bls.n	800664e <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8006636:	8b7b      	ldrh	r3, [r7, #26]
 8006638:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800663a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	8a92      	ldrh	r2, [r2, #20]
 8006640:	fb03 f202 	mul.w	r2, r3, r2
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	61da      	str	r2, [r3, #28]
 8006648:	e001      	b.n	800664e <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800664a:	2301      	movs	r3, #1
 800664c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	78db      	ldrb	r3, [r3, #3]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	8a92      	ldrh	r2, [r2, #20]
 800665c:	fb03 f202 	mul.w	r2, r3, r2
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	61da      	str	r2, [r3, #28]
 8006664:	e003      	b.n	800666e <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6a1a      	ldr	r2, [r3, #32]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006676:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006678:	04d9      	lsls	r1, r3, #19
 800667a:	4ba4      	ldr	r3, [pc, #656]	; (800690c <USB_HC_StartXfer+0x3d4>)
 800667c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800667e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	7d9b      	ldrb	r3, [r3, #22]
 8006684:	075b      	lsls	r3, r3, #29
 8006686:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800668a:	69f9      	ldr	r1, [r7, #28]
 800668c:	0148      	lsls	r0, r1, #5
 800668e:	6a39      	ldr	r1, [r7, #32]
 8006690:	4401      	add	r1, r0
 8006692:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006696:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006698:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6999      	ldr	r1, [r3, #24]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b0:	460a      	mov	r2, r1
 80066b2:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	bf0c      	ite	eq
 80066c4:	2301      	moveq	r3, #1
 80066c6:	2300      	movne	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	6a3a      	ldr	r2, [r7, #32]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066ea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	7e7b      	ldrb	r3, [r7, #25]
 80066fc:	075b      	lsls	r3, r3, #29
 80066fe:	69f9      	ldr	r1, [r7, #28]
 8006700:	0148      	lsls	r0, r1, #5
 8006702:	6a39      	ldr	r1, [r7, #32]
 8006704:	4401      	add	r1, r0
 8006706:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800670a:	4313      	orrs	r3, r2
 800670c:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	799b      	ldrb	r3, [r3, #6]
 8006712:	2b01      	cmp	r3, #1
 8006714:	f040 80c4 	bne.w	80068a0 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	7c5b      	ldrb	r3, [r3, #17]
 800671c:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006722:	4313      	orrs	r3, r2
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	6a3a      	ldr	r2, [r7, #32]
 800672a:	440a      	add	r2, r1
 800672c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006734:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	6a3a      	ldr	r2, [r7, #32]
 800674a:	440a      	add	r2, r1
 800674c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006750:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006754:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	79db      	ldrb	r3, [r3, #7]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d123      	bne.n	80067a6 <USB_HC_StartXfer+0x26e>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	78db      	ldrb	r3, [r3, #3]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d11f      	bne.n	80067a6 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	6a3a      	ldr	r2, [r7, #32]
 800677a:	440a      	add	r2, r1
 800677c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006784:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	6a3a      	ldr	r2, [r7, #32]
 800679a:	440a      	add	r2, r1
 800679c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a4:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	7c9b      	ldrb	r3, [r3, #18]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d003      	beq.n	80067b6 <USB_HC_StartXfer+0x27e>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	7c9b      	ldrb	r3, [r3, #18]
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d117      	bne.n	80067e6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d113      	bne.n	80067e6 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	78db      	ldrb	r3, [r3, #3]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d10f      	bne.n	80067e6 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	6a3a      	ldr	r2, [r7, #32]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e4:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	7c9b      	ldrb	r3, [r3, #18]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d163      	bne.n	80068b6 <USB_HC_StartXfer+0x37e>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d15f      	bne.n	80068b6 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d859      	bhi.n	80068b4 <USB_HC_StartXfer+0x37c>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <USB_HC_StartXfer+0x2d0>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	08006819 	.word	0x08006819
 800680c:	0800683b 	.word	0x0800683b
 8006810:	0800685d 	.word	0x0800685d
 8006814:	0800687f 	.word	0x0800687f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	6a3a      	ldr	r2, [r7, #32]
 800682c:	440a      	add	r2, r1
 800682e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006836:	6053      	str	r3, [r2, #4]
          break;
 8006838:	e03d      	b.n	80068b6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	0151      	lsls	r1, r2, #5
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	440a      	add	r2, r1
 8006850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006854:	f043 030e 	orr.w	r3, r3, #14
 8006858:	6053      	str	r3, [r2, #4]
          break;
 800685a:	e02c      	b.n	80068b6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	4413      	add	r3, r2
 8006864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	6a3a      	ldr	r2, [r7, #32]
 8006870:	440a      	add	r2, r1
 8006872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800687a:	6053      	str	r3, [r2, #4]
          break;
 800687c:	e01b      	b.n	80068b6 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	440a      	add	r2, r1
 8006894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800689c:	6053      	str	r3, [r2, #4]
          break;
 800689e:	e00a      	b.n	80068b6 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	6053      	str	r3, [r2, #4]
 80068b2:	e000      	b.n	80068b6 <USB_HC_StartXfer+0x37e>
          break;
 80068b4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068cc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	78db      	ldrb	r3, [r3, #3]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	e003      	b.n	80068e8 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ee:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	461a      	mov	r2, r3
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e055      	b.n	80069b8 <USB_HC_StartXfer+0x480>
 800690c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	78db      	ldrb	r3, [r3, #3]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d14e      	bne.n	80069b6 <USB_HC_StartXfer+0x47e>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d04a      	beq.n	80069b6 <USB_HC_StartXfer+0x47e>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	79db      	ldrb	r3, [r3, #7]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d146      	bne.n	80069b6 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	7c9b      	ldrb	r3, [r3, #18]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d831      	bhi.n	8006994 <USB_HC_StartXfer+0x45c>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <USB_HC_StartXfer+0x400>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	08006949 	.word	0x08006949
 800693c:	0800696d 	.word	0x0800696d
 8006940:	08006949 	.word	0x08006949
 8006944:	0800696d 	.word	0x0800696d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	3303      	adds	r3, #3
 800694e:	089b      	lsrs	r3, r3, #2
 8006950:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006952:	8afa      	ldrh	r2, [r7, #22]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	b29b      	uxth	r3, r3
 800695a:	429a      	cmp	r2, r3
 800695c:	d91c      	bls.n	8006998 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f043 0220 	orr.w	r2, r3, #32
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	619a      	str	r2, [r3, #24]
        }
        break;
 800696a:	e015      	b.n	8006998 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	3303      	adds	r3, #3
 8006972:	089b      	lsrs	r3, r3, #2
 8006974:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006976:	8afa      	ldrh	r2, [r7, #22]
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	b29b      	uxth	r3, r3
 8006982:	429a      	cmp	r2, r3
 8006984:	d90a      	bls.n	800699c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	619a      	str	r2, [r3, #24]
        }
        break;
 8006992:	e003      	b.n	800699c <USB_HC_StartXfer+0x464>

      default:
        break;
 8006994:	bf00      	nop
 8006996:	e002      	b.n	800699e <USB_HC_StartXfer+0x466>
        break;
 8006998:	bf00      	nop
 800699a:	e000      	b.n	800699e <USB_HC_StartXfer+0x466>
        break;
 800699c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6999      	ldr	r1, [r3, #24]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	785a      	ldrb	r2, [r3, #1]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2000      	movs	r0, #0
 80069ae:	9000      	str	r0, [sp, #0]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff fa2c 	bl	8005e0e <USB_WritePacket>
  }

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3728      	adds	r7, #40	; 0x28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	b29b      	uxth	r3, r3
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b089      	sub	sp, #36	; 0x24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	0c9b      	lsrs	r3, r3, #18
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	0fdb      	lsrs	r3, r3, #31
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	0fdb      	lsrs	r3, r3, #31
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d10d      	bne.n	8006a64 <USB_HC_Halt+0x82>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <USB_HC_Halt+0x82>
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d002      	beq.n	8006a60 <USB_HC_Halt+0x7e>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d101      	bne.n	8006a64 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	e0d8      	b.n	8006c16 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <USB_HC_Halt+0x8e>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d173      	bne.n	8006b58 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a8e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d14a      	bne.n	8006b32 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d133      	bne.n	8006b10 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ac6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ae6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006af4:	d82e      	bhi.n	8006b54 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b0c:	d0ec      	beq.n	8006ae8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b0e:	e081      	b.n	8006c14 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b2e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b30:	e070      	b.n	8006c14 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b50:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b52:	e05f      	b.n	8006c14 <USB_HC_Halt+0x232>
            break;
 8006b54:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b56:	e05d      	b.n	8006c14 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b76:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d133      	bne.n	8006bf0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ba2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ba6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bc6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bd4:	d81d      	bhi.n	8006c12 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bec:	d0ec      	beq.n	8006bc8 <USB_HC_Halt+0x1e6>
 8006bee:	e011      	b.n	8006c14 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	e000      	b.n	8006c14 <USB_HC_Halt+0x232>
          break;
 8006c12:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3724      	adds	r7, #36	; 0x24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b088      	sub	sp, #32
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff f82c 	bl	8005c94 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c3c:	2110      	movs	r1, #16
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff f885 	bl	8005d4e <USB_FlushTxFifo>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff f8af 	bl	8005db2 <USB_FlushRxFifo>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	e01f      	b.n	8006ca4 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c7a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c82:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c8a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c98:	461a      	mov	r2, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d9dc      	bls.n	8006c64 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006caa:	2300      	movs	r3, #0
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	e034      	b.n	8006d1a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cce:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cd6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3301      	adds	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cf6:	d80c      	bhi.n	8006d12 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0e:	d0ec      	beq.n	8006cea <USB_StopHost+0xc8>
 8006d10:	e000      	b.n	8006d14 <USB_StopHost+0xf2>
        break;
 8006d12:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	3301      	adds	r3, #1
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b0f      	cmp	r3, #15
 8006d1e:	d9c7      	bls.n	8006cb0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d26:	461a      	mov	r2, r3
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295
 8006d34:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fe ff9b 	bl	8005c72 <USB_EnableGlobalInt>

  return ret;
 8006d3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d46:	b590      	push	{r4, r7, lr}
 8006d48:	b089      	sub	sp, #36	; 0x24
 8006d4a:	af04      	add	r7, sp, #16
 8006d4c:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d4e:	2301      	movs	r3, #1
 8006d50:	2202      	movs	r2, #2
 8006d52:	2102      	movs	r1, #2
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fc86 	bl	8007666 <USBH_FindInterface>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	2bff      	cmp	r3, #255	; 0xff
 8006d62:	d002      	beq.n	8006d6a <USBH_CDC_InterfaceInit+0x24>
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d901      	bls.n	8006d6e <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e13d      	b.n	8006fea <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fc5b 	bl	800762e <USBH_SelectInterface>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d82:	2302      	movs	r3, #2
 8006d84:	e131      	b.n	8006fea <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d8c:	2050      	movs	r0, #80	; 0x50
 8006d8e:	f002 fc5d 	bl	800964c <malloc>
 8006d92:	4603      	mov	r3, r0
 8006d94:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	e11f      	b.n	8006fea <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006daa:	2250      	movs	r2, #80	; 0x50
 8006dac:	2100      	movs	r1, #0
 8006dae:	68b8      	ldr	r0, [r7, #8]
 8006db0:	f003 fb76 	bl	800a4a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	211a      	movs	r1, #26
 8006dba:	fb01 f303 	mul.w	r3, r1, r3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b25b      	sxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	da15      	bge.n	8006df8 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	211a      	movs	r1, #26
 8006dd2:	fb01 f303 	mul.w	r3, r1, r3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ddc:	781a      	ldrb	r2, [r3, #0]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	211a      	movs	r1, #26
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006df2:	881a      	ldrh	r2, [r3, #0]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 ffcf 	bl	8008da2 <USBH_AllocPipe>
 8006e04:	4603      	mov	r3, r0
 8006e06:	461a      	mov	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	7819      	ldrb	r1, [r3, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	7858      	ldrb	r0, [r3, #1]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	8952      	ldrh	r2, [r2, #10]
 8006e24:	9202      	str	r2, [sp, #8]
 8006e26:	2203      	movs	r2, #3
 8006e28:	9201      	str	r2, [sp, #4]
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	4623      	mov	r3, r4
 8006e2e:	4602      	mov	r2, r0
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 ff87 	bl	8008d44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f002 fa96 	bl	8009370 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e44:	2300      	movs	r3, #0
 8006e46:	2200      	movs	r2, #0
 8006e48:	210a      	movs	r1, #10
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fc0b 	bl	8007666 <USBH_FindInterface>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	2bff      	cmp	r3, #255	; 0xff
 8006e58:	d002      	beq.n	8006e60 <USBH_CDC_InterfaceInit+0x11a>
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d901      	bls.n	8006e64 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0c2      	b.n	8006fea <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	211a      	movs	r1, #26
 8006e6a:	fb01 f303 	mul.w	r3, r1, r3
 8006e6e:	4413      	add	r3, r2
 8006e70:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	da16      	bge.n	8006eaa <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	211a      	movs	r1, #26
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	4413      	add	r3, r2
 8006e88:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e8c:	781a      	ldrb	r2, [r3, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	211a      	movs	r1, #26
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ea2:	881a      	ldrh	r2, [r3, #0]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	835a      	strh	r2, [r3, #26]
 8006ea8:	e015      	b.n	8006ed6 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	211a      	movs	r1, #26
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	211a      	movs	r1, #26
 8006ec6:	fb01 f303 	mul.w	r3, r1, r3
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ed0:	881a      	ldrh	r2, [r3, #0]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	211a      	movs	r1, #26
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	b25b      	sxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	da16      	bge.n	8006f1c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	211a      	movs	r1, #26
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	211a      	movs	r1, #26
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	835a      	strh	r2, [r3, #26]
 8006f1a:	e015      	b.n	8006f48 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	211a      	movs	r1, #26
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	4413      	add	r3, r2
 8006f28:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f2c:	781a      	ldrb	r2, [r3, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	211a      	movs	r1, #26
 8006f38:	fb01 f303 	mul.w	r3, r1, r3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f42:	881a      	ldrh	r2, [r3, #0]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	7b9b      	ldrb	r3, [r3, #14]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 ff27 	bl	8008da2 <USBH_AllocPipe>
 8006f54:	4603      	mov	r3, r0
 8006f56:	461a      	mov	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	7bdb      	ldrb	r3, [r3, #15]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 ff1d 	bl	8008da2 <USBH_AllocPipe>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	7b59      	ldrb	r1, [r3, #13]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	7b98      	ldrb	r0, [r3, #14]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	8b12      	ldrh	r2, [r2, #24]
 8006f88:	9202      	str	r2, [sp, #8]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4623      	mov	r3, r4
 8006f92:	4602      	mov	r2, r0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fed5 	bl	8008d44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	7b19      	ldrb	r1, [r3, #12]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	7bd8      	ldrb	r0, [r3, #15]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	8b52      	ldrh	r2, [r2, #26]
 8006fb2:	9202      	str	r2, [sp, #8]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	9201      	str	r2, [sp, #4]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	4623      	mov	r3, r4
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fec0 	bl	8008d44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	7b5b      	ldrb	r3, [r3, #13]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f002 f9cb 	bl	8009370 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	7b1b      	ldrb	r3, [r3, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f002 f9c4 	bl	8009370 <USBH_LL_SetToggle>

  return USBH_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd90      	pop	{r4, r7, pc}

08006ff2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 feb5 	bl	8008d82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fee0 	bl	8008de4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	7b1b      	ldrb	r3, [r3, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00e      	beq.n	8007050 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	7b1b      	ldrb	r3, [r3, #12]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 fea2 	bl	8008d82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	7b1b      	ldrb	r3, [r3, #12]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fecd 	bl	8008de4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	7b5b      	ldrb	r3, [r3, #13]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00e      	beq.n	8007076 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	7b5b      	ldrb	r3, [r3, #13]
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fe8f 	bl	8008d82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	7b5b      	ldrb	r3, [r3, #13]
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 feba 	bl	8008de4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	4618      	mov	r0, r3
 800708c:	f002 fae6 	bl	800965c <free>
    phost->pActiveClass->pData = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007096:	2200      	movs	r2, #0
 8007098:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3340      	adds	r3, #64	; 0x40
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8b2 	bl	8007226 <GetLineCoding>
 80070c2:	4603      	mov	r3, r0
 80070c4:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d105      	bne.n	80070d8 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070d2:	2102      	movs	r1, #2
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007104:	2b04      	cmp	r3, #4
 8007106:	d877      	bhi.n	80071f8 <USBH_CDC_Process+0x114>
 8007108:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <USBH_CDC_Process+0x2c>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	08007125 	.word	0x08007125
 8007114:	0800712b 	.word	0x0800712b
 8007118:	0800715b 	.word	0x0800715b
 800711c:	080071cf 	.word	0x080071cf
 8007120:	080071dd 	.word	0x080071dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e06d      	b.n	8007206 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f897 	bl	8007264 <SetLineCoding>
 8007136:	4603      	mov	r3, r0
 8007138:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007148:	e058      	b.n	80071fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d055      	beq.n	80071fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2204      	movs	r2, #4
 8007154:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007158:	e050      	b.n	80071fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	3340      	adds	r3, #64	; 0x40
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f860 	bl	8007226 <GetLineCoding>
 8007166:	4603      	mov	r3, r0
 8007168:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d126      	bne.n	80071be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007182:	791b      	ldrb	r3, [r3, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d13b      	bne.n	8007200 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007192:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007194:	429a      	cmp	r2, r3
 8007196:	d133      	bne.n	8007200 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d12b      	bne.n	8007200 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d124      	bne.n	8007200 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f958 	bl	800746c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80071bc:	e020      	b.n	8007200 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d01d      	beq.n	8007200 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2204      	movs	r2, #4
 80071c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071cc:	e018      	b.n	8007200 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f867 	bl	80072a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f8da 	bl	800738e <CDC_ProcessReception>
      break;
 80071da:	e014      	b.n	8007206 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071dc:	2100      	movs	r1, #0
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 f822 	bl	8008228 <USBH_ClrFeature>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80071f6:	e005      	b.n	8007204 <USBH_CDC_Process+0x120>

    default:
      break;
 80071f8:	bf00      	nop
 80071fa:	e004      	b.n	8007206 <USBH_CDC_Process+0x122>
      break;
 80071fc:	bf00      	nop
 80071fe:	e002      	b.n	8007206 <USBH_CDC_Process+0x122>
      break;
 8007200:	bf00      	nop
 8007202:	e000      	b.n	8007206 <USBH_CDC_Process+0x122>
      break;
 8007204:	bf00      	nop

  }

  return status;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	22a1      	movs	r2, #161	; 0xa1
 8007234:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2221      	movs	r2, #33	; 0x21
 800723a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2207      	movs	r2, #7
 800724c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2207      	movs	r2, #7
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 fb23 	bl	80088a0 <USBH_CtlReq>
 800725a:	4603      	mov	r3, r0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2221      	movs	r2, #33	; 0x21
 8007272:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2207      	movs	r2, #7
 800728a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2207      	movs	r2, #7
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fb04 	bl	80088a0 <USBH_CtlReq>
 8007298:	4603      	mov	r3, r0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af02      	add	r7, sp, #8
 80072a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d002      	beq.n	80072c8 <CDC_ProcessTransmission+0x26>
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d023      	beq.n	800730e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80072c6:	e05e      	b.n	8007386 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	8b12      	ldrh	r2, [r2, #24]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d90b      	bls.n	80072ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	69d9      	ldr	r1, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8b1a      	ldrh	r2, [r3, #24]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	7b5b      	ldrb	r3, [r3, #13]
 80072e0:	2001      	movs	r0, #1
 80072e2:	9000      	str	r0, [sp, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 fcea 	bl	8008cbe <USBH_BulkSendData>
 80072ea:	e00b      	b.n	8007304 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	7b5b      	ldrb	r3, [r3, #13]
 80072fa:	2001      	movs	r0, #1
 80072fc:	9000      	str	r0, [sp, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 fcdd 	bl	8008cbe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800730c:	e03b      	b.n	8007386 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	7b5b      	ldrb	r3, [r3, #13]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f002 f801 	bl	800931c <USBH_LL_GetURBState>
 800731a:	4603      	mov	r3, r0
 800731c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800731e:	7afb      	ldrb	r3, [r7, #11]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d128      	bne.n	8007376 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	8b12      	ldrh	r2, [r2, #24]
 800732c:	4293      	cmp	r3, r2
 800732e:	d90e      	bls.n	800734e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	8b12      	ldrh	r2, [r2, #24]
 8007338:	1a9a      	subs	r2, r3, r2
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	8b12      	ldrh	r2, [r2, #24]
 8007346:	441a      	add	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	61da      	str	r2, [r3, #28]
 800734c:	e002      	b.n	8007354 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007364:	e00e      	b.n	8007384 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f868 	bl	8007444 <USBH_CDC_TransmitCallback>
      break;
 8007374:	e006      	b.n	8007384 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d103      	bne.n	8007384 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007384:	bf00      	nop
  }
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d002      	beq.n	80073b4 <CDC_ProcessReception+0x26>
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d00e      	beq.n	80073d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80073b2:	e043      	b.n	800743c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	6a19      	ldr	r1, [r3, #32]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	8b5a      	ldrh	r2, [r3, #26]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	7b1b      	ldrb	r3, [r3, #12]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 fca1 	bl	8008d08 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2204      	movs	r2, #4
 80073ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073ce:	e035      	b.n	800743c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	7b1b      	ldrb	r3, [r3, #12]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 ffa0 	bl	800931c <USBH_LL_GetURBState>
 80073dc:	4603      	mov	r3, r0
 80073de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073e0:	7cfb      	ldrb	r3, [r7, #19]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d129      	bne.n	800743a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	7b1b      	ldrb	r3, [r3, #12]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 ff03 	bl	80091f8 <USBH_LL_GetLastXferSize>
 80073f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d016      	beq.n	800742c <CDC_ProcessReception+0x9e>
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	8b5b      	ldrh	r3, [r3, #26]
 8007402:	461a      	mov	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4293      	cmp	r3, r2
 8007408:	d910      	bls.n	800742c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1ad2      	subs	r2, r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	441a      	add	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2203      	movs	r2, #3
 8007426:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800742a:	e006      	b.n	800743a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f80f 	bl	8007458 <USBH_CDC_ReceiveCallback>
      break;
 800743a:	bf00      	nop
  }
}
 800743c:	bf00      	nop
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007494:	2302      	movs	r3, #2
 8007496:	e029      	b.n	80074ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	79fa      	ldrb	r2, [r7, #7]
 800749c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f81f 	bl	80074f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f001 fdd3 	bl	8009090 <USBH_LL_Init>

  return USBH_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e009      	b.n	800751a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	33e0      	adds	r3, #224	; 0xe0
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	2200      	movs	r2, #0
 8007512:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b0f      	cmp	r3, #15
 800751e:	d9f2      	bls.n	8007506 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007520:	2300      	movs	r3, #0
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	e009      	b.n	800753a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007530:	2200      	movs	r2, #0
 8007532:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3301      	adds	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007540:	d3f1      	bcc.n	8007526 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2240      	movs	r2, #64	; 0x40
 8007566:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	331c      	adds	r3, #28
 8007592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f002 ff81 	bl	800a4a0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075a8:	2100      	movs	r1, #0
 80075aa:	4618      	mov	r0, r3
 80075ac:	f002 ff78 	bl	800a4a0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f203 3326 	addw	r3, r3, #806	; 0x326
 80075b6:	2212      	movs	r2, #18
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f002 ff70 	bl	800a4a0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80075c6:	223e      	movs	r2, #62	; 0x3e
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f002 ff68 	bl	800a4a0 <memset>

  return USBH_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d016      	beq.n	800761c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10e      	bne.n	8007616 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075fe:	1c59      	adds	r1, r3, #1
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	33de      	adds	r3, #222	; 0xde
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
 8007614:	e004      	b.n	8007620 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007616:	2302      	movs	r3, #2
 8007618:	73fb      	strb	r3, [r7, #15]
 800761a:	e001      	b.n	8007620 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800761c:	2302      	movs	r3, #2
 800761e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	460b      	mov	r3, r1
 8007638:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	429a      	cmp	r2, r3
 8007648:	d204      	bcs.n	8007654 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007652:	e001      	b.n	8007658 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007654:	2302      	movs	r3, #2
 8007656:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007666:	b480      	push	{r7}
 8007668:	b087      	sub	sp, #28
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	4608      	mov	r0, r1
 8007670:	4611      	mov	r1, r2
 8007672:	461a      	mov	r2, r3
 8007674:	4603      	mov	r3, r0
 8007676:	70fb      	strb	r3, [r7, #3]
 8007678:	460b      	mov	r3, r1
 800767a:	70bb      	strb	r3, [r7, #2]
 800767c:	4613      	mov	r3, r2
 800767e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800768e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007690:	e025      	b.n	80076de <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	221a      	movs	r2, #26
 8007696:	fb02 f303 	mul.w	r3, r2, r3
 800769a:	3308      	adds	r3, #8
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	3302      	adds	r3, #2
 80076a2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	795b      	ldrb	r3, [r3, #5]
 80076a8:	78fa      	ldrb	r2, [r7, #3]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d002      	beq.n	80076b4 <USBH_FindInterface+0x4e>
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	2bff      	cmp	r3, #255	; 0xff
 80076b2:	d111      	bne.n	80076d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076b8:	78ba      	ldrb	r2, [r7, #2]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d002      	beq.n	80076c4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076be:	78bb      	ldrb	r3, [r7, #2]
 80076c0:	2bff      	cmp	r3, #255	; 0xff
 80076c2:	d109      	bne.n	80076d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076c8:	787a      	ldrb	r2, [r7, #1]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d002      	beq.n	80076d4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076ce:	787b      	ldrb	r3, [r7, #1]
 80076d0:	2bff      	cmp	r3, #255	; 0xff
 80076d2:	d101      	bne.n	80076d8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	e006      	b.n	80076e6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	3301      	adds	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d9d6      	bls.n	8007692 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80076e4:	23ff      	movs	r3, #255	; 0xff
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fd04 	bl	8009108 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007700:	2101      	movs	r1, #1
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 fe1d 	bl	8009342 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af04      	add	r7, sp, #16
 800771a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800771c:	2302      	movs	r3, #2
 800771e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d102      	bne.n	8007736 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2203      	movs	r2, #3
 8007734:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b0b      	cmp	r3, #11
 800773e:	f200 81be 	bhi.w	8007abe <USBH_Process+0x3aa>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <USBH_Process+0x34>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007779 	.word	0x08007779
 800774c:	080077ab 	.word	0x080077ab
 8007750:	08007813 	.word	0x08007813
 8007754:	08007a59 	.word	0x08007a59
 8007758:	08007abf 	.word	0x08007abf
 800775c:	080078b7 	.word	0x080078b7
 8007760:	080079ff 	.word	0x080079ff
 8007764:	080078ed 	.word	0x080078ed
 8007768:	0800790d 	.word	0x0800790d
 800776c:	0800792d 	.word	0x0800792d
 8007770:	08007971 	.word	0x08007971
 8007774:	08007a41 	.word	0x08007a41
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 819e 	beq.w	8007ac2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800778c:	20c8      	movs	r0, #200	; 0xc8
 800778e:	f001 fe22 	bl	80093d6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fd15 	bl	80091c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077a8:	e18b      	b.n	8007ac2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d107      	bne.n	80077c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077c2:	e18d      	b.n	8007ae0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077ce:	d914      	bls.n	80077fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077d6:	3301      	adds	r3, #1
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d903      	bls.n	80077f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	220d      	movs	r2, #13
 80077ee:	701a      	strb	r2, [r3, #0]
      break;
 80077f0:	e176      	b.n	8007ae0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
      break;
 80077f8:	e172      	b.n	8007ae0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007800:	f103 020a 	add.w	r2, r3, #10
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800780a:	200a      	movs	r0, #10
 800780c:	f001 fde3 	bl	80093d6 <USBH_Delay>
      break;
 8007810:	e166      	b.n	8007ae0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007822:	2104      	movs	r1, #4
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007828:	2064      	movs	r0, #100	; 0x64
 800782a:	f001 fdd4 	bl	80093d6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fca0 	bl	8009174 <USBH_LL_GetSpeed>
 8007834:	4603      	mov	r3, r0
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2205      	movs	r2, #5
 8007842:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007844:	2100      	movs	r1, #0
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 faab 	bl	8008da2 <USBH_AllocPipe>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007854:	2180      	movs	r1, #128	; 0x80
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 faa3 	bl	8008da2 <USBH_AllocPipe>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7919      	ldrb	r1, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007878:	b292      	uxth	r2, r2
 800787a:	9202      	str	r2, [sp, #8]
 800787c:	2200      	movs	r2, #0
 800787e:	9201      	str	r2, [sp, #4]
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	4603      	mov	r3, r0
 8007884:	2280      	movs	r2, #128	; 0x80
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fa5c 	bl	8008d44 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7959      	ldrb	r1, [r3, #5]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078a0:	b292      	uxth	r2, r2
 80078a2:	9202      	str	r2, [sp, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	9201      	str	r2, [sp, #4]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	4603      	mov	r3, r0
 80078ac:	2200      	movs	r2, #0
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 fa48 	bl	8008d44 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078b4:	e114      	b.n	8007ae0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f918 	bl	8007aec <USBH_HandleEnum>
 80078bc:	4603      	mov	r3, r0
 80078be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 80fe 	bne.w	8007ac6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d103      	bne.n	80078e4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2208      	movs	r2, #8
 80078e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078e2:	e0f0      	b.n	8007ac6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2207      	movs	r2, #7
 80078e8:	701a      	strb	r2, [r3, #0]
      break;
 80078ea:	e0ec      	b.n	8007ac6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80e9 	beq.w	8007aca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078fe:	2101      	movs	r1, #1
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2208      	movs	r2, #8
 8007908:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800790a:	e0de      	b.n	8007aca <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007912:	b29b      	uxth	r3, r3
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fc3f 	bl	800819a <USBH_SetCfg>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	f040 80d5 	bne.w	8007ace <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2209      	movs	r2, #9
 8007928:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800792a:	e0d0      	b.n	8007ace <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800793a:	2101      	movs	r1, #1
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fc4f 	bl	80081e0 <USBH_SetFeature>
 8007942:	4603      	mov	r3, r0
 8007944:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	220a      	movs	r2, #10
 8007952:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007954:	e0bd      	b.n	8007ad2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b03      	cmp	r3, #3
 800795c:	f040 80b9 	bne.w	8007ad2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	220a      	movs	r2, #10
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e0b4      	b.n	8007ad2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	220a      	movs	r2, #10
 800796c:	701a      	strb	r2, [r3, #0]
      break;
 800796e:	e0b0      	b.n	8007ad2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 80ad 	beq.w	8007ad6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
 8007988:	e016      	b.n	80079b8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800798a:	7bfa      	ldrb	r2, [r7, #15]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	32de      	adds	r2, #222	; 0xde
 8007990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007994:	791a      	ldrb	r2, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800799c:	429a      	cmp	r2, r3
 800799e:	d108      	bne.n	80079b2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80079a0:	7bfa      	ldrb	r2, [r7, #15]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	32de      	adds	r2, #222	; 0xde
 80079a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80079b0:	e005      	b.n	80079be <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	3301      	adds	r3, #1
 80079b6:	73fb      	strb	r3, [r7, #15]
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0e5      	beq.n	800798a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d016      	beq.n	80079f6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	4798      	blx	r3
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2206      	movs	r2, #6
 80079de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079e6:	2103      	movs	r1, #3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079ec:	e073      	b.n	8007ad6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	220d      	movs	r2, #13
 80079f2:	701a      	strb	r2, [r3, #0]
      break;
 80079f4:	e06f      	b.n	8007ad6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220d      	movs	r2, #13
 80079fa:	701a      	strb	r2, [r3, #0]
      break;
 80079fc:	e06b      	b.n	8007ad6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d017      	beq.n	8007a38 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
 8007a14:	4603      	mov	r3, r0
 8007a16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d103      	bne.n	8007a28 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	220b      	movs	r2, #11
 8007a24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a26:	e058      	b.n	8007ada <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d154      	bne.n	8007ada <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	220d      	movs	r2, #13
 8007a34:	701a      	strb	r2, [r3, #0]
      break;
 8007a36:	e050      	b.n	8007ada <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	220d      	movs	r2, #13
 8007a3c:	701a      	strb	r2, [r3, #0]
      break;
 8007a3e:	e04c      	b.n	8007ada <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d049      	beq.n	8007ade <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
      }
      break;
 8007a56:	e042      	b.n	8007ade <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fd47 	bl	80074f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a94:	2105      	movs	r1, #5
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d107      	bne.n	8007ab6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff fe1f 	bl	80076f2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ab4:	e014      	b.n	8007ae0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fb26 	bl	8009108 <USBH_LL_Start>
      break;
 8007abc:	e010      	b.n	8007ae0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007abe:	bf00      	nop
 8007ac0:	e00e      	b.n	8007ae0 <USBH_Process+0x3cc>
      break;
 8007ac2:	bf00      	nop
 8007ac4:	e00c      	b.n	8007ae0 <USBH_Process+0x3cc>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e00a      	b.n	8007ae0 <USBH_Process+0x3cc>
    break;
 8007aca:	bf00      	nop
 8007acc:	e008      	b.n	8007ae0 <USBH_Process+0x3cc>
      break;
 8007ace:	bf00      	nop
 8007ad0:	e006      	b.n	8007ae0 <USBH_Process+0x3cc>
      break;
 8007ad2:	bf00      	nop
 8007ad4:	e004      	b.n	8007ae0 <USBH_Process+0x3cc>
      break;
 8007ad6:	bf00      	nop
 8007ad8:	e002      	b.n	8007ae0 <USBH_Process+0x3cc>
      break;
 8007ada:	bf00      	nop
 8007adc:	e000      	b.n	8007ae0 <USBH_Process+0x3cc>
      break;
 8007ade:	bf00      	nop
  }
  return USBH_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop

08007aec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af04      	add	r7, sp, #16
 8007af2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007af8:	2301      	movs	r3, #1
 8007afa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	785b      	ldrb	r3, [r3, #1]
 8007b00:	2b07      	cmp	r3, #7
 8007b02:	f200 81c1 	bhi.w	8007e88 <USBH_HandleEnum+0x39c>
 8007b06:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <USBH_HandleEnum+0x20>)
 8007b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0c:	08007b2d 	.word	0x08007b2d
 8007b10:	08007beb 	.word	0x08007beb
 8007b14:	08007c55 	.word	0x08007c55
 8007b18:	08007ce3 	.word	0x08007ce3
 8007b1c:	08007d4d 	.word	0x08007d4d
 8007b20:	08007dbd 	.word	0x08007dbd
 8007b24:	08007e03 	.word	0x08007e03
 8007b28:	08007e49 	.word	0x08007e49
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b2c:	2108      	movs	r1, #8
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa50 	bl	8007fd4 <USBH_Get_DevDesc>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d130      	bne.n	8007ba0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7919      	ldrb	r1, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b62:	b292      	uxth	r2, r2
 8007b64:	9202      	str	r2, [sp, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	9201      	str	r2, [sp, #4]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2280      	movs	r2, #128	; 0x80
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f8e7 	bl	8008d44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7959      	ldrb	r1, [r3, #5]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b8a:	b292      	uxth	r2, r2
 8007b8c:	9202      	str	r2, [sp, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	9201      	str	r2, [sp, #4]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	4603      	mov	r3, r0
 8007b96:	2200      	movs	r2, #0
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 f8d3 	bl	8008d44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b9e:	e175      	b.n	8007e8c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	f040 8172 	bne.w	8007e8c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bae:	3301      	adds	r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d903      	bls.n	8007bca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	220d      	movs	r2, #13
 8007bc6:	701a      	strb	r2, [r3, #0]
      break;
 8007bc8:	e160      	b.n	8007e8c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	795b      	ldrb	r3, [r3, #5]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 f907 	bl	8008de4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	791b      	ldrb	r3, [r3, #4]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f901 	bl	8008de4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
      break;
 8007be8:	e150      	b.n	8007e8c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007bea:	2112      	movs	r1, #18
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f9f1 	bl	8007fd4 <USBH_Get_DevDesc>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d103      	bne.n	8007c04 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c02:	e145      	b.n	8007e90 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	f040 8142 	bne.w	8007e90 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c12:	3301      	adds	r3, #1
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d903      	bls.n	8007c2e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	220d      	movs	r2, #13
 8007c2a:	701a      	strb	r2, [r3, #0]
      break;
 8007c2c:	e130      	b.n	8007e90 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	795b      	ldrb	r3, [r3, #5]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 f8d5 	bl	8008de4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	791b      	ldrb	r3, [r3, #4]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 f8cf 	bl	8008de4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	701a      	strb	r2, [r3, #0]
      break;
 8007c52:	e11d      	b.n	8007e90 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c54:	2101      	movs	r1, #1
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa7b 	bl	8008152 <USBH_SetAddress>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d132      	bne.n	8007ccc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007c66:	2002      	movs	r0, #2
 8007c68:	f001 fbb5 	bl	80093d6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2203      	movs	r2, #3
 8007c78:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7919      	ldrb	r1, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	9202      	str	r2, [sp, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	9201      	str	r2, [sp, #4]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2280      	movs	r2, #128	; 0x80
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 f851 	bl	8008d44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7959      	ldrb	r1, [r3, #5]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	9202      	str	r2, [sp, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f83d 	bl	8008d44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007cca:	e0e3      	b.n	8007e94 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f040 80e0 	bne.w	8007e94 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	220d      	movs	r2, #13
 8007cd8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	705a      	strb	r2, [r3, #1]
      break;
 8007ce0:	e0d8      	b.n	8007e94 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ce2:	2109      	movs	r1, #9
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f9a1 	bl	800802c <USBH_Get_CfgDesc>
 8007cea:	4603      	mov	r3, r0
 8007cec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cee:	7bbb      	ldrb	r3, [r7, #14]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d103      	bne.n	8007cfc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cfa:	e0cd      	b.n	8007e98 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	f040 80ca 	bne.w	8007e98 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d903      	bls.n	8007d26 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	220d      	movs	r2, #13
 8007d22:	701a      	strb	r2, [r3, #0]
      break;
 8007d24:	e0b8      	b.n	8007e98 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	795b      	ldrb	r3, [r3, #5]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 f859 	bl	8008de4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 f853 	bl	8008de4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
      break;
 8007d4a:	e0a5      	b.n	8007e98 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f969 	bl	800802c <USBH_Get_CfgDesc>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2205      	movs	r2, #5
 8007d68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d6a:	e097      	b.n	8007e9c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	f040 8094 	bne.w	8007e9c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d903      	bls.n	8007d96 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	220d      	movs	r2, #13
 8007d92:	701a      	strb	r2, [r3, #0]
      break;
 8007d94:	e082      	b.n	8007e9c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	795b      	ldrb	r3, [r3, #5]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 f821 	bl	8008de4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	791b      	ldrb	r3, [r3, #4]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 f81b 	bl	8008de4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
      break;
 8007dba:	e06f      	b.n	8007e9c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d019      	beq.n	8007dfa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007dd2:	23ff      	movs	r3, #255	; 0xff
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f953 	bl	8008080 <USBH_Get_StringDesc>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2206      	movs	r2, #6
 8007de8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007dea:	e059      	b.n	8007ea0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d156      	bne.n	8007ea0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2206      	movs	r2, #6
 8007df6:	705a      	strb	r2, [r3, #1]
      break;
 8007df8:	e052      	b.n	8007ea0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2206      	movs	r2, #6
 8007dfe:	705a      	strb	r2, [r3, #1]
      break;
 8007e00:	e04e      	b.n	8007ea0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d019      	beq.n	8007e40 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e18:	23ff      	movs	r3, #255	; 0xff
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f930 	bl	8008080 <USBH_Get_StringDesc>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2207      	movs	r2, #7
 8007e2e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e30:	e038      	b.n	8007ea4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d135      	bne.n	8007ea4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2207      	movs	r2, #7
 8007e3c:	705a      	strb	r2, [r3, #1]
      break;
 8007e3e:	e031      	b.n	8007ea4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2207      	movs	r2, #7
 8007e44:	705a      	strb	r2, [r3, #1]
      break;
 8007e46:	e02d      	b.n	8007ea4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d017      	beq.n	8007e82 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e5e:	23ff      	movs	r3, #255	; 0xff
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f90d 	bl	8008080 <USBH_Get_StringDesc>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e74:	e018      	b.n	8007ea8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d115      	bne.n	8007ea8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e80:	e012      	b.n	8007ea8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
      break;
 8007e86:	e00f      	b.n	8007ea8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007e88:	bf00      	nop
 8007e8a:	e00e      	b.n	8007eaa <USBH_HandleEnum+0x3be>
      break;
 8007e8c:	bf00      	nop
 8007e8e:	e00c      	b.n	8007eaa <USBH_HandleEnum+0x3be>
      break;
 8007e90:	bf00      	nop
 8007e92:	e00a      	b.n	8007eaa <USBH_HandleEnum+0x3be>
      break;
 8007e94:	bf00      	nop
 8007e96:	e008      	b.n	8007eaa <USBH_HandleEnum+0x3be>
      break;
 8007e98:	bf00      	nop
 8007e9a:	e006      	b.n	8007eaa <USBH_HandleEnum+0x3be>
      break;
 8007e9c:	bf00      	nop
 8007e9e:	e004      	b.n	8007eaa <USBH_HandleEnum+0x3be>
      break;
 8007ea0:	bf00      	nop
 8007ea2:	e002      	b.n	8007eaa <USBH_HandleEnum+0x3be>
      break;
 8007ea4:	bf00      	nop
 8007ea6:	e000      	b.n	8007eaa <USBH_HandleEnum+0x3be>
      break;
 8007ea8:	bf00      	nop
  }
  return Status;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f804 	bl	8007ef6 <USBH_HandleSof>
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b0b      	cmp	r3, #11
 8007f06:	d10a      	bne.n	8007f1e <USBH_HandleSof+0x28>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
  }
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007f36:	bf00      	nop
}
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007f52:	bf00      	nop
}
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f8c6 	bl	800913e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	791b      	ldrb	r3, [r3, #4]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 ff13 	bl	8008de4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	795b      	ldrb	r3, [r3, #5]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 ff0d 	bl	8008de4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007fe0:	887b      	ldrh	r3, [r7, #2]
 8007fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe6:	d901      	bls.n	8007fec <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e01b      	b.n	8008024 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f872 	bl	80080e8 <USBH_GetDescriptor>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008014:	887a      	ldrh	r2, [r7, #2]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f929 	bl	8008270 <USBH_ParseDevDesc>
 800801e:	4603      	mov	r3, r0
 8008020:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af02      	add	r7, sp, #8
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	331c      	adds	r3, #28
 800803c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800803e:	887b      	ldrh	r3, [r7, #2]
 8008040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008044:	d901      	bls.n	800804a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008046:	2303      	movs	r3, #3
 8008048:	e016      	b.n	8008078 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800804a:	887b      	ldrh	r3, [r7, #2]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008054:	2100      	movs	r1, #0
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f846 	bl	80080e8 <USBH_GetDescriptor>
 800805c:	4603      	mov	r3, r0
 800805e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d107      	bne.n	8008076 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008066:	887b      	ldrh	r3, [r7, #2]
 8008068:	461a      	mov	r2, r3
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f9b3 	bl	80083d8 <USBH_ParseCfgDesc>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008076:	7bfb      	ldrb	r3, [r7, #15]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af02      	add	r7, sp, #8
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	607a      	str	r2, [r7, #4]
 800808a:	461a      	mov	r2, r3
 800808c:	460b      	mov	r3, r1
 800808e:	72fb      	strb	r3, [r7, #11]
 8008090:	4613      	mov	r3, r2
 8008092:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008094:	893b      	ldrh	r3, [r7, #8]
 8008096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800809a:	d802      	bhi.n	80080a2 <USBH_Get_StringDesc+0x22>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e01c      	b.n	80080e0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80080ae:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80080b6:	893b      	ldrh	r3, [r7, #8]
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	460b      	mov	r3, r1
 80080bc:	2100      	movs	r1, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f812 	bl	80080e8 <USBH_GetDescriptor>
 80080c4:	4603      	mov	r3, r0
 80080c6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d107      	bne.n	80080de <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080d4:	893a      	ldrh	r2, [r7, #8]
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fb93 	bl	8008804 <USBH_ParseStringDesc>
  }

  return status;
 80080de:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	72fb      	strb	r3, [r7, #11]
 80080f6:	4613      	mov	r3, r2
 80080f8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	789b      	ldrb	r3, [r3, #2]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d11c      	bne.n	800813c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008102:	7afb      	ldrb	r3, [r7, #11]
 8008104:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008108:	b2da      	uxtb	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2206      	movs	r2, #6
 8008112:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	893a      	ldrh	r2, [r7, #8]
 8008118:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800811a:	893b      	ldrh	r3, [r7, #8]
 800811c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008124:	d104      	bne.n	8008130 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f240 4209 	movw	r2, #1033	; 0x409
 800812c:	829a      	strh	r2, [r3, #20]
 800812e:	e002      	b.n	8008136 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	8b3a      	ldrh	r2, [r7, #24]
 800813a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800813c:	8b3b      	ldrh	r3, [r7, #24]
 800813e:	461a      	mov	r2, r3
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 fbac 	bl	80088a0 <USBH_CtlReq>
 8008148:	4603      	mov	r3, r0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	789b      	ldrb	r3, [r3, #2]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d10f      	bne.n	8008186 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2205      	movs	r2, #5
 8008170:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	b29a      	uxth	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008186:	2200      	movs	r2, #0
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fb88 	bl	80088a0 <USBH_CtlReq>
 8008190:	4603      	mov	r3, r0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	789b      	ldrb	r3, [r3, #2]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d10e      	bne.n	80081cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2209      	movs	r2, #9
 80081b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	887a      	ldrh	r2, [r7, #2]
 80081be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081cc:	2200      	movs	r2, #0
 80081ce:	2100      	movs	r1, #0
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fb65 	bl	80088a0 <USBH_CtlReq>
 80081d6:	4603      	mov	r3, r0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	789b      	ldrb	r3, [r3, #2]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d10f      	bne.n	8008214 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2203      	movs	r2, #3
 80081fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008214:	2200      	movs	r2, #0
 8008216:	2100      	movs	r1, #0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb41 	bl	80088a0 <USBH_CtlReq>
 800821e:	4603      	mov	r3, r0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	789b      	ldrb	r3, [r3, #2]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d10f      	bne.n	800825c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fb1d 	bl	80088a0 <USBH_CtlReq>
 8008266:	4603      	mov	r3, r0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008284:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008290:	2302      	movs	r3, #2
 8008292:	e098      	b.n	80083c6 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	781a      	ldrb	r2, [r3, #0]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	785a      	ldrb	r2, [r3, #1]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	3302      	adds	r3, #2
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3303      	adds	r3, #3
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	4313      	orrs	r3, r2
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	791a      	ldrb	r2, [r3, #4]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	795a      	ldrb	r2, [r3, #5]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	799a      	ldrb	r2, [r3, #6]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	79da      	ldrb	r2, [r3, #7]
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d004      	beq.n	80082f4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d11b      	bne.n	800832c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	79db      	ldrb	r3, [r3, #7]
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	dc0f      	bgt.n	800831c <USBH_ParseDevDesc+0xac>
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	db0f      	blt.n	8008320 <USBH_ParseDevDesc+0xb0>
 8008300:	3b08      	subs	r3, #8
 8008302:	4a34      	ldr	r2, [pc, #208]	; (80083d4 <USBH_ParseDevDesc+0x164>)
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf14      	ite	ne
 8008310:	2301      	movne	r3, #1
 8008312:	2300      	moveq	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <USBH_ParseDevDesc+0xb8>
 800831a:	e001      	b.n	8008320 <USBH_ParseDevDesc+0xb0>
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d003      	beq.n	8008328 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2208      	movs	r2, #8
 8008324:	71da      	strb	r2, [r3, #7]
        break;
 8008326:	e000      	b.n	800832a <USBH_ParseDevDesc+0xba>
        break;
 8008328:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800832a:	e00e      	b.n	800834a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008332:	2b02      	cmp	r3, #2
 8008334:	d107      	bne.n	8008346 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	79db      	ldrb	r3, [r3, #7]
 800833a:	2b08      	cmp	r3, #8
 800833c:	d005      	beq.n	800834a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2208      	movs	r2, #8
 8008342:	71da      	strb	r2, [r3, #7]
 8008344:	e001      	b.n	800834a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008346:	2303      	movs	r3, #3
 8008348:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	2b08      	cmp	r3, #8
 800834e:	d939      	bls.n	80083c4 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	3308      	adds	r3, #8
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b29a      	uxth	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	3309      	adds	r3, #9
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	b29b      	uxth	r3, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	330a      	adds	r3, #10
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	b29a      	uxth	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	330b      	adds	r3, #11
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	b29b      	uxth	r3, r3
 8008380:	4313      	orrs	r3, r2
 8008382:	b29a      	uxth	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	330c      	adds	r3, #12
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b29a      	uxth	r2, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	330d      	adds	r3, #13
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	b29b      	uxth	r3, r3
 800839c:	4313      	orrs	r3, r2
 800839e:	b29a      	uxth	r2, r3
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	7b9a      	ldrb	r2, [r3, #14]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	7bda      	ldrb	r2, [r3, #15]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	7c1a      	ldrb	r2, [r3, #16]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	7c5a      	ldrb	r2, [r3, #17]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	01000101 	.word	0x01000101

080083d8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08c      	sub	sp, #48	; 0x30
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80083ec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008406:	2302      	movs	r3, #2
 8008408:	e0db      	b.n	80085c2 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	785a      	ldrb	r2, [r3, #1]
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3302      	adds	r3, #2
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b29a      	uxth	r2, r3
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	3303      	adds	r3, #3
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	b29b      	uxth	r3, r3
 8008432:	4313      	orrs	r3, r2
 8008434:	b29b      	uxth	r3, r3
 8008436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800843a:	bf28      	it	cs
 800843c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008440:	b29a      	uxth	r2, r3
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	791a      	ldrb	r2, [r3, #4]
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	795a      	ldrb	r2, [r3, #5]
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	799a      	ldrb	r2, [r3, #6]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	79da      	ldrb	r2, [r3, #7]
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	7a1a      	ldrb	r2, [r3, #8]
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b09      	cmp	r3, #9
 8008474:	d002      	beq.n	800847c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	2209      	movs	r2, #9
 800847a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	2b09      	cmp	r3, #9
 8008480:	f240 809d 	bls.w	80085be <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008484:	2309      	movs	r3, #9
 8008486:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008488:	2300      	movs	r3, #0
 800848a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800848c:	e081      	b.n	8008592 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800848e:	f107 0316 	add.w	r3, r7, #22
 8008492:	4619      	mov	r1, r3
 8008494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008496:	f000 f9e8 	bl	800886a <USBH_GetNextDesc>
 800849a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	785b      	ldrb	r3, [r3, #1]
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d176      	bne.n	8008592 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b09      	cmp	r3, #9
 80084aa:	d002      	beq.n	80084b2 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	2209      	movs	r2, #9
 80084b0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80084b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b6:	221a      	movs	r2, #26
 80084b8:	fb02 f303 	mul.w	r3, r2, r3
 80084bc:	3308      	adds	r3, #8
 80084be:	6a3a      	ldr	r2, [r7, #32]
 80084c0:	4413      	add	r3, r2
 80084c2:	3302      	adds	r3, #2
 80084c4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084c8:	69f8      	ldr	r0, [r7, #28]
 80084ca:	f000 f87e 	bl	80085ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084d8:	e043      	b.n	8008562 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084da:	f107 0316 	add.w	r3, r7, #22
 80084de:	4619      	mov	r1, r3
 80084e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e2:	f000 f9c2 	bl	800886a <USBH_GetNextDesc>
 80084e6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b05      	cmp	r3, #5
 80084ee:	d138      	bne.n	8008562 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	795b      	ldrb	r3, [r3, #5]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d113      	bne.n	8008520 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d003      	beq.n	8008508 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	799b      	ldrb	r3, [r3, #6]
 8008504:	2b03      	cmp	r3, #3
 8008506:	d10b      	bne.n	8008520 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	79db      	ldrb	r3, [r3, #7]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10b      	bne.n	8008528 <USBH_ParseCfgDesc+0x150>
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b09      	cmp	r3, #9
 8008516:	d007      	beq.n	8008528 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	2209      	movs	r2, #9
 800851c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800851e:	e003      	b.n	8008528 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	2207      	movs	r2, #7
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e000      	b.n	800852a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008528:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800852a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800852e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008532:	3201      	adds	r2, #1
 8008534:	00d2      	lsls	r2, r2, #3
 8008536:	211a      	movs	r1, #26
 8008538:	fb01 f303 	mul.w	r3, r1, r3
 800853c:	4413      	add	r3, r2
 800853e:	3308      	adds	r3, #8
 8008540:	6a3a      	ldr	r2, [r7, #32]
 8008542:	4413      	add	r3, r2
 8008544:	3304      	adds	r3, #4
 8008546:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800854a:	69b9      	ldr	r1, [r7, #24]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f870 	bl	8008632 <USBH_ParseEPDesc>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800855c:	3301      	adds	r3, #1
 800855e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	791b      	ldrb	r3, [r3, #4]
 8008566:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800856a:	429a      	cmp	r2, r3
 800856c:	d204      	bcs.n	8008578 <USBH_ParseCfgDesc+0x1a0>
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	885a      	ldrh	r2, [r3, #2]
 8008572:	8afb      	ldrh	r3, [r7, #22]
 8008574:	429a      	cmp	r2, r3
 8008576:	d8b0      	bhi.n	80084da <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	791b      	ldrb	r3, [r3, #4]
 800857c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008580:	429a      	cmp	r2, r3
 8008582:	d201      	bcs.n	8008588 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008584:	2303      	movs	r3, #3
 8008586:	e01c      	b.n	80085c2 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800858c:	3301      	adds	r3, #1
 800858e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008596:	2b01      	cmp	r3, #1
 8008598:	d805      	bhi.n	80085a6 <USBH_ParseCfgDesc+0x1ce>
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	885a      	ldrh	r2, [r3, #2]
 800859e:	8afb      	ldrh	r3, [r7, #22]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	f63f af74 	bhi.w	800848e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	791b      	ldrb	r3, [r3, #4]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	bf28      	it	cs
 80085ae:	2302      	movcs	r3, #2
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d201      	bcs.n	80085be <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e001      	b.n	80085c2 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 80085be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3730      	adds	r7, #48	; 0x30
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781a      	ldrb	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	785a      	ldrb	r2, [r3, #1]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	789a      	ldrb	r2, [r3, #2]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	78da      	ldrb	r2, [r3, #3]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	3304      	adds	r3, #4
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	bf28      	it	cs
 80085fe:	2302      	movcs	r3, #2
 8008600:	b2da      	uxtb	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	795a      	ldrb	r2, [r3, #5]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	799a      	ldrb	r2, [r3, #6]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	79da      	ldrb	r2, [r3, #7]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	7a1a      	ldrb	r2, [r3, #8]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	721a      	strb	r2, [r3, #8]
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008632:	b480      	push	{r7}
 8008634:	b087      	sub	sp, #28
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	785a      	ldrb	r2, [r3, #1]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	789a      	ldrb	r2, [r3, #2]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	78da      	ldrb	r2, [r3, #3]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3304      	adds	r3, #4
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	b29a      	uxth	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3305      	adds	r3, #5
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	b29b      	uxth	r3, r3
 8008676:	4313      	orrs	r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	799a      	ldrb	r2, [r3, #6]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	889b      	ldrh	r3, [r3, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008696:	d804      	bhi.n	80086a2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800869c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086a0:	d901      	bls.n	80086a6 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80086a2:	2303      	movs	r3, #3
 80086a4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d136      	bne.n	800871e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	78db      	ldrb	r3, [r3, #3]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d108      	bne.n	80086ce <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	889b      	ldrh	r3, [r3, #4]
 80086c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c4:	f240 8097 	bls.w	80087f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80086c8:	2303      	movs	r3, #3
 80086ca:	75fb      	strb	r3, [r7, #23]
 80086cc:	e093      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	78db      	ldrb	r3, [r3, #3]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d107      	bne.n	80086ea <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	889b      	ldrh	r3, [r3, #4]
 80086de:	2b40      	cmp	r3, #64	; 0x40
 80086e0:	f240 8089 	bls.w	80087f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80086e4:	2303      	movs	r3, #3
 80086e6:	75fb      	strb	r3, [r7, #23]
 80086e8:	e085      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	78db      	ldrb	r3, [r3, #3]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d005      	beq.n	8008702 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	78db      	ldrb	r3, [r3, #3]
 80086fa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d10a      	bne.n	8008718 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	799b      	ldrb	r3, [r3, #6]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <USBH_ParseEPDesc+0xe0>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	799b      	ldrb	r3, [r3, #6]
 800870e:	2b10      	cmp	r3, #16
 8008710:	d970      	bls.n	80087f4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008712:	2303      	movs	r3, #3
 8008714:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008716:	e06d      	b.n	80087f4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008718:	2303      	movs	r3, #3
 800871a:	75fb      	strb	r3, [r7, #23]
 800871c:	e06b      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008724:	2b01      	cmp	r3, #1
 8008726:	d13c      	bne.n	80087a2 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	78db      	ldrb	r3, [r3, #3]
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d005      	beq.n	8008740 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	78db      	ldrb	r3, [r3, #3]
 8008738:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800873c:	2b00      	cmp	r3, #0
 800873e:	d106      	bne.n	800874e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	889b      	ldrh	r3, [r3, #4]
 8008744:	2b40      	cmp	r3, #64	; 0x40
 8008746:	d956      	bls.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008748:	2303      	movs	r3, #3
 800874a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800874c:	e053      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	78db      	ldrb	r3, [r3, #3]
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	2b01      	cmp	r3, #1
 8008758:	d10e      	bne.n	8008778 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	799b      	ldrb	r3, [r3, #6]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d007      	beq.n	8008772 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008766:	2b10      	cmp	r3, #16
 8008768:	d803      	bhi.n	8008772 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800876e:	2b40      	cmp	r3, #64	; 0x40
 8008770:	d941      	bls.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008772:	2303      	movs	r3, #3
 8008774:	75fb      	strb	r3, [r7, #23]
 8008776:	e03e      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	78db      	ldrb	r3, [r3, #3]
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	2b03      	cmp	r3, #3
 8008782:	d10b      	bne.n	800879c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	799b      	ldrb	r3, [r3, #6]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <USBH_ParseEPDesc+0x164>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	889b      	ldrh	r3, [r3, #4]
 8008790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008794:	d32f      	bcc.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008796:	2303      	movs	r3, #3
 8008798:	75fb      	strb	r3, [r7, #23]
 800879a:	e02c      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800879c:	2303      	movs	r3, #3
 800879e:	75fb      	strb	r3, [r7, #23]
 80087a0:	e029      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d120      	bne.n	80087ee <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	78db      	ldrb	r3, [r3, #3]
 80087b0:	f003 0303 	and.w	r3, r3, #3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	889b      	ldrh	r3, [r3, #4]
 80087bc:	2b08      	cmp	r3, #8
 80087be:	d01a      	beq.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80087c0:	2303      	movs	r3, #3
 80087c2:	75fb      	strb	r3, [r7, #23]
 80087c4:	e017      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	78db      	ldrb	r3, [r3, #3]
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d10a      	bne.n	80087e8 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	799b      	ldrb	r3, [r3, #6]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <USBH_ParseEPDesc+0x1b0>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	889b      	ldrh	r3, [r3, #4]
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d909      	bls.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80087e2:	2303      	movs	r3, #3
 80087e4:	75fb      	strb	r3, [r7, #23]
 80087e6:	e006      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087e8:	2303      	movs	r3, #3
 80087ea:	75fb      	strb	r3, [r7, #23]
 80087ec:	e003      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80087ee:	2303      	movs	r3, #3
 80087f0:	75fb      	strb	r3, [r7, #23]
 80087f2:	e000      	b.n	80087f6 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087f4:	bf00      	nop
  }

  return status;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3301      	adds	r3, #1
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d120      	bne.n	800885e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	1e9a      	subs	r2, r3, #2
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	4293      	cmp	r3, r2
 8008826:	bf28      	it	cs
 8008828:	4613      	movcs	r3, r2
 800882a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3302      	adds	r3, #2
 8008830:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008832:	2300      	movs	r3, #0
 8008834:	82fb      	strh	r3, [r7, #22]
 8008836:	e00b      	b.n	8008850 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008838:	8afb      	ldrh	r3, [r7, #22]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	3301      	adds	r3, #1
 8008848:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800884a:	8afb      	ldrh	r3, [r7, #22]
 800884c:	3302      	adds	r3, #2
 800884e:	82fb      	strh	r3, [r7, #22]
 8008850:	8afa      	ldrh	r2, [r7, #22]
 8008852:	8abb      	ldrh	r3, [r7, #20]
 8008854:	429a      	cmp	r2, r3
 8008856:	d3ef      	bcc.n	8008838 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]
  }
}
 800885e:	bf00      	nop
 8008860:	371c      	adds	r7, #28
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	881a      	ldrh	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	4413      	add	r3, r2
 8008880:	b29a      	uxth	r2, r3
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4413      	add	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008892:	68fb      	ldr	r3, [r7, #12]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	789b      	ldrb	r3, [r3, #2]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d002      	beq.n	80088c0 <USBH_CtlReq+0x20>
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d00f      	beq.n	80088de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80088be:	e027      	b.n	8008910 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	88fa      	ldrh	r2, [r7, #6]
 80088ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2202      	movs	r2, #2
 80088d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
      break;
 80088dc:	e018      	b.n	8008910 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f81c 	bl	800891c <USBH_HandleControl>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <USBH_CtlReq+0x54>
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d106      	bne.n	8008902 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	761a      	strb	r2, [r3, #24]
      break;
 8008900:	e005      	b.n	800890e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d102      	bne.n	800890e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	709a      	strb	r2, [r3, #2]
      break;
 800890e:	bf00      	nop
  }
  return status;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af02      	add	r7, sp, #8
 8008922:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008924:	2301      	movs	r3, #1
 8008926:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008928:	2300      	movs	r3, #0
 800892a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	7e1b      	ldrb	r3, [r3, #24]
 8008930:	3b01      	subs	r3, #1
 8008932:	2b0a      	cmp	r3, #10
 8008934:	f200 8156 	bhi.w	8008be4 <USBH_HandleControl+0x2c8>
 8008938:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <USBH_HandleControl+0x24>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	0800896d 	.word	0x0800896d
 8008944:	08008987 	.word	0x08008987
 8008948:	080089f1 	.word	0x080089f1
 800894c:	08008a17 	.word	0x08008a17
 8008950:	08008a4f 	.word	0x08008a4f
 8008954:	08008a79 	.word	0x08008a79
 8008958:	08008acb 	.word	0x08008acb
 800895c:	08008aed 	.word	0x08008aed
 8008960:	08008b29 	.word	0x08008b29
 8008964:	08008b4f 	.word	0x08008b4f
 8008968:	08008b8d 	.word	0x08008b8d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f103 0110 	add.w	r1, r3, #16
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	795b      	ldrb	r3, [r3, #5]
 8008976:	461a      	mov	r2, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f943 	bl	8008c04 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2202      	movs	r2, #2
 8008982:	761a      	strb	r2, [r3, #24]
      break;
 8008984:	e139      	b.n	8008bfa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	795b      	ldrb	r3, [r3, #5]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fcc5 	bl	800931c <USBH_LL_GetURBState>
 8008992:	4603      	mov	r3, r0
 8008994:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d11e      	bne.n	80089da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	7c1b      	ldrb	r3, [r3, #16]
 80089a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	8adb      	ldrh	r3, [r3, #22]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80089ae:	7b7b      	ldrb	r3, [r7, #13]
 80089b0:	2b80      	cmp	r3, #128	; 0x80
 80089b2:	d103      	bne.n	80089bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2203      	movs	r2, #3
 80089b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089ba:	e115      	b.n	8008be8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2205      	movs	r2, #5
 80089c0:	761a      	strb	r2, [r3, #24]
      break;
 80089c2:	e111      	b.n	8008be8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80089c4:	7b7b      	ldrb	r3, [r7, #13]
 80089c6:	2b80      	cmp	r3, #128	; 0x80
 80089c8:	d103      	bne.n	80089d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2209      	movs	r2, #9
 80089ce:	761a      	strb	r2, [r3, #24]
      break;
 80089d0:	e10a      	b.n	8008be8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2207      	movs	r2, #7
 80089d6:	761a      	strb	r2, [r3, #24]
      break;
 80089d8:	e106      	b.n	8008be8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d003      	beq.n	80089e8 <USBH_HandleControl+0xcc>
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	f040 8100 	bne.w	8008be8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	220b      	movs	r2, #11
 80089ec:	761a      	strb	r2, [r3, #24]
      break;
 80089ee:	e0fb      	b.n	8008be8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6899      	ldr	r1, [r3, #8]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	899a      	ldrh	r2, [r3, #12]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	791b      	ldrb	r3, [r3, #4]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f93a 	bl	8008c82 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2204      	movs	r2, #4
 8008a12:	761a      	strb	r2, [r3, #24]
      break;
 8008a14:	e0f1      	b.n	8008bfa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	791b      	ldrb	r3, [r3, #4]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fc7d 	bl	800931c <USBH_LL_GetURBState>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d102      	bne.n	8008a32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2209      	movs	r2, #9
 8008a30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	2b05      	cmp	r3, #5
 8008a36:	d102      	bne.n	8008a3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a3c:	e0d6      	b.n	8008bec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	f040 80d3 	bne.w	8008bec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	220b      	movs	r2, #11
 8008a4a:	761a      	strb	r2, [r3, #24]
      break;
 8008a4c:	e0ce      	b.n	8008bec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6899      	ldr	r1, [r3, #8]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	899a      	ldrh	r2, [r3, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	795b      	ldrb	r3, [r3, #5]
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	9000      	str	r0, [sp, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f8ea 	bl	8008c38 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2206      	movs	r2, #6
 8008a74:	761a      	strb	r2, [r3, #24]
      break;
 8008a76:	e0c0      	b.n	8008bfa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	795b      	ldrb	r3, [r3, #5]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fc4c 	bl	800931c <USBH_LL_GetURBState>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d103      	bne.n	8008a96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2207      	movs	r2, #7
 8008a92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a94:	e0ac      	b.n	8008bf0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	2b05      	cmp	r3, #5
 8008a9a:	d105      	bne.n	8008aa8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	220c      	movs	r2, #12
 8008aa0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa6:	e0a3      	b.n	8008bf0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d103      	bne.n	8008ab6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2205      	movs	r2, #5
 8008ab2:	761a      	strb	r2, [r3, #24]
      break;
 8008ab4:	e09c      	b.n	8008bf0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	f040 8099 	bne.w	8008bf0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	220b      	movs	r2, #11
 8008ac2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac8:	e092      	b.n	8008bf0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	791b      	ldrb	r3, [r3, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f8d5 	bl	8008c82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	761a      	strb	r2, [r3, #24]

      break;
 8008aea:	e086      	b.n	8008bfa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	791b      	ldrb	r3, [r3, #4]
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fc12 	bl	800931c <USBH_LL_GetURBState>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d105      	bne.n	8008b0e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	220d      	movs	r2, #13
 8008b06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b0c:	e072      	b.n	8008bf4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d103      	bne.n	8008b1c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	220b      	movs	r2, #11
 8008b18:	761a      	strb	r2, [r3, #24]
      break;
 8008b1a:	e06b      	b.n	8008bf4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b05      	cmp	r3, #5
 8008b20:	d168      	bne.n	8008bf4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008b22:	2303      	movs	r3, #3
 8008b24:	73fb      	strb	r3, [r7, #15]
      break;
 8008b26:	e065      	b.n	8008bf4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	795b      	ldrb	r3, [r3, #5]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	9200      	str	r2, [sp, #0]
 8008b30:	2200      	movs	r2, #0
 8008b32:	2100      	movs	r1, #0
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f87f 	bl	8008c38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	220a      	movs	r2, #10
 8008b4a:	761a      	strb	r2, [r3, #24]
      break;
 8008b4c:	e055      	b.n	8008bfa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	795b      	ldrb	r3, [r3, #5]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fbe1 	bl	800931c <USBH_LL_GetURBState>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d105      	bne.n	8008b70 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	220d      	movs	r2, #13
 8008b6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b6e:	e043      	b.n	8008bf8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d103      	bne.n	8008b7e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2209      	movs	r2, #9
 8008b7a:	761a      	strb	r2, [r3, #24]
      break;
 8008b7c:	e03c      	b.n	8008bf8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d139      	bne.n	8008bf8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	220b      	movs	r2, #11
 8008b88:	761a      	strb	r2, [r3, #24]
      break;
 8008b8a:	e035      	b.n	8008bf8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	7e5b      	ldrb	r3, [r3, #25]
 8008b90:	3301      	adds	r3, #1
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	765a      	strb	r2, [r3, #25]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7e5b      	ldrb	r3, [r3, #25]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d806      	bhi.n	8008bae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008bac:	e025      	b.n	8008bfa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bb4:	2106      	movs	r1, #6
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	795b      	ldrb	r3, [r3, #5]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f90c 	bl	8008de4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	791b      	ldrb	r3, [r3, #4]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f906 	bl	8008de4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008bde:	2302      	movs	r3, #2
 8008be0:	73fb      	strb	r3, [r7, #15]
      break;
 8008be2:	e00a      	b.n	8008bfa <USBH_HandleControl+0x2de>

    default:
      break;
 8008be4:	bf00      	nop
 8008be6:	e008      	b.n	8008bfa <USBH_HandleControl+0x2de>
      break;
 8008be8:	bf00      	nop
 8008bea:	e006      	b.n	8008bfa <USBH_HandleControl+0x2de>
      break;
 8008bec:	bf00      	nop
 8008bee:	e004      	b.n	8008bfa <USBH_HandleControl+0x2de>
      break;
 8008bf0:	bf00      	nop
 8008bf2:	e002      	b.n	8008bfa <USBH_HandleControl+0x2de>
      break;
 8008bf4:	bf00      	nop
 8008bf6:	e000      	b.n	8008bfa <USBH_HandleControl+0x2de>
      break;
 8008bf8:	bf00      	nop
  }

  return status;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af04      	add	r7, sp, #16
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c12:	79f9      	ldrb	r1, [r7, #7]
 8008c14:	2300      	movs	r3, #0
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	2308      	movs	r3, #8
 8008c1a:	9302      	str	r3, [sp, #8]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	9301      	str	r3, [sp, #4]
 8008c20:	2300      	movs	r3, #0
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	2200      	movs	r2, #0
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f000 fb46 	bl	80092ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af04      	add	r7, sp, #16
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4611      	mov	r1, r2
 8008c44:	461a      	mov	r2, r3
 8008c46:	460b      	mov	r3, r1
 8008c48:	80fb      	strh	r3, [r7, #6]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c5c:	7979      	ldrb	r1, [r7, #5]
 8008c5e:	7e3b      	ldrb	r3, [r7, #24]
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	88fb      	ldrh	r3, [r7, #6]
 8008c64:	9302      	str	r3, [sp, #8]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2200      	movs	r2, #0
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 fb21 	bl	80092ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b088      	sub	sp, #32
 8008c86:	af04      	add	r7, sp, #16
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	461a      	mov	r2, r3
 8008c90:	460b      	mov	r3, r1
 8008c92:	80fb      	strh	r3, [r7, #6]
 8008c94:	4613      	mov	r3, r2
 8008c96:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c98:	7979      	ldrb	r1, [r7, #5]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9303      	str	r3, [sp, #12]
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	9302      	str	r3, [sp, #8]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	2201      	movs	r2, #1
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 fb03 	bl	80092ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008cb4:	2300      	movs	r3, #0

}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b088      	sub	sp, #32
 8008cc2:	af04      	add	r7, sp, #16
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	4611      	mov	r1, r2
 8008cca:	461a      	mov	r2, r3
 8008ccc:	460b      	mov	r3, r1
 8008cce:	80fb      	strh	r3, [r7, #6]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ce2:	7979      	ldrb	r1, [r7, #5]
 8008ce4:	7e3b      	ldrb	r3, [r7, #24]
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	88fb      	ldrh	r3, [r7, #6]
 8008cea:	9302      	str	r3, [sp, #8]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 fade 	bl	80092ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af04      	add	r7, sp, #16
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4611      	mov	r1, r2
 8008d14:	461a      	mov	r2, r3
 8008d16:	460b      	mov	r3, r1
 8008d18:	80fb      	strh	r3, [r7, #6]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d1e:	7979      	ldrb	r1, [r7, #5]
 8008d20:	2300      	movs	r3, #0
 8008d22:	9303      	str	r3, [sp, #12]
 8008d24:	88fb      	ldrh	r3, [r7, #6]
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	2302      	movs	r3, #2
 8008d32:	2201      	movs	r2, #1
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fac0 	bl	80092ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af04      	add	r7, sp, #16
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	4611      	mov	r1, r2
 8008d50:	461a      	mov	r2, r3
 8008d52:	4603      	mov	r3, r0
 8008d54:	70fb      	strb	r3, [r7, #3]
 8008d56:	460b      	mov	r3, r1
 8008d58:	70bb      	strb	r3, [r7, #2]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d5e:	7878      	ldrb	r0, [r7, #1]
 8008d60:	78ba      	ldrb	r2, [r7, #2]
 8008d62:	78f9      	ldrb	r1, [r7, #3]
 8008d64:	8b3b      	ldrh	r3, [r7, #24]
 8008d66:	9302      	str	r3, [sp, #8]
 8008d68:	7d3b      	ldrb	r3, [r7, #20]
 8008d6a:	9301      	str	r3, [sp, #4]
 8008d6c:	7c3b      	ldrb	r3, [r7, #16]
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	4603      	mov	r3, r0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa53 	bl	800921e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa72 	bl	800927c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f836 	bl	8008e20 <USBH_GetFreePipe>
 8008db4:	4603      	mov	r3, r0
 8008db6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008db8:	89fb      	ldrh	r3, [r7, #14]
 8008dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00a      	beq.n	8008dd8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008dc2:	78fa      	ldrb	r2, [r7, #3]
 8008dc4:	89fb      	ldrh	r3, [r7, #14]
 8008dc6:	f003 030f 	and.w	r3, r3, #15
 8008dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	33e0      	adds	r3, #224	; 0xe0
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	440b      	add	r3, r1
 8008dd6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	b2db      	uxtb	r3, r3
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	2b0f      	cmp	r3, #15
 8008df4:	d80d      	bhi.n	8008e12 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008df6:	78fb      	ldrb	r3, [r7, #3]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	33e0      	adds	r3, #224	; 0xe0
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	33e0      	adds	r3, #224	; 0xe0
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
 8008e30:	e00f      	b.n	8008e52 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	33e0      	adds	r3, #224	; 0xe0
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d102      	bne.n	8008e4c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	e007      	b.n	8008e5c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	2b0f      	cmp	r3, #15
 8008e56:	d9ec      	bls.n	8008e32 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	490e      	ldr	r1, [pc, #56]	; (8008ea8 <MX_USB_HOST_Init+0x40>)
 8008e70:	480e      	ldr	r0, [pc, #56]	; (8008eac <MX_USB_HOST_Init+0x44>)
 8008e72:	f7fe fb05 	bl	8007480 <USBH_Init>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e7c:	f7f8 fb3c 	bl	80014f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e80:	490b      	ldr	r1, [pc, #44]	; (8008eb0 <MX_USB_HOST_Init+0x48>)
 8008e82:	480a      	ldr	r0, [pc, #40]	; (8008eac <MX_USB_HOST_Init+0x44>)
 8008e84:	f7fe fba9 	bl	80075da <USBH_RegisterClass>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e8e:	f7f8 fb33 	bl	80014f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e92:	4806      	ldr	r0, [pc, #24]	; (8008eac <MX_USB_HOST_Init+0x44>)
 8008e94:	f7fe fc2d 	bl	80076f2 <USBH_Start>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e9e:	f7f8 fb2b 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008ea2:	bf00      	nop
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	08008ec9 	.word	0x08008ec9
 8008eac:	20000354 	.word	0x20000354
 8008eb0:	2000000c 	.word	0x2000000c

08008eb4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008eb8:	4802      	ldr	r0, [pc, #8]	; (8008ec4 <MX_USB_HOST_Process+0x10>)
 8008eba:	f7fe fc2b 	bl	8007714 <USBH_Process>
}
 8008ebe:	bf00      	nop
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000354 	.word	0x20000354

08008ec8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d819      	bhi.n	8008f10 <USBH_UserProcess+0x48>
 8008edc:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <USBH_UserProcess+0x1c>)
 8008ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee2:	bf00      	nop
 8008ee4:	08008f11 	.word	0x08008f11
 8008ee8:	08008f01 	.word	0x08008f01
 8008eec:	08008f11 	.word	0x08008f11
 8008ef0:	08008f09 	.word	0x08008f09
 8008ef4:	08008ef9 	.word	0x08008ef9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ef8:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <USBH_UserProcess+0x58>)
 8008efa:	2203      	movs	r2, #3
 8008efc:	701a      	strb	r2, [r3, #0]
  break;
 8008efe:	e008      	b.n	8008f12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <USBH_UserProcess+0x58>)
 8008f02:	2202      	movs	r2, #2
 8008f04:	701a      	strb	r2, [r3, #0]
  break;
 8008f06:	e004      	b.n	8008f12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <USBH_UserProcess+0x58>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	701a      	strb	r2, [r3, #0]
  break;
 8008f0e:	e000      	b.n	8008f12 <USBH_UserProcess+0x4a>

  default:
  break;
 8008f10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	2000072c 	.word	0x2000072c

08008f24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	; 0x28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f2c:	f107 0314 	add.w	r3, r7, #20
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	609a      	str	r2, [r3, #8]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f44:	d147      	bne.n	8008fd6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f46:	2300      	movs	r3, #0
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	4b25      	ldr	r3, [pc, #148]	; (8008fe0 <HAL_HCD_MspInit+0xbc>)
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	4a24      	ldr	r2, [pc, #144]	; (8008fe0 <HAL_HCD_MspInit+0xbc>)
 8008f50:	f043 0301 	orr.w	r3, r3, #1
 8008f54:	6313      	str	r3, [r2, #48]	; 0x30
 8008f56:	4b22      	ldr	r3, [pc, #136]	; (8008fe0 <HAL_HCD_MspInit+0xbc>)
 8008f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f70:	f107 0314 	add.w	r3, r7, #20
 8008f74:	4619      	mov	r1, r3
 8008f76:	481b      	ldr	r0, [pc, #108]	; (8008fe4 <HAL_HCD_MspInit+0xc0>)
 8008f78:	f7f8 ff1c 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f82:	2302      	movs	r3, #2
 8008f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f8e:	230a      	movs	r3, #10
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f92:	f107 0314 	add.w	r3, r7, #20
 8008f96:	4619      	mov	r1, r3
 8008f98:	4812      	ldr	r0, [pc, #72]	; (8008fe4 <HAL_HCD_MspInit+0xc0>)
 8008f9a:	f7f8 ff0b 	bl	8001db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f9e:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <HAL_HCD_MspInit+0xbc>)
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	4a0f      	ldr	r2, [pc, #60]	; (8008fe0 <HAL_HCD_MspInit+0xbc>)
 8008fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa8:	6353      	str	r3, [r2, #52]	; 0x34
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <HAL_HCD_MspInit+0xbc>)
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb2:	4a0b      	ldr	r2, [pc, #44]	; (8008fe0 <HAL_HCD_MspInit+0xbc>)
 8008fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008fba:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <HAL_HCD_MspInit+0xbc>)
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2100      	movs	r1, #0
 8008fca:	2043      	movs	r0, #67	; 0x43
 8008fcc:	f7f8 febb 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fd0:	2043      	movs	r0, #67	; 0x43
 8008fd2:	f7f8 fed4 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	3728      	adds	r7, #40	; 0x28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	40020000 	.word	0x40020000

08008fe8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe ff6b 	bl	8007ed2 <USBH_LL_IncTimer>
}
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe ffa3 	bl	8007f5e <USBH_LL_Connect>
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe ffac 	bl	8007f8c <USBH_LL_Disconnect>
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
 8009048:	4613      	mov	r3, r2
 800904a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe ff5d 	bl	8007f26 <USBH_LL_PortEnabled>
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe ff5d 	bl	8007f42 <USBH_LL_PortDisabled>
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d12a      	bne.n	80090f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80090a2:	4a18      	ldr	r2, [pc, #96]	; (8009104 <USBH_LL_Init+0x74>)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a15      	ldr	r2, [pc, #84]	; (8009104 <USBH_LL_Init+0x74>)
 80090ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090b2:	4b14      	ldr	r3, [pc, #80]	; (8009104 <USBH_LL_Init+0x74>)
 80090b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <USBH_LL_Init+0x74>)
 80090bc:	2208      	movs	r2, #8
 80090be:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80090c0:	4b10      	ldr	r3, [pc, #64]	; (8009104 <USBH_LL_Init+0x74>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090c6:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <USBH_LL_Init+0x74>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80090cc:	4b0d      	ldr	r3, [pc, #52]	; (8009104 <USBH_LL_Init+0x74>)
 80090ce:	2202      	movs	r2, #2
 80090d0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090d2:	4b0c      	ldr	r3, [pc, #48]	; (8009104 <USBH_LL_Init+0x74>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80090d8:	480a      	ldr	r0, [pc, #40]	; (8009104 <USBH_LL_Init+0x74>)
 80090da:	f7f9 f808 	bl	80020ee <HAL_HCD_Init>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80090e4:	f7f8 fa08 	bl	80014f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80090e8:	4806      	ldr	r0, [pc, #24]	; (8009104 <USBH_LL_Init+0x74>)
 80090ea:	f7f9 fc69 	bl	80029c0 <HAL_HCD_GetCurrentFrame>
 80090ee:	4603      	mov	r3, r0
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7fe fede 	bl	8007eb4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000730 	.word	0x20000730

08009108 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800911e:	4618      	mov	r0, r3
 8009120:	f7f9 fbd6 	bl	80028d0 <HAL_HCD_Start>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f95e 	bl	80093ec <USBH_Get_USB_Status>
 8009130:	4603      	mov	r3, r0
 8009132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009154:	4618      	mov	r0, r3
 8009156:	f7f9 fbde 	bl	8002916 <HAL_HCD_Stop>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 f943 	bl	80093ec <USBH_Get_USB_Status>
 8009166:	4603      	mov	r3, r0
 8009168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800916a:	7bbb      	ldrb	r3, [r7, #14]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009186:	4618      	mov	r0, r3
 8009188:	f7f9 fc28 	bl	80029dc <HAL_HCD_GetCurrentSpeed>
 800918c:	4603      	mov	r3, r0
 800918e:	2b02      	cmp	r3, #2
 8009190:	d00c      	beq.n	80091ac <USBH_LL_GetSpeed+0x38>
 8009192:	2b02      	cmp	r3, #2
 8009194:	d80d      	bhi.n	80091b2 <USBH_LL_GetSpeed+0x3e>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <USBH_LL_GetSpeed+0x2c>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d003      	beq.n	80091a6 <USBH_LL_GetSpeed+0x32>
 800919e:	e008      	b.n	80091b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
    break;
 80091a4:	e008      	b.n	80091b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
    break;
 80091aa:	e005      	b.n	80091b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80091ac:	2302      	movs	r3, #2
 80091ae:	73fb      	strb	r3, [r7, #15]
    break;
 80091b0:	e002      	b.n	80091b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80091b2:	2301      	movs	r3, #1
 80091b4:	73fb      	strb	r3, [r7, #15]
    break;
 80091b6:	bf00      	nop
  }
  return  speed;
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091d8:	4618      	mov	r0, r3
 80091da:	f7f9 fbb9 	bl	8002950 <HAL_HCD_ResetPort>
 80091de:	4603      	mov	r3, r0
 80091e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 f901 	bl	80093ec <USBH_Get_USB_Status>
 80091ea:	4603      	mov	r3, r0
 80091ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	4611      	mov	r1, r2
 800920e:	4618      	mov	r0, r3
 8009210:	f7f9 fbc1 	bl	8002996 <HAL_HCD_HC_GetXferCount>
 8009214:	4603      	mov	r3, r0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800921e:	b590      	push	{r4, r7, lr}
 8009220:	b089      	sub	sp, #36	; 0x24
 8009222:	af04      	add	r7, sp, #16
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	4608      	mov	r0, r1
 8009228:	4611      	mov	r1, r2
 800922a:	461a      	mov	r2, r3
 800922c:	4603      	mov	r3, r0
 800922e:	70fb      	strb	r3, [r7, #3]
 8009230:	460b      	mov	r3, r1
 8009232:	70bb      	strb	r3, [r7, #2]
 8009234:	4613      	mov	r3, r2
 8009236:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009246:	787c      	ldrb	r4, [r7, #1]
 8009248:	78ba      	ldrb	r2, [r7, #2]
 800924a:	78f9      	ldrb	r1, [r7, #3]
 800924c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800924e:	9302      	str	r3, [sp, #8]
 8009250:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	f897 3020 	ldrb.w	r3, [r7, #32]
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	4623      	mov	r3, r4
 800925e:	f7f8 ffad 	bl	80021bc <HAL_HCD_HC_Init>
 8009262:	4603      	mov	r3, r0
 8009264:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	4618      	mov	r0, r3
 800926a:	f000 f8bf 	bl	80093ec <USBH_Get_USB_Status>
 800926e:	4603      	mov	r3, r0
 8009270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009272:	7bbb      	ldrb	r3, [r7, #14]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}

0800927c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009296:	78fa      	ldrb	r2, [r7, #3]
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7f9 f846 	bl	800232c <HAL_HCD_HC_Halt>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f8a0 	bl	80093ec <USBH_Get_USB_Status>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80092ba:	b590      	push	{r4, r7, lr}
 80092bc:	b089      	sub	sp, #36	; 0x24
 80092be:	af04      	add	r7, sp, #16
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	4608      	mov	r0, r1
 80092c4:	4611      	mov	r1, r2
 80092c6:	461a      	mov	r2, r3
 80092c8:	4603      	mov	r3, r0
 80092ca:	70fb      	strb	r3, [r7, #3]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70bb      	strb	r3, [r7, #2]
 80092d0:	4613      	mov	r3, r2
 80092d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80092e2:	787c      	ldrb	r4, [r7, #1]
 80092e4:	78ba      	ldrb	r2, [r7, #2]
 80092e6:	78f9      	ldrb	r1, [r7, #3]
 80092e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092ec:	9303      	str	r3, [sp, #12]
 80092ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092f0:	9302      	str	r3, [sp, #8]
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	4623      	mov	r3, r4
 80092fe:	f7f9 f839 	bl	8002374 <HAL_HCD_HC_SubmitRequest>
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f86f 	bl	80093ec <USBH_Get_USB_Status>
 800930e:	4603      	mov	r3, r0
 8009310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009312:	7bbb      	ldrb	r3, [r7, #14]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	bd90      	pop	{r4, r7, pc}

0800931c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7f9 fb1a 	bl	800296c <HAL_HCD_HC_GetURBState>
 8009338:	4603      	mov	r3, r0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009354:	2b01      	cmp	r3, #1
 8009356:	d103      	bne.n	8009360 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	4618      	mov	r0, r3
 800935c:	f000 f872 	bl	8009444 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009360:	20c8      	movs	r0, #200	; 0xc8
 8009362:	f7f8 fbe1 	bl	8001b28 <HAL_Delay>
  return USBH_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
 800937c:	4613      	mov	r3, r2
 800937e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009386:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009388:	78fa      	ldrb	r2, [r7, #3]
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	4613      	mov	r3, r2
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	3317      	adds	r3, #23
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800939e:	78fa      	ldrb	r2, [r7, #3]
 80093a0:	68f9      	ldr	r1, [r7, #12]
 80093a2:	4613      	mov	r3, r2
 80093a4:	011b      	lsls	r3, r3, #4
 80093a6:	1a9b      	subs	r3, r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	333c      	adds	r3, #60	; 0x3c
 80093ae:	78ba      	ldrb	r2, [r7, #2]
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	e009      	b.n	80093c8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80093b4:	78fa      	ldrb	r2, [r7, #3]
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	4613      	mov	r3, r2
 80093ba:	011b      	lsls	r3, r3, #4
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	333d      	adds	r3, #61	; 0x3d
 80093c4:	78ba      	ldrb	r2, [r7, #2]
 80093c6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b082      	sub	sp, #8
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7f8 fba2 	bl	8001b28 <HAL_Delay>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d817      	bhi.n	8009430 <USBH_Get_USB_Status+0x44>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <USBH_Get_USB_Status+0x1c>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	08009419 	.word	0x08009419
 800940c:	0800941f 	.word	0x0800941f
 8009410:	08009425 	.word	0x08009425
 8009414:	0800942b 	.word	0x0800942b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
    break;
 800941c:	e00b      	b.n	8009436 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800941e:	2302      	movs	r3, #2
 8009420:	73fb      	strb	r3, [r7, #15]
    break;
 8009422:	e008      	b.n	8009436 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
    break;
 8009428:	e005      	b.n	8009436 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800942a:	2302      	movs	r3, #2
 800942c:	73fb      	strb	r3, [r7, #15]
    break;
 800942e:	e002      	b.n	8009436 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009430:	2302      	movs	r3, #2
 8009432:	73fb      	strb	r3, [r7, #15]
    break;
 8009434:	bf00      	nop
  }
  return usb_status;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d102      	bne.n	800945e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
 800945c:	e001      	b.n	8009462 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800945e:	2301      	movs	r3, #1
 8009460:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	461a      	mov	r2, r3
 8009466:	2101      	movs	r1, #1
 8009468:	4803      	ldr	r0, [pc, #12]	; (8009478 <MX_DriverVbusFS+0x34>)
 800946a:	f7f8 fe27 	bl	80020bc <HAL_GPIO_WritePin>
}
 800946e:	bf00      	nop
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40020800 	.word	0x40020800

0800947c <arm_q15_to_float>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	0896      	lsrs	r6, r2, #2
 8009480:	d038      	beq.n	80094f4 <arm_q15_to_float+0x78>
 8009482:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009518 <arm_q15_to_float+0x9c>
 8009486:	f101 0410 	add.w	r4, r1, #16
 800948a:	f100 0308 	add.w	r3, r0, #8
 800948e:	4635      	mov	r5, r6
 8009490:	f933 ec08 	ldrsh.w	lr, [r3, #-8]
 8009494:	ee07 ea90 	vmov	s15, lr
 8009498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800949c:	3d01      	subs	r5, #1
 800949e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094a2:	f103 0308 	add.w	r3, r3, #8
 80094a6:	ed44 7a04 	vstr	s15, [r4, #-16]
 80094aa:	f933 ec0e 	ldrsh.w	lr, [r3, #-14]
 80094ae:	ee07 ea90 	vmov	s15, lr
 80094b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094b6:	f104 0410 	add.w	r4, r4, #16
 80094ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094be:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80094c2:	f933 ec0c 	ldrsh.w	lr, [r3, #-12]
 80094c6:	ee07 ea90 	vmov	s15, lr
 80094ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094d2:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80094d6:	f933 ec0a 	ldrsh.w	lr, [r3, #-10]
 80094da:	ee07 ea90 	vmov	s15, lr
 80094de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094e6:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80094ea:	d1d1      	bne.n	8009490 <arm_q15_to_float+0x14>
 80094ec:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80094f0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80094f4:	f012 0203 	ands.w	r2, r2, #3
 80094f8:	d00d      	beq.n	8009516 <arm_q15_to_float+0x9a>
 80094fa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009518 <arm_q15_to_float+0x9c>
 80094fe:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8009502:	ee07 3a90 	vmov	s15, r3
 8009506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800950a:	3a01      	subs	r2, #1
 800950c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009510:	ece1 7a01 	vstmia	r1!, {s15}
 8009514:	d1f3      	bne.n	80094fe <arm_q15_to_float+0x82>
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	38000000 	.word	0x38000000

0800951c <arm_float_to_q15>:
 800951c:	b4f0      	push	{r4, r5, r6, r7}
 800951e:	0897      	lsrs	r7, r2, #2
 8009520:	d06e      	beq.n	8009600 <arm_float_to_q15+0xe4>
 8009522:	eddf 5a49 	vldr	s11, [pc, #292]	; 8009648 <arm_float_to_q15+0x12c>
 8009526:	f100 0510 	add.w	r5, r0, #16
 800952a:	f101 0408 	add.w	r4, r1, #8
 800952e:	463e      	mov	r6, r7
 8009530:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009534:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8009538:	ed55 7a04 	vldr	s15, [r5, #-16]
 800953c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009540:	3510      	adds	r5, #16
 8009542:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954a:	bfd4      	ite	le
 800954c:	eef0 7a66 	vmovle.f32	s15, s13
 8009550:	eef0 7a46 	vmovgt.f32	s15, s12
 8009554:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009558:	3408      	adds	r4, #8
 800955a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800955e:	ee17 3a90 	vmov	r3, s15
 8009562:	f303 030f 	ssat	r3, #16, r3
 8009566:	f824 3c10 	strh.w	r3, [r4, #-16]
 800956a:	ed55 7a07 	vldr	s15, [r5, #-28]	; 0xffffffe4
 800956e:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8009572:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957a:	bfd4      	ite	le
 800957c:	eef0 7a66 	vmovle.f32	s15, s13
 8009580:	eef0 7a46 	vmovgt.f32	s15, s12
 8009584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800958c:	ee17 3a90 	vmov	r3, s15
 8009590:	f303 030f 	ssat	r3, #16, r3
 8009594:	f824 3c0e 	strh.w	r3, [r4, #-14]
 8009598:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 800959c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80095a0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a8:	bfd4      	ite	le
 80095aa:	eef0 7a66 	vmovle.f32	s15, s13
 80095ae:	eef0 7a46 	vmovgt.f32	s15, s12
 80095b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095ba:	ee17 3a90 	vmov	r3, s15
 80095be:	f303 030f 	ssat	r3, #16, r3
 80095c2:	f824 3c0c 	strh.w	r3, [r4, #-12]
 80095c6:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 80095ca:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80095ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d6:	bfd4      	ite	le
 80095d8:	eef0 7a66 	vmovle.f32	s15, s13
 80095dc:	eef0 7a46 	vmovgt.f32	s15, s12
 80095e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095e4:	3e01      	subs	r6, #1
 80095e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095ea:	ee17 3a90 	vmov	r3, s15
 80095ee:	f303 030f 	ssat	r3, #16, r3
 80095f2:	f824 3c0a 	strh.w	r3, [r4, #-10]
 80095f6:	d19f      	bne.n	8009538 <arm_float_to_q15+0x1c>
 80095f8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80095fc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8009600:	f012 0203 	ands.w	r2, r2, #3
 8009604:	d01e      	beq.n	8009644 <arm_float_to_q15+0x128>
 8009606:	eddf 5a10 	vldr	s11, [pc, #64]	; 8009648 <arm_float_to_q15+0x12c>
 800960a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800960e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8009612:	ecf0 7a01 	vldmia	r0!, {s15}
 8009616:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800961a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800961e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009622:	bfd4      	ite	le
 8009624:	eef0 7a66 	vmovle.f32	s15, s13
 8009628:	eef0 7a46 	vmovgt.f32	s15, s12
 800962c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009630:	3a01      	subs	r2, #1
 8009632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009636:	ee17 3a90 	vmov	r3, s15
 800963a:	f303 030f 	ssat	r3, #16, r3
 800963e:	f821 3b02 	strh.w	r3, [r1], #2
 8009642:	d1e6      	bne.n	8009612 <arm_float_to_q15+0xf6>
 8009644:	bcf0      	pop	{r4, r5, r6, r7}
 8009646:	4770      	bx	lr
 8009648:	47000000 	.word	0x47000000

0800964c <malloc>:
 800964c:	4b02      	ldr	r3, [pc, #8]	; (8009658 <malloc+0xc>)
 800964e:	4601      	mov	r1, r0
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	f000 b82b 	b.w	80096ac <_malloc_r>
 8009656:	bf00      	nop
 8009658:	20000084 	.word	0x20000084

0800965c <free>:
 800965c:	4b02      	ldr	r3, [pc, #8]	; (8009668 <free+0xc>)
 800965e:	4601      	mov	r1, r0
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	f001 be27 	b.w	800b2b4 <_free_r>
 8009666:	bf00      	nop
 8009668:	20000084 	.word	0x20000084

0800966c <sbrk_aligned>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4e0e      	ldr	r6, [pc, #56]	; (80096a8 <sbrk_aligned+0x3c>)
 8009670:	460c      	mov	r4, r1
 8009672:	6831      	ldr	r1, [r6, #0]
 8009674:	4605      	mov	r5, r0
 8009676:	b911      	cbnz	r1, 800967e <sbrk_aligned+0x12>
 8009678:	f000 ff52 	bl	800a520 <_sbrk_r>
 800967c:	6030      	str	r0, [r6, #0]
 800967e:	4621      	mov	r1, r4
 8009680:	4628      	mov	r0, r5
 8009682:	f000 ff4d 	bl	800a520 <_sbrk_r>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d00a      	beq.n	80096a0 <sbrk_aligned+0x34>
 800968a:	1cc4      	adds	r4, r0, #3
 800968c:	f024 0403 	bic.w	r4, r4, #3
 8009690:	42a0      	cmp	r0, r4
 8009692:	d007      	beq.n	80096a4 <sbrk_aligned+0x38>
 8009694:	1a21      	subs	r1, r4, r0
 8009696:	4628      	mov	r0, r5
 8009698:	f000 ff42 	bl	800a520 <_sbrk_r>
 800969c:	3001      	adds	r0, #1
 800969e:	d101      	bne.n	80096a4 <sbrk_aligned+0x38>
 80096a0:	f04f 34ff 	mov.w	r4, #4294967295
 80096a4:	4620      	mov	r0, r4
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	20000b14 	.word	0x20000b14

080096ac <_malloc_r>:
 80096ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b0:	1ccd      	adds	r5, r1, #3
 80096b2:	f025 0503 	bic.w	r5, r5, #3
 80096b6:	3508      	adds	r5, #8
 80096b8:	2d0c      	cmp	r5, #12
 80096ba:	bf38      	it	cc
 80096bc:	250c      	movcc	r5, #12
 80096be:	2d00      	cmp	r5, #0
 80096c0:	4607      	mov	r7, r0
 80096c2:	db01      	blt.n	80096c8 <_malloc_r+0x1c>
 80096c4:	42a9      	cmp	r1, r5
 80096c6:	d905      	bls.n	80096d4 <_malloc_r+0x28>
 80096c8:	230c      	movs	r3, #12
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	2600      	movs	r6, #0
 80096ce:	4630      	mov	r0, r6
 80096d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097a8 <_malloc_r+0xfc>
 80096d8:	f000 f868 	bl	80097ac <__malloc_lock>
 80096dc:	f8d8 3000 	ldr.w	r3, [r8]
 80096e0:	461c      	mov	r4, r3
 80096e2:	bb5c      	cbnz	r4, 800973c <_malloc_r+0x90>
 80096e4:	4629      	mov	r1, r5
 80096e6:	4638      	mov	r0, r7
 80096e8:	f7ff ffc0 	bl	800966c <sbrk_aligned>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	4604      	mov	r4, r0
 80096f0:	d155      	bne.n	800979e <_malloc_r+0xf2>
 80096f2:	f8d8 4000 	ldr.w	r4, [r8]
 80096f6:	4626      	mov	r6, r4
 80096f8:	2e00      	cmp	r6, #0
 80096fa:	d145      	bne.n	8009788 <_malloc_r+0xdc>
 80096fc:	2c00      	cmp	r4, #0
 80096fe:	d048      	beq.n	8009792 <_malloc_r+0xe6>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	4631      	mov	r1, r6
 8009704:	4638      	mov	r0, r7
 8009706:	eb04 0903 	add.w	r9, r4, r3
 800970a:	f000 ff09 	bl	800a520 <_sbrk_r>
 800970e:	4581      	cmp	r9, r0
 8009710:	d13f      	bne.n	8009792 <_malloc_r+0xe6>
 8009712:	6821      	ldr	r1, [r4, #0]
 8009714:	1a6d      	subs	r5, r5, r1
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff ffa7 	bl	800966c <sbrk_aligned>
 800971e:	3001      	adds	r0, #1
 8009720:	d037      	beq.n	8009792 <_malloc_r+0xe6>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	442b      	add	r3, r5
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	f8d8 3000 	ldr.w	r3, [r8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d038      	beq.n	80097a2 <_malloc_r+0xf6>
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	42a2      	cmp	r2, r4
 8009734:	d12b      	bne.n	800978e <_malloc_r+0xe2>
 8009736:	2200      	movs	r2, #0
 8009738:	605a      	str	r2, [r3, #4]
 800973a:	e00f      	b.n	800975c <_malloc_r+0xb0>
 800973c:	6822      	ldr	r2, [r4, #0]
 800973e:	1b52      	subs	r2, r2, r5
 8009740:	d41f      	bmi.n	8009782 <_malloc_r+0xd6>
 8009742:	2a0b      	cmp	r2, #11
 8009744:	d917      	bls.n	8009776 <_malloc_r+0xca>
 8009746:	1961      	adds	r1, r4, r5
 8009748:	42a3      	cmp	r3, r4
 800974a:	6025      	str	r5, [r4, #0]
 800974c:	bf18      	it	ne
 800974e:	6059      	strne	r1, [r3, #4]
 8009750:	6863      	ldr	r3, [r4, #4]
 8009752:	bf08      	it	eq
 8009754:	f8c8 1000 	streq.w	r1, [r8]
 8009758:	5162      	str	r2, [r4, r5]
 800975a:	604b      	str	r3, [r1, #4]
 800975c:	4638      	mov	r0, r7
 800975e:	f104 060b 	add.w	r6, r4, #11
 8009762:	f000 f829 	bl	80097b8 <__malloc_unlock>
 8009766:	f026 0607 	bic.w	r6, r6, #7
 800976a:	1d23      	adds	r3, r4, #4
 800976c:	1af2      	subs	r2, r6, r3
 800976e:	d0ae      	beq.n	80096ce <_malloc_r+0x22>
 8009770:	1b9b      	subs	r3, r3, r6
 8009772:	50a3      	str	r3, [r4, r2]
 8009774:	e7ab      	b.n	80096ce <_malloc_r+0x22>
 8009776:	42a3      	cmp	r3, r4
 8009778:	6862      	ldr	r2, [r4, #4]
 800977a:	d1dd      	bne.n	8009738 <_malloc_r+0x8c>
 800977c:	f8c8 2000 	str.w	r2, [r8]
 8009780:	e7ec      	b.n	800975c <_malloc_r+0xb0>
 8009782:	4623      	mov	r3, r4
 8009784:	6864      	ldr	r4, [r4, #4]
 8009786:	e7ac      	b.n	80096e2 <_malloc_r+0x36>
 8009788:	4634      	mov	r4, r6
 800978a:	6876      	ldr	r6, [r6, #4]
 800978c:	e7b4      	b.n	80096f8 <_malloc_r+0x4c>
 800978e:	4613      	mov	r3, r2
 8009790:	e7cc      	b.n	800972c <_malloc_r+0x80>
 8009792:	230c      	movs	r3, #12
 8009794:	603b      	str	r3, [r7, #0]
 8009796:	4638      	mov	r0, r7
 8009798:	f000 f80e 	bl	80097b8 <__malloc_unlock>
 800979c:	e797      	b.n	80096ce <_malloc_r+0x22>
 800979e:	6025      	str	r5, [r4, #0]
 80097a0:	e7dc      	b.n	800975c <_malloc_r+0xb0>
 80097a2:	605b      	str	r3, [r3, #4]
 80097a4:	deff      	udf	#255	; 0xff
 80097a6:	bf00      	nop
 80097a8:	20000b10 	.word	0x20000b10

080097ac <__malloc_lock>:
 80097ac:	4801      	ldr	r0, [pc, #4]	; (80097b4 <__malloc_lock+0x8>)
 80097ae:	f000 bf04 	b.w	800a5ba <__retarget_lock_acquire_recursive>
 80097b2:	bf00      	nop
 80097b4:	20000c58 	.word	0x20000c58

080097b8 <__malloc_unlock>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__malloc_unlock+0x8>)
 80097ba:	f000 beff 	b.w	800a5bc <__retarget_lock_release_recursive>
 80097be:	bf00      	nop
 80097c0:	20000c58 	.word	0x20000c58

080097c4 <__cvt>:
 80097c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097c8:	ec55 4b10 	vmov	r4, r5, d0
 80097cc:	2d00      	cmp	r5, #0
 80097ce:	460e      	mov	r6, r1
 80097d0:	4619      	mov	r1, r3
 80097d2:	462b      	mov	r3, r5
 80097d4:	bfbb      	ittet	lt
 80097d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097da:	461d      	movlt	r5, r3
 80097dc:	2300      	movge	r3, #0
 80097de:	232d      	movlt	r3, #45	; 0x2d
 80097e0:	700b      	strb	r3, [r1, #0]
 80097e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097e8:	4691      	mov	r9, r2
 80097ea:	f023 0820 	bic.w	r8, r3, #32
 80097ee:	bfbc      	itt	lt
 80097f0:	4622      	movlt	r2, r4
 80097f2:	4614      	movlt	r4, r2
 80097f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097f8:	d005      	beq.n	8009806 <__cvt+0x42>
 80097fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097fe:	d100      	bne.n	8009802 <__cvt+0x3e>
 8009800:	3601      	adds	r6, #1
 8009802:	2102      	movs	r1, #2
 8009804:	e000      	b.n	8009808 <__cvt+0x44>
 8009806:	2103      	movs	r1, #3
 8009808:	ab03      	add	r3, sp, #12
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	ab02      	add	r3, sp, #8
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	ec45 4b10 	vmov	d0, r4, r5
 8009814:	4653      	mov	r3, sl
 8009816:	4632      	mov	r2, r6
 8009818:	f000 ff5a 	bl	800a6d0 <_dtoa_r>
 800981c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009820:	4607      	mov	r7, r0
 8009822:	d102      	bne.n	800982a <__cvt+0x66>
 8009824:	f019 0f01 	tst.w	r9, #1
 8009828:	d022      	beq.n	8009870 <__cvt+0xac>
 800982a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800982e:	eb07 0906 	add.w	r9, r7, r6
 8009832:	d110      	bne.n	8009856 <__cvt+0x92>
 8009834:	783b      	ldrb	r3, [r7, #0]
 8009836:	2b30      	cmp	r3, #48	; 0x30
 8009838:	d10a      	bne.n	8009850 <__cvt+0x8c>
 800983a:	2200      	movs	r2, #0
 800983c:	2300      	movs	r3, #0
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7f7 f949 	bl	8000ad8 <__aeabi_dcmpeq>
 8009846:	b918      	cbnz	r0, 8009850 <__cvt+0x8c>
 8009848:	f1c6 0601 	rsb	r6, r6, #1
 800984c:	f8ca 6000 	str.w	r6, [sl]
 8009850:	f8da 3000 	ldr.w	r3, [sl]
 8009854:	4499      	add	r9, r3
 8009856:	2200      	movs	r2, #0
 8009858:	2300      	movs	r3, #0
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f7 f93b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009862:	b108      	cbz	r0, 8009868 <__cvt+0xa4>
 8009864:	f8cd 900c 	str.w	r9, [sp, #12]
 8009868:	2230      	movs	r2, #48	; 0x30
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	454b      	cmp	r3, r9
 800986e:	d307      	bcc.n	8009880 <__cvt+0xbc>
 8009870:	9b03      	ldr	r3, [sp, #12]
 8009872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009874:	1bdb      	subs	r3, r3, r7
 8009876:	4638      	mov	r0, r7
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	b004      	add	sp, #16
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	1c59      	adds	r1, r3, #1
 8009882:	9103      	str	r1, [sp, #12]
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	e7f0      	b.n	800986a <__cvt+0xa6>

08009888 <__exponent>:
 8009888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800988a:	4603      	mov	r3, r0
 800988c:	2900      	cmp	r1, #0
 800988e:	bfb8      	it	lt
 8009890:	4249      	neglt	r1, r1
 8009892:	f803 2b02 	strb.w	r2, [r3], #2
 8009896:	bfb4      	ite	lt
 8009898:	222d      	movlt	r2, #45	; 0x2d
 800989a:	222b      	movge	r2, #43	; 0x2b
 800989c:	2909      	cmp	r1, #9
 800989e:	7042      	strb	r2, [r0, #1]
 80098a0:	dd2a      	ble.n	80098f8 <__exponent+0x70>
 80098a2:	f10d 0207 	add.w	r2, sp, #7
 80098a6:	4617      	mov	r7, r2
 80098a8:	260a      	movs	r6, #10
 80098aa:	4694      	mov	ip, r2
 80098ac:	fb91 f5f6 	sdiv	r5, r1, r6
 80098b0:	fb06 1415 	mls	r4, r6, r5, r1
 80098b4:	3430      	adds	r4, #48	; 0x30
 80098b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80098ba:	460c      	mov	r4, r1
 80098bc:	2c63      	cmp	r4, #99	; 0x63
 80098be:	f102 32ff 	add.w	r2, r2, #4294967295
 80098c2:	4629      	mov	r1, r5
 80098c4:	dcf1      	bgt.n	80098aa <__exponent+0x22>
 80098c6:	3130      	adds	r1, #48	; 0x30
 80098c8:	f1ac 0402 	sub.w	r4, ip, #2
 80098cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80098d0:	1c41      	adds	r1, r0, #1
 80098d2:	4622      	mov	r2, r4
 80098d4:	42ba      	cmp	r2, r7
 80098d6:	d30a      	bcc.n	80098ee <__exponent+0x66>
 80098d8:	f10d 0209 	add.w	r2, sp, #9
 80098dc:	eba2 020c 	sub.w	r2, r2, ip
 80098e0:	42bc      	cmp	r4, r7
 80098e2:	bf88      	it	hi
 80098e4:	2200      	movhi	r2, #0
 80098e6:	4413      	add	r3, r2
 80098e8:	1a18      	subs	r0, r3, r0
 80098ea:	b003      	add	sp, #12
 80098ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098f2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80098f6:	e7ed      	b.n	80098d4 <__exponent+0x4c>
 80098f8:	2330      	movs	r3, #48	; 0x30
 80098fa:	3130      	adds	r1, #48	; 0x30
 80098fc:	7083      	strb	r3, [r0, #2]
 80098fe:	70c1      	strb	r1, [r0, #3]
 8009900:	1d03      	adds	r3, r0, #4
 8009902:	e7f1      	b.n	80098e8 <__exponent+0x60>

08009904 <_printf_float>:
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	ed2d 8b02 	vpush	{d8}
 800990c:	b08d      	sub	sp, #52	; 0x34
 800990e:	460c      	mov	r4, r1
 8009910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009914:	4616      	mov	r6, r2
 8009916:	461f      	mov	r7, r3
 8009918:	4605      	mov	r5, r0
 800991a:	f000 fdc9 	bl	800a4b0 <_localeconv_r>
 800991e:	f8d0 a000 	ldr.w	sl, [r0]
 8009922:	4650      	mov	r0, sl
 8009924:	f7f6 fcac 	bl	8000280 <strlen>
 8009928:	2300      	movs	r3, #0
 800992a:	930a      	str	r3, [sp, #40]	; 0x28
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	f8d8 3000 	ldr.w	r3, [r8]
 8009934:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009938:	3307      	adds	r3, #7
 800993a:	f023 0307 	bic.w	r3, r3, #7
 800993e:	f103 0208 	add.w	r2, r3, #8
 8009942:	f8c8 2000 	str.w	r2, [r8]
 8009946:	e9d3 8900 	ldrd	r8, r9, [r3]
 800994a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f8cd 8018 	str.w	r8, [sp, #24]
 8009954:	ee08 0a10 	vmov	s16, r0
 8009958:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800995c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009960:	4b9e      	ldr	r3, [pc, #632]	; (8009bdc <_printf_float+0x2d8>)
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	f7f7 f8e9 	bl	8000b3c <__aeabi_dcmpun>
 800996a:	bb88      	cbnz	r0, 80099d0 <_printf_float+0xcc>
 800996c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009970:	4b9a      	ldr	r3, [pc, #616]	; (8009bdc <_printf_float+0x2d8>)
 8009972:	f04f 32ff 	mov.w	r2, #4294967295
 8009976:	f7f7 f8c3 	bl	8000b00 <__aeabi_dcmple>
 800997a:	bb48      	cbnz	r0, 80099d0 <_printf_float+0xcc>
 800997c:	2200      	movs	r2, #0
 800997e:	2300      	movs	r3, #0
 8009980:	4640      	mov	r0, r8
 8009982:	4649      	mov	r1, r9
 8009984:	f7f7 f8b2 	bl	8000aec <__aeabi_dcmplt>
 8009988:	b110      	cbz	r0, 8009990 <_printf_float+0x8c>
 800998a:	232d      	movs	r3, #45	; 0x2d
 800998c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009990:	4a93      	ldr	r2, [pc, #588]	; (8009be0 <_printf_float+0x2dc>)
 8009992:	4b94      	ldr	r3, [pc, #592]	; (8009be4 <_printf_float+0x2e0>)
 8009994:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009998:	bf94      	ite	ls
 800999a:	4690      	movls	r8, r2
 800999c:	4698      	movhi	r8, r3
 800999e:	2303      	movs	r3, #3
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	9b05      	ldr	r3, [sp, #20]
 80099a4:	f023 0304 	bic.w	r3, r3, #4
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	f04f 0900 	mov.w	r9, #0
 80099ae:	9700      	str	r7, [sp, #0]
 80099b0:	4633      	mov	r3, r6
 80099b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80099b4:	4621      	mov	r1, r4
 80099b6:	4628      	mov	r0, r5
 80099b8:	f000 f9da 	bl	8009d70 <_printf_common>
 80099bc:	3001      	adds	r0, #1
 80099be:	f040 8090 	bne.w	8009ae2 <_printf_float+0x1de>
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	b00d      	add	sp, #52	; 0x34
 80099c8:	ecbd 8b02 	vpop	{d8}
 80099cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d0:	4642      	mov	r2, r8
 80099d2:	464b      	mov	r3, r9
 80099d4:	4640      	mov	r0, r8
 80099d6:	4649      	mov	r1, r9
 80099d8:	f7f7 f8b0 	bl	8000b3c <__aeabi_dcmpun>
 80099dc:	b140      	cbz	r0, 80099f0 <_printf_float+0xec>
 80099de:	464b      	mov	r3, r9
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bfbc      	itt	lt
 80099e4:	232d      	movlt	r3, #45	; 0x2d
 80099e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099ea:	4a7f      	ldr	r2, [pc, #508]	; (8009be8 <_printf_float+0x2e4>)
 80099ec:	4b7f      	ldr	r3, [pc, #508]	; (8009bec <_printf_float+0x2e8>)
 80099ee:	e7d1      	b.n	8009994 <_printf_float+0x90>
 80099f0:	6863      	ldr	r3, [r4, #4]
 80099f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099f6:	9206      	str	r2, [sp, #24]
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	d13f      	bne.n	8009a7c <_printf_float+0x178>
 80099fc:	2306      	movs	r3, #6
 80099fe:	6063      	str	r3, [r4, #4]
 8009a00:	9b05      	ldr	r3, [sp, #20]
 8009a02:	6861      	ldr	r1, [r4, #4]
 8009a04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a08:	2300      	movs	r3, #0
 8009a0a:	9303      	str	r3, [sp, #12]
 8009a0c:	ab0a      	add	r3, sp, #40	; 0x28
 8009a0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a12:	ab09      	add	r3, sp, #36	; 0x24
 8009a14:	ec49 8b10 	vmov	d0, r8, r9
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	6022      	str	r2, [r4, #0]
 8009a1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a20:	4628      	mov	r0, r5
 8009a22:	f7ff fecf 	bl	80097c4 <__cvt>
 8009a26:	9b06      	ldr	r3, [sp, #24]
 8009a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a2a:	2b47      	cmp	r3, #71	; 0x47
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	d108      	bne.n	8009a42 <_printf_float+0x13e>
 8009a30:	1cc8      	adds	r0, r1, #3
 8009a32:	db02      	blt.n	8009a3a <_printf_float+0x136>
 8009a34:	6863      	ldr	r3, [r4, #4]
 8009a36:	4299      	cmp	r1, r3
 8009a38:	dd41      	ble.n	8009abe <_printf_float+0x1ba>
 8009a3a:	f1ab 0302 	sub.w	r3, fp, #2
 8009a3e:	fa5f fb83 	uxtb.w	fp, r3
 8009a42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a46:	d820      	bhi.n	8009a8a <_printf_float+0x186>
 8009a48:	3901      	subs	r1, #1
 8009a4a:	465a      	mov	r2, fp
 8009a4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a50:	9109      	str	r1, [sp, #36]	; 0x24
 8009a52:	f7ff ff19 	bl	8009888 <__exponent>
 8009a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a58:	1813      	adds	r3, r2, r0
 8009a5a:	2a01      	cmp	r2, #1
 8009a5c:	4681      	mov	r9, r0
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	dc02      	bgt.n	8009a68 <_printf_float+0x164>
 8009a62:	6822      	ldr	r2, [r4, #0]
 8009a64:	07d2      	lsls	r2, r2, #31
 8009a66:	d501      	bpl.n	8009a6c <_printf_float+0x168>
 8009a68:	3301      	adds	r3, #1
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d09c      	beq.n	80099ae <_printf_float+0xaa>
 8009a74:	232d      	movs	r3, #45	; 0x2d
 8009a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7a:	e798      	b.n	80099ae <_printf_float+0xaa>
 8009a7c:	9a06      	ldr	r2, [sp, #24]
 8009a7e:	2a47      	cmp	r2, #71	; 0x47
 8009a80:	d1be      	bne.n	8009a00 <_printf_float+0xfc>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1bc      	bne.n	8009a00 <_printf_float+0xfc>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7b9      	b.n	80099fe <_printf_float+0xfa>
 8009a8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a8e:	d118      	bne.n	8009ac2 <_printf_float+0x1be>
 8009a90:	2900      	cmp	r1, #0
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	dd0b      	ble.n	8009aae <_printf_float+0x1aa>
 8009a96:	6121      	str	r1, [r4, #16]
 8009a98:	b913      	cbnz	r3, 8009aa0 <_printf_float+0x19c>
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	07d0      	lsls	r0, r2, #31
 8009a9e:	d502      	bpl.n	8009aa6 <_printf_float+0x1a2>
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	440b      	add	r3, r1
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009aa8:	f04f 0900 	mov.w	r9, #0
 8009aac:	e7de      	b.n	8009a6c <_printf_float+0x168>
 8009aae:	b913      	cbnz	r3, 8009ab6 <_printf_float+0x1b2>
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	07d2      	lsls	r2, r2, #31
 8009ab4:	d501      	bpl.n	8009aba <_printf_float+0x1b6>
 8009ab6:	3302      	adds	r3, #2
 8009ab8:	e7f4      	b.n	8009aa4 <_printf_float+0x1a0>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e7f2      	b.n	8009aa4 <_printf_float+0x1a0>
 8009abe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac4:	4299      	cmp	r1, r3
 8009ac6:	db05      	blt.n	8009ad4 <_printf_float+0x1d0>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	6121      	str	r1, [r4, #16]
 8009acc:	07d8      	lsls	r0, r3, #31
 8009ace:	d5ea      	bpl.n	8009aa6 <_printf_float+0x1a2>
 8009ad0:	1c4b      	adds	r3, r1, #1
 8009ad2:	e7e7      	b.n	8009aa4 <_printf_float+0x1a0>
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	bfd4      	ite	le
 8009ad8:	f1c1 0202 	rsble	r2, r1, #2
 8009adc:	2201      	movgt	r2, #1
 8009ade:	4413      	add	r3, r2
 8009ae0:	e7e0      	b.n	8009aa4 <_printf_float+0x1a0>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	055a      	lsls	r2, r3, #21
 8009ae6:	d407      	bmi.n	8009af8 <_printf_float+0x1f4>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	4642      	mov	r2, r8
 8009aec:	4631      	mov	r1, r6
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	d12c      	bne.n	8009b50 <_printf_float+0x24c>
 8009af6:	e764      	b.n	80099c2 <_printf_float+0xbe>
 8009af8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009afc:	f240 80e0 	bls.w	8009cc0 <_printf_float+0x3bc>
 8009b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b04:	2200      	movs	r2, #0
 8009b06:	2300      	movs	r3, #0
 8009b08:	f7f6 ffe6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d034      	beq.n	8009b7a <_printf_float+0x276>
 8009b10:	4a37      	ldr	r2, [pc, #220]	; (8009bf0 <_printf_float+0x2ec>)
 8009b12:	2301      	movs	r3, #1
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f af51 	beq.w	80099c2 <_printf_float+0xbe>
 8009b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b24:	429a      	cmp	r2, r3
 8009b26:	db02      	blt.n	8009b2e <_printf_float+0x22a>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	07d8      	lsls	r0, r3, #31
 8009b2c:	d510      	bpl.n	8009b50 <_printf_float+0x24c>
 8009b2e:	ee18 3a10 	vmov	r3, s16
 8009b32:	4652      	mov	r2, sl
 8009b34:	4631      	mov	r1, r6
 8009b36:	4628      	mov	r0, r5
 8009b38:	47b8      	blx	r7
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	f43f af41 	beq.w	80099c2 <_printf_float+0xbe>
 8009b40:	f04f 0800 	mov.w	r8, #0
 8009b44:	f104 091a 	add.w	r9, r4, #26
 8009b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	4543      	cmp	r3, r8
 8009b4e:	dc09      	bgt.n	8009b64 <_printf_float+0x260>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	079b      	lsls	r3, r3, #30
 8009b54:	f100 8107 	bmi.w	8009d66 <_printf_float+0x462>
 8009b58:	68e0      	ldr	r0, [r4, #12]
 8009b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b5c:	4298      	cmp	r0, r3
 8009b5e:	bfb8      	it	lt
 8009b60:	4618      	movlt	r0, r3
 8009b62:	e730      	b.n	80099c6 <_printf_float+0xc2>
 8009b64:	2301      	movs	r3, #1
 8009b66:	464a      	mov	r2, r9
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f af27 	beq.w	80099c2 <_printf_float+0xbe>
 8009b74:	f108 0801 	add.w	r8, r8, #1
 8009b78:	e7e6      	b.n	8009b48 <_printf_float+0x244>
 8009b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dc39      	bgt.n	8009bf4 <_printf_float+0x2f0>
 8009b80:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <_printf_float+0x2ec>)
 8009b82:	2301      	movs	r3, #1
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f af19 	beq.w	80099c2 <_printf_float+0xbe>
 8009b90:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b94:	4313      	orrs	r3, r2
 8009b96:	d102      	bne.n	8009b9e <_printf_float+0x29a>
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	07d9      	lsls	r1, r3, #31
 8009b9c:	d5d8      	bpl.n	8009b50 <_printf_float+0x24c>
 8009b9e:	ee18 3a10 	vmov	r3, s16
 8009ba2:	4652      	mov	r2, sl
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	47b8      	blx	r7
 8009baa:	3001      	adds	r0, #1
 8009bac:	f43f af09 	beq.w	80099c2 <_printf_float+0xbe>
 8009bb0:	f04f 0900 	mov.w	r9, #0
 8009bb4:	f104 0a1a 	add.w	sl, r4, #26
 8009bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bba:	425b      	negs	r3, r3
 8009bbc:	454b      	cmp	r3, r9
 8009bbe:	dc01      	bgt.n	8009bc4 <_printf_float+0x2c0>
 8009bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc2:	e792      	b.n	8009aea <_printf_float+0x1e6>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	4652      	mov	r2, sl
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f aef7 	beq.w	80099c2 <_printf_float+0xbe>
 8009bd4:	f109 0901 	add.w	r9, r9, #1
 8009bd8:	e7ee      	b.n	8009bb8 <_printf_float+0x2b4>
 8009bda:	bf00      	nop
 8009bdc:	7fefffff 	.word	0x7fefffff
 8009be0:	0800c1b0 	.word	0x0800c1b0
 8009be4:	0800c1b4 	.word	0x0800c1b4
 8009be8:	0800c1b8 	.word	0x0800c1b8
 8009bec:	0800c1bc 	.word	0x0800c1bc
 8009bf0:	0800c1c0 	.word	0x0800c1c0
 8009bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	bfa8      	it	ge
 8009bfc:	461a      	movge	r2, r3
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	4691      	mov	r9, r2
 8009c02:	dc37      	bgt.n	8009c74 <_printf_float+0x370>
 8009c04:	f04f 0b00 	mov.w	fp, #0
 8009c08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c0c:	f104 021a 	add.w	r2, r4, #26
 8009c10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	eba3 0309 	sub.w	r3, r3, r9
 8009c18:	455b      	cmp	r3, fp
 8009c1a:	dc33      	bgt.n	8009c84 <_printf_float+0x380>
 8009c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c20:	429a      	cmp	r2, r3
 8009c22:	db3b      	blt.n	8009c9c <_printf_float+0x398>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	07da      	lsls	r2, r3, #31
 8009c28:	d438      	bmi.n	8009c9c <_printf_float+0x398>
 8009c2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c2e:	eba2 0903 	sub.w	r9, r2, r3
 8009c32:	9b05      	ldr	r3, [sp, #20]
 8009c34:	1ad2      	subs	r2, r2, r3
 8009c36:	4591      	cmp	r9, r2
 8009c38:	bfa8      	it	ge
 8009c3a:	4691      	movge	r9, r2
 8009c3c:	f1b9 0f00 	cmp.w	r9, #0
 8009c40:	dc35      	bgt.n	8009cae <_printf_float+0x3aa>
 8009c42:	f04f 0800 	mov.w	r8, #0
 8009c46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c4a:	f104 0a1a 	add.w	sl, r4, #26
 8009c4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c52:	1a9b      	subs	r3, r3, r2
 8009c54:	eba3 0309 	sub.w	r3, r3, r9
 8009c58:	4543      	cmp	r3, r8
 8009c5a:	f77f af79 	ble.w	8009b50 <_printf_float+0x24c>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4652      	mov	r2, sl
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f aeaa 	beq.w	80099c2 <_printf_float+0xbe>
 8009c6e:	f108 0801 	add.w	r8, r8, #1
 8009c72:	e7ec      	b.n	8009c4e <_printf_float+0x34a>
 8009c74:	4613      	mov	r3, r2
 8009c76:	4631      	mov	r1, r6
 8009c78:	4642      	mov	r2, r8
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d1c0      	bne.n	8009c04 <_printf_float+0x300>
 8009c82:	e69e      	b.n	80099c2 <_printf_float+0xbe>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4631      	mov	r1, r6
 8009c88:	4628      	mov	r0, r5
 8009c8a:	9205      	str	r2, [sp, #20]
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f43f ae97 	beq.w	80099c2 <_printf_float+0xbe>
 8009c94:	9a05      	ldr	r2, [sp, #20]
 8009c96:	f10b 0b01 	add.w	fp, fp, #1
 8009c9a:	e7b9      	b.n	8009c10 <_printf_float+0x30c>
 8009c9c:	ee18 3a10 	vmov	r3, s16
 8009ca0:	4652      	mov	r2, sl
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	47b8      	blx	r7
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d1be      	bne.n	8009c2a <_printf_float+0x326>
 8009cac:	e689      	b.n	80099c2 <_printf_float+0xbe>
 8009cae:	9a05      	ldr	r2, [sp, #20]
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	4442      	add	r2, r8
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	d1c1      	bne.n	8009c42 <_printf_float+0x33e>
 8009cbe:	e680      	b.n	80099c2 <_printf_float+0xbe>
 8009cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc2:	2a01      	cmp	r2, #1
 8009cc4:	dc01      	bgt.n	8009cca <_printf_float+0x3c6>
 8009cc6:	07db      	lsls	r3, r3, #31
 8009cc8:	d53a      	bpl.n	8009d40 <_printf_float+0x43c>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4642      	mov	r2, r8
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f ae74 	beq.w	80099c2 <_printf_float+0xbe>
 8009cda:	ee18 3a10 	vmov	r3, s16
 8009cde:	4652      	mov	r2, sl
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	f43f ae6b 	beq.w	80099c2 <_printf_float+0xbe>
 8009cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009cf8:	f7f6 feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cfc:	b9d8      	cbnz	r0, 8009d36 <_printf_float+0x432>
 8009cfe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d02:	f108 0201 	add.w	r2, r8, #1
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	d10e      	bne.n	8009d2e <_printf_float+0x42a>
 8009d10:	e657      	b.n	80099c2 <_printf_float+0xbe>
 8009d12:	2301      	movs	r3, #1
 8009d14:	4652      	mov	r2, sl
 8009d16:	4631      	mov	r1, r6
 8009d18:	4628      	mov	r0, r5
 8009d1a:	47b8      	blx	r7
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	f43f ae50 	beq.w	80099c2 <_printf_float+0xbe>
 8009d22:	f108 0801 	add.w	r8, r8, #1
 8009d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	4543      	cmp	r3, r8
 8009d2c:	dcf1      	bgt.n	8009d12 <_printf_float+0x40e>
 8009d2e:	464b      	mov	r3, r9
 8009d30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d34:	e6da      	b.n	8009aec <_printf_float+0x1e8>
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	f104 0a1a 	add.w	sl, r4, #26
 8009d3e:	e7f2      	b.n	8009d26 <_printf_float+0x422>
 8009d40:	2301      	movs	r3, #1
 8009d42:	4642      	mov	r2, r8
 8009d44:	e7df      	b.n	8009d06 <_printf_float+0x402>
 8009d46:	2301      	movs	r3, #1
 8009d48:	464a      	mov	r2, r9
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f ae36 	beq.w	80099c2 <_printf_float+0xbe>
 8009d56:	f108 0801 	add.w	r8, r8, #1
 8009d5a:	68e3      	ldr	r3, [r4, #12]
 8009d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d5e:	1a5b      	subs	r3, r3, r1
 8009d60:	4543      	cmp	r3, r8
 8009d62:	dcf0      	bgt.n	8009d46 <_printf_float+0x442>
 8009d64:	e6f8      	b.n	8009b58 <_printf_float+0x254>
 8009d66:	f04f 0800 	mov.w	r8, #0
 8009d6a:	f104 0919 	add.w	r9, r4, #25
 8009d6e:	e7f4      	b.n	8009d5a <_printf_float+0x456>

08009d70 <_printf_common>:
 8009d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d74:	4616      	mov	r6, r2
 8009d76:	4699      	mov	r9, r3
 8009d78:	688a      	ldr	r2, [r1, #8]
 8009d7a:	690b      	ldr	r3, [r1, #16]
 8009d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d80:	4293      	cmp	r3, r2
 8009d82:	bfb8      	it	lt
 8009d84:	4613      	movlt	r3, r2
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	b10a      	cbz	r2, 8009d96 <_printf_common+0x26>
 8009d92:	3301      	adds	r3, #1
 8009d94:	6033      	str	r3, [r6, #0]
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	0699      	lsls	r1, r3, #26
 8009d9a:	bf42      	ittt	mi
 8009d9c:	6833      	ldrmi	r3, [r6, #0]
 8009d9e:	3302      	addmi	r3, #2
 8009da0:	6033      	strmi	r3, [r6, #0]
 8009da2:	6825      	ldr	r5, [r4, #0]
 8009da4:	f015 0506 	ands.w	r5, r5, #6
 8009da8:	d106      	bne.n	8009db8 <_printf_common+0x48>
 8009daa:	f104 0a19 	add.w	sl, r4, #25
 8009dae:	68e3      	ldr	r3, [r4, #12]
 8009db0:	6832      	ldr	r2, [r6, #0]
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	dc26      	bgt.n	8009e06 <_printf_common+0x96>
 8009db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dbc:	1e13      	subs	r3, r2, #0
 8009dbe:	6822      	ldr	r2, [r4, #0]
 8009dc0:	bf18      	it	ne
 8009dc2:	2301      	movne	r3, #1
 8009dc4:	0692      	lsls	r2, r2, #26
 8009dc6:	d42b      	bmi.n	8009e20 <_printf_common+0xb0>
 8009dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dcc:	4649      	mov	r1, r9
 8009dce:	4638      	mov	r0, r7
 8009dd0:	47c0      	blx	r8
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d01e      	beq.n	8009e14 <_printf_common+0xa4>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	6922      	ldr	r2, [r4, #16]
 8009dda:	f003 0306 	and.w	r3, r3, #6
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	bf02      	ittt	eq
 8009de2:	68e5      	ldreq	r5, [r4, #12]
 8009de4:	6833      	ldreq	r3, [r6, #0]
 8009de6:	1aed      	subeq	r5, r5, r3
 8009de8:	68a3      	ldr	r3, [r4, #8]
 8009dea:	bf0c      	ite	eq
 8009dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009df0:	2500      	movne	r5, #0
 8009df2:	4293      	cmp	r3, r2
 8009df4:	bfc4      	itt	gt
 8009df6:	1a9b      	subgt	r3, r3, r2
 8009df8:	18ed      	addgt	r5, r5, r3
 8009dfa:	2600      	movs	r6, #0
 8009dfc:	341a      	adds	r4, #26
 8009dfe:	42b5      	cmp	r5, r6
 8009e00:	d11a      	bne.n	8009e38 <_printf_common+0xc8>
 8009e02:	2000      	movs	r0, #0
 8009e04:	e008      	b.n	8009e18 <_printf_common+0xa8>
 8009e06:	2301      	movs	r3, #1
 8009e08:	4652      	mov	r2, sl
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	47c0      	blx	r8
 8009e10:	3001      	adds	r0, #1
 8009e12:	d103      	bne.n	8009e1c <_printf_common+0xac>
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1c:	3501      	adds	r5, #1
 8009e1e:	e7c6      	b.n	8009dae <_printf_common+0x3e>
 8009e20:	18e1      	adds	r1, r4, r3
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	2030      	movs	r0, #48	; 0x30
 8009e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e2a:	4422      	add	r2, r4
 8009e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e34:	3302      	adds	r3, #2
 8009e36:	e7c7      	b.n	8009dc8 <_printf_common+0x58>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	4638      	mov	r0, r7
 8009e40:	47c0      	blx	r8
 8009e42:	3001      	adds	r0, #1
 8009e44:	d0e6      	beq.n	8009e14 <_printf_common+0xa4>
 8009e46:	3601      	adds	r6, #1
 8009e48:	e7d9      	b.n	8009dfe <_printf_common+0x8e>
	...

08009e4c <_printf_i>:
 8009e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	7e0f      	ldrb	r7, [r1, #24]
 8009e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e54:	2f78      	cmp	r7, #120	; 0x78
 8009e56:	4691      	mov	r9, r2
 8009e58:	4680      	mov	r8, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	469a      	mov	sl, r3
 8009e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e62:	d807      	bhi.n	8009e74 <_printf_i+0x28>
 8009e64:	2f62      	cmp	r7, #98	; 0x62
 8009e66:	d80a      	bhi.n	8009e7e <_printf_i+0x32>
 8009e68:	2f00      	cmp	r7, #0
 8009e6a:	f000 80d4 	beq.w	800a016 <_printf_i+0x1ca>
 8009e6e:	2f58      	cmp	r7, #88	; 0x58
 8009e70:	f000 80c0 	beq.w	8009ff4 <_printf_i+0x1a8>
 8009e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e7c:	e03a      	b.n	8009ef4 <_printf_i+0xa8>
 8009e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e82:	2b15      	cmp	r3, #21
 8009e84:	d8f6      	bhi.n	8009e74 <_printf_i+0x28>
 8009e86:	a101      	add	r1, pc, #4	; (adr r1, 8009e8c <_printf_i+0x40>)
 8009e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e8c:	08009ee5 	.word	0x08009ee5
 8009e90:	08009ef9 	.word	0x08009ef9
 8009e94:	08009e75 	.word	0x08009e75
 8009e98:	08009e75 	.word	0x08009e75
 8009e9c:	08009e75 	.word	0x08009e75
 8009ea0:	08009e75 	.word	0x08009e75
 8009ea4:	08009ef9 	.word	0x08009ef9
 8009ea8:	08009e75 	.word	0x08009e75
 8009eac:	08009e75 	.word	0x08009e75
 8009eb0:	08009e75 	.word	0x08009e75
 8009eb4:	08009e75 	.word	0x08009e75
 8009eb8:	08009ffd 	.word	0x08009ffd
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009fb7 	.word	0x08009fb7
 8009ec4:	08009e75 	.word	0x08009e75
 8009ec8:	08009e75 	.word	0x08009e75
 8009ecc:	0800a01f 	.word	0x0800a01f
 8009ed0:	08009e75 	.word	0x08009e75
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009e75 	.word	0x08009e75
 8009edc:	08009e75 	.word	0x08009e75
 8009ee0:	08009fbf 	.word	0x08009fbf
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	602a      	str	r2, [r5, #0]
 8009eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e09f      	b.n	800a038 <_printf_i+0x1ec>
 8009ef8:	6820      	ldr	r0, [r4, #0]
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	0607      	lsls	r7, r0, #24
 8009efe:	f103 0104 	add.w	r1, r3, #4
 8009f02:	6029      	str	r1, [r5, #0]
 8009f04:	d501      	bpl.n	8009f0a <_printf_i+0xbe>
 8009f06:	681e      	ldr	r6, [r3, #0]
 8009f08:	e003      	b.n	8009f12 <_printf_i+0xc6>
 8009f0a:	0646      	lsls	r6, r0, #25
 8009f0c:	d5fb      	bpl.n	8009f06 <_printf_i+0xba>
 8009f0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f12:	2e00      	cmp	r6, #0
 8009f14:	da03      	bge.n	8009f1e <_printf_i+0xd2>
 8009f16:	232d      	movs	r3, #45	; 0x2d
 8009f18:	4276      	negs	r6, r6
 8009f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f1e:	485a      	ldr	r0, [pc, #360]	; (800a088 <_printf_i+0x23c>)
 8009f20:	230a      	movs	r3, #10
 8009f22:	e012      	b.n	8009f4a <_printf_i+0xfe>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	1d19      	adds	r1, r3, #4
 8009f2a:	6029      	str	r1, [r5, #0]
 8009f2c:	0605      	lsls	r5, r0, #24
 8009f2e:	d501      	bpl.n	8009f34 <_printf_i+0xe8>
 8009f30:	681e      	ldr	r6, [r3, #0]
 8009f32:	e002      	b.n	8009f3a <_printf_i+0xee>
 8009f34:	0641      	lsls	r1, r0, #25
 8009f36:	d5fb      	bpl.n	8009f30 <_printf_i+0xe4>
 8009f38:	881e      	ldrh	r6, [r3, #0]
 8009f3a:	4853      	ldr	r0, [pc, #332]	; (800a088 <_printf_i+0x23c>)
 8009f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f3e:	bf0c      	ite	eq
 8009f40:	2308      	moveq	r3, #8
 8009f42:	230a      	movne	r3, #10
 8009f44:	2100      	movs	r1, #0
 8009f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f4a:	6865      	ldr	r5, [r4, #4]
 8009f4c:	60a5      	str	r5, [r4, #8]
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	bfa2      	ittt	ge
 8009f52:	6821      	ldrge	r1, [r4, #0]
 8009f54:	f021 0104 	bicge.w	r1, r1, #4
 8009f58:	6021      	strge	r1, [r4, #0]
 8009f5a:	b90e      	cbnz	r6, 8009f60 <_printf_i+0x114>
 8009f5c:	2d00      	cmp	r5, #0
 8009f5e:	d04b      	beq.n	8009ff8 <_printf_i+0x1ac>
 8009f60:	4615      	mov	r5, r2
 8009f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f66:	fb03 6711 	mls	r7, r3, r1, r6
 8009f6a:	5dc7      	ldrb	r7, [r0, r7]
 8009f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f70:	4637      	mov	r7, r6
 8009f72:	42bb      	cmp	r3, r7
 8009f74:	460e      	mov	r6, r1
 8009f76:	d9f4      	bls.n	8009f62 <_printf_i+0x116>
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d10b      	bne.n	8009f94 <_printf_i+0x148>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	07de      	lsls	r6, r3, #31
 8009f80:	d508      	bpl.n	8009f94 <_printf_i+0x148>
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	6861      	ldr	r1, [r4, #4]
 8009f86:	4299      	cmp	r1, r3
 8009f88:	bfde      	ittt	le
 8009f8a:	2330      	movle	r3, #48	; 0x30
 8009f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f94:	1b52      	subs	r2, r2, r5
 8009f96:	6122      	str	r2, [r4, #16]
 8009f98:	f8cd a000 	str.w	sl, [sp]
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	aa03      	add	r2, sp, #12
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	f7ff fee4 	bl	8009d70 <_printf_common>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d14a      	bne.n	800a042 <_printf_i+0x1f6>
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	b004      	add	sp, #16
 8009fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	f043 0320 	orr.w	r3, r3, #32
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	4833      	ldr	r0, [pc, #204]	; (800a08c <_printf_i+0x240>)
 8009fc0:	2778      	movs	r7, #120	; 0x78
 8009fc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	6829      	ldr	r1, [r5, #0]
 8009fca:	061f      	lsls	r7, r3, #24
 8009fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fd0:	d402      	bmi.n	8009fd8 <_printf_i+0x18c>
 8009fd2:	065f      	lsls	r7, r3, #25
 8009fd4:	bf48      	it	mi
 8009fd6:	b2b6      	uxthmi	r6, r6
 8009fd8:	07df      	lsls	r7, r3, #31
 8009fda:	bf48      	it	mi
 8009fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8009fe0:	6029      	str	r1, [r5, #0]
 8009fe2:	bf48      	it	mi
 8009fe4:	6023      	strmi	r3, [r4, #0]
 8009fe6:	b91e      	cbnz	r6, 8009ff0 <_printf_i+0x1a4>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	f023 0320 	bic.w	r3, r3, #32
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	e7a7      	b.n	8009f44 <_printf_i+0xf8>
 8009ff4:	4824      	ldr	r0, [pc, #144]	; (800a088 <_printf_i+0x23c>)
 8009ff6:	e7e4      	b.n	8009fc2 <_printf_i+0x176>
 8009ff8:	4615      	mov	r5, r2
 8009ffa:	e7bd      	b.n	8009f78 <_printf_i+0x12c>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	6826      	ldr	r6, [r4, #0]
 800a000:	6961      	ldr	r1, [r4, #20]
 800a002:	1d18      	adds	r0, r3, #4
 800a004:	6028      	str	r0, [r5, #0]
 800a006:	0635      	lsls	r5, r6, #24
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	d501      	bpl.n	800a010 <_printf_i+0x1c4>
 800a00c:	6019      	str	r1, [r3, #0]
 800a00e:	e002      	b.n	800a016 <_printf_i+0x1ca>
 800a010:	0670      	lsls	r0, r6, #25
 800a012:	d5fb      	bpl.n	800a00c <_printf_i+0x1c0>
 800a014:	8019      	strh	r1, [r3, #0]
 800a016:	2300      	movs	r3, #0
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	4615      	mov	r5, r2
 800a01c:	e7bc      	b.n	8009f98 <_printf_i+0x14c>
 800a01e:	682b      	ldr	r3, [r5, #0]
 800a020:	1d1a      	adds	r2, r3, #4
 800a022:	602a      	str	r2, [r5, #0]
 800a024:	681d      	ldr	r5, [r3, #0]
 800a026:	6862      	ldr	r2, [r4, #4]
 800a028:	2100      	movs	r1, #0
 800a02a:	4628      	mov	r0, r5
 800a02c:	f7f6 f8d8 	bl	80001e0 <memchr>
 800a030:	b108      	cbz	r0, 800a036 <_printf_i+0x1ea>
 800a032:	1b40      	subs	r0, r0, r5
 800a034:	6060      	str	r0, [r4, #4]
 800a036:	6863      	ldr	r3, [r4, #4]
 800a038:	6123      	str	r3, [r4, #16]
 800a03a:	2300      	movs	r3, #0
 800a03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a040:	e7aa      	b.n	8009f98 <_printf_i+0x14c>
 800a042:	6923      	ldr	r3, [r4, #16]
 800a044:	462a      	mov	r2, r5
 800a046:	4649      	mov	r1, r9
 800a048:	4640      	mov	r0, r8
 800a04a:	47d0      	blx	sl
 800a04c:	3001      	adds	r0, #1
 800a04e:	d0ad      	beq.n	8009fac <_printf_i+0x160>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	079b      	lsls	r3, r3, #30
 800a054:	d413      	bmi.n	800a07e <_printf_i+0x232>
 800a056:	68e0      	ldr	r0, [r4, #12]
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	4298      	cmp	r0, r3
 800a05c:	bfb8      	it	lt
 800a05e:	4618      	movlt	r0, r3
 800a060:	e7a6      	b.n	8009fb0 <_printf_i+0x164>
 800a062:	2301      	movs	r3, #1
 800a064:	4632      	mov	r2, r6
 800a066:	4649      	mov	r1, r9
 800a068:	4640      	mov	r0, r8
 800a06a:	47d0      	blx	sl
 800a06c:	3001      	adds	r0, #1
 800a06e:	d09d      	beq.n	8009fac <_printf_i+0x160>
 800a070:	3501      	adds	r5, #1
 800a072:	68e3      	ldr	r3, [r4, #12]
 800a074:	9903      	ldr	r1, [sp, #12]
 800a076:	1a5b      	subs	r3, r3, r1
 800a078:	42ab      	cmp	r3, r5
 800a07a:	dcf2      	bgt.n	800a062 <_printf_i+0x216>
 800a07c:	e7eb      	b.n	800a056 <_printf_i+0x20a>
 800a07e:	2500      	movs	r5, #0
 800a080:	f104 0619 	add.w	r6, r4, #25
 800a084:	e7f5      	b.n	800a072 <_printf_i+0x226>
 800a086:	bf00      	nop
 800a088:	0800c1c2 	.word	0x0800c1c2
 800a08c:	0800c1d3 	.word	0x0800c1d3

0800a090 <std>:
 800a090:	2300      	movs	r3, #0
 800a092:	b510      	push	{r4, lr}
 800a094:	4604      	mov	r4, r0
 800a096:	e9c0 3300 	strd	r3, r3, [r0]
 800a09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a09e:	6083      	str	r3, [r0, #8]
 800a0a0:	8181      	strh	r1, [r0, #12]
 800a0a2:	6643      	str	r3, [r0, #100]	; 0x64
 800a0a4:	81c2      	strh	r2, [r0, #14]
 800a0a6:	6183      	str	r3, [r0, #24]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	2208      	movs	r2, #8
 800a0ac:	305c      	adds	r0, #92	; 0x5c
 800a0ae:	f000 f9f7 	bl	800a4a0 <memset>
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <std+0x58>)
 800a0b4:	6263      	str	r3, [r4, #36]	; 0x24
 800a0b6:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <std+0x5c>)
 800a0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0ba:	4b0d      	ldr	r3, [pc, #52]	; (800a0f0 <std+0x60>)
 800a0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0be:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <std+0x64>)
 800a0c0:	6323      	str	r3, [r4, #48]	; 0x30
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <std+0x68>)
 800a0c4:	6224      	str	r4, [r4, #32]
 800a0c6:	429c      	cmp	r4, r3
 800a0c8:	d006      	beq.n	800a0d8 <std+0x48>
 800a0ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a0ce:	4294      	cmp	r4, r2
 800a0d0:	d002      	beq.n	800a0d8 <std+0x48>
 800a0d2:	33d0      	adds	r3, #208	; 0xd0
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	d105      	bne.n	800a0e4 <std+0x54>
 800a0d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0e0:	f000 ba6a 	b.w	800a5b8 <__retarget_lock_init_recursive>
 800a0e4:	bd10      	pop	{r4, pc}
 800a0e6:	bf00      	nop
 800a0e8:	0800a2f1 	.word	0x0800a2f1
 800a0ec:	0800a313 	.word	0x0800a313
 800a0f0:	0800a34b 	.word	0x0800a34b
 800a0f4:	0800a36f 	.word	0x0800a36f
 800a0f8:	20000b18 	.word	0x20000b18

0800a0fc <stdio_exit_handler>:
 800a0fc:	4a02      	ldr	r2, [pc, #8]	; (800a108 <stdio_exit_handler+0xc>)
 800a0fe:	4903      	ldr	r1, [pc, #12]	; (800a10c <stdio_exit_handler+0x10>)
 800a100:	4803      	ldr	r0, [pc, #12]	; (800a110 <stdio_exit_handler+0x14>)
 800a102:	f000 b869 	b.w	800a1d8 <_fwalk_sglue>
 800a106:	bf00      	nop
 800a108:	2000002c 	.word	0x2000002c
 800a10c:	0800bdd9 	.word	0x0800bdd9
 800a110:	20000038 	.word	0x20000038

0800a114 <cleanup_stdio>:
 800a114:	6841      	ldr	r1, [r0, #4]
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <cleanup_stdio+0x34>)
 800a118:	4299      	cmp	r1, r3
 800a11a:	b510      	push	{r4, lr}
 800a11c:	4604      	mov	r4, r0
 800a11e:	d001      	beq.n	800a124 <cleanup_stdio+0x10>
 800a120:	f001 fe5a 	bl	800bdd8 <_fflush_r>
 800a124:	68a1      	ldr	r1, [r4, #8]
 800a126:	4b09      	ldr	r3, [pc, #36]	; (800a14c <cleanup_stdio+0x38>)
 800a128:	4299      	cmp	r1, r3
 800a12a:	d002      	beq.n	800a132 <cleanup_stdio+0x1e>
 800a12c:	4620      	mov	r0, r4
 800a12e:	f001 fe53 	bl	800bdd8 <_fflush_r>
 800a132:	68e1      	ldr	r1, [r4, #12]
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <cleanup_stdio+0x3c>)
 800a136:	4299      	cmp	r1, r3
 800a138:	d004      	beq.n	800a144 <cleanup_stdio+0x30>
 800a13a:	4620      	mov	r0, r4
 800a13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a140:	f001 be4a 	b.w	800bdd8 <_fflush_r>
 800a144:	bd10      	pop	{r4, pc}
 800a146:	bf00      	nop
 800a148:	20000b18 	.word	0x20000b18
 800a14c:	20000b80 	.word	0x20000b80
 800a150:	20000be8 	.word	0x20000be8

0800a154 <global_stdio_init.part.0>:
 800a154:	b510      	push	{r4, lr}
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <global_stdio_init.part.0+0x30>)
 800a158:	4c0b      	ldr	r4, [pc, #44]	; (800a188 <global_stdio_init.part.0+0x34>)
 800a15a:	4a0c      	ldr	r2, [pc, #48]	; (800a18c <global_stdio_init.part.0+0x38>)
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	4620      	mov	r0, r4
 800a160:	2200      	movs	r2, #0
 800a162:	2104      	movs	r1, #4
 800a164:	f7ff ff94 	bl	800a090 <std>
 800a168:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a16c:	2201      	movs	r2, #1
 800a16e:	2109      	movs	r1, #9
 800a170:	f7ff ff8e 	bl	800a090 <std>
 800a174:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a178:	2202      	movs	r2, #2
 800a17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a17e:	2112      	movs	r1, #18
 800a180:	f7ff bf86 	b.w	800a090 <std>
 800a184:	20000c50 	.word	0x20000c50
 800a188:	20000b18 	.word	0x20000b18
 800a18c:	0800a0fd 	.word	0x0800a0fd

0800a190 <__sfp_lock_acquire>:
 800a190:	4801      	ldr	r0, [pc, #4]	; (800a198 <__sfp_lock_acquire+0x8>)
 800a192:	f000 ba12 	b.w	800a5ba <__retarget_lock_acquire_recursive>
 800a196:	bf00      	nop
 800a198:	20000c59 	.word	0x20000c59

0800a19c <__sfp_lock_release>:
 800a19c:	4801      	ldr	r0, [pc, #4]	; (800a1a4 <__sfp_lock_release+0x8>)
 800a19e:	f000 ba0d 	b.w	800a5bc <__retarget_lock_release_recursive>
 800a1a2:	bf00      	nop
 800a1a4:	20000c59 	.word	0x20000c59

0800a1a8 <__sinit>:
 800a1a8:	b510      	push	{r4, lr}
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	f7ff fff0 	bl	800a190 <__sfp_lock_acquire>
 800a1b0:	6a23      	ldr	r3, [r4, #32]
 800a1b2:	b11b      	cbz	r3, 800a1bc <__sinit+0x14>
 800a1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b8:	f7ff bff0 	b.w	800a19c <__sfp_lock_release>
 800a1bc:	4b04      	ldr	r3, [pc, #16]	; (800a1d0 <__sinit+0x28>)
 800a1be:	6223      	str	r3, [r4, #32]
 800a1c0:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <__sinit+0x2c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1f5      	bne.n	800a1b4 <__sinit+0xc>
 800a1c8:	f7ff ffc4 	bl	800a154 <global_stdio_init.part.0>
 800a1cc:	e7f2      	b.n	800a1b4 <__sinit+0xc>
 800a1ce:	bf00      	nop
 800a1d0:	0800a115 	.word	0x0800a115
 800a1d4:	20000c50 	.word	0x20000c50

0800a1d8 <_fwalk_sglue>:
 800a1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1dc:	4607      	mov	r7, r0
 800a1de:	4688      	mov	r8, r1
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	2600      	movs	r6, #0
 800a1e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1e8:	f1b9 0901 	subs.w	r9, r9, #1
 800a1ec:	d505      	bpl.n	800a1fa <_fwalk_sglue+0x22>
 800a1ee:	6824      	ldr	r4, [r4, #0]
 800a1f0:	2c00      	cmp	r4, #0
 800a1f2:	d1f7      	bne.n	800a1e4 <_fwalk_sglue+0xc>
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1fa:	89ab      	ldrh	r3, [r5, #12]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d907      	bls.n	800a210 <_fwalk_sglue+0x38>
 800a200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a204:	3301      	adds	r3, #1
 800a206:	d003      	beq.n	800a210 <_fwalk_sglue+0x38>
 800a208:	4629      	mov	r1, r5
 800a20a:	4638      	mov	r0, r7
 800a20c:	47c0      	blx	r8
 800a20e:	4306      	orrs	r6, r0
 800a210:	3568      	adds	r5, #104	; 0x68
 800a212:	e7e9      	b.n	800a1e8 <_fwalk_sglue+0x10>

0800a214 <iprintf>:
 800a214:	b40f      	push	{r0, r1, r2, r3}
 800a216:	b507      	push	{r0, r1, r2, lr}
 800a218:	4906      	ldr	r1, [pc, #24]	; (800a234 <iprintf+0x20>)
 800a21a:	ab04      	add	r3, sp, #16
 800a21c:	6808      	ldr	r0, [r1, #0]
 800a21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a222:	6881      	ldr	r1, [r0, #8]
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	f001 fc37 	bl	800ba98 <_vfiprintf_r>
 800a22a:	b003      	add	sp, #12
 800a22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a230:	b004      	add	sp, #16
 800a232:	4770      	bx	lr
 800a234:	20000084 	.word	0x20000084

0800a238 <_puts_r>:
 800a238:	6a03      	ldr	r3, [r0, #32]
 800a23a:	b570      	push	{r4, r5, r6, lr}
 800a23c:	6884      	ldr	r4, [r0, #8]
 800a23e:	4605      	mov	r5, r0
 800a240:	460e      	mov	r6, r1
 800a242:	b90b      	cbnz	r3, 800a248 <_puts_r+0x10>
 800a244:	f7ff ffb0 	bl	800a1a8 <__sinit>
 800a248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a24a:	07db      	lsls	r3, r3, #31
 800a24c:	d405      	bmi.n	800a25a <_puts_r+0x22>
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	0598      	lsls	r0, r3, #22
 800a252:	d402      	bmi.n	800a25a <_puts_r+0x22>
 800a254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a256:	f000 f9b0 	bl	800a5ba <__retarget_lock_acquire_recursive>
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	0719      	lsls	r1, r3, #28
 800a25e:	d513      	bpl.n	800a288 <_puts_r+0x50>
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	b18b      	cbz	r3, 800a288 <_puts_r+0x50>
 800a264:	3e01      	subs	r6, #1
 800a266:	68a3      	ldr	r3, [r4, #8]
 800a268:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a26c:	3b01      	subs	r3, #1
 800a26e:	60a3      	str	r3, [r4, #8]
 800a270:	b9e9      	cbnz	r1, 800a2ae <_puts_r+0x76>
 800a272:	2b00      	cmp	r3, #0
 800a274:	da2e      	bge.n	800a2d4 <_puts_r+0x9c>
 800a276:	4622      	mov	r2, r4
 800a278:	210a      	movs	r1, #10
 800a27a:	4628      	mov	r0, r5
 800a27c:	f000 f87b 	bl	800a376 <__swbuf_r>
 800a280:	3001      	adds	r0, #1
 800a282:	d007      	beq.n	800a294 <_puts_r+0x5c>
 800a284:	250a      	movs	r5, #10
 800a286:	e007      	b.n	800a298 <_puts_r+0x60>
 800a288:	4621      	mov	r1, r4
 800a28a:	4628      	mov	r0, r5
 800a28c:	f000 f8b0 	bl	800a3f0 <__swsetup_r>
 800a290:	2800      	cmp	r0, #0
 800a292:	d0e7      	beq.n	800a264 <_puts_r+0x2c>
 800a294:	f04f 35ff 	mov.w	r5, #4294967295
 800a298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a29a:	07da      	lsls	r2, r3, #31
 800a29c:	d405      	bmi.n	800a2aa <_puts_r+0x72>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	059b      	lsls	r3, r3, #22
 800a2a2:	d402      	bmi.n	800a2aa <_puts_r+0x72>
 800a2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2a6:	f000 f989 	bl	800a5bc <__retarget_lock_release_recursive>
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	da04      	bge.n	800a2bc <_puts_r+0x84>
 800a2b2:	69a2      	ldr	r2, [r4, #24]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	dc06      	bgt.n	800a2c6 <_puts_r+0x8e>
 800a2b8:	290a      	cmp	r1, #10
 800a2ba:	d004      	beq.n	800a2c6 <_puts_r+0x8e>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	6022      	str	r2, [r4, #0]
 800a2c2:	7019      	strb	r1, [r3, #0]
 800a2c4:	e7cf      	b.n	800a266 <_puts_r+0x2e>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f000 f854 	bl	800a376 <__swbuf_r>
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d1c9      	bne.n	800a266 <_puts_r+0x2e>
 800a2d2:	e7df      	b.n	800a294 <_puts_r+0x5c>
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	250a      	movs	r5, #10
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	6022      	str	r2, [r4, #0]
 800a2dc:	701d      	strb	r5, [r3, #0]
 800a2de:	e7db      	b.n	800a298 <_puts_r+0x60>

0800a2e0 <puts>:
 800a2e0:	4b02      	ldr	r3, [pc, #8]	; (800a2ec <puts+0xc>)
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	6818      	ldr	r0, [r3, #0]
 800a2e6:	f7ff bfa7 	b.w	800a238 <_puts_r>
 800a2ea:	bf00      	nop
 800a2ec:	20000084 	.word	0x20000084

0800a2f0 <__sread>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f8:	f000 f900 	bl	800a4fc <_read_r>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	bfab      	itete	ge
 800a300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a302:	89a3      	ldrhlt	r3, [r4, #12]
 800a304:	181b      	addge	r3, r3, r0
 800a306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a30a:	bfac      	ite	ge
 800a30c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a30e:	81a3      	strhlt	r3, [r4, #12]
 800a310:	bd10      	pop	{r4, pc}

0800a312 <__swrite>:
 800a312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a316:	461f      	mov	r7, r3
 800a318:	898b      	ldrh	r3, [r1, #12]
 800a31a:	05db      	lsls	r3, r3, #23
 800a31c:	4605      	mov	r5, r0
 800a31e:	460c      	mov	r4, r1
 800a320:	4616      	mov	r6, r2
 800a322:	d505      	bpl.n	800a330 <__swrite+0x1e>
 800a324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a328:	2302      	movs	r3, #2
 800a32a:	2200      	movs	r2, #0
 800a32c:	f000 f8d4 	bl	800a4d8 <_lseek_r>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a33a:	81a3      	strh	r3, [r4, #12]
 800a33c:	4632      	mov	r2, r6
 800a33e:	463b      	mov	r3, r7
 800a340:	4628      	mov	r0, r5
 800a342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a346:	f000 b8fb 	b.w	800a540 <_write_r>

0800a34a <__sseek>:
 800a34a:	b510      	push	{r4, lr}
 800a34c:	460c      	mov	r4, r1
 800a34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a352:	f000 f8c1 	bl	800a4d8 <_lseek_r>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	89a3      	ldrh	r3, [r4, #12]
 800a35a:	bf15      	itete	ne
 800a35c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a35e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a366:	81a3      	strheq	r3, [r4, #12]
 800a368:	bf18      	it	ne
 800a36a:	81a3      	strhne	r3, [r4, #12]
 800a36c:	bd10      	pop	{r4, pc}

0800a36e <__sclose>:
 800a36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a372:	f000 b8a1 	b.w	800a4b8 <_close_r>

0800a376 <__swbuf_r>:
 800a376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a378:	460e      	mov	r6, r1
 800a37a:	4614      	mov	r4, r2
 800a37c:	4605      	mov	r5, r0
 800a37e:	b118      	cbz	r0, 800a388 <__swbuf_r+0x12>
 800a380:	6a03      	ldr	r3, [r0, #32]
 800a382:	b90b      	cbnz	r3, 800a388 <__swbuf_r+0x12>
 800a384:	f7ff ff10 	bl	800a1a8 <__sinit>
 800a388:	69a3      	ldr	r3, [r4, #24]
 800a38a:	60a3      	str	r3, [r4, #8]
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	071a      	lsls	r2, r3, #28
 800a390:	d525      	bpl.n	800a3de <__swbuf_r+0x68>
 800a392:	6923      	ldr	r3, [r4, #16]
 800a394:	b31b      	cbz	r3, 800a3de <__swbuf_r+0x68>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	6922      	ldr	r2, [r4, #16]
 800a39a:	1a98      	subs	r0, r3, r2
 800a39c:	6963      	ldr	r3, [r4, #20]
 800a39e:	b2f6      	uxtb	r6, r6
 800a3a0:	4283      	cmp	r3, r0
 800a3a2:	4637      	mov	r7, r6
 800a3a4:	dc04      	bgt.n	800a3b0 <__swbuf_r+0x3a>
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f001 fd15 	bl	800bdd8 <_fflush_r>
 800a3ae:	b9e0      	cbnz	r0, 800a3ea <__swbuf_r+0x74>
 800a3b0:	68a3      	ldr	r3, [r4, #8]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	60a3      	str	r3, [r4, #8]
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	6022      	str	r2, [r4, #0]
 800a3bc:	701e      	strb	r6, [r3, #0]
 800a3be:	6962      	ldr	r2, [r4, #20]
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d004      	beq.n	800a3d0 <__swbuf_r+0x5a>
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	07db      	lsls	r3, r3, #31
 800a3ca:	d506      	bpl.n	800a3da <__swbuf_r+0x64>
 800a3cc:	2e0a      	cmp	r6, #10
 800a3ce:	d104      	bne.n	800a3da <__swbuf_r+0x64>
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f001 fd00 	bl	800bdd8 <_fflush_r>
 800a3d8:	b938      	cbnz	r0, 800a3ea <__swbuf_r+0x74>
 800a3da:	4638      	mov	r0, r7
 800a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f000 f805 	bl	800a3f0 <__swsetup_r>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d0d5      	beq.n	800a396 <__swbuf_r+0x20>
 800a3ea:	f04f 37ff 	mov.w	r7, #4294967295
 800a3ee:	e7f4      	b.n	800a3da <__swbuf_r+0x64>

0800a3f0 <__swsetup_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4b2a      	ldr	r3, [pc, #168]	; (800a49c <__swsetup_r+0xac>)
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	b118      	cbz	r0, 800a404 <__swsetup_r+0x14>
 800a3fc:	6a03      	ldr	r3, [r0, #32]
 800a3fe:	b90b      	cbnz	r3, 800a404 <__swsetup_r+0x14>
 800a400:	f7ff fed2 	bl	800a1a8 <__sinit>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a40a:	0718      	lsls	r0, r3, #28
 800a40c:	d422      	bmi.n	800a454 <__swsetup_r+0x64>
 800a40e:	06d9      	lsls	r1, r3, #27
 800a410:	d407      	bmi.n	800a422 <__swsetup_r+0x32>
 800a412:	2309      	movs	r3, #9
 800a414:	602b      	str	r3, [r5, #0]
 800a416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	e034      	b.n	800a48c <__swsetup_r+0x9c>
 800a422:	0758      	lsls	r0, r3, #29
 800a424:	d512      	bpl.n	800a44c <__swsetup_r+0x5c>
 800a426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a428:	b141      	cbz	r1, 800a43c <__swsetup_r+0x4c>
 800a42a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a42e:	4299      	cmp	r1, r3
 800a430:	d002      	beq.n	800a438 <__swsetup_r+0x48>
 800a432:	4628      	mov	r0, r5
 800a434:	f000 ff3e 	bl	800b2b4 <_free_r>
 800a438:	2300      	movs	r3, #0
 800a43a:	6363      	str	r3, [r4, #52]	; 0x34
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	2300      	movs	r3, #0
 800a446:	6063      	str	r3, [r4, #4]
 800a448:	6923      	ldr	r3, [r4, #16]
 800a44a:	6023      	str	r3, [r4, #0]
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f043 0308 	orr.w	r3, r3, #8
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	b94b      	cbnz	r3, 800a46c <__swsetup_r+0x7c>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a45e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a462:	d003      	beq.n	800a46c <__swsetup_r+0x7c>
 800a464:	4621      	mov	r1, r4
 800a466:	4628      	mov	r0, r5
 800a468:	f001 fd04 	bl	800be74 <__smakebuf_r>
 800a46c:	89a0      	ldrh	r0, [r4, #12]
 800a46e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a472:	f010 0301 	ands.w	r3, r0, #1
 800a476:	d00a      	beq.n	800a48e <__swsetup_r+0x9e>
 800a478:	2300      	movs	r3, #0
 800a47a:	60a3      	str	r3, [r4, #8]
 800a47c:	6963      	ldr	r3, [r4, #20]
 800a47e:	425b      	negs	r3, r3
 800a480:	61a3      	str	r3, [r4, #24]
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	b943      	cbnz	r3, 800a498 <__swsetup_r+0xa8>
 800a486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a48a:	d1c4      	bne.n	800a416 <__swsetup_r+0x26>
 800a48c:	bd38      	pop	{r3, r4, r5, pc}
 800a48e:	0781      	lsls	r1, r0, #30
 800a490:	bf58      	it	pl
 800a492:	6963      	ldrpl	r3, [r4, #20]
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	e7f4      	b.n	800a482 <__swsetup_r+0x92>
 800a498:	2000      	movs	r0, #0
 800a49a:	e7f7      	b.n	800a48c <__swsetup_r+0x9c>
 800a49c:	20000084 	.word	0x20000084

0800a4a0 <memset>:
 800a4a0:	4402      	add	r2, r0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d100      	bne.n	800a4aa <memset+0xa>
 800a4a8:	4770      	bx	lr
 800a4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ae:	e7f9      	b.n	800a4a4 <memset+0x4>

0800a4b0 <_localeconv_r>:
 800a4b0:	4800      	ldr	r0, [pc, #0]	; (800a4b4 <_localeconv_r+0x4>)
 800a4b2:	4770      	bx	lr
 800a4b4:	20000178 	.word	0x20000178

0800a4b8 <_close_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d06      	ldr	r5, [pc, #24]	; (800a4d4 <_close_r+0x1c>)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	f7f7 fa17 	bl	80018f6 <_close>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_close_r+0x1a>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_close_r+0x1a>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	20000c54 	.word	0x20000c54

0800a4d8 <_lseek_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d07      	ldr	r5, [pc, #28]	; (800a4f8 <_lseek_r+0x20>)
 800a4dc:	4604      	mov	r4, r0
 800a4de:	4608      	mov	r0, r1
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	602a      	str	r2, [r5, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f7f7 fa2c 	bl	8001944 <_lseek>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	d102      	bne.n	800a4f6 <_lseek_r+0x1e>
 800a4f0:	682b      	ldr	r3, [r5, #0]
 800a4f2:	b103      	cbz	r3, 800a4f6 <_lseek_r+0x1e>
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	20000c54 	.word	0x20000c54

0800a4fc <_read_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4d07      	ldr	r5, [pc, #28]	; (800a51c <_read_r+0x20>)
 800a500:	4604      	mov	r4, r0
 800a502:	4608      	mov	r0, r1
 800a504:	4611      	mov	r1, r2
 800a506:	2200      	movs	r2, #0
 800a508:	602a      	str	r2, [r5, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f7f7 f9d6 	bl	80018bc <_read>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d102      	bne.n	800a51a <_read_r+0x1e>
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	b103      	cbz	r3, 800a51a <_read_r+0x1e>
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	20000c54 	.word	0x20000c54

0800a520 <_sbrk_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d06      	ldr	r5, [pc, #24]	; (800a53c <_sbrk_r+0x1c>)
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	602b      	str	r3, [r5, #0]
 800a52c:	f7f7 fa18 	bl	8001960 <_sbrk>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_sbrk_r+0x1a>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	b103      	cbz	r3, 800a53a <_sbrk_r+0x1a>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	20000c54 	.word	0x20000c54

0800a540 <_write_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_write_r+0x20>)
 800a544:	4604      	mov	r4, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7f6 ff46 	bl	80013e0 <_write>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_write_r+0x1e>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_write_r+0x1e>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	20000c54 	.word	0x20000c54

0800a564 <__errno>:
 800a564:	4b01      	ldr	r3, [pc, #4]	; (800a56c <__errno+0x8>)
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	20000084 	.word	0x20000084

0800a570 <__libc_init_array>:
 800a570:	b570      	push	{r4, r5, r6, lr}
 800a572:	4d0d      	ldr	r5, [pc, #52]	; (800a5a8 <__libc_init_array+0x38>)
 800a574:	4c0d      	ldr	r4, [pc, #52]	; (800a5ac <__libc_init_array+0x3c>)
 800a576:	1b64      	subs	r4, r4, r5
 800a578:	10a4      	asrs	r4, r4, #2
 800a57a:	2600      	movs	r6, #0
 800a57c:	42a6      	cmp	r6, r4
 800a57e:	d109      	bne.n	800a594 <__libc_init_array+0x24>
 800a580:	4d0b      	ldr	r5, [pc, #44]	; (800a5b0 <__libc_init_array+0x40>)
 800a582:	4c0c      	ldr	r4, [pc, #48]	; (800a5b4 <__libc_init_array+0x44>)
 800a584:	f001 fd94 	bl	800c0b0 <_init>
 800a588:	1b64      	subs	r4, r4, r5
 800a58a:	10a4      	asrs	r4, r4, #2
 800a58c:	2600      	movs	r6, #0
 800a58e:	42a6      	cmp	r6, r4
 800a590:	d105      	bne.n	800a59e <__libc_init_array+0x2e>
 800a592:	bd70      	pop	{r4, r5, r6, pc}
 800a594:	f855 3b04 	ldr.w	r3, [r5], #4
 800a598:	4798      	blx	r3
 800a59a:	3601      	adds	r6, #1
 800a59c:	e7ee      	b.n	800a57c <__libc_init_array+0xc>
 800a59e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a2:	4798      	blx	r3
 800a5a4:	3601      	adds	r6, #1
 800a5a6:	e7f2      	b.n	800a58e <__libc_init_array+0x1e>
 800a5a8:	0800c52c 	.word	0x0800c52c
 800a5ac:	0800c52c 	.word	0x0800c52c
 800a5b0:	0800c52c 	.word	0x0800c52c
 800a5b4:	0800c530 	.word	0x0800c530

0800a5b8 <__retarget_lock_init_recursive>:
 800a5b8:	4770      	bx	lr

0800a5ba <__retarget_lock_acquire_recursive>:
 800a5ba:	4770      	bx	lr

0800a5bc <__retarget_lock_release_recursive>:
 800a5bc:	4770      	bx	lr

0800a5be <quorem>:
 800a5be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c2:	6903      	ldr	r3, [r0, #16]
 800a5c4:	690c      	ldr	r4, [r1, #16]
 800a5c6:	42a3      	cmp	r3, r4
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	db7e      	blt.n	800a6ca <quorem+0x10c>
 800a5cc:	3c01      	subs	r4, #1
 800a5ce:	f101 0814 	add.w	r8, r1, #20
 800a5d2:	f100 0514 	add.w	r5, r0, #20
 800a5d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5f4:	d331      	bcc.n	800a65a <quorem+0x9c>
 800a5f6:	f04f 0e00 	mov.w	lr, #0
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	46ac      	mov	ip, r5
 800a5fe:	46f2      	mov	sl, lr
 800a600:	f850 2b04 	ldr.w	r2, [r0], #4
 800a604:	b293      	uxth	r3, r2
 800a606:	fb06 e303 	mla	r3, r6, r3, lr
 800a60a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a60e:	0c1a      	lsrs	r2, r3, #16
 800a610:	b29b      	uxth	r3, r3
 800a612:	ebaa 0303 	sub.w	r3, sl, r3
 800a616:	f8dc a000 	ldr.w	sl, [ip]
 800a61a:	fa13 f38a 	uxtah	r3, r3, sl
 800a61e:	fb06 220e 	mla	r2, r6, lr, r2
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	9b00      	ldr	r3, [sp, #0]
 800a626:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a62a:	b292      	uxth	r2, r2
 800a62c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a630:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a634:	f8bd 3000 	ldrh.w	r3, [sp]
 800a638:	4581      	cmp	r9, r0
 800a63a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a63e:	f84c 3b04 	str.w	r3, [ip], #4
 800a642:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a646:	d2db      	bcs.n	800a600 <quorem+0x42>
 800a648:	f855 300b 	ldr.w	r3, [r5, fp]
 800a64c:	b92b      	cbnz	r3, 800a65a <quorem+0x9c>
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	3b04      	subs	r3, #4
 800a652:	429d      	cmp	r5, r3
 800a654:	461a      	mov	r2, r3
 800a656:	d32c      	bcc.n	800a6b2 <quorem+0xf4>
 800a658:	613c      	str	r4, [r7, #16]
 800a65a:	4638      	mov	r0, r7
 800a65c:	f001 f8f2 	bl	800b844 <__mcmp>
 800a660:	2800      	cmp	r0, #0
 800a662:	db22      	blt.n	800a6aa <quorem+0xec>
 800a664:	3601      	adds	r6, #1
 800a666:	4629      	mov	r1, r5
 800a668:	2000      	movs	r0, #0
 800a66a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a66e:	f8d1 c000 	ldr.w	ip, [r1]
 800a672:	b293      	uxth	r3, r2
 800a674:	1ac3      	subs	r3, r0, r3
 800a676:	0c12      	lsrs	r2, r2, #16
 800a678:	fa13 f38c 	uxtah	r3, r3, ip
 800a67c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a684:	b29b      	uxth	r3, r3
 800a686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a68a:	45c1      	cmp	r9, r8
 800a68c:	f841 3b04 	str.w	r3, [r1], #4
 800a690:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a694:	d2e9      	bcs.n	800a66a <quorem+0xac>
 800a696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a69e:	b922      	cbnz	r2, 800a6aa <quorem+0xec>
 800a6a0:	3b04      	subs	r3, #4
 800a6a2:	429d      	cmp	r5, r3
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	d30a      	bcc.n	800a6be <quorem+0x100>
 800a6a8:	613c      	str	r4, [r7, #16]
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	b003      	add	sp, #12
 800a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b2:	6812      	ldr	r2, [r2, #0]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d1ce      	bne.n	800a658 <quorem+0x9a>
 800a6ba:	3c01      	subs	r4, #1
 800a6bc:	e7c9      	b.n	800a652 <quorem+0x94>
 800a6be:	6812      	ldr	r2, [r2, #0]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	d1f0      	bne.n	800a6a8 <quorem+0xea>
 800a6c6:	3c01      	subs	r4, #1
 800a6c8:	e7eb      	b.n	800a6a2 <quorem+0xe4>
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	e7ee      	b.n	800a6ac <quorem+0xee>
	...

0800a6d0 <_dtoa_r>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	ed2d 8b04 	vpush	{d8-d9}
 800a6d8:	69c5      	ldr	r5, [r0, #28]
 800a6da:	b093      	sub	sp, #76	; 0x4c
 800a6dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6e0:	ec57 6b10 	vmov	r6, r7, d0
 800a6e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6e8:	9107      	str	r1, [sp, #28]
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	920a      	str	r2, [sp, #40]	; 0x28
 800a6ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a6f0:	b975      	cbnz	r5, 800a710 <_dtoa_r+0x40>
 800a6f2:	2010      	movs	r0, #16
 800a6f4:	f7fe ffaa 	bl	800964c <malloc>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	61e0      	str	r0, [r4, #28]
 800a6fc:	b920      	cbnz	r0, 800a708 <_dtoa_r+0x38>
 800a6fe:	4bae      	ldr	r3, [pc, #696]	; (800a9b8 <_dtoa_r+0x2e8>)
 800a700:	21ef      	movs	r1, #239	; 0xef
 800a702:	48ae      	ldr	r0, [pc, #696]	; (800a9bc <_dtoa_r+0x2ec>)
 800a704:	f001 fc22 	bl	800bf4c <__assert_func>
 800a708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a70c:	6005      	str	r5, [r0, #0]
 800a70e:	60c5      	str	r5, [r0, #12]
 800a710:	69e3      	ldr	r3, [r4, #28]
 800a712:	6819      	ldr	r1, [r3, #0]
 800a714:	b151      	cbz	r1, 800a72c <_dtoa_r+0x5c>
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	604a      	str	r2, [r1, #4]
 800a71a:	2301      	movs	r3, #1
 800a71c:	4093      	lsls	r3, r2
 800a71e:	608b      	str	r3, [r1, #8]
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fe53 	bl	800b3cc <_Bfree>
 800a726:	69e3      	ldr	r3, [r4, #28]
 800a728:	2200      	movs	r2, #0
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	1e3b      	subs	r3, r7, #0
 800a72e:	bfbb      	ittet	lt
 800a730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a734:	9303      	strlt	r3, [sp, #12]
 800a736:	2300      	movge	r3, #0
 800a738:	2201      	movlt	r2, #1
 800a73a:	bfac      	ite	ge
 800a73c:	f8c8 3000 	strge.w	r3, [r8]
 800a740:	f8c8 2000 	strlt.w	r2, [r8]
 800a744:	4b9e      	ldr	r3, [pc, #632]	; (800a9c0 <_dtoa_r+0x2f0>)
 800a746:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a74a:	ea33 0308 	bics.w	r3, r3, r8
 800a74e:	d11b      	bne.n	800a788 <_dtoa_r+0xb8>
 800a750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a752:	f242 730f 	movw	r3, #9999	; 0x270f
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a75c:	4333      	orrs	r3, r6
 800a75e:	f000 8593 	beq.w	800b288 <_dtoa_r+0xbb8>
 800a762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a764:	b963      	cbnz	r3, 800a780 <_dtoa_r+0xb0>
 800a766:	4b97      	ldr	r3, [pc, #604]	; (800a9c4 <_dtoa_r+0x2f4>)
 800a768:	e027      	b.n	800a7ba <_dtoa_r+0xea>
 800a76a:	4b97      	ldr	r3, [pc, #604]	; (800a9c8 <_dtoa_r+0x2f8>)
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	3308      	adds	r3, #8
 800a770:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	9800      	ldr	r0, [sp, #0]
 800a776:	b013      	add	sp, #76	; 0x4c
 800a778:	ecbd 8b04 	vpop	{d8-d9}
 800a77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a780:	4b90      	ldr	r3, [pc, #576]	; (800a9c4 <_dtoa_r+0x2f4>)
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	3303      	adds	r3, #3
 800a786:	e7f3      	b.n	800a770 <_dtoa_r+0xa0>
 800a788:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a78c:	2200      	movs	r2, #0
 800a78e:	ec51 0b17 	vmov	r0, r1, d7
 800a792:	eeb0 8a47 	vmov.f32	s16, s14
 800a796:	eef0 8a67 	vmov.f32	s17, s15
 800a79a:	2300      	movs	r3, #0
 800a79c:	f7f6 f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7a0:	4681      	mov	r9, r0
 800a7a2:	b160      	cbz	r0, 800a7be <_dtoa_r+0xee>
 800a7a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 8568 	beq.w	800b282 <_dtoa_r+0xbb2>
 800a7b2:	4b86      	ldr	r3, [pc, #536]	; (800a9cc <_dtoa_r+0x2fc>)
 800a7b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	e7da      	b.n	800a774 <_dtoa_r+0xa4>
 800a7be:	aa10      	add	r2, sp, #64	; 0x40
 800a7c0:	a911      	add	r1, sp, #68	; 0x44
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	eeb0 0a48 	vmov.f32	s0, s16
 800a7c8:	eef0 0a68 	vmov.f32	s1, s17
 800a7cc:	f001 f8e0 	bl	800b990 <__d2b>
 800a7d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a7d4:	4682      	mov	sl, r0
 800a7d6:	2d00      	cmp	r5, #0
 800a7d8:	d07f      	beq.n	800a8da <_dtoa_r+0x20a>
 800a7da:	ee18 3a90 	vmov	r3, s17
 800a7de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a7e6:	ec51 0b18 	vmov	r0, r1, d8
 800a7ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4b75      	ldr	r3, [pc, #468]	; (800a9d0 <_dtoa_r+0x300>)
 800a7fc:	f7f5 fd4c 	bl	8000298 <__aeabi_dsub>
 800a800:	a367      	add	r3, pc, #412	; (adr r3, 800a9a0 <_dtoa_r+0x2d0>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f5 feff 	bl	8000608 <__aeabi_dmul>
 800a80a:	a367      	add	r3, pc, #412	; (adr r3, 800a9a8 <_dtoa_r+0x2d8>)
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	f7f5 fd44 	bl	800029c <__adddf3>
 800a814:	4606      	mov	r6, r0
 800a816:	4628      	mov	r0, r5
 800a818:	460f      	mov	r7, r1
 800a81a:	f7f5 fe8b 	bl	8000534 <__aeabi_i2d>
 800a81e:	a364      	add	r3, pc, #400	; (adr r3, 800a9b0 <_dtoa_r+0x2e0>)
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f7f5 fef0 	bl	8000608 <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 fd34 	bl	800029c <__adddf3>
 800a834:	4606      	mov	r6, r0
 800a836:	460f      	mov	r7, r1
 800a838:	f7f6 f996 	bl	8000b68 <__aeabi_d2iz>
 800a83c:	2200      	movs	r2, #0
 800a83e:	4683      	mov	fp, r0
 800a840:	2300      	movs	r3, #0
 800a842:	4630      	mov	r0, r6
 800a844:	4639      	mov	r1, r7
 800a846:	f7f6 f951 	bl	8000aec <__aeabi_dcmplt>
 800a84a:	b148      	cbz	r0, 800a860 <_dtoa_r+0x190>
 800a84c:	4658      	mov	r0, fp
 800a84e:	f7f5 fe71 	bl	8000534 <__aeabi_i2d>
 800a852:	4632      	mov	r2, r6
 800a854:	463b      	mov	r3, r7
 800a856:	f7f6 f93f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a85a:	b908      	cbnz	r0, 800a860 <_dtoa_r+0x190>
 800a85c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a860:	f1bb 0f16 	cmp.w	fp, #22
 800a864:	d857      	bhi.n	800a916 <_dtoa_r+0x246>
 800a866:	4b5b      	ldr	r3, [pc, #364]	; (800a9d4 <_dtoa_r+0x304>)
 800a868:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	ec51 0b18 	vmov	r0, r1, d8
 800a874:	f7f6 f93a 	bl	8000aec <__aeabi_dcmplt>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d04e      	beq.n	800a91a <_dtoa_r+0x24a>
 800a87c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a880:	2300      	movs	r3, #0
 800a882:	930c      	str	r3, [sp, #48]	; 0x30
 800a884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a886:	1b5b      	subs	r3, r3, r5
 800a888:	1e5a      	subs	r2, r3, #1
 800a88a:	bf45      	ittet	mi
 800a88c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a890:	9305      	strmi	r3, [sp, #20]
 800a892:	2300      	movpl	r3, #0
 800a894:	2300      	movmi	r3, #0
 800a896:	9206      	str	r2, [sp, #24]
 800a898:	bf54      	ite	pl
 800a89a:	9305      	strpl	r3, [sp, #20]
 800a89c:	9306      	strmi	r3, [sp, #24]
 800a89e:	f1bb 0f00 	cmp.w	fp, #0
 800a8a2:	db3c      	blt.n	800a91e <_dtoa_r+0x24e>
 800a8a4:	9b06      	ldr	r3, [sp, #24]
 800a8a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a8aa:	445b      	add	r3, fp
 800a8ac:	9306      	str	r3, [sp, #24]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9308      	str	r3, [sp, #32]
 800a8b2:	9b07      	ldr	r3, [sp, #28]
 800a8b4:	2b09      	cmp	r3, #9
 800a8b6:	d868      	bhi.n	800a98a <_dtoa_r+0x2ba>
 800a8b8:	2b05      	cmp	r3, #5
 800a8ba:	bfc4      	itt	gt
 800a8bc:	3b04      	subgt	r3, #4
 800a8be:	9307      	strgt	r3, [sp, #28]
 800a8c0:	9b07      	ldr	r3, [sp, #28]
 800a8c2:	f1a3 0302 	sub.w	r3, r3, #2
 800a8c6:	bfcc      	ite	gt
 800a8c8:	2500      	movgt	r5, #0
 800a8ca:	2501      	movle	r5, #1
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	f200 8085 	bhi.w	800a9dc <_dtoa_r+0x30c>
 800a8d2:	e8df f003 	tbb	[pc, r3]
 800a8d6:	3b2e      	.short	0x3b2e
 800a8d8:	5839      	.short	0x5839
 800a8da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a8de:	441d      	add	r5, r3
 800a8e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8e4:	2b20      	cmp	r3, #32
 800a8e6:	bfc1      	itttt	gt
 800a8e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800a8f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a8f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a8f8:	bfd6      	itet	le
 800a8fa:	f1c3 0320 	rsble	r3, r3, #32
 800a8fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800a902:	fa06 f003 	lslle.w	r0, r6, r3
 800a906:	f7f5 fe05 	bl	8000514 <__aeabi_ui2d>
 800a90a:	2201      	movs	r2, #1
 800a90c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a910:	3d01      	subs	r5, #1
 800a912:	920e      	str	r2, [sp, #56]	; 0x38
 800a914:	e76f      	b.n	800a7f6 <_dtoa_r+0x126>
 800a916:	2301      	movs	r3, #1
 800a918:	e7b3      	b.n	800a882 <_dtoa_r+0x1b2>
 800a91a:	900c      	str	r0, [sp, #48]	; 0x30
 800a91c:	e7b2      	b.n	800a884 <_dtoa_r+0x1b4>
 800a91e:	9b05      	ldr	r3, [sp, #20]
 800a920:	eba3 030b 	sub.w	r3, r3, fp
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	f1cb 0300 	rsb	r3, fp, #0
 800a92a:	9308      	str	r3, [sp, #32]
 800a92c:	2300      	movs	r3, #0
 800a92e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a930:	e7bf      	b.n	800a8b2 <_dtoa_r+0x1e2>
 800a932:	2300      	movs	r3, #0
 800a934:	9309      	str	r3, [sp, #36]	; 0x24
 800a936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a938:	2b00      	cmp	r3, #0
 800a93a:	dc52      	bgt.n	800a9e2 <_dtoa_r+0x312>
 800a93c:	2301      	movs	r3, #1
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	461a      	mov	r2, r3
 800a944:	920a      	str	r2, [sp, #40]	; 0x28
 800a946:	e00b      	b.n	800a960 <_dtoa_r+0x290>
 800a948:	2301      	movs	r3, #1
 800a94a:	e7f3      	b.n	800a934 <_dtoa_r+0x264>
 800a94c:	2300      	movs	r3, #0
 800a94e:	9309      	str	r3, [sp, #36]	; 0x24
 800a950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a952:	445b      	add	r3, fp
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	3301      	adds	r3, #1
 800a958:	2b01      	cmp	r3, #1
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	bfb8      	it	lt
 800a95e:	2301      	movlt	r3, #1
 800a960:	69e0      	ldr	r0, [r4, #28]
 800a962:	2100      	movs	r1, #0
 800a964:	2204      	movs	r2, #4
 800a966:	f102 0614 	add.w	r6, r2, #20
 800a96a:	429e      	cmp	r6, r3
 800a96c:	d93d      	bls.n	800a9ea <_dtoa_r+0x31a>
 800a96e:	6041      	str	r1, [r0, #4]
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fceb 	bl	800b34c <_Balloc>
 800a976:	9000      	str	r0, [sp, #0]
 800a978:	2800      	cmp	r0, #0
 800a97a:	d139      	bne.n	800a9f0 <_dtoa_r+0x320>
 800a97c:	4b16      	ldr	r3, [pc, #88]	; (800a9d8 <_dtoa_r+0x308>)
 800a97e:	4602      	mov	r2, r0
 800a980:	f240 11af 	movw	r1, #431	; 0x1af
 800a984:	e6bd      	b.n	800a702 <_dtoa_r+0x32>
 800a986:	2301      	movs	r3, #1
 800a988:	e7e1      	b.n	800a94e <_dtoa_r+0x27e>
 800a98a:	2501      	movs	r5, #1
 800a98c:	2300      	movs	r3, #0
 800a98e:	9307      	str	r3, [sp, #28]
 800a990:	9509      	str	r5, [sp, #36]	; 0x24
 800a992:	f04f 33ff 	mov.w	r3, #4294967295
 800a996:	9301      	str	r3, [sp, #4]
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	2200      	movs	r2, #0
 800a99c:	2312      	movs	r3, #18
 800a99e:	e7d1      	b.n	800a944 <_dtoa_r+0x274>
 800a9a0:	636f4361 	.word	0x636f4361
 800a9a4:	3fd287a7 	.word	0x3fd287a7
 800a9a8:	8b60c8b3 	.word	0x8b60c8b3
 800a9ac:	3fc68a28 	.word	0x3fc68a28
 800a9b0:	509f79fb 	.word	0x509f79fb
 800a9b4:	3fd34413 	.word	0x3fd34413
 800a9b8:	0800c1f1 	.word	0x0800c1f1
 800a9bc:	0800c208 	.word	0x0800c208
 800a9c0:	7ff00000 	.word	0x7ff00000
 800a9c4:	0800c1ed 	.word	0x0800c1ed
 800a9c8:	0800c1e4 	.word	0x0800c1e4
 800a9cc:	0800c1c1 	.word	0x0800c1c1
 800a9d0:	3ff80000 	.word	0x3ff80000
 800a9d4:	0800c2f8 	.word	0x0800c2f8
 800a9d8:	0800c260 	.word	0x0800c260
 800a9dc:	2301      	movs	r3, #1
 800a9de:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e0:	e7d7      	b.n	800a992 <_dtoa_r+0x2c2>
 800a9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	9304      	str	r3, [sp, #16]
 800a9e8:	e7ba      	b.n	800a960 <_dtoa_r+0x290>
 800a9ea:	3101      	adds	r1, #1
 800a9ec:	0052      	lsls	r2, r2, #1
 800a9ee:	e7ba      	b.n	800a966 <_dtoa_r+0x296>
 800a9f0:	69e3      	ldr	r3, [r4, #28]
 800a9f2:	9a00      	ldr	r2, [sp, #0]
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	9b04      	ldr	r3, [sp, #16]
 800a9f8:	2b0e      	cmp	r3, #14
 800a9fa:	f200 80a8 	bhi.w	800ab4e <_dtoa_r+0x47e>
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	f000 80a5 	beq.w	800ab4e <_dtoa_r+0x47e>
 800aa04:	f1bb 0f00 	cmp.w	fp, #0
 800aa08:	dd38      	ble.n	800aa7c <_dtoa_r+0x3ac>
 800aa0a:	4bc0      	ldr	r3, [pc, #768]	; (800ad0c <_dtoa_r+0x63c>)
 800aa0c:	f00b 020f 	and.w	r2, fp, #15
 800aa10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aa18:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aa1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aa20:	d019      	beq.n	800aa56 <_dtoa_r+0x386>
 800aa22:	4bbb      	ldr	r3, [pc, #748]	; (800ad10 <_dtoa_r+0x640>)
 800aa24:	ec51 0b18 	vmov	r0, r1, d8
 800aa28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa2c:	f7f5 ff16 	bl	800085c <__aeabi_ddiv>
 800aa30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa34:	f008 080f 	and.w	r8, r8, #15
 800aa38:	2503      	movs	r5, #3
 800aa3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ad10 <_dtoa_r+0x640>
 800aa3e:	f1b8 0f00 	cmp.w	r8, #0
 800aa42:	d10a      	bne.n	800aa5a <_dtoa_r+0x38a>
 800aa44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa48:	4632      	mov	r2, r6
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	f7f5 ff06 	bl	800085c <__aeabi_ddiv>
 800aa50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa54:	e02b      	b.n	800aaae <_dtoa_r+0x3de>
 800aa56:	2502      	movs	r5, #2
 800aa58:	e7ef      	b.n	800aa3a <_dtoa_r+0x36a>
 800aa5a:	f018 0f01 	tst.w	r8, #1
 800aa5e:	d008      	beq.n	800aa72 <_dtoa_r+0x3a2>
 800aa60:	4630      	mov	r0, r6
 800aa62:	4639      	mov	r1, r7
 800aa64:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa68:	f7f5 fdce 	bl	8000608 <__aeabi_dmul>
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460f      	mov	r7, r1
 800aa72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa76:	f109 0908 	add.w	r9, r9, #8
 800aa7a:	e7e0      	b.n	800aa3e <_dtoa_r+0x36e>
 800aa7c:	f000 809f 	beq.w	800abbe <_dtoa_r+0x4ee>
 800aa80:	f1cb 0600 	rsb	r6, fp, #0
 800aa84:	4ba1      	ldr	r3, [pc, #644]	; (800ad0c <_dtoa_r+0x63c>)
 800aa86:	4fa2      	ldr	r7, [pc, #648]	; (800ad10 <_dtoa_r+0x640>)
 800aa88:	f006 020f 	and.w	r2, r6, #15
 800aa8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	ec51 0b18 	vmov	r0, r1, d8
 800aa98:	f7f5 fdb6 	bl	8000608 <__aeabi_dmul>
 800aa9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa0:	1136      	asrs	r6, r6, #4
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	2502      	movs	r5, #2
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	d17e      	bne.n	800aba8 <_dtoa_r+0x4d8>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1d0      	bne.n	800aa50 <_dtoa_r+0x380>
 800aaae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aab0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 8084 	beq.w	800abc2 <_dtoa_r+0x4f2>
 800aaba:	4b96      	ldr	r3, [pc, #600]	; (800ad14 <_dtoa_r+0x644>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	4640      	mov	r0, r8
 800aac0:	4649      	mov	r1, r9
 800aac2:	f7f6 f813 	bl	8000aec <__aeabi_dcmplt>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d07b      	beq.n	800abc2 <_dtoa_r+0x4f2>
 800aaca:	9b04      	ldr	r3, [sp, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d078      	beq.n	800abc2 <_dtoa_r+0x4f2>
 800aad0:	9b01      	ldr	r3, [sp, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dd39      	ble.n	800ab4a <_dtoa_r+0x47a>
 800aad6:	4b90      	ldr	r3, [pc, #576]	; (800ad18 <_dtoa_r+0x648>)
 800aad8:	2200      	movs	r2, #0
 800aada:	4640      	mov	r0, r8
 800aadc:	4649      	mov	r1, r9
 800aade:	f7f5 fd93 	bl	8000608 <__aeabi_dmul>
 800aae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae6:	9e01      	ldr	r6, [sp, #4]
 800aae8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800aaec:	3501      	adds	r5, #1
 800aaee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f7f5 fd1e 	bl	8000534 <__aeabi_i2d>
 800aaf8:	4642      	mov	r2, r8
 800aafa:	464b      	mov	r3, r9
 800aafc:	f7f5 fd84 	bl	8000608 <__aeabi_dmul>
 800ab00:	4b86      	ldr	r3, [pc, #536]	; (800ad1c <_dtoa_r+0x64c>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	f7f5 fbca 	bl	800029c <__adddf3>
 800ab08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab10:	9303      	str	r3, [sp, #12]
 800ab12:	2e00      	cmp	r6, #0
 800ab14:	d158      	bne.n	800abc8 <_dtoa_r+0x4f8>
 800ab16:	4b82      	ldr	r3, [pc, #520]	; (800ad20 <_dtoa_r+0x650>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	f7f5 fbbb 	bl	8000298 <__aeabi_dsub>
 800ab22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab26:	4680      	mov	r8, r0
 800ab28:	4689      	mov	r9, r1
 800ab2a:	f7f5 fffd 	bl	8000b28 <__aeabi_dcmpgt>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f040 8296 	bne.w	800b060 <_dtoa_r+0x990>
 800ab34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab38:	4640      	mov	r0, r8
 800ab3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab3e:	4649      	mov	r1, r9
 800ab40:	f7f5 ffd4 	bl	8000aec <__aeabi_dcmplt>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	f040 8289 	bne.w	800b05c <_dtoa_r+0x98c>
 800ab4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f2c0 814e 	blt.w	800adf2 <_dtoa_r+0x722>
 800ab56:	f1bb 0f0e 	cmp.w	fp, #14
 800ab5a:	f300 814a 	bgt.w	800adf2 <_dtoa_r+0x722>
 800ab5e:	4b6b      	ldr	r3, [pc, #428]	; (800ad0c <_dtoa_r+0x63c>)
 800ab60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f280 80dc 	bge.w	800ad28 <_dtoa_r+0x658>
 800ab70:	9b04      	ldr	r3, [sp, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f300 80d8 	bgt.w	800ad28 <_dtoa_r+0x658>
 800ab78:	f040 826f 	bne.w	800b05a <_dtoa_r+0x98a>
 800ab7c:	4b68      	ldr	r3, [pc, #416]	; (800ad20 <_dtoa_r+0x650>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4640      	mov	r0, r8
 800ab82:	4649      	mov	r1, r9
 800ab84:	f7f5 fd40 	bl	8000608 <__aeabi_dmul>
 800ab88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab8c:	f7f5 ffc2 	bl	8000b14 <__aeabi_dcmpge>
 800ab90:	9e04      	ldr	r6, [sp, #16]
 800ab92:	4637      	mov	r7, r6
 800ab94:	2800      	cmp	r0, #0
 800ab96:	f040 8245 	bne.w	800b024 <_dtoa_r+0x954>
 800ab9a:	9d00      	ldr	r5, [sp, #0]
 800ab9c:	2331      	movs	r3, #49	; 0x31
 800ab9e:	f805 3b01 	strb.w	r3, [r5], #1
 800aba2:	f10b 0b01 	add.w	fp, fp, #1
 800aba6:	e241      	b.n	800b02c <_dtoa_r+0x95c>
 800aba8:	07f2      	lsls	r2, r6, #31
 800abaa:	d505      	bpl.n	800abb8 <_dtoa_r+0x4e8>
 800abac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb0:	f7f5 fd2a 	bl	8000608 <__aeabi_dmul>
 800abb4:	3501      	adds	r5, #1
 800abb6:	2301      	movs	r3, #1
 800abb8:	1076      	asrs	r6, r6, #1
 800abba:	3708      	adds	r7, #8
 800abbc:	e773      	b.n	800aaa6 <_dtoa_r+0x3d6>
 800abbe:	2502      	movs	r5, #2
 800abc0:	e775      	b.n	800aaae <_dtoa_r+0x3de>
 800abc2:	9e04      	ldr	r6, [sp, #16]
 800abc4:	465f      	mov	r7, fp
 800abc6:	e792      	b.n	800aaee <_dtoa_r+0x41e>
 800abc8:	9900      	ldr	r1, [sp, #0]
 800abca:	4b50      	ldr	r3, [pc, #320]	; (800ad0c <_dtoa_r+0x63c>)
 800abcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abd0:	4431      	add	r1, r6
 800abd2:	9102      	str	r1, [sp, #8]
 800abd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abd6:	eeb0 9a47 	vmov.f32	s18, s14
 800abda:	eef0 9a67 	vmov.f32	s19, s15
 800abde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abe2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abe6:	2900      	cmp	r1, #0
 800abe8:	d044      	beq.n	800ac74 <_dtoa_r+0x5a4>
 800abea:	494e      	ldr	r1, [pc, #312]	; (800ad24 <_dtoa_r+0x654>)
 800abec:	2000      	movs	r0, #0
 800abee:	f7f5 fe35 	bl	800085c <__aeabi_ddiv>
 800abf2:	ec53 2b19 	vmov	r2, r3, d9
 800abf6:	f7f5 fb4f 	bl	8000298 <__aeabi_dsub>
 800abfa:	9d00      	ldr	r5, [sp, #0]
 800abfc:	ec41 0b19 	vmov	d9, r0, r1
 800ac00:	4649      	mov	r1, r9
 800ac02:	4640      	mov	r0, r8
 800ac04:	f7f5 ffb0 	bl	8000b68 <__aeabi_d2iz>
 800ac08:	4606      	mov	r6, r0
 800ac0a:	f7f5 fc93 	bl	8000534 <__aeabi_i2d>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	4640      	mov	r0, r8
 800ac14:	4649      	mov	r1, r9
 800ac16:	f7f5 fb3f 	bl	8000298 <__aeabi_dsub>
 800ac1a:	3630      	adds	r6, #48	; 0x30
 800ac1c:	f805 6b01 	strb.w	r6, [r5], #1
 800ac20:	ec53 2b19 	vmov	r2, r3, d9
 800ac24:	4680      	mov	r8, r0
 800ac26:	4689      	mov	r9, r1
 800ac28:	f7f5 ff60 	bl	8000aec <__aeabi_dcmplt>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d164      	bne.n	800acfa <_dtoa_r+0x62a>
 800ac30:	4642      	mov	r2, r8
 800ac32:	464b      	mov	r3, r9
 800ac34:	4937      	ldr	r1, [pc, #220]	; (800ad14 <_dtoa_r+0x644>)
 800ac36:	2000      	movs	r0, #0
 800ac38:	f7f5 fb2e 	bl	8000298 <__aeabi_dsub>
 800ac3c:	ec53 2b19 	vmov	r2, r3, d9
 800ac40:	f7f5 ff54 	bl	8000aec <__aeabi_dcmplt>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	f040 80b6 	bne.w	800adb6 <_dtoa_r+0x6e6>
 800ac4a:	9b02      	ldr	r3, [sp, #8]
 800ac4c:	429d      	cmp	r5, r3
 800ac4e:	f43f af7c 	beq.w	800ab4a <_dtoa_r+0x47a>
 800ac52:	4b31      	ldr	r3, [pc, #196]	; (800ad18 <_dtoa_r+0x648>)
 800ac54:	ec51 0b19 	vmov	r0, r1, d9
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f7f5 fcd5 	bl	8000608 <__aeabi_dmul>
 800ac5e:	4b2e      	ldr	r3, [pc, #184]	; (800ad18 <_dtoa_r+0x648>)
 800ac60:	ec41 0b19 	vmov	d9, r0, r1
 800ac64:	2200      	movs	r2, #0
 800ac66:	4640      	mov	r0, r8
 800ac68:	4649      	mov	r1, r9
 800ac6a:	f7f5 fccd 	bl	8000608 <__aeabi_dmul>
 800ac6e:	4680      	mov	r8, r0
 800ac70:	4689      	mov	r9, r1
 800ac72:	e7c5      	b.n	800ac00 <_dtoa_r+0x530>
 800ac74:	ec51 0b17 	vmov	r0, r1, d7
 800ac78:	f7f5 fcc6 	bl	8000608 <__aeabi_dmul>
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	9d00      	ldr	r5, [sp, #0]
 800ac80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac82:	ec41 0b19 	vmov	d9, r0, r1
 800ac86:	4649      	mov	r1, r9
 800ac88:	4640      	mov	r0, r8
 800ac8a:	f7f5 ff6d 	bl	8000b68 <__aeabi_d2iz>
 800ac8e:	4606      	mov	r6, r0
 800ac90:	f7f5 fc50 	bl	8000534 <__aeabi_i2d>
 800ac94:	3630      	adds	r6, #48	; 0x30
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	f7f5 fafb 	bl	8000298 <__aeabi_dsub>
 800aca2:	f805 6b01 	strb.w	r6, [r5], #1
 800aca6:	9b02      	ldr	r3, [sp, #8]
 800aca8:	429d      	cmp	r5, r3
 800acaa:	4680      	mov	r8, r0
 800acac:	4689      	mov	r9, r1
 800acae:	f04f 0200 	mov.w	r2, #0
 800acb2:	d124      	bne.n	800acfe <_dtoa_r+0x62e>
 800acb4:	4b1b      	ldr	r3, [pc, #108]	; (800ad24 <_dtoa_r+0x654>)
 800acb6:	ec51 0b19 	vmov	r0, r1, d9
 800acba:	f7f5 faef 	bl	800029c <__adddf3>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4640      	mov	r0, r8
 800acc4:	4649      	mov	r1, r9
 800acc6:	f7f5 ff2f 	bl	8000b28 <__aeabi_dcmpgt>
 800acca:	2800      	cmp	r0, #0
 800accc:	d173      	bne.n	800adb6 <_dtoa_r+0x6e6>
 800acce:	ec53 2b19 	vmov	r2, r3, d9
 800acd2:	4914      	ldr	r1, [pc, #80]	; (800ad24 <_dtoa_r+0x654>)
 800acd4:	2000      	movs	r0, #0
 800acd6:	f7f5 fadf 	bl	8000298 <__aeabi_dsub>
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	4640      	mov	r0, r8
 800ace0:	4649      	mov	r1, r9
 800ace2:	f7f5 ff03 	bl	8000aec <__aeabi_dcmplt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f af2f 	beq.w	800ab4a <_dtoa_r+0x47a>
 800acec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800acee:	1e6b      	subs	r3, r5, #1
 800acf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800acf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acf6:	2b30      	cmp	r3, #48	; 0x30
 800acf8:	d0f8      	beq.n	800acec <_dtoa_r+0x61c>
 800acfa:	46bb      	mov	fp, r7
 800acfc:	e04a      	b.n	800ad94 <_dtoa_r+0x6c4>
 800acfe:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <_dtoa_r+0x648>)
 800ad00:	f7f5 fc82 	bl	8000608 <__aeabi_dmul>
 800ad04:	4680      	mov	r8, r0
 800ad06:	4689      	mov	r9, r1
 800ad08:	e7bd      	b.n	800ac86 <_dtoa_r+0x5b6>
 800ad0a:	bf00      	nop
 800ad0c:	0800c2f8 	.word	0x0800c2f8
 800ad10:	0800c2d0 	.word	0x0800c2d0
 800ad14:	3ff00000 	.word	0x3ff00000
 800ad18:	40240000 	.word	0x40240000
 800ad1c:	401c0000 	.word	0x401c0000
 800ad20:	40140000 	.word	0x40140000
 800ad24:	3fe00000 	.word	0x3fe00000
 800ad28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad2c:	9d00      	ldr	r5, [sp, #0]
 800ad2e:	4642      	mov	r2, r8
 800ad30:	464b      	mov	r3, r9
 800ad32:	4630      	mov	r0, r6
 800ad34:	4639      	mov	r1, r7
 800ad36:	f7f5 fd91 	bl	800085c <__aeabi_ddiv>
 800ad3a:	f7f5 ff15 	bl	8000b68 <__aeabi_d2iz>
 800ad3e:	9001      	str	r0, [sp, #4]
 800ad40:	f7f5 fbf8 	bl	8000534 <__aeabi_i2d>
 800ad44:	4642      	mov	r2, r8
 800ad46:	464b      	mov	r3, r9
 800ad48:	f7f5 fc5e 	bl	8000608 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4630      	mov	r0, r6
 800ad52:	4639      	mov	r1, r7
 800ad54:	f7f5 faa0 	bl	8000298 <__aeabi_dsub>
 800ad58:	9e01      	ldr	r6, [sp, #4]
 800ad5a:	9f04      	ldr	r7, [sp, #16]
 800ad5c:	3630      	adds	r6, #48	; 0x30
 800ad5e:	f805 6b01 	strb.w	r6, [r5], #1
 800ad62:	9e00      	ldr	r6, [sp, #0]
 800ad64:	1bae      	subs	r6, r5, r6
 800ad66:	42b7      	cmp	r7, r6
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	d134      	bne.n	800add8 <_dtoa_r+0x708>
 800ad6e:	f7f5 fa95 	bl	800029c <__adddf3>
 800ad72:	4642      	mov	r2, r8
 800ad74:	464b      	mov	r3, r9
 800ad76:	4606      	mov	r6, r0
 800ad78:	460f      	mov	r7, r1
 800ad7a:	f7f5 fed5 	bl	8000b28 <__aeabi_dcmpgt>
 800ad7e:	b9c8      	cbnz	r0, 800adb4 <_dtoa_r+0x6e4>
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	4630      	mov	r0, r6
 800ad86:	4639      	mov	r1, r7
 800ad88:	f7f5 fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad8c:	b110      	cbz	r0, 800ad94 <_dtoa_r+0x6c4>
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	07db      	lsls	r3, r3, #31
 800ad92:	d40f      	bmi.n	800adb4 <_dtoa_r+0x6e4>
 800ad94:	4651      	mov	r1, sl
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fb18 	bl	800b3cc <_Bfree>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ada0:	702b      	strb	r3, [r5, #0]
 800ada2:	f10b 0301 	add.w	r3, fp, #1
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f43f ace2 	beq.w	800a774 <_dtoa_r+0xa4>
 800adb0:	601d      	str	r5, [r3, #0]
 800adb2:	e4df      	b.n	800a774 <_dtoa_r+0xa4>
 800adb4:	465f      	mov	r7, fp
 800adb6:	462b      	mov	r3, r5
 800adb8:	461d      	mov	r5, r3
 800adba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adbe:	2a39      	cmp	r2, #57	; 0x39
 800adc0:	d106      	bne.n	800add0 <_dtoa_r+0x700>
 800adc2:	9a00      	ldr	r2, [sp, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d1f7      	bne.n	800adb8 <_dtoa_r+0x6e8>
 800adc8:	9900      	ldr	r1, [sp, #0]
 800adca:	2230      	movs	r2, #48	; 0x30
 800adcc:	3701      	adds	r7, #1
 800adce:	700a      	strb	r2, [r1, #0]
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	3201      	adds	r2, #1
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	e790      	b.n	800acfa <_dtoa_r+0x62a>
 800add8:	4ba3      	ldr	r3, [pc, #652]	; (800b068 <_dtoa_r+0x998>)
 800adda:	2200      	movs	r2, #0
 800addc:	f7f5 fc14 	bl	8000608 <__aeabi_dmul>
 800ade0:	2200      	movs	r2, #0
 800ade2:	2300      	movs	r3, #0
 800ade4:	4606      	mov	r6, r0
 800ade6:	460f      	mov	r7, r1
 800ade8:	f7f5 fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 800adec:	2800      	cmp	r0, #0
 800adee:	d09e      	beq.n	800ad2e <_dtoa_r+0x65e>
 800adf0:	e7d0      	b.n	800ad94 <_dtoa_r+0x6c4>
 800adf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf4:	2a00      	cmp	r2, #0
 800adf6:	f000 80ca 	beq.w	800af8e <_dtoa_r+0x8be>
 800adfa:	9a07      	ldr	r2, [sp, #28]
 800adfc:	2a01      	cmp	r2, #1
 800adfe:	f300 80ad 	bgt.w	800af5c <_dtoa_r+0x88c>
 800ae02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	f000 80a5 	beq.w	800af54 <_dtoa_r+0x884>
 800ae0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae0e:	9e08      	ldr	r6, [sp, #32]
 800ae10:	9d05      	ldr	r5, [sp, #20]
 800ae12:	9a05      	ldr	r2, [sp, #20]
 800ae14:	441a      	add	r2, r3
 800ae16:	9205      	str	r2, [sp, #20]
 800ae18:	9a06      	ldr	r2, [sp, #24]
 800ae1a:	2101      	movs	r1, #1
 800ae1c:	441a      	add	r2, r3
 800ae1e:	4620      	mov	r0, r4
 800ae20:	9206      	str	r2, [sp, #24]
 800ae22:	f000 fb89 	bl	800b538 <__i2b>
 800ae26:	4607      	mov	r7, r0
 800ae28:	b165      	cbz	r5, 800ae44 <_dtoa_r+0x774>
 800ae2a:	9b06      	ldr	r3, [sp, #24]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dd09      	ble.n	800ae44 <_dtoa_r+0x774>
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	9a05      	ldr	r2, [sp, #20]
 800ae34:	bfa8      	it	ge
 800ae36:	462b      	movge	r3, r5
 800ae38:	1ad2      	subs	r2, r2, r3
 800ae3a:	9205      	str	r2, [sp, #20]
 800ae3c:	9a06      	ldr	r2, [sp, #24]
 800ae3e:	1aed      	subs	r5, r5, r3
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	9306      	str	r3, [sp, #24]
 800ae44:	9b08      	ldr	r3, [sp, #32]
 800ae46:	b1f3      	cbz	r3, 800ae86 <_dtoa_r+0x7b6>
 800ae48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 80a3 	beq.w	800af96 <_dtoa_r+0x8c6>
 800ae50:	2e00      	cmp	r6, #0
 800ae52:	dd10      	ble.n	800ae76 <_dtoa_r+0x7a6>
 800ae54:	4639      	mov	r1, r7
 800ae56:	4632      	mov	r2, r6
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f000 fc2d 	bl	800b6b8 <__pow5mult>
 800ae5e:	4652      	mov	r2, sl
 800ae60:	4601      	mov	r1, r0
 800ae62:	4607      	mov	r7, r0
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 fb7d 	bl	800b564 <__multiply>
 800ae6a:	4651      	mov	r1, sl
 800ae6c:	4680      	mov	r8, r0
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 faac 	bl	800b3cc <_Bfree>
 800ae74:	46c2      	mov	sl, r8
 800ae76:	9b08      	ldr	r3, [sp, #32]
 800ae78:	1b9a      	subs	r2, r3, r6
 800ae7a:	d004      	beq.n	800ae86 <_dtoa_r+0x7b6>
 800ae7c:	4651      	mov	r1, sl
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 fc1a 	bl	800b6b8 <__pow5mult>
 800ae84:	4682      	mov	sl, r0
 800ae86:	2101      	movs	r1, #1
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f000 fb55 	bl	800b538 <__i2b>
 800ae8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	4606      	mov	r6, r0
 800ae94:	f340 8081 	ble.w	800af9a <_dtoa_r+0x8ca>
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 fc0b 	bl	800b6b8 <__pow5mult>
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	4606      	mov	r6, r0
 800aea8:	dd7a      	ble.n	800afa0 <_dtoa_r+0x8d0>
 800aeaa:	f04f 0800 	mov.w	r8, #0
 800aeae:	6933      	ldr	r3, [r6, #16]
 800aeb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aeb4:	6918      	ldr	r0, [r3, #16]
 800aeb6:	f000 faf1 	bl	800b49c <__hi0bits>
 800aeba:	f1c0 0020 	rsb	r0, r0, #32
 800aebe:	9b06      	ldr	r3, [sp, #24]
 800aec0:	4418      	add	r0, r3
 800aec2:	f010 001f 	ands.w	r0, r0, #31
 800aec6:	f000 8094 	beq.w	800aff2 <_dtoa_r+0x922>
 800aeca:	f1c0 0320 	rsb	r3, r0, #32
 800aece:	2b04      	cmp	r3, #4
 800aed0:	f340 8085 	ble.w	800afde <_dtoa_r+0x90e>
 800aed4:	9b05      	ldr	r3, [sp, #20]
 800aed6:	f1c0 001c 	rsb	r0, r0, #28
 800aeda:	4403      	add	r3, r0
 800aedc:	9305      	str	r3, [sp, #20]
 800aede:	9b06      	ldr	r3, [sp, #24]
 800aee0:	4403      	add	r3, r0
 800aee2:	4405      	add	r5, r0
 800aee4:	9306      	str	r3, [sp, #24]
 800aee6:	9b05      	ldr	r3, [sp, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	dd05      	ble.n	800aef8 <_dtoa_r+0x828>
 800aeec:	4651      	mov	r1, sl
 800aeee:	461a      	mov	r2, r3
 800aef0:	4620      	mov	r0, r4
 800aef2:	f000 fc3b 	bl	800b76c <__lshift>
 800aef6:	4682      	mov	sl, r0
 800aef8:	9b06      	ldr	r3, [sp, #24]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	dd05      	ble.n	800af0a <_dtoa_r+0x83a>
 800aefe:	4631      	mov	r1, r6
 800af00:	461a      	mov	r2, r3
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fc32 	bl	800b76c <__lshift>
 800af08:	4606      	mov	r6, r0
 800af0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d072      	beq.n	800aff6 <_dtoa_r+0x926>
 800af10:	4631      	mov	r1, r6
 800af12:	4650      	mov	r0, sl
 800af14:	f000 fc96 	bl	800b844 <__mcmp>
 800af18:	2800      	cmp	r0, #0
 800af1a:	da6c      	bge.n	800aff6 <_dtoa_r+0x926>
 800af1c:	2300      	movs	r3, #0
 800af1e:	4651      	mov	r1, sl
 800af20:	220a      	movs	r2, #10
 800af22:	4620      	mov	r0, r4
 800af24:	f000 fa74 	bl	800b410 <__multadd>
 800af28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af2e:	4682      	mov	sl, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 81b0 	beq.w	800b296 <_dtoa_r+0xbc6>
 800af36:	2300      	movs	r3, #0
 800af38:	4639      	mov	r1, r7
 800af3a:	220a      	movs	r2, #10
 800af3c:	4620      	mov	r0, r4
 800af3e:	f000 fa67 	bl	800b410 <__multadd>
 800af42:	9b01      	ldr	r3, [sp, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	4607      	mov	r7, r0
 800af48:	f300 8096 	bgt.w	800b078 <_dtoa_r+0x9a8>
 800af4c:	9b07      	ldr	r3, [sp, #28]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	dc59      	bgt.n	800b006 <_dtoa_r+0x936>
 800af52:	e091      	b.n	800b078 <_dtoa_r+0x9a8>
 800af54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af5a:	e758      	b.n	800ae0e <_dtoa_r+0x73e>
 800af5c:	9b04      	ldr	r3, [sp, #16]
 800af5e:	1e5e      	subs	r6, r3, #1
 800af60:	9b08      	ldr	r3, [sp, #32]
 800af62:	42b3      	cmp	r3, r6
 800af64:	bfbf      	itttt	lt
 800af66:	9b08      	ldrlt	r3, [sp, #32]
 800af68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800af6a:	9608      	strlt	r6, [sp, #32]
 800af6c:	1af3      	sublt	r3, r6, r3
 800af6e:	bfb4      	ite	lt
 800af70:	18d2      	addlt	r2, r2, r3
 800af72:	1b9e      	subge	r6, r3, r6
 800af74:	9b04      	ldr	r3, [sp, #16]
 800af76:	bfbc      	itt	lt
 800af78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800af7a:	2600      	movlt	r6, #0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	bfb7      	itett	lt
 800af80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800af84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800af88:	1a9d      	sublt	r5, r3, r2
 800af8a:	2300      	movlt	r3, #0
 800af8c:	e741      	b.n	800ae12 <_dtoa_r+0x742>
 800af8e:	9e08      	ldr	r6, [sp, #32]
 800af90:	9d05      	ldr	r5, [sp, #20]
 800af92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af94:	e748      	b.n	800ae28 <_dtoa_r+0x758>
 800af96:	9a08      	ldr	r2, [sp, #32]
 800af98:	e770      	b.n	800ae7c <_dtoa_r+0x7ac>
 800af9a:	9b07      	ldr	r3, [sp, #28]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	dc19      	bgt.n	800afd4 <_dtoa_r+0x904>
 800afa0:	9b02      	ldr	r3, [sp, #8]
 800afa2:	b9bb      	cbnz	r3, 800afd4 <_dtoa_r+0x904>
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afaa:	b99b      	cbnz	r3, 800afd4 <_dtoa_r+0x904>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afb2:	0d1b      	lsrs	r3, r3, #20
 800afb4:	051b      	lsls	r3, r3, #20
 800afb6:	b183      	cbz	r3, 800afda <_dtoa_r+0x90a>
 800afb8:	9b05      	ldr	r3, [sp, #20]
 800afba:	3301      	adds	r3, #1
 800afbc:	9305      	str	r3, [sp, #20]
 800afbe:	9b06      	ldr	r3, [sp, #24]
 800afc0:	3301      	adds	r3, #1
 800afc2:	9306      	str	r3, [sp, #24]
 800afc4:	f04f 0801 	mov.w	r8, #1
 800afc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f47f af6f 	bne.w	800aeae <_dtoa_r+0x7de>
 800afd0:	2001      	movs	r0, #1
 800afd2:	e774      	b.n	800aebe <_dtoa_r+0x7ee>
 800afd4:	f04f 0800 	mov.w	r8, #0
 800afd8:	e7f6      	b.n	800afc8 <_dtoa_r+0x8f8>
 800afda:	4698      	mov	r8, r3
 800afdc:	e7f4      	b.n	800afc8 <_dtoa_r+0x8f8>
 800afde:	d082      	beq.n	800aee6 <_dtoa_r+0x816>
 800afe0:	9a05      	ldr	r2, [sp, #20]
 800afe2:	331c      	adds	r3, #28
 800afe4:	441a      	add	r2, r3
 800afe6:	9205      	str	r2, [sp, #20]
 800afe8:	9a06      	ldr	r2, [sp, #24]
 800afea:	441a      	add	r2, r3
 800afec:	441d      	add	r5, r3
 800afee:	9206      	str	r2, [sp, #24]
 800aff0:	e779      	b.n	800aee6 <_dtoa_r+0x816>
 800aff2:	4603      	mov	r3, r0
 800aff4:	e7f4      	b.n	800afe0 <_dtoa_r+0x910>
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	dc37      	bgt.n	800b06c <_dtoa_r+0x99c>
 800affc:	9b07      	ldr	r3, [sp, #28]
 800affe:	2b02      	cmp	r3, #2
 800b000:	dd34      	ble.n	800b06c <_dtoa_r+0x99c>
 800b002:	9b04      	ldr	r3, [sp, #16]
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	9b01      	ldr	r3, [sp, #4]
 800b008:	b963      	cbnz	r3, 800b024 <_dtoa_r+0x954>
 800b00a:	4631      	mov	r1, r6
 800b00c:	2205      	movs	r2, #5
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 f9fe 	bl	800b410 <__multadd>
 800b014:	4601      	mov	r1, r0
 800b016:	4606      	mov	r6, r0
 800b018:	4650      	mov	r0, sl
 800b01a:	f000 fc13 	bl	800b844 <__mcmp>
 800b01e:	2800      	cmp	r0, #0
 800b020:	f73f adbb 	bgt.w	800ab9a <_dtoa_r+0x4ca>
 800b024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b026:	9d00      	ldr	r5, [sp, #0]
 800b028:	ea6f 0b03 	mvn.w	fp, r3
 800b02c:	f04f 0800 	mov.w	r8, #0
 800b030:	4631      	mov	r1, r6
 800b032:	4620      	mov	r0, r4
 800b034:	f000 f9ca 	bl	800b3cc <_Bfree>
 800b038:	2f00      	cmp	r7, #0
 800b03a:	f43f aeab 	beq.w	800ad94 <_dtoa_r+0x6c4>
 800b03e:	f1b8 0f00 	cmp.w	r8, #0
 800b042:	d005      	beq.n	800b050 <_dtoa_r+0x980>
 800b044:	45b8      	cmp	r8, r7
 800b046:	d003      	beq.n	800b050 <_dtoa_r+0x980>
 800b048:	4641      	mov	r1, r8
 800b04a:	4620      	mov	r0, r4
 800b04c:	f000 f9be 	bl	800b3cc <_Bfree>
 800b050:	4639      	mov	r1, r7
 800b052:	4620      	mov	r0, r4
 800b054:	f000 f9ba 	bl	800b3cc <_Bfree>
 800b058:	e69c      	b.n	800ad94 <_dtoa_r+0x6c4>
 800b05a:	2600      	movs	r6, #0
 800b05c:	4637      	mov	r7, r6
 800b05e:	e7e1      	b.n	800b024 <_dtoa_r+0x954>
 800b060:	46bb      	mov	fp, r7
 800b062:	4637      	mov	r7, r6
 800b064:	e599      	b.n	800ab9a <_dtoa_r+0x4ca>
 800b066:	bf00      	nop
 800b068:	40240000 	.word	0x40240000
 800b06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 80c8 	beq.w	800b204 <_dtoa_r+0xb34>
 800b074:	9b04      	ldr	r3, [sp, #16]
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	2d00      	cmp	r5, #0
 800b07a:	dd05      	ble.n	800b088 <_dtoa_r+0x9b8>
 800b07c:	4639      	mov	r1, r7
 800b07e:	462a      	mov	r2, r5
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fb73 	bl	800b76c <__lshift>
 800b086:	4607      	mov	r7, r0
 800b088:	f1b8 0f00 	cmp.w	r8, #0
 800b08c:	d05b      	beq.n	800b146 <_dtoa_r+0xa76>
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	4620      	mov	r0, r4
 800b092:	f000 f95b 	bl	800b34c <_Balloc>
 800b096:	4605      	mov	r5, r0
 800b098:	b928      	cbnz	r0, 800b0a6 <_dtoa_r+0x9d6>
 800b09a:	4b83      	ldr	r3, [pc, #524]	; (800b2a8 <_dtoa_r+0xbd8>)
 800b09c:	4602      	mov	r2, r0
 800b09e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b0a2:	f7ff bb2e 	b.w	800a702 <_dtoa_r+0x32>
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	3202      	adds	r2, #2
 800b0aa:	0092      	lsls	r2, r2, #2
 800b0ac:	f107 010c 	add.w	r1, r7, #12
 800b0b0:	300c      	adds	r0, #12
 800b0b2:	f000 ff3d 	bl	800bf30 <memcpy>
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 fb56 	bl	800b76c <__lshift>
 800b0c0:	9b00      	ldr	r3, [sp, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	9308      	str	r3, [sp, #32]
 800b0ce:	9b02      	ldr	r3, [sp, #8]
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	46b8      	mov	r8, r7
 800b0d6:	9306      	str	r3, [sp, #24]
 800b0d8:	4607      	mov	r7, r0
 800b0da:	9b04      	ldr	r3, [sp, #16]
 800b0dc:	4631      	mov	r1, r6
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	9301      	str	r3, [sp, #4]
 800b0e4:	f7ff fa6b 	bl	800a5be <quorem>
 800b0e8:	4641      	mov	r1, r8
 800b0ea:	9002      	str	r0, [sp, #8]
 800b0ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b0f0:	4650      	mov	r0, sl
 800b0f2:	f000 fba7 	bl	800b844 <__mcmp>
 800b0f6:	463a      	mov	r2, r7
 800b0f8:	9005      	str	r0, [sp, #20]
 800b0fa:	4631      	mov	r1, r6
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 fbbd 	bl	800b87c <__mdiff>
 800b102:	68c2      	ldr	r2, [r0, #12]
 800b104:	4605      	mov	r5, r0
 800b106:	bb02      	cbnz	r2, 800b14a <_dtoa_r+0xa7a>
 800b108:	4601      	mov	r1, r0
 800b10a:	4650      	mov	r0, sl
 800b10c:	f000 fb9a 	bl	800b844 <__mcmp>
 800b110:	4602      	mov	r2, r0
 800b112:	4629      	mov	r1, r5
 800b114:	4620      	mov	r0, r4
 800b116:	9209      	str	r2, [sp, #36]	; 0x24
 800b118:	f000 f958 	bl	800b3cc <_Bfree>
 800b11c:	9b07      	ldr	r3, [sp, #28]
 800b11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b120:	9d04      	ldr	r5, [sp, #16]
 800b122:	ea43 0102 	orr.w	r1, r3, r2
 800b126:	9b06      	ldr	r3, [sp, #24]
 800b128:	4319      	orrs	r1, r3
 800b12a:	d110      	bne.n	800b14e <_dtoa_r+0xa7e>
 800b12c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b130:	d029      	beq.n	800b186 <_dtoa_r+0xab6>
 800b132:	9b05      	ldr	r3, [sp, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd02      	ble.n	800b13e <_dtoa_r+0xa6e>
 800b138:	9b02      	ldr	r3, [sp, #8]
 800b13a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b13e:	9b01      	ldr	r3, [sp, #4]
 800b140:	f883 9000 	strb.w	r9, [r3]
 800b144:	e774      	b.n	800b030 <_dtoa_r+0x960>
 800b146:	4638      	mov	r0, r7
 800b148:	e7ba      	b.n	800b0c0 <_dtoa_r+0x9f0>
 800b14a:	2201      	movs	r2, #1
 800b14c:	e7e1      	b.n	800b112 <_dtoa_r+0xa42>
 800b14e:	9b05      	ldr	r3, [sp, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	db04      	blt.n	800b15e <_dtoa_r+0xa8e>
 800b154:	9907      	ldr	r1, [sp, #28]
 800b156:	430b      	orrs	r3, r1
 800b158:	9906      	ldr	r1, [sp, #24]
 800b15a:	430b      	orrs	r3, r1
 800b15c:	d120      	bne.n	800b1a0 <_dtoa_r+0xad0>
 800b15e:	2a00      	cmp	r2, #0
 800b160:	dded      	ble.n	800b13e <_dtoa_r+0xa6e>
 800b162:	4651      	mov	r1, sl
 800b164:	2201      	movs	r2, #1
 800b166:	4620      	mov	r0, r4
 800b168:	f000 fb00 	bl	800b76c <__lshift>
 800b16c:	4631      	mov	r1, r6
 800b16e:	4682      	mov	sl, r0
 800b170:	f000 fb68 	bl	800b844 <__mcmp>
 800b174:	2800      	cmp	r0, #0
 800b176:	dc03      	bgt.n	800b180 <_dtoa_r+0xab0>
 800b178:	d1e1      	bne.n	800b13e <_dtoa_r+0xa6e>
 800b17a:	f019 0f01 	tst.w	r9, #1
 800b17e:	d0de      	beq.n	800b13e <_dtoa_r+0xa6e>
 800b180:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b184:	d1d8      	bne.n	800b138 <_dtoa_r+0xa68>
 800b186:	9a01      	ldr	r2, [sp, #4]
 800b188:	2339      	movs	r3, #57	; 0x39
 800b18a:	7013      	strb	r3, [r2, #0]
 800b18c:	462b      	mov	r3, r5
 800b18e:	461d      	mov	r5, r3
 800b190:	3b01      	subs	r3, #1
 800b192:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b196:	2a39      	cmp	r2, #57	; 0x39
 800b198:	d06c      	beq.n	800b274 <_dtoa_r+0xba4>
 800b19a:	3201      	adds	r2, #1
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	e747      	b.n	800b030 <_dtoa_r+0x960>
 800b1a0:	2a00      	cmp	r2, #0
 800b1a2:	dd07      	ble.n	800b1b4 <_dtoa_r+0xae4>
 800b1a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1a8:	d0ed      	beq.n	800b186 <_dtoa_r+0xab6>
 800b1aa:	9a01      	ldr	r2, [sp, #4]
 800b1ac:	f109 0301 	add.w	r3, r9, #1
 800b1b0:	7013      	strb	r3, [r2, #0]
 800b1b2:	e73d      	b.n	800b030 <_dtoa_r+0x960>
 800b1b4:	9b04      	ldr	r3, [sp, #16]
 800b1b6:	9a08      	ldr	r2, [sp, #32]
 800b1b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d043      	beq.n	800b248 <_dtoa_r+0xb78>
 800b1c0:	4651      	mov	r1, sl
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	220a      	movs	r2, #10
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 f922 	bl	800b410 <__multadd>
 800b1cc:	45b8      	cmp	r8, r7
 800b1ce:	4682      	mov	sl, r0
 800b1d0:	f04f 0300 	mov.w	r3, #0
 800b1d4:	f04f 020a 	mov.w	r2, #10
 800b1d8:	4641      	mov	r1, r8
 800b1da:	4620      	mov	r0, r4
 800b1dc:	d107      	bne.n	800b1ee <_dtoa_r+0xb1e>
 800b1de:	f000 f917 	bl	800b410 <__multadd>
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	9b04      	ldr	r3, [sp, #16]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	9304      	str	r3, [sp, #16]
 800b1ec:	e775      	b.n	800b0da <_dtoa_r+0xa0a>
 800b1ee:	f000 f90f 	bl	800b410 <__multadd>
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	4680      	mov	r8, r0
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	220a      	movs	r2, #10
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 f908 	bl	800b410 <__multadd>
 800b200:	4607      	mov	r7, r0
 800b202:	e7f0      	b.n	800b1e6 <_dtoa_r+0xb16>
 800b204:	9b04      	ldr	r3, [sp, #16]
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	9d00      	ldr	r5, [sp, #0]
 800b20a:	4631      	mov	r1, r6
 800b20c:	4650      	mov	r0, sl
 800b20e:	f7ff f9d6 	bl	800a5be <quorem>
 800b212:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b216:	9b00      	ldr	r3, [sp, #0]
 800b218:	f805 9b01 	strb.w	r9, [r5], #1
 800b21c:	1aea      	subs	r2, r5, r3
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	4293      	cmp	r3, r2
 800b222:	dd07      	ble.n	800b234 <_dtoa_r+0xb64>
 800b224:	4651      	mov	r1, sl
 800b226:	2300      	movs	r3, #0
 800b228:	220a      	movs	r2, #10
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 f8f0 	bl	800b410 <__multadd>
 800b230:	4682      	mov	sl, r0
 800b232:	e7ea      	b.n	800b20a <_dtoa_r+0xb3a>
 800b234:	9b01      	ldr	r3, [sp, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	bfc8      	it	gt
 800b23a:	461d      	movgt	r5, r3
 800b23c:	9b00      	ldr	r3, [sp, #0]
 800b23e:	bfd8      	it	le
 800b240:	2501      	movle	r5, #1
 800b242:	441d      	add	r5, r3
 800b244:	f04f 0800 	mov.w	r8, #0
 800b248:	4651      	mov	r1, sl
 800b24a:	2201      	movs	r2, #1
 800b24c:	4620      	mov	r0, r4
 800b24e:	f000 fa8d 	bl	800b76c <__lshift>
 800b252:	4631      	mov	r1, r6
 800b254:	4682      	mov	sl, r0
 800b256:	f000 faf5 	bl	800b844 <__mcmp>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	dc96      	bgt.n	800b18c <_dtoa_r+0xabc>
 800b25e:	d102      	bne.n	800b266 <_dtoa_r+0xb96>
 800b260:	f019 0f01 	tst.w	r9, #1
 800b264:	d192      	bne.n	800b18c <_dtoa_r+0xabc>
 800b266:	462b      	mov	r3, r5
 800b268:	461d      	mov	r5, r3
 800b26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b26e:	2a30      	cmp	r2, #48	; 0x30
 800b270:	d0fa      	beq.n	800b268 <_dtoa_r+0xb98>
 800b272:	e6dd      	b.n	800b030 <_dtoa_r+0x960>
 800b274:	9a00      	ldr	r2, [sp, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d189      	bne.n	800b18e <_dtoa_r+0xabe>
 800b27a:	f10b 0b01 	add.w	fp, fp, #1
 800b27e:	2331      	movs	r3, #49	; 0x31
 800b280:	e796      	b.n	800b1b0 <_dtoa_r+0xae0>
 800b282:	4b0a      	ldr	r3, [pc, #40]	; (800b2ac <_dtoa_r+0xbdc>)
 800b284:	f7ff ba99 	b.w	800a7ba <_dtoa_r+0xea>
 800b288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f47f aa6d 	bne.w	800a76a <_dtoa_r+0x9a>
 800b290:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <_dtoa_r+0xbe0>)
 800b292:	f7ff ba92 	b.w	800a7ba <_dtoa_r+0xea>
 800b296:	9b01      	ldr	r3, [sp, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	dcb5      	bgt.n	800b208 <_dtoa_r+0xb38>
 800b29c:	9b07      	ldr	r3, [sp, #28]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	f73f aeb1 	bgt.w	800b006 <_dtoa_r+0x936>
 800b2a4:	e7b0      	b.n	800b208 <_dtoa_r+0xb38>
 800b2a6:	bf00      	nop
 800b2a8:	0800c260 	.word	0x0800c260
 800b2ac:	0800c1c0 	.word	0x0800c1c0
 800b2b0:	0800c1e4 	.word	0x0800c1e4

0800b2b4 <_free_r>:
 800b2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2b6:	2900      	cmp	r1, #0
 800b2b8:	d044      	beq.n	800b344 <_free_r+0x90>
 800b2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2be:	9001      	str	r0, [sp, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b2c6:	bfb8      	it	lt
 800b2c8:	18e4      	addlt	r4, r4, r3
 800b2ca:	f7fe fa6f 	bl	80097ac <__malloc_lock>
 800b2ce:	4a1e      	ldr	r2, [pc, #120]	; (800b348 <_free_r+0x94>)
 800b2d0:	9801      	ldr	r0, [sp, #4]
 800b2d2:	6813      	ldr	r3, [r2, #0]
 800b2d4:	b933      	cbnz	r3, 800b2e4 <_free_r+0x30>
 800b2d6:	6063      	str	r3, [r4, #4]
 800b2d8:	6014      	str	r4, [r2, #0]
 800b2da:	b003      	add	sp, #12
 800b2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2e0:	f7fe ba6a 	b.w	80097b8 <__malloc_unlock>
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	d908      	bls.n	800b2fa <_free_r+0x46>
 800b2e8:	6825      	ldr	r5, [r4, #0]
 800b2ea:	1961      	adds	r1, r4, r5
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	bf01      	itttt	eq
 800b2f0:	6819      	ldreq	r1, [r3, #0]
 800b2f2:	685b      	ldreq	r3, [r3, #4]
 800b2f4:	1949      	addeq	r1, r1, r5
 800b2f6:	6021      	streq	r1, [r4, #0]
 800b2f8:	e7ed      	b.n	800b2d6 <_free_r+0x22>
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	b10b      	cbz	r3, 800b304 <_free_r+0x50>
 800b300:	42a3      	cmp	r3, r4
 800b302:	d9fa      	bls.n	800b2fa <_free_r+0x46>
 800b304:	6811      	ldr	r1, [r2, #0]
 800b306:	1855      	adds	r5, r2, r1
 800b308:	42a5      	cmp	r5, r4
 800b30a:	d10b      	bne.n	800b324 <_free_r+0x70>
 800b30c:	6824      	ldr	r4, [r4, #0]
 800b30e:	4421      	add	r1, r4
 800b310:	1854      	adds	r4, r2, r1
 800b312:	42a3      	cmp	r3, r4
 800b314:	6011      	str	r1, [r2, #0]
 800b316:	d1e0      	bne.n	800b2da <_free_r+0x26>
 800b318:	681c      	ldr	r4, [r3, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	6053      	str	r3, [r2, #4]
 800b31e:	440c      	add	r4, r1
 800b320:	6014      	str	r4, [r2, #0]
 800b322:	e7da      	b.n	800b2da <_free_r+0x26>
 800b324:	d902      	bls.n	800b32c <_free_r+0x78>
 800b326:	230c      	movs	r3, #12
 800b328:	6003      	str	r3, [r0, #0]
 800b32a:	e7d6      	b.n	800b2da <_free_r+0x26>
 800b32c:	6825      	ldr	r5, [r4, #0]
 800b32e:	1961      	adds	r1, r4, r5
 800b330:	428b      	cmp	r3, r1
 800b332:	bf04      	itt	eq
 800b334:	6819      	ldreq	r1, [r3, #0]
 800b336:	685b      	ldreq	r3, [r3, #4]
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	bf04      	itt	eq
 800b33c:	1949      	addeq	r1, r1, r5
 800b33e:	6021      	streq	r1, [r4, #0]
 800b340:	6054      	str	r4, [r2, #4]
 800b342:	e7ca      	b.n	800b2da <_free_r+0x26>
 800b344:	b003      	add	sp, #12
 800b346:	bd30      	pop	{r4, r5, pc}
 800b348:	20000b10 	.word	0x20000b10

0800b34c <_Balloc>:
 800b34c:	b570      	push	{r4, r5, r6, lr}
 800b34e:	69c6      	ldr	r6, [r0, #28]
 800b350:	4604      	mov	r4, r0
 800b352:	460d      	mov	r5, r1
 800b354:	b976      	cbnz	r6, 800b374 <_Balloc+0x28>
 800b356:	2010      	movs	r0, #16
 800b358:	f7fe f978 	bl	800964c <malloc>
 800b35c:	4602      	mov	r2, r0
 800b35e:	61e0      	str	r0, [r4, #28]
 800b360:	b920      	cbnz	r0, 800b36c <_Balloc+0x20>
 800b362:	4b18      	ldr	r3, [pc, #96]	; (800b3c4 <_Balloc+0x78>)
 800b364:	4818      	ldr	r0, [pc, #96]	; (800b3c8 <_Balloc+0x7c>)
 800b366:	216b      	movs	r1, #107	; 0x6b
 800b368:	f000 fdf0 	bl	800bf4c <__assert_func>
 800b36c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b370:	6006      	str	r6, [r0, #0]
 800b372:	60c6      	str	r6, [r0, #12]
 800b374:	69e6      	ldr	r6, [r4, #28]
 800b376:	68f3      	ldr	r3, [r6, #12]
 800b378:	b183      	cbz	r3, 800b39c <_Balloc+0x50>
 800b37a:	69e3      	ldr	r3, [r4, #28]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b382:	b9b8      	cbnz	r0, 800b3b4 <_Balloc+0x68>
 800b384:	2101      	movs	r1, #1
 800b386:	fa01 f605 	lsl.w	r6, r1, r5
 800b38a:	1d72      	adds	r2, r6, #5
 800b38c:	0092      	lsls	r2, r2, #2
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fdfa 	bl	800bf88 <_calloc_r>
 800b394:	b160      	cbz	r0, 800b3b0 <_Balloc+0x64>
 800b396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b39a:	e00e      	b.n	800b3ba <_Balloc+0x6e>
 800b39c:	2221      	movs	r2, #33	; 0x21
 800b39e:	2104      	movs	r1, #4
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fdf1 	bl	800bf88 <_calloc_r>
 800b3a6:	69e3      	ldr	r3, [r4, #28]
 800b3a8:	60f0      	str	r0, [r6, #12]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1e4      	bne.n	800b37a <_Balloc+0x2e>
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}
 800b3b4:	6802      	ldr	r2, [r0, #0]
 800b3b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3c0:	e7f7      	b.n	800b3b2 <_Balloc+0x66>
 800b3c2:	bf00      	nop
 800b3c4:	0800c1f1 	.word	0x0800c1f1
 800b3c8:	0800c271 	.word	0x0800c271

0800b3cc <_Bfree>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	69c6      	ldr	r6, [r0, #28]
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	b976      	cbnz	r6, 800b3f4 <_Bfree+0x28>
 800b3d6:	2010      	movs	r0, #16
 800b3d8:	f7fe f938 	bl	800964c <malloc>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	61e8      	str	r0, [r5, #28]
 800b3e0:	b920      	cbnz	r0, 800b3ec <_Bfree+0x20>
 800b3e2:	4b09      	ldr	r3, [pc, #36]	; (800b408 <_Bfree+0x3c>)
 800b3e4:	4809      	ldr	r0, [pc, #36]	; (800b40c <_Bfree+0x40>)
 800b3e6:	218f      	movs	r1, #143	; 0x8f
 800b3e8:	f000 fdb0 	bl	800bf4c <__assert_func>
 800b3ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3f0:	6006      	str	r6, [r0, #0]
 800b3f2:	60c6      	str	r6, [r0, #12]
 800b3f4:	b13c      	cbz	r4, 800b406 <_Bfree+0x3a>
 800b3f6:	69eb      	ldr	r3, [r5, #28]
 800b3f8:	6862      	ldr	r2, [r4, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b400:	6021      	str	r1, [r4, #0]
 800b402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b406:	bd70      	pop	{r4, r5, r6, pc}
 800b408:	0800c1f1 	.word	0x0800c1f1
 800b40c:	0800c271 	.word	0x0800c271

0800b410 <__multadd>:
 800b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b414:	690d      	ldr	r5, [r1, #16]
 800b416:	4607      	mov	r7, r0
 800b418:	460c      	mov	r4, r1
 800b41a:	461e      	mov	r6, r3
 800b41c:	f101 0c14 	add.w	ip, r1, #20
 800b420:	2000      	movs	r0, #0
 800b422:	f8dc 3000 	ldr.w	r3, [ip]
 800b426:	b299      	uxth	r1, r3
 800b428:	fb02 6101 	mla	r1, r2, r1, r6
 800b42c:	0c1e      	lsrs	r6, r3, #16
 800b42e:	0c0b      	lsrs	r3, r1, #16
 800b430:	fb02 3306 	mla	r3, r2, r6, r3
 800b434:	b289      	uxth	r1, r1
 800b436:	3001      	adds	r0, #1
 800b438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b43c:	4285      	cmp	r5, r0
 800b43e:	f84c 1b04 	str.w	r1, [ip], #4
 800b442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b446:	dcec      	bgt.n	800b422 <__multadd+0x12>
 800b448:	b30e      	cbz	r6, 800b48e <__multadd+0x7e>
 800b44a:	68a3      	ldr	r3, [r4, #8]
 800b44c:	42ab      	cmp	r3, r5
 800b44e:	dc19      	bgt.n	800b484 <__multadd+0x74>
 800b450:	6861      	ldr	r1, [r4, #4]
 800b452:	4638      	mov	r0, r7
 800b454:	3101      	adds	r1, #1
 800b456:	f7ff ff79 	bl	800b34c <_Balloc>
 800b45a:	4680      	mov	r8, r0
 800b45c:	b928      	cbnz	r0, 800b46a <__multadd+0x5a>
 800b45e:	4602      	mov	r2, r0
 800b460:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <__multadd+0x84>)
 800b462:	480d      	ldr	r0, [pc, #52]	; (800b498 <__multadd+0x88>)
 800b464:	21ba      	movs	r1, #186	; 0xba
 800b466:	f000 fd71 	bl	800bf4c <__assert_func>
 800b46a:	6922      	ldr	r2, [r4, #16]
 800b46c:	3202      	adds	r2, #2
 800b46e:	f104 010c 	add.w	r1, r4, #12
 800b472:	0092      	lsls	r2, r2, #2
 800b474:	300c      	adds	r0, #12
 800b476:	f000 fd5b 	bl	800bf30 <memcpy>
 800b47a:	4621      	mov	r1, r4
 800b47c:	4638      	mov	r0, r7
 800b47e:	f7ff ffa5 	bl	800b3cc <_Bfree>
 800b482:	4644      	mov	r4, r8
 800b484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b488:	3501      	adds	r5, #1
 800b48a:	615e      	str	r6, [r3, #20]
 800b48c:	6125      	str	r5, [r4, #16]
 800b48e:	4620      	mov	r0, r4
 800b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b494:	0800c260 	.word	0x0800c260
 800b498:	0800c271 	.word	0x0800c271

0800b49c <__hi0bits>:
 800b49c:	0c03      	lsrs	r3, r0, #16
 800b49e:	041b      	lsls	r3, r3, #16
 800b4a0:	b9d3      	cbnz	r3, 800b4d8 <__hi0bits+0x3c>
 800b4a2:	0400      	lsls	r0, r0, #16
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4aa:	bf04      	itt	eq
 800b4ac:	0200      	lsleq	r0, r0, #8
 800b4ae:	3308      	addeq	r3, #8
 800b4b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4b4:	bf04      	itt	eq
 800b4b6:	0100      	lsleq	r0, r0, #4
 800b4b8:	3304      	addeq	r3, #4
 800b4ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4be:	bf04      	itt	eq
 800b4c0:	0080      	lsleq	r0, r0, #2
 800b4c2:	3302      	addeq	r3, #2
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	db05      	blt.n	800b4d4 <__hi0bits+0x38>
 800b4c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4cc:	f103 0301 	add.w	r3, r3, #1
 800b4d0:	bf08      	it	eq
 800b4d2:	2320      	moveq	r3, #32
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	4770      	bx	lr
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e7e4      	b.n	800b4a6 <__hi0bits+0xa>

0800b4dc <__lo0bits>:
 800b4dc:	6803      	ldr	r3, [r0, #0]
 800b4de:	f013 0207 	ands.w	r2, r3, #7
 800b4e2:	d00c      	beq.n	800b4fe <__lo0bits+0x22>
 800b4e4:	07d9      	lsls	r1, r3, #31
 800b4e6:	d422      	bmi.n	800b52e <__lo0bits+0x52>
 800b4e8:	079a      	lsls	r2, r3, #30
 800b4ea:	bf49      	itett	mi
 800b4ec:	085b      	lsrmi	r3, r3, #1
 800b4ee:	089b      	lsrpl	r3, r3, #2
 800b4f0:	6003      	strmi	r3, [r0, #0]
 800b4f2:	2201      	movmi	r2, #1
 800b4f4:	bf5c      	itt	pl
 800b4f6:	6003      	strpl	r3, [r0, #0]
 800b4f8:	2202      	movpl	r2, #2
 800b4fa:	4610      	mov	r0, r2
 800b4fc:	4770      	bx	lr
 800b4fe:	b299      	uxth	r1, r3
 800b500:	b909      	cbnz	r1, 800b506 <__lo0bits+0x2a>
 800b502:	0c1b      	lsrs	r3, r3, #16
 800b504:	2210      	movs	r2, #16
 800b506:	b2d9      	uxtb	r1, r3
 800b508:	b909      	cbnz	r1, 800b50e <__lo0bits+0x32>
 800b50a:	3208      	adds	r2, #8
 800b50c:	0a1b      	lsrs	r3, r3, #8
 800b50e:	0719      	lsls	r1, r3, #28
 800b510:	bf04      	itt	eq
 800b512:	091b      	lsreq	r3, r3, #4
 800b514:	3204      	addeq	r2, #4
 800b516:	0799      	lsls	r1, r3, #30
 800b518:	bf04      	itt	eq
 800b51a:	089b      	lsreq	r3, r3, #2
 800b51c:	3202      	addeq	r2, #2
 800b51e:	07d9      	lsls	r1, r3, #31
 800b520:	d403      	bmi.n	800b52a <__lo0bits+0x4e>
 800b522:	085b      	lsrs	r3, r3, #1
 800b524:	f102 0201 	add.w	r2, r2, #1
 800b528:	d003      	beq.n	800b532 <__lo0bits+0x56>
 800b52a:	6003      	str	r3, [r0, #0]
 800b52c:	e7e5      	b.n	800b4fa <__lo0bits+0x1e>
 800b52e:	2200      	movs	r2, #0
 800b530:	e7e3      	b.n	800b4fa <__lo0bits+0x1e>
 800b532:	2220      	movs	r2, #32
 800b534:	e7e1      	b.n	800b4fa <__lo0bits+0x1e>
	...

0800b538 <__i2b>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	460c      	mov	r4, r1
 800b53c:	2101      	movs	r1, #1
 800b53e:	f7ff ff05 	bl	800b34c <_Balloc>
 800b542:	4602      	mov	r2, r0
 800b544:	b928      	cbnz	r0, 800b552 <__i2b+0x1a>
 800b546:	4b05      	ldr	r3, [pc, #20]	; (800b55c <__i2b+0x24>)
 800b548:	4805      	ldr	r0, [pc, #20]	; (800b560 <__i2b+0x28>)
 800b54a:	f240 1145 	movw	r1, #325	; 0x145
 800b54e:	f000 fcfd 	bl	800bf4c <__assert_func>
 800b552:	2301      	movs	r3, #1
 800b554:	6144      	str	r4, [r0, #20]
 800b556:	6103      	str	r3, [r0, #16]
 800b558:	bd10      	pop	{r4, pc}
 800b55a:	bf00      	nop
 800b55c:	0800c260 	.word	0x0800c260
 800b560:	0800c271 	.word	0x0800c271

0800b564 <__multiply>:
 800b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	4691      	mov	r9, r2
 800b56a:	690a      	ldr	r2, [r1, #16]
 800b56c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b570:	429a      	cmp	r2, r3
 800b572:	bfb8      	it	lt
 800b574:	460b      	movlt	r3, r1
 800b576:	460c      	mov	r4, r1
 800b578:	bfbc      	itt	lt
 800b57a:	464c      	movlt	r4, r9
 800b57c:	4699      	movlt	r9, r3
 800b57e:	6927      	ldr	r7, [r4, #16]
 800b580:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b584:	68a3      	ldr	r3, [r4, #8]
 800b586:	6861      	ldr	r1, [r4, #4]
 800b588:	eb07 060a 	add.w	r6, r7, sl
 800b58c:	42b3      	cmp	r3, r6
 800b58e:	b085      	sub	sp, #20
 800b590:	bfb8      	it	lt
 800b592:	3101      	addlt	r1, #1
 800b594:	f7ff feda 	bl	800b34c <_Balloc>
 800b598:	b930      	cbnz	r0, 800b5a8 <__multiply+0x44>
 800b59a:	4602      	mov	r2, r0
 800b59c:	4b44      	ldr	r3, [pc, #272]	; (800b6b0 <__multiply+0x14c>)
 800b59e:	4845      	ldr	r0, [pc, #276]	; (800b6b4 <__multiply+0x150>)
 800b5a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b5a4:	f000 fcd2 	bl	800bf4c <__assert_func>
 800b5a8:	f100 0514 	add.w	r5, r0, #20
 800b5ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	4543      	cmp	r3, r8
 800b5b6:	d321      	bcc.n	800b5fc <__multiply+0x98>
 800b5b8:	f104 0314 	add.w	r3, r4, #20
 800b5bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5c0:	f109 0314 	add.w	r3, r9, #20
 800b5c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b5c8:	9202      	str	r2, [sp, #8]
 800b5ca:	1b3a      	subs	r2, r7, r4
 800b5cc:	3a15      	subs	r2, #21
 800b5ce:	f022 0203 	bic.w	r2, r2, #3
 800b5d2:	3204      	adds	r2, #4
 800b5d4:	f104 0115 	add.w	r1, r4, #21
 800b5d8:	428f      	cmp	r7, r1
 800b5da:	bf38      	it	cc
 800b5dc:	2204      	movcc	r2, #4
 800b5de:	9201      	str	r2, [sp, #4]
 800b5e0:	9a02      	ldr	r2, [sp, #8]
 800b5e2:	9303      	str	r3, [sp, #12]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d80c      	bhi.n	800b602 <__multiply+0x9e>
 800b5e8:	2e00      	cmp	r6, #0
 800b5ea:	dd03      	ble.n	800b5f4 <__multiply+0x90>
 800b5ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d05b      	beq.n	800b6ac <__multiply+0x148>
 800b5f4:	6106      	str	r6, [r0, #16]
 800b5f6:	b005      	add	sp, #20
 800b5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fc:	f843 2b04 	str.w	r2, [r3], #4
 800b600:	e7d8      	b.n	800b5b4 <__multiply+0x50>
 800b602:	f8b3 a000 	ldrh.w	sl, [r3]
 800b606:	f1ba 0f00 	cmp.w	sl, #0
 800b60a:	d024      	beq.n	800b656 <__multiply+0xf2>
 800b60c:	f104 0e14 	add.w	lr, r4, #20
 800b610:	46a9      	mov	r9, r5
 800b612:	f04f 0c00 	mov.w	ip, #0
 800b616:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b61a:	f8d9 1000 	ldr.w	r1, [r9]
 800b61e:	fa1f fb82 	uxth.w	fp, r2
 800b622:	b289      	uxth	r1, r1
 800b624:	fb0a 110b 	mla	r1, sl, fp, r1
 800b628:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b62c:	f8d9 2000 	ldr.w	r2, [r9]
 800b630:	4461      	add	r1, ip
 800b632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b636:	fb0a c20b 	mla	r2, sl, fp, ip
 800b63a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b63e:	b289      	uxth	r1, r1
 800b640:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b644:	4577      	cmp	r7, lr
 800b646:	f849 1b04 	str.w	r1, [r9], #4
 800b64a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b64e:	d8e2      	bhi.n	800b616 <__multiply+0xb2>
 800b650:	9a01      	ldr	r2, [sp, #4]
 800b652:	f845 c002 	str.w	ip, [r5, r2]
 800b656:	9a03      	ldr	r2, [sp, #12]
 800b658:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b65c:	3304      	adds	r3, #4
 800b65e:	f1b9 0f00 	cmp.w	r9, #0
 800b662:	d021      	beq.n	800b6a8 <__multiply+0x144>
 800b664:	6829      	ldr	r1, [r5, #0]
 800b666:	f104 0c14 	add.w	ip, r4, #20
 800b66a:	46ae      	mov	lr, r5
 800b66c:	f04f 0a00 	mov.w	sl, #0
 800b670:	f8bc b000 	ldrh.w	fp, [ip]
 800b674:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b678:	fb09 220b 	mla	r2, r9, fp, r2
 800b67c:	4452      	add	r2, sl
 800b67e:	b289      	uxth	r1, r1
 800b680:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b684:	f84e 1b04 	str.w	r1, [lr], #4
 800b688:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b68c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b690:	f8be 1000 	ldrh.w	r1, [lr]
 800b694:	fb09 110a 	mla	r1, r9, sl, r1
 800b698:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b69c:	4567      	cmp	r7, ip
 800b69e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6a2:	d8e5      	bhi.n	800b670 <__multiply+0x10c>
 800b6a4:	9a01      	ldr	r2, [sp, #4]
 800b6a6:	50a9      	str	r1, [r5, r2]
 800b6a8:	3504      	adds	r5, #4
 800b6aa:	e799      	b.n	800b5e0 <__multiply+0x7c>
 800b6ac:	3e01      	subs	r6, #1
 800b6ae:	e79b      	b.n	800b5e8 <__multiply+0x84>
 800b6b0:	0800c260 	.word	0x0800c260
 800b6b4:	0800c271 	.word	0x0800c271

0800b6b8 <__pow5mult>:
 800b6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6bc:	4615      	mov	r5, r2
 800b6be:	f012 0203 	ands.w	r2, r2, #3
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	460f      	mov	r7, r1
 800b6c6:	d007      	beq.n	800b6d8 <__pow5mult+0x20>
 800b6c8:	4c25      	ldr	r4, [pc, #148]	; (800b760 <__pow5mult+0xa8>)
 800b6ca:	3a01      	subs	r2, #1
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6d2:	f7ff fe9d 	bl	800b410 <__multadd>
 800b6d6:	4607      	mov	r7, r0
 800b6d8:	10ad      	asrs	r5, r5, #2
 800b6da:	d03d      	beq.n	800b758 <__pow5mult+0xa0>
 800b6dc:	69f4      	ldr	r4, [r6, #28]
 800b6de:	b97c      	cbnz	r4, 800b700 <__pow5mult+0x48>
 800b6e0:	2010      	movs	r0, #16
 800b6e2:	f7fd ffb3 	bl	800964c <malloc>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	61f0      	str	r0, [r6, #28]
 800b6ea:	b928      	cbnz	r0, 800b6f8 <__pow5mult+0x40>
 800b6ec:	4b1d      	ldr	r3, [pc, #116]	; (800b764 <__pow5mult+0xac>)
 800b6ee:	481e      	ldr	r0, [pc, #120]	; (800b768 <__pow5mult+0xb0>)
 800b6f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b6f4:	f000 fc2a 	bl	800bf4c <__assert_func>
 800b6f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6fc:	6004      	str	r4, [r0, #0]
 800b6fe:	60c4      	str	r4, [r0, #12]
 800b700:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b708:	b94c      	cbnz	r4, 800b71e <__pow5mult+0x66>
 800b70a:	f240 2171 	movw	r1, #625	; 0x271
 800b70e:	4630      	mov	r0, r6
 800b710:	f7ff ff12 	bl	800b538 <__i2b>
 800b714:	2300      	movs	r3, #0
 800b716:	f8c8 0008 	str.w	r0, [r8, #8]
 800b71a:	4604      	mov	r4, r0
 800b71c:	6003      	str	r3, [r0, #0]
 800b71e:	f04f 0900 	mov.w	r9, #0
 800b722:	07eb      	lsls	r3, r5, #31
 800b724:	d50a      	bpl.n	800b73c <__pow5mult+0x84>
 800b726:	4639      	mov	r1, r7
 800b728:	4622      	mov	r2, r4
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff ff1a 	bl	800b564 <__multiply>
 800b730:	4639      	mov	r1, r7
 800b732:	4680      	mov	r8, r0
 800b734:	4630      	mov	r0, r6
 800b736:	f7ff fe49 	bl	800b3cc <_Bfree>
 800b73a:	4647      	mov	r7, r8
 800b73c:	106d      	asrs	r5, r5, #1
 800b73e:	d00b      	beq.n	800b758 <__pow5mult+0xa0>
 800b740:	6820      	ldr	r0, [r4, #0]
 800b742:	b938      	cbnz	r0, 800b754 <__pow5mult+0x9c>
 800b744:	4622      	mov	r2, r4
 800b746:	4621      	mov	r1, r4
 800b748:	4630      	mov	r0, r6
 800b74a:	f7ff ff0b 	bl	800b564 <__multiply>
 800b74e:	6020      	str	r0, [r4, #0]
 800b750:	f8c0 9000 	str.w	r9, [r0]
 800b754:	4604      	mov	r4, r0
 800b756:	e7e4      	b.n	800b722 <__pow5mult+0x6a>
 800b758:	4638      	mov	r0, r7
 800b75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75e:	bf00      	nop
 800b760:	0800c3c0 	.word	0x0800c3c0
 800b764:	0800c1f1 	.word	0x0800c1f1
 800b768:	0800c271 	.word	0x0800c271

0800b76c <__lshift>:
 800b76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b770:	460c      	mov	r4, r1
 800b772:	6849      	ldr	r1, [r1, #4]
 800b774:	6923      	ldr	r3, [r4, #16]
 800b776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	4607      	mov	r7, r0
 800b77e:	4691      	mov	r9, r2
 800b780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b784:	f108 0601 	add.w	r6, r8, #1
 800b788:	42b3      	cmp	r3, r6
 800b78a:	db0b      	blt.n	800b7a4 <__lshift+0x38>
 800b78c:	4638      	mov	r0, r7
 800b78e:	f7ff fddd 	bl	800b34c <_Balloc>
 800b792:	4605      	mov	r5, r0
 800b794:	b948      	cbnz	r0, 800b7aa <__lshift+0x3e>
 800b796:	4602      	mov	r2, r0
 800b798:	4b28      	ldr	r3, [pc, #160]	; (800b83c <__lshift+0xd0>)
 800b79a:	4829      	ldr	r0, [pc, #164]	; (800b840 <__lshift+0xd4>)
 800b79c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b7a0:	f000 fbd4 	bl	800bf4c <__assert_func>
 800b7a4:	3101      	adds	r1, #1
 800b7a6:	005b      	lsls	r3, r3, #1
 800b7a8:	e7ee      	b.n	800b788 <__lshift+0x1c>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f100 0114 	add.w	r1, r0, #20
 800b7b0:	f100 0210 	add.w	r2, r0, #16
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	4553      	cmp	r3, sl
 800b7b8:	db33      	blt.n	800b822 <__lshift+0xb6>
 800b7ba:	6920      	ldr	r0, [r4, #16]
 800b7bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7c0:	f104 0314 	add.w	r3, r4, #20
 800b7c4:	f019 091f 	ands.w	r9, r9, #31
 800b7c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7d0:	d02b      	beq.n	800b82a <__lshift+0xbe>
 800b7d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b7d6:	468a      	mov	sl, r1
 800b7d8:	2200      	movs	r2, #0
 800b7da:	6818      	ldr	r0, [r3, #0]
 800b7dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b7e0:	4310      	orrs	r0, r2
 800b7e2:	f84a 0b04 	str.w	r0, [sl], #4
 800b7e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ea:	459c      	cmp	ip, r3
 800b7ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7f0:	d8f3      	bhi.n	800b7da <__lshift+0x6e>
 800b7f2:	ebac 0304 	sub.w	r3, ip, r4
 800b7f6:	3b15      	subs	r3, #21
 800b7f8:	f023 0303 	bic.w	r3, r3, #3
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	f104 0015 	add.w	r0, r4, #21
 800b802:	4584      	cmp	ip, r0
 800b804:	bf38      	it	cc
 800b806:	2304      	movcc	r3, #4
 800b808:	50ca      	str	r2, [r1, r3]
 800b80a:	b10a      	cbz	r2, 800b810 <__lshift+0xa4>
 800b80c:	f108 0602 	add.w	r6, r8, #2
 800b810:	3e01      	subs	r6, #1
 800b812:	4638      	mov	r0, r7
 800b814:	612e      	str	r6, [r5, #16]
 800b816:	4621      	mov	r1, r4
 800b818:	f7ff fdd8 	bl	800b3cc <_Bfree>
 800b81c:	4628      	mov	r0, r5
 800b81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b822:	f842 0f04 	str.w	r0, [r2, #4]!
 800b826:	3301      	adds	r3, #1
 800b828:	e7c5      	b.n	800b7b6 <__lshift+0x4a>
 800b82a:	3904      	subs	r1, #4
 800b82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b830:	f841 2f04 	str.w	r2, [r1, #4]!
 800b834:	459c      	cmp	ip, r3
 800b836:	d8f9      	bhi.n	800b82c <__lshift+0xc0>
 800b838:	e7ea      	b.n	800b810 <__lshift+0xa4>
 800b83a:	bf00      	nop
 800b83c:	0800c260 	.word	0x0800c260
 800b840:	0800c271 	.word	0x0800c271

0800b844 <__mcmp>:
 800b844:	b530      	push	{r4, r5, lr}
 800b846:	6902      	ldr	r2, [r0, #16]
 800b848:	690c      	ldr	r4, [r1, #16]
 800b84a:	1b12      	subs	r2, r2, r4
 800b84c:	d10e      	bne.n	800b86c <__mcmp+0x28>
 800b84e:	f100 0314 	add.w	r3, r0, #20
 800b852:	3114      	adds	r1, #20
 800b854:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b858:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b85c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b860:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b864:	42a5      	cmp	r5, r4
 800b866:	d003      	beq.n	800b870 <__mcmp+0x2c>
 800b868:	d305      	bcc.n	800b876 <__mcmp+0x32>
 800b86a:	2201      	movs	r2, #1
 800b86c:	4610      	mov	r0, r2
 800b86e:	bd30      	pop	{r4, r5, pc}
 800b870:	4283      	cmp	r3, r0
 800b872:	d3f3      	bcc.n	800b85c <__mcmp+0x18>
 800b874:	e7fa      	b.n	800b86c <__mcmp+0x28>
 800b876:	f04f 32ff 	mov.w	r2, #4294967295
 800b87a:	e7f7      	b.n	800b86c <__mcmp+0x28>

0800b87c <__mdiff>:
 800b87c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	460c      	mov	r4, r1
 800b882:	4606      	mov	r6, r0
 800b884:	4611      	mov	r1, r2
 800b886:	4620      	mov	r0, r4
 800b888:	4690      	mov	r8, r2
 800b88a:	f7ff ffdb 	bl	800b844 <__mcmp>
 800b88e:	1e05      	subs	r5, r0, #0
 800b890:	d110      	bne.n	800b8b4 <__mdiff+0x38>
 800b892:	4629      	mov	r1, r5
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff fd59 	bl	800b34c <_Balloc>
 800b89a:	b930      	cbnz	r0, 800b8aa <__mdiff+0x2e>
 800b89c:	4b3a      	ldr	r3, [pc, #232]	; (800b988 <__mdiff+0x10c>)
 800b89e:	4602      	mov	r2, r0
 800b8a0:	f240 2137 	movw	r1, #567	; 0x237
 800b8a4:	4839      	ldr	r0, [pc, #228]	; (800b98c <__mdiff+0x110>)
 800b8a6:	f000 fb51 	bl	800bf4c <__assert_func>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b4:	bfa4      	itt	ge
 800b8b6:	4643      	movge	r3, r8
 800b8b8:	46a0      	movge	r8, r4
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8c0:	bfa6      	itte	ge
 800b8c2:	461c      	movge	r4, r3
 800b8c4:	2500      	movge	r5, #0
 800b8c6:	2501      	movlt	r5, #1
 800b8c8:	f7ff fd40 	bl	800b34c <_Balloc>
 800b8cc:	b920      	cbnz	r0, 800b8d8 <__mdiff+0x5c>
 800b8ce:	4b2e      	ldr	r3, [pc, #184]	; (800b988 <__mdiff+0x10c>)
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	f240 2145 	movw	r1, #581	; 0x245
 800b8d6:	e7e5      	b.n	800b8a4 <__mdiff+0x28>
 800b8d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8dc:	6926      	ldr	r6, [r4, #16]
 800b8de:	60c5      	str	r5, [r0, #12]
 800b8e0:	f104 0914 	add.w	r9, r4, #20
 800b8e4:	f108 0514 	add.w	r5, r8, #20
 800b8e8:	f100 0e14 	add.w	lr, r0, #20
 800b8ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b8f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8f4:	f108 0210 	add.w	r2, r8, #16
 800b8f8:	46f2      	mov	sl, lr
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b900:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b904:	fa11 f88b 	uxtah	r8, r1, fp
 800b908:	b299      	uxth	r1, r3
 800b90a:	0c1b      	lsrs	r3, r3, #16
 800b90c:	eba8 0801 	sub.w	r8, r8, r1
 800b910:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b914:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b918:	fa1f f888 	uxth.w	r8, r8
 800b91c:	1419      	asrs	r1, r3, #16
 800b91e:	454e      	cmp	r6, r9
 800b920:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b924:	f84a 3b04 	str.w	r3, [sl], #4
 800b928:	d8e8      	bhi.n	800b8fc <__mdiff+0x80>
 800b92a:	1b33      	subs	r3, r6, r4
 800b92c:	3b15      	subs	r3, #21
 800b92e:	f023 0303 	bic.w	r3, r3, #3
 800b932:	3304      	adds	r3, #4
 800b934:	3415      	adds	r4, #21
 800b936:	42a6      	cmp	r6, r4
 800b938:	bf38      	it	cc
 800b93a:	2304      	movcc	r3, #4
 800b93c:	441d      	add	r5, r3
 800b93e:	4473      	add	r3, lr
 800b940:	469e      	mov	lr, r3
 800b942:	462e      	mov	r6, r5
 800b944:	4566      	cmp	r6, ip
 800b946:	d30e      	bcc.n	800b966 <__mdiff+0xea>
 800b948:	f10c 0203 	add.w	r2, ip, #3
 800b94c:	1b52      	subs	r2, r2, r5
 800b94e:	f022 0203 	bic.w	r2, r2, #3
 800b952:	3d03      	subs	r5, #3
 800b954:	45ac      	cmp	ip, r5
 800b956:	bf38      	it	cc
 800b958:	2200      	movcc	r2, #0
 800b95a:	4413      	add	r3, r2
 800b95c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b960:	b17a      	cbz	r2, 800b982 <__mdiff+0x106>
 800b962:	6107      	str	r7, [r0, #16]
 800b964:	e7a4      	b.n	800b8b0 <__mdiff+0x34>
 800b966:	f856 8b04 	ldr.w	r8, [r6], #4
 800b96a:	fa11 f288 	uxtah	r2, r1, r8
 800b96e:	1414      	asrs	r4, r2, #16
 800b970:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b974:	b292      	uxth	r2, r2
 800b976:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b97a:	f84e 2b04 	str.w	r2, [lr], #4
 800b97e:	1421      	asrs	r1, r4, #16
 800b980:	e7e0      	b.n	800b944 <__mdiff+0xc8>
 800b982:	3f01      	subs	r7, #1
 800b984:	e7ea      	b.n	800b95c <__mdiff+0xe0>
 800b986:	bf00      	nop
 800b988:	0800c260 	.word	0x0800c260
 800b98c:	0800c271 	.word	0x0800c271

0800b990 <__d2b>:
 800b990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b994:	460f      	mov	r7, r1
 800b996:	2101      	movs	r1, #1
 800b998:	ec59 8b10 	vmov	r8, r9, d0
 800b99c:	4616      	mov	r6, r2
 800b99e:	f7ff fcd5 	bl	800b34c <_Balloc>
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	b930      	cbnz	r0, 800b9b4 <__d2b+0x24>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <__d2b+0xac>)
 800b9aa:	4825      	ldr	r0, [pc, #148]	; (800ba40 <__d2b+0xb0>)
 800b9ac:	f240 310f 	movw	r1, #783	; 0x30f
 800b9b0:	f000 facc 	bl	800bf4c <__assert_func>
 800b9b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9bc:	bb2d      	cbnz	r5, 800ba0a <__d2b+0x7a>
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	f1b8 0300 	subs.w	r3, r8, #0
 800b9c4:	d026      	beq.n	800ba14 <__d2b+0x84>
 800b9c6:	4668      	mov	r0, sp
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	f7ff fd87 	bl	800b4dc <__lo0bits>
 800b9ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9d2:	b1e8      	cbz	r0, 800ba10 <__d2b+0x80>
 800b9d4:	f1c0 0320 	rsb	r3, r0, #32
 800b9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9dc:	430b      	orrs	r3, r1
 800b9de:	40c2      	lsrs	r2, r0
 800b9e0:	6163      	str	r3, [r4, #20]
 800b9e2:	9201      	str	r2, [sp, #4]
 800b9e4:	9b01      	ldr	r3, [sp, #4]
 800b9e6:	61a3      	str	r3, [r4, #24]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bf14      	ite	ne
 800b9ec:	2202      	movne	r2, #2
 800b9ee:	2201      	moveq	r2, #1
 800b9f0:	6122      	str	r2, [r4, #16]
 800b9f2:	b1bd      	cbz	r5, 800ba24 <__d2b+0x94>
 800b9f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9f8:	4405      	add	r5, r0
 800b9fa:	603d      	str	r5, [r7, #0]
 800b9fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba00:	6030      	str	r0, [r6, #0]
 800ba02:	4620      	mov	r0, r4
 800ba04:	b003      	add	sp, #12
 800ba06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba0e:	e7d6      	b.n	800b9be <__d2b+0x2e>
 800ba10:	6161      	str	r1, [r4, #20]
 800ba12:	e7e7      	b.n	800b9e4 <__d2b+0x54>
 800ba14:	a801      	add	r0, sp, #4
 800ba16:	f7ff fd61 	bl	800b4dc <__lo0bits>
 800ba1a:	9b01      	ldr	r3, [sp, #4]
 800ba1c:	6163      	str	r3, [r4, #20]
 800ba1e:	3020      	adds	r0, #32
 800ba20:	2201      	movs	r2, #1
 800ba22:	e7e5      	b.n	800b9f0 <__d2b+0x60>
 800ba24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba2c:	6038      	str	r0, [r7, #0]
 800ba2e:	6918      	ldr	r0, [r3, #16]
 800ba30:	f7ff fd34 	bl	800b49c <__hi0bits>
 800ba34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba38:	e7e2      	b.n	800ba00 <__d2b+0x70>
 800ba3a:	bf00      	nop
 800ba3c:	0800c260 	.word	0x0800c260
 800ba40:	0800c271 	.word	0x0800c271

0800ba44 <__sfputc_r>:
 800ba44:	6893      	ldr	r3, [r2, #8]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	b410      	push	{r4}
 800ba4c:	6093      	str	r3, [r2, #8]
 800ba4e:	da08      	bge.n	800ba62 <__sfputc_r+0x1e>
 800ba50:	6994      	ldr	r4, [r2, #24]
 800ba52:	42a3      	cmp	r3, r4
 800ba54:	db01      	blt.n	800ba5a <__sfputc_r+0x16>
 800ba56:	290a      	cmp	r1, #10
 800ba58:	d103      	bne.n	800ba62 <__sfputc_r+0x1e>
 800ba5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba5e:	f7fe bc8a 	b.w	800a376 <__swbuf_r>
 800ba62:	6813      	ldr	r3, [r2, #0]
 800ba64:	1c58      	adds	r0, r3, #1
 800ba66:	6010      	str	r0, [r2, #0]
 800ba68:	7019      	strb	r1, [r3, #0]
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <__sfputs_r>:
 800ba72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba74:	4606      	mov	r6, r0
 800ba76:	460f      	mov	r7, r1
 800ba78:	4614      	mov	r4, r2
 800ba7a:	18d5      	adds	r5, r2, r3
 800ba7c:	42ac      	cmp	r4, r5
 800ba7e:	d101      	bne.n	800ba84 <__sfputs_r+0x12>
 800ba80:	2000      	movs	r0, #0
 800ba82:	e007      	b.n	800ba94 <__sfputs_r+0x22>
 800ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba88:	463a      	mov	r2, r7
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ffda 	bl	800ba44 <__sfputc_r>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d1f3      	bne.n	800ba7c <__sfputs_r+0xa>
 800ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba98 <_vfiprintf_r>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	460d      	mov	r5, r1
 800ba9e:	b09d      	sub	sp, #116	; 0x74
 800baa0:	4614      	mov	r4, r2
 800baa2:	4698      	mov	r8, r3
 800baa4:	4606      	mov	r6, r0
 800baa6:	b118      	cbz	r0, 800bab0 <_vfiprintf_r+0x18>
 800baa8:	6a03      	ldr	r3, [r0, #32]
 800baaa:	b90b      	cbnz	r3, 800bab0 <_vfiprintf_r+0x18>
 800baac:	f7fe fb7c 	bl	800a1a8 <__sinit>
 800bab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bab2:	07d9      	lsls	r1, r3, #31
 800bab4:	d405      	bmi.n	800bac2 <_vfiprintf_r+0x2a>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	059a      	lsls	r2, r3, #22
 800baba:	d402      	bmi.n	800bac2 <_vfiprintf_r+0x2a>
 800babc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800babe:	f7fe fd7c 	bl	800a5ba <__retarget_lock_acquire_recursive>
 800bac2:	89ab      	ldrh	r3, [r5, #12]
 800bac4:	071b      	lsls	r3, r3, #28
 800bac6:	d501      	bpl.n	800bacc <_vfiprintf_r+0x34>
 800bac8:	692b      	ldr	r3, [r5, #16]
 800baca:	b99b      	cbnz	r3, 800baf4 <_vfiprintf_r+0x5c>
 800bacc:	4629      	mov	r1, r5
 800bace:	4630      	mov	r0, r6
 800bad0:	f7fe fc8e 	bl	800a3f0 <__swsetup_r>
 800bad4:	b170      	cbz	r0, 800baf4 <_vfiprintf_r+0x5c>
 800bad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bad8:	07dc      	lsls	r4, r3, #31
 800bada:	d504      	bpl.n	800bae6 <_vfiprintf_r+0x4e>
 800badc:	f04f 30ff 	mov.w	r0, #4294967295
 800bae0:	b01d      	add	sp, #116	; 0x74
 800bae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	0598      	lsls	r0, r3, #22
 800baea:	d4f7      	bmi.n	800badc <_vfiprintf_r+0x44>
 800baec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baee:	f7fe fd65 	bl	800a5bc <__retarget_lock_release_recursive>
 800baf2:	e7f3      	b.n	800badc <_vfiprintf_r+0x44>
 800baf4:	2300      	movs	r3, #0
 800baf6:	9309      	str	r3, [sp, #36]	; 0x24
 800baf8:	2320      	movs	r3, #32
 800bafa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb02:	2330      	movs	r3, #48	; 0x30
 800bb04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bcb8 <_vfiprintf_r+0x220>
 800bb08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb0c:	f04f 0901 	mov.w	r9, #1
 800bb10:	4623      	mov	r3, r4
 800bb12:	469a      	mov	sl, r3
 800bb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb18:	b10a      	cbz	r2, 800bb1e <_vfiprintf_r+0x86>
 800bb1a:	2a25      	cmp	r2, #37	; 0x25
 800bb1c:	d1f9      	bne.n	800bb12 <_vfiprintf_r+0x7a>
 800bb1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb22:	d00b      	beq.n	800bb3c <_vfiprintf_r+0xa4>
 800bb24:	465b      	mov	r3, fp
 800bb26:	4622      	mov	r2, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff ffa1 	bl	800ba72 <__sfputs_r>
 800bb30:	3001      	adds	r0, #1
 800bb32:	f000 80a9 	beq.w	800bc88 <_vfiprintf_r+0x1f0>
 800bb36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb38:	445a      	add	r2, fp
 800bb3a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80a1 	beq.w	800bc88 <_vfiprintf_r+0x1f0>
 800bb46:	2300      	movs	r3, #0
 800bb48:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb50:	f10a 0a01 	add.w	sl, sl, #1
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	9307      	str	r3, [sp, #28]
 800bb58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb5c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb5e:	4654      	mov	r4, sl
 800bb60:	2205      	movs	r2, #5
 800bb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb66:	4854      	ldr	r0, [pc, #336]	; (800bcb8 <_vfiprintf_r+0x220>)
 800bb68:	f7f4 fb3a 	bl	80001e0 <memchr>
 800bb6c:	9a04      	ldr	r2, [sp, #16]
 800bb6e:	b9d8      	cbnz	r0, 800bba8 <_vfiprintf_r+0x110>
 800bb70:	06d1      	lsls	r1, r2, #27
 800bb72:	bf44      	itt	mi
 800bb74:	2320      	movmi	r3, #32
 800bb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb7a:	0713      	lsls	r3, r2, #28
 800bb7c:	bf44      	itt	mi
 800bb7e:	232b      	movmi	r3, #43	; 0x2b
 800bb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb84:	f89a 3000 	ldrb.w	r3, [sl]
 800bb88:	2b2a      	cmp	r3, #42	; 0x2a
 800bb8a:	d015      	beq.n	800bbb8 <_vfiprintf_r+0x120>
 800bb8c:	9a07      	ldr	r2, [sp, #28]
 800bb8e:	4654      	mov	r4, sl
 800bb90:	2000      	movs	r0, #0
 800bb92:	f04f 0c0a 	mov.w	ip, #10
 800bb96:	4621      	mov	r1, r4
 800bb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb9c:	3b30      	subs	r3, #48	; 0x30
 800bb9e:	2b09      	cmp	r3, #9
 800bba0:	d94d      	bls.n	800bc3e <_vfiprintf_r+0x1a6>
 800bba2:	b1b0      	cbz	r0, 800bbd2 <_vfiprintf_r+0x13a>
 800bba4:	9207      	str	r2, [sp, #28]
 800bba6:	e014      	b.n	800bbd2 <_vfiprintf_r+0x13a>
 800bba8:	eba0 0308 	sub.w	r3, r0, r8
 800bbac:	fa09 f303 	lsl.w	r3, r9, r3
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	46a2      	mov	sl, r4
 800bbb6:	e7d2      	b.n	800bb5e <_vfiprintf_r+0xc6>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	1d19      	adds	r1, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	9103      	str	r1, [sp, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfbb      	ittet	lt
 800bbc4:	425b      	neglt	r3, r3
 800bbc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbca:	9307      	strge	r3, [sp, #28]
 800bbcc:	9307      	strlt	r3, [sp, #28]
 800bbce:	bfb8      	it	lt
 800bbd0:	9204      	strlt	r2, [sp, #16]
 800bbd2:	7823      	ldrb	r3, [r4, #0]
 800bbd4:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd6:	d10c      	bne.n	800bbf2 <_vfiprintf_r+0x15a>
 800bbd8:	7863      	ldrb	r3, [r4, #1]
 800bbda:	2b2a      	cmp	r3, #42	; 0x2a
 800bbdc:	d134      	bne.n	800bc48 <_vfiprintf_r+0x1b0>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	1d1a      	adds	r2, r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	9203      	str	r2, [sp, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	bfb8      	it	lt
 800bbea:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbee:	3402      	adds	r4, #2
 800bbf0:	9305      	str	r3, [sp, #20]
 800bbf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bcc8 <_vfiprintf_r+0x230>
 800bbf6:	7821      	ldrb	r1, [r4, #0]
 800bbf8:	2203      	movs	r2, #3
 800bbfa:	4650      	mov	r0, sl
 800bbfc:	f7f4 faf0 	bl	80001e0 <memchr>
 800bc00:	b138      	cbz	r0, 800bc12 <_vfiprintf_r+0x17a>
 800bc02:	9b04      	ldr	r3, [sp, #16]
 800bc04:	eba0 000a 	sub.w	r0, r0, sl
 800bc08:	2240      	movs	r2, #64	; 0x40
 800bc0a:	4082      	lsls	r2, r0
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	3401      	adds	r4, #1
 800bc10:	9304      	str	r3, [sp, #16]
 800bc12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc16:	4829      	ldr	r0, [pc, #164]	; (800bcbc <_vfiprintf_r+0x224>)
 800bc18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc1c:	2206      	movs	r2, #6
 800bc1e:	f7f4 fadf 	bl	80001e0 <memchr>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d03f      	beq.n	800bca6 <_vfiprintf_r+0x20e>
 800bc26:	4b26      	ldr	r3, [pc, #152]	; (800bcc0 <_vfiprintf_r+0x228>)
 800bc28:	bb1b      	cbnz	r3, 800bc72 <_vfiprintf_r+0x1da>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	3307      	adds	r3, #7
 800bc2e:	f023 0307 	bic.w	r3, r3, #7
 800bc32:	3308      	adds	r3, #8
 800bc34:	9303      	str	r3, [sp, #12]
 800bc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc38:	443b      	add	r3, r7
 800bc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc3c:	e768      	b.n	800bb10 <_vfiprintf_r+0x78>
 800bc3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc42:	460c      	mov	r4, r1
 800bc44:	2001      	movs	r0, #1
 800bc46:	e7a6      	b.n	800bb96 <_vfiprintf_r+0xfe>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	3401      	adds	r4, #1
 800bc4c:	9305      	str	r3, [sp, #20]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	f04f 0c0a 	mov.w	ip, #10
 800bc54:	4620      	mov	r0, r4
 800bc56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc5a:	3a30      	subs	r2, #48	; 0x30
 800bc5c:	2a09      	cmp	r2, #9
 800bc5e:	d903      	bls.n	800bc68 <_vfiprintf_r+0x1d0>
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0c6      	beq.n	800bbf2 <_vfiprintf_r+0x15a>
 800bc64:	9105      	str	r1, [sp, #20]
 800bc66:	e7c4      	b.n	800bbf2 <_vfiprintf_r+0x15a>
 800bc68:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e7f0      	b.n	800bc54 <_vfiprintf_r+0x1bc>
 800bc72:	ab03      	add	r3, sp, #12
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	462a      	mov	r2, r5
 800bc78:	4b12      	ldr	r3, [pc, #72]	; (800bcc4 <_vfiprintf_r+0x22c>)
 800bc7a:	a904      	add	r1, sp, #16
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	f7fd fe41 	bl	8009904 <_printf_float>
 800bc82:	4607      	mov	r7, r0
 800bc84:	1c78      	adds	r0, r7, #1
 800bc86:	d1d6      	bne.n	800bc36 <_vfiprintf_r+0x19e>
 800bc88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc8a:	07d9      	lsls	r1, r3, #31
 800bc8c:	d405      	bmi.n	800bc9a <_vfiprintf_r+0x202>
 800bc8e:	89ab      	ldrh	r3, [r5, #12]
 800bc90:	059a      	lsls	r2, r3, #22
 800bc92:	d402      	bmi.n	800bc9a <_vfiprintf_r+0x202>
 800bc94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc96:	f7fe fc91 	bl	800a5bc <__retarget_lock_release_recursive>
 800bc9a:	89ab      	ldrh	r3, [r5, #12]
 800bc9c:	065b      	lsls	r3, r3, #25
 800bc9e:	f53f af1d 	bmi.w	800badc <_vfiprintf_r+0x44>
 800bca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bca4:	e71c      	b.n	800bae0 <_vfiprintf_r+0x48>
 800bca6:	ab03      	add	r3, sp, #12
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	462a      	mov	r2, r5
 800bcac:	4b05      	ldr	r3, [pc, #20]	; (800bcc4 <_vfiprintf_r+0x22c>)
 800bcae:	a904      	add	r1, sp, #16
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f7fe f8cb 	bl	8009e4c <_printf_i>
 800bcb6:	e7e4      	b.n	800bc82 <_vfiprintf_r+0x1ea>
 800bcb8:	0800c3cc 	.word	0x0800c3cc
 800bcbc:	0800c3d6 	.word	0x0800c3d6
 800bcc0:	08009905 	.word	0x08009905
 800bcc4:	0800ba73 	.word	0x0800ba73
 800bcc8:	0800c3d2 	.word	0x0800c3d2

0800bccc <__sflush_r>:
 800bccc:	898a      	ldrh	r2, [r1, #12]
 800bcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	0710      	lsls	r0, r2, #28
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	d458      	bmi.n	800bd8c <__sflush_r+0xc0>
 800bcda:	684b      	ldr	r3, [r1, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dc05      	bgt.n	800bcec <__sflush_r+0x20>
 800bce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	dc02      	bgt.n	800bcec <__sflush_r+0x20>
 800bce6:	2000      	movs	r0, #0
 800bce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	d0f9      	beq.n	800bce6 <__sflush_r+0x1a>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcf8:	682f      	ldr	r7, [r5, #0]
 800bcfa:	6a21      	ldr	r1, [r4, #32]
 800bcfc:	602b      	str	r3, [r5, #0]
 800bcfe:	d032      	beq.n	800bd66 <__sflush_r+0x9a>
 800bd00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	075a      	lsls	r2, r3, #29
 800bd06:	d505      	bpl.n	800bd14 <__sflush_r+0x48>
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	1ac0      	subs	r0, r0, r3
 800bd0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd0e:	b10b      	cbz	r3, 800bd14 <__sflush_r+0x48>
 800bd10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd12:	1ac0      	subs	r0, r0, r3
 800bd14:	2300      	movs	r3, #0
 800bd16:	4602      	mov	r2, r0
 800bd18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd1a:	6a21      	ldr	r1, [r4, #32]
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b0      	blx	r6
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	d106      	bne.n	800bd34 <__sflush_r+0x68>
 800bd26:	6829      	ldr	r1, [r5, #0]
 800bd28:	291d      	cmp	r1, #29
 800bd2a:	d82b      	bhi.n	800bd84 <__sflush_r+0xb8>
 800bd2c:	4a29      	ldr	r2, [pc, #164]	; (800bdd4 <__sflush_r+0x108>)
 800bd2e:	410a      	asrs	r2, r1
 800bd30:	07d6      	lsls	r6, r2, #31
 800bd32:	d427      	bmi.n	800bd84 <__sflush_r+0xb8>
 800bd34:	2200      	movs	r2, #0
 800bd36:	6062      	str	r2, [r4, #4]
 800bd38:	04d9      	lsls	r1, r3, #19
 800bd3a:	6922      	ldr	r2, [r4, #16]
 800bd3c:	6022      	str	r2, [r4, #0]
 800bd3e:	d504      	bpl.n	800bd4a <__sflush_r+0x7e>
 800bd40:	1c42      	adds	r2, r0, #1
 800bd42:	d101      	bne.n	800bd48 <__sflush_r+0x7c>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b903      	cbnz	r3, 800bd4a <__sflush_r+0x7e>
 800bd48:	6560      	str	r0, [r4, #84]	; 0x54
 800bd4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd4c:	602f      	str	r7, [r5, #0]
 800bd4e:	2900      	cmp	r1, #0
 800bd50:	d0c9      	beq.n	800bce6 <__sflush_r+0x1a>
 800bd52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd56:	4299      	cmp	r1, r3
 800bd58:	d002      	beq.n	800bd60 <__sflush_r+0x94>
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f7ff faaa 	bl	800b2b4 <_free_r>
 800bd60:	2000      	movs	r0, #0
 800bd62:	6360      	str	r0, [r4, #52]	; 0x34
 800bd64:	e7c0      	b.n	800bce8 <__sflush_r+0x1c>
 800bd66:	2301      	movs	r3, #1
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b0      	blx	r6
 800bd6c:	1c41      	adds	r1, r0, #1
 800bd6e:	d1c8      	bne.n	800bd02 <__sflush_r+0x36>
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0c5      	beq.n	800bd02 <__sflush_r+0x36>
 800bd76:	2b1d      	cmp	r3, #29
 800bd78:	d001      	beq.n	800bd7e <__sflush_r+0xb2>
 800bd7a:	2b16      	cmp	r3, #22
 800bd7c:	d101      	bne.n	800bd82 <__sflush_r+0xb6>
 800bd7e:	602f      	str	r7, [r5, #0]
 800bd80:	e7b1      	b.n	800bce6 <__sflush_r+0x1a>
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd88:	81a3      	strh	r3, [r4, #12]
 800bd8a:	e7ad      	b.n	800bce8 <__sflush_r+0x1c>
 800bd8c:	690f      	ldr	r7, [r1, #16]
 800bd8e:	2f00      	cmp	r7, #0
 800bd90:	d0a9      	beq.n	800bce6 <__sflush_r+0x1a>
 800bd92:	0793      	lsls	r3, r2, #30
 800bd94:	680e      	ldr	r6, [r1, #0]
 800bd96:	bf08      	it	eq
 800bd98:	694b      	ldreq	r3, [r1, #20]
 800bd9a:	600f      	str	r7, [r1, #0]
 800bd9c:	bf18      	it	ne
 800bd9e:	2300      	movne	r3, #0
 800bda0:	eba6 0807 	sub.w	r8, r6, r7
 800bda4:	608b      	str	r3, [r1, #8]
 800bda6:	f1b8 0f00 	cmp.w	r8, #0
 800bdaa:	dd9c      	ble.n	800bce6 <__sflush_r+0x1a>
 800bdac:	6a21      	ldr	r1, [r4, #32]
 800bdae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bdb0:	4643      	mov	r3, r8
 800bdb2:	463a      	mov	r2, r7
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	47b0      	blx	r6
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	dc06      	bgt.n	800bdca <__sflush_r+0xfe>
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc2:	81a3      	strh	r3, [r4, #12]
 800bdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc8:	e78e      	b.n	800bce8 <__sflush_r+0x1c>
 800bdca:	4407      	add	r7, r0
 800bdcc:	eba8 0800 	sub.w	r8, r8, r0
 800bdd0:	e7e9      	b.n	800bda6 <__sflush_r+0xda>
 800bdd2:	bf00      	nop
 800bdd4:	dfbffffe 	.word	0xdfbffffe

0800bdd8 <_fflush_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	690b      	ldr	r3, [r1, #16]
 800bddc:	4605      	mov	r5, r0
 800bdde:	460c      	mov	r4, r1
 800bde0:	b913      	cbnz	r3, 800bde8 <_fflush_r+0x10>
 800bde2:	2500      	movs	r5, #0
 800bde4:	4628      	mov	r0, r5
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	b118      	cbz	r0, 800bdf2 <_fflush_r+0x1a>
 800bdea:	6a03      	ldr	r3, [r0, #32]
 800bdec:	b90b      	cbnz	r3, 800bdf2 <_fflush_r+0x1a>
 800bdee:	f7fe f9db 	bl	800a1a8 <__sinit>
 800bdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0f3      	beq.n	800bde2 <_fflush_r+0xa>
 800bdfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdfc:	07d0      	lsls	r0, r2, #31
 800bdfe:	d404      	bmi.n	800be0a <_fflush_r+0x32>
 800be00:	0599      	lsls	r1, r3, #22
 800be02:	d402      	bmi.n	800be0a <_fflush_r+0x32>
 800be04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be06:	f7fe fbd8 	bl	800a5ba <__retarget_lock_acquire_recursive>
 800be0a:	4628      	mov	r0, r5
 800be0c:	4621      	mov	r1, r4
 800be0e:	f7ff ff5d 	bl	800bccc <__sflush_r>
 800be12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be14:	07da      	lsls	r2, r3, #31
 800be16:	4605      	mov	r5, r0
 800be18:	d4e4      	bmi.n	800bde4 <_fflush_r+0xc>
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	059b      	lsls	r3, r3, #22
 800be1e:	d4e1      	bmi.n	800bde4 <_fflush_r+0xc>
 800be20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be22:	f7fe fbcb 	bl	800a5bc <__retarget_lock_release_recursive>
 800be26:	e7dd      	b.n	800bde4 <_fflush_r+0xc>

0800be28 <__swhatbuf_r>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	460c      	mov	r4, r1
 800be2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be30:	2900      	cmp	r1, #0
 800be32:	b096      	sub	sp, #88	; 0x58
 800be34:	4615      	mov	r5, r2
 800be36:	461e      	mov	r6, r3
 800be38:	da0d      	bge.n	800be56 <__swhatbuf_r+0x2e>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800be40:	f04f 0100 	mov.w	r1, #0
 800be44:	bf0c      	ite	eq
 800be46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800be4a:	2340      	movne	r3, #64	; 0x40
 800be4c:	2000      	movs	r0, #0
 800be4e:	6031      	str	r1, [r6, #0]
 800be50:	602b      	str	r3, [r5, #0]
 800be52:	b016      	add	sp, #88	; 0x58
 800be54:	bd70      	pop	{r4, r5, r6, pc}
 800be56:	466a      	mov	r2, sp
 800be58:	f000 f848 	bl	800beec <_fstat_r>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	dbec      	blt.n	800be3a <__swhatbuf_r+0x12>
 800be60:	9901      	ldr	r1, [sp, #4]
 800be62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800be66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800be6a:	4259      	negs	r1, r3
 800be6c:	4159      	adcs	r1, r3
 800be6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be72:	e7eb      	b.n	800be4c <__swhatbuf_r+0x24>

0800be74 <__smakebuf_r>:
 800be74:	898b      	ldrh	r3, [r1, #12]
 800be76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be78:	079d      	lsls	r5, r3, #30
 800be7a:	4606      	mov	r6, r0
 800be7c:	460c      	mov	r4, r1
 800be7e:	d507      	bpl.n	800be90 <__smakebuf_r+0x1c>
 800be80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	6123      	str	r3, [r4, #16]
 800be88:	2301      	movs	r3, #1
 800be8a:	6163      	str	r3, [r4, #20]
 800be8c:	b002      	add	sp, #8
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	ab01      	add	r3, sp, #4
 800be92:	466a      	mov	r2, sp
 800be94:	f7ff ffc8 	bl	800be28 <__swhatbuf_r>
 800be98:	9900      	ldr	r1, [sp, #0]
 800be9a:	4605      	mov	r5, r0
 800be9c:	4630      	mov	r0, r6
 800be9e:	f7fd fc05 	bl	80096ac <_malloc_r>
 800bea2:	b948      	cbnz	r0, 800beb8 <__smakebuf_r+0x44>
 800bea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bea8:	059a      	lsls	r2, r3, #22
 800beaa:	d4ef      	bmi.n	800be8c <__smakebuf_r+0x18>
 800beac:	f023 0303 	bic.w	r3, r3, #3
 800beb0:	f043 0302 	orr.w	r3, r3, #2
 800beb4:	81a3      	strh	r3, [r4, #12]
 800beb6:	e7e3      	b.n	800be80 <__smakebuf_r+0xc>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	6020      	str	r0, [r4, #0]
 800bebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	9b00      	ldr	r3, [sp, #0]
 800bec4:	6163      	str	r3, [r4, #20]
 800bec6:	9b01      	ldr	r3, [sp, #4]
 800bec8:	6120      	str	r0, [r4, #16]
 800beca:	b15b      	cbz	r3, 800bee4 <__smakebuf_r+0x70>
 800becc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bed0:	4630      	mov	r0, r6
 800bed2:	f000 f81d 	bl	800bf10 <_isatty_r>
 800bed6:	b128      	cbz	r0, 800bee4 <__smakebuf_r+0x70>
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	f023 0303 	bic.w	r3, r3, #3
 800bede:	f043 0301 	orr.w	r3, r3, #1
 800bee2:	81a3      	strh	r3, [r4, #12]
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	431d      	orrs	r5, r3
 800bee8:	81a5      	strh	r5, [r4, #12]
 800beea:	e7cf      	b.n	800be8c <__smakebuf_r+0x18>

0800beec <_fstat_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d07      	ldr	r5, [pc, #28]	; (800bf0c <_fstat_r+0x20>)
 800bef0:	2300      	movs	r3, #0
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	4611      	mov	r1, r2
 800bef8:	602b      	str	r3, [r5, #0]
 800befa:	f7f5 fd08 	bl	800190e <_fstat>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	d102      	bne.n	800bf08 <_fstat_r+0x1c>
 800bf02:	682b      	ldr	r3, [r5, #0]
 800bf04:	b103      	cbz	r3, 800bf08 <_fstat_r+0x1c>
 800bf06:	6023      	str	r3, [r4, #0]
 800bf08:	bd38      	pop	{r3, r4, r5, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20000c54 	.word	0x20000c54

0800bf10 <_isatty_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d06      	ldr	r5, [pc, #24]	; (800bf2c <_isatty_r+0x1c>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	602b      	str	r3, [r5, #0]
 800bf1c:	f7f5 fd07 	bl	800192e <_isatty>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	d102      	bne.n	800bf2a <_isatty_r+0x1a>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	b103      	cbz	r3, 800bf2a <_isatty_r+0x1a>
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	20000c54 	.word	0x20000c54

0800bf30 <memcpy>:
 800bf30:	440a      	add	r2, r1
 800bf32:	4291      	cmp	r1, r2
 800bf34:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf38:	d100      	bne.n	800bf3c <memcpy+0xc>
 800bf3a:	4770      	bx	lr
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf46:	4291      	cmp	r1, r2
 800bf48:	d1f9      	bne.n	800bf3e <memcpy+0xe>
 800bf4a:	bd10      	pop	{r4, pc}

0800bf4c <__assert_func>:
 800bf4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf4e:	4614      	mov	r4, r2
 800bf50:	461a      	mov	r2, r3
 800bf52:	4b09      	ldr	r3, [pc, #36]	; (800bf78 <__assert_func+0x2c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4605      	mov	r5, r0
 800bf58:	68d8      	ldr	r0, [r3, #12]
 800bf5a:	b14c      	cbz	r4, 800bf70 <__assert_func+0x24>
 800bf5c:	4b07      	ldr	r3, [pc, #28]	; (800bf7c <__assert_func+0x30>)
 800bf5e:	9100      	str	r1, [sp, #0]
 800bf60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf64:	4906      	ldr	r1, [pc, #24]	; (800bf80 <__assert_func+0x34>)
 800bf66:	462b      	mov	r3, r5
 800bf68:	f000 f844 	bl	800bff4 <fiprintf>
 800bf6c:	f000 f854 	bl	800c018 <abort>
 800bf70:	4b04      	ldr	r3, [pc, #16]	; (800bf84 <__assert_func+0x38>)
 800bf72:	461c      	mov	r4, r3
 800bf74:	e7f3      	b.n	800bf5e <__assert_func+0x12>
 800bf76:	bf00      	nop
 800bf78:	20000084 	.word	0x20000084
 800bf7c:	0800c3e7 	.word	0x0800c3e7
 800bf80:	0800c3f4 	.word	0x0800c3f4
 800bf84:	0800c422 	.word	0x0800c422

0800bf88 <_calloc_r>:
 800bf88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf8a:	fba1 2402 	umull	r2, r4, r1, r2
 800bf8e:	b94c      	cbnz	r4, 800bfa4 <_calloc_r+0x1c>
 800bf90:	4611      	mov	r1, r2
 800bf92:	9201      	str	r2, [sp, #4]
 800bf94:	f7fd fb8a 	bl	80096ac <_malloc_r>
 800bf98:	9a01      	ldr	r2, [sp, #4]
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	b930      	cbnz	r0, 800bfac <_calloc_r+0x24>
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	b003      	add	sp, #12
 800bfa2:	bd30      	pop	{r4, r5, pc}
 800bfa4:	220c      	movs	r2, #12
 800bfa6:	6002      	str	r2, [r0, #0]
 800bfa8:	2500      	movs	r5, #0
 800bfaa:	e7f8      	b.n	800bf9e <_calloc_r+0x16>
 800bfac:	4621      	mov	r1, r4
 800bfae:	f7fe fa77 	bl	800a4a0 <memset>
 800bfb2:	e7f4      	b.n	800bf9e <_calloc_r+0x16>

0800bfb4 <__ascii_mbtowc>:
 800bfb4:	b082      	sub	sp, #8
 800bfb6:	b901      	cbnz	r1, 800bfba <__ascii_mbtowc+0x6>
 800bfb8:	a901      	add	r1, sp, #4
 800bfba:	b142      	cbz	r2, 800bfce <__ascii_mbtowc+0x1a>
 800bfbc:	b14b      	cbz	r3, 800bfd2 <__ascii_mbtowc+0x1e>
 800bfbe:	7813      	ldrb	r3, [r2, #0]
 800bfc0:	600b      	str	r3, [r1, #0]
 800bfc2:	7812      	ldrb	r2, [r2, #0]
 800bfc4:	1e10      	subs	r0, r2, #0
 800bfc6:	bf18      	it	ne
 800bfc8:	2001      	movne	r0, #1
 800bfca:	b002      	add	sp, #8
 800bfcc:	4770      	bx	lr
 800bfce:	4610      	mov	r0, r2
 800bfd0:	e7fb      	b.n	800bfca <__ascii_mbtowc+0x16>
 800bfd2:	f06f 0001 	mvn.w	r0, #1
 800bfd6:	e7f8      	b.n	800bfca <__ascii_mbtowc+0x16>

0800bfd8 <__ascii_wctomb>:
 800bfd8:	b149      	cbz	r1, 800bfee <__ascii_wctomb+0x16>
 800bfda:	2aff      	cmp	r2, #255	; 0xff
 800bfdc:	bf85      	ittet	hi
 800bfde:	238a      	movhi	r3, #138	; 0x8a
 800bfe0:	6003      	strhi	r3, [r0, #0]
 800bfe2:	700a      	strbls	r2, [r1, #0]
 800bfe4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfe8:	bf98      	it	ls
 800bfea:	2001      	movls	r0, #1
 800bfec:	4770      	bx	lr
 800bfee:	4608      	mov	r0, r1
 800bff0:	4770      	bx	lr
	...

0800bff4 <fiprintf>:
 800bff4:	b40e      	push	{r1, r2, r3}
 800bff6:	b503      	push	{r0, r1, lr}
 800bff8:	4601      	mov	r1, r0
 800bffa:	ab03      	add	r3, sp, #12
 800bffc:	4805      	ldr	r0, [pc, #20]	; (800c014 <fiprintf+0x20>)
 800bffe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c002:	6800      	ldr	r0, [r0, #0]
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	f7ff fd47 	bl	800ba98 <_vfiprintf_r>
 800c00a:	b002      	add	sp, #8
 800c00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c010:	b003      	add	sp, #12
 800c012:	4770      	bx	lr
 800c014:	20000084 	.word	0x20000084

0800c018 <abort>:
 800c018:	b508      	push	{r3, lr}
 800c01a:	2006      	movs	r0, #6
 800c01c:	f000 f82c 	bl	800c078 <raise>
 800c020:	2001      	movs	r0, #1
 800c022:	f7f5 fc41 	bl	80018a8 <_exit>

0800c026 <_raise_r>:
 800c026:	291f      	cmp	r1, #31
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4604      	mov	r4, r0
 800c02c:	460d      	mov	r5, r1
 800c02e:	d904      	bls.n	800c03a <_raise_r+0x14>
 800c030:	2316      	movs	r3, #22
 800c032:	6003      	str	r3, [r0, #0]
 800c034:	f04f 30ff 	mov.w	r0, #4294967295
 800c038:	bd38      	pop	{r3, r4, r5, pc}
 800c03a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c03c:	b112      	cbz	r2, 800c044 <_raise_r+0x1e>
 800c03e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c042:	b94b      	cbnz	r3, 800c058 <_raise_r+0x32>
 800c044:	4620      	mov	r0, r4
 800c046:	f000 f831 	bl	800c0ac <_getpid_r>
 800c04a:	462a      	mov	r2, r5
 800c04c:	4601      	mov	r1, r0
 800c04e:	4620      	mov	r0, r4
 800c050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c054:	f000 b818 	b.w	800c088 <_kill_r>
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d00a      	beq.n	800c072 <_raise_r+0x4c>
 800c05c:	1c59      	adds	r1, r3, #1
 800c05e:	d103      	bne.n	800c068 <_raise_r+0x42>
 800c060:	2316      	movs	r3, #22
 800c062:	6003      	str	r3, [r0, #0]
 800c064:	2001      	movs	r0, #1
 800c066:	e7e7      	b.n	800c038 <_raise_r+0x12>
 800c068:	2400      	movs	r4, #0
 800c06a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c06e:	4628      	mov	r0, r5
 800c070:	4798      	blx	r3
 800c072:	2000      	movs	r0, #0
 800c074:	e7e0      	b.n	800c038 <_raise_r+0x12>
	...

0800c078 <raise>:
 800c078:	4b02      	ldr	r3, [pc, #8]	; (800c084 <raise+0xc>)
 800c07a:	4601      	mov	r1, r0
 800c07c:	6818      	ldr	r0, [r3, #0]
 800c07e:	f7ff bfd2 	b.w	800c026 <_raise_r>
 800c082:	bf00      	nop
 800c084:	20000084 	.word	0x20000084

0800c088 <_kill_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d07      	ldr	r5, [pc, #28]	; (800c0a8 <_kill_r+0x20>)
 800c08c:	2300      	movs	r3, #0
 800c08e:	4604      	mov	r4, r0
 800c090:	4608      	mov	r0, r1
 800c092:	4611      	mov	r1, r2
 800c094:	602b      	str	r3, [r5, #0]
 800c096:	f7f5 fbf7 	bl	8001888 <_kill>
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	d102      	bne.n	800c0a4 <_kill_r+0x1c>
 800c09e:	682b      	ldr	r3, [r5, #0]
 800c0a0:	b103      	cbz	r3, 800c0a4 <_kill_r+0x1c>
 800c0a2:	6023      	str	r3, [r4, #0]
 800c0a4:	bd38      	pop	{r3, r4, r5, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20000c54 	.word	0x20000c54

0800c0ac <_getpid_r>:
 800c0ac:	f7f5 bbe4 	b.w	8001878 <_getpid>

0800c0b0 <_init>:
 800c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b2:	bf00      	nop
 800c0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b6:	bc08      	pop	{r3}
 800c0b8:	469e      	mov	lr, r3
 800c0ba:	4770      	bx	lr

0800c0bc <_fini>:
 800c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0be:	bf00      	nop
 800c0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0c2:	bc08      	pop	{r3}
 800c0c4:	469e      	mov	lr, r3
 800c0c6:	4770      	bx	lr
