
ENCM_515_Project_Part_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009038  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080091d0  080091d0  000191d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ec  080091ec  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f4  080091f4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080091fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fa88  20000090  0800928c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fb18  0800928c  0002fb18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150f7  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003994  00000000  00000000  000351fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00038b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5b  00000000  00000000  00039d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001969b  00000000  00000000  0003aa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189fc  00000000  00000000  0005410e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fa44  00000000  00000000  0006cb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c1c  00000000  00000000  000fc550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0010116c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080091b8 	.word	0x080091b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	080091b8 	.word	0x080091b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f001 f816 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f81e 	bl	800051c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e0:	f000 f884 	bl	80005ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f964 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e8:	f000 f8a0 	bl	800062c <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ec:	f000 f8cc 	bl	8000688 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f0:	f000 f8f8 	bl	80006e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f4:	f000 f926 	bl	8000744 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f8:	f008 fa08 	bl	800890c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  ITM_Port32(31) = 1;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <main+0x40>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
  process_image(kernel_edge);
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x44>)
 8000504:	f000 fa2e 	bl	8000964 <process_image>
  ITM_Port32(31) = 2;
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <main+0x40>)
 800050a:	2202      	movs	r2, #2
 800050c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800050e:	f008 fa23 	bl	8008958 <MX_USB_HOST_Process>
 8000512:	e7fc      	b.n	800050e <main+0x3a>
 8000514:	e000007c 	.word	0xe000007c
 8000518:	20000008 	.word	0x20000008

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 fdb4 	bl	8009098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <SystemClock_Config+0xc8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <SystemClock_Config+0xc8>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <SystemClock_Config+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <SystemClock_Config+0xcc>)
 8000566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <SystemClock_Config+0xcc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000590:	23c0      	movs	r3, #192	; 0xc0
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000594:	2304      	movs	r3, #4
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 f9f5 	bl	8004990 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 fd7b 	bl	80010a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2103      	movs	r1, #3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 fc57 	bl	8004e80 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d8:	f000 fd65 	bl	80010a6 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000602:	2301      	movs	r3, #1
 8000604:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000606:	23c8      	movs	r3, #200	; 0xc8
 8000608:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800060a:	2305      	movs	r3, #5
 800060c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fe3f 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000620:	f000 fd41 	bl	80010a6 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f003 fbad 	bl	8003dc8 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 fd17 	bl	80010a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000ac 	.word	0x200000ac
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2S2_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2S2_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2S2_Init+0x50>)
 8000694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000698:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2S2_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <MX_I2S2_Init+0x58>)
 80006b0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006c6:	f003 fcc3 	bl	8004050 <HAL_I2S_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 fce9 	bl	80010a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000100 	.word	0x20000100
 80006dc:	40003800 	.word	0x40003800
 80006e0:	00017700 	.word	0x00017700

080006e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_I2S3_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_I2S3_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_I2S3_Init+0x54>)
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <MX_I2S3_Init+0x5c>)
 800070e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_I2S3_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2S3_Init+0x54>)
 8000724:	f003 fc94 	bl	8004050 <HAL_I2S_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072e:	f000 fcba 	bl	80010a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000148 	.word	0x20000148
 800073c:	40003c00 	.word	0x40003c00
 8000740:	00017700 	.word	0x00017700

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f004 fed1 	bl	800553c <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 fc81 	bl	80010a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000190 	.word	0x20000190
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b61      	ldr	r3, [pc, #388]	; (8000950 <MX_GPIO_Init+0x1a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a60      	ldr	r2, [pc, #384]	; (8000950 <MX_GPIO_Init+0x1a0>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b5e      	ldr	r3, [pc, #376]	; (8000950 <MX_GPIO_Init+0x1a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b5a      	ldr	r3, [pc, #360]	; (8000950 <MX_GPIO_Init+0x1a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a59      	ldr	r2, [pc, #356]	; (8000950 <MX_GPIO_Init+0x1a0>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b57      	ldr	r3, [pc, #348]	; (8000950 <MX_GPIO_Init+0x1a0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a52      	ldr	r2, [pc, #328]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a4b      	ldr	r2, [pc, #300]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b49      	ldr	r3, [pc, #292]	; (8000950 <MX_GPIO_Init+0x1a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b45      	ldr	r3, [pc, #276]	; (8000950 <MX_GPIO_Init+0x1a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a44      	ldr	r2, [pc, #272]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b42      	ldr	r3, [pc, #264]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a3d      	ldr	r2, [pc, #244]	; (8000950 <MX_GPIO_Init+0x1a0>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_GPIO_Init+0x1a0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2108      	movs	r1, #8
 8000872:	4838      	ldr	r0, [pc, #224]	; (8000954 <MX_GPIO_Init+0x1a4>)
 8000874:	f001 f974 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <MX_GPIO_Init+0x1a8>)
 800087e:	f001 f96f 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000882:	2200      	movs	r2, #0
 8000884:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000888:	4834      	ldr	r0, [pc, #208]	; (800095c <MX_GPIO_Init+0x1ac>)
 800088a:	f001 f969 	bl	8001b60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800088e:	2304      	movs	r3, #4
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	482c      	ldr	r0, [pc, #176]	; (8000954 <MX_GPIO_Init+0x1a4>)
 80008a2:	f000 ffd9 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4825      	ldr	r0, [pc, #148]	; (8000954 <MX_GPIO_Init+0x1a4>)
 80008be:	f000 ffcb 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008c2:	2332      	movs	r3, #50	; 0x32
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	481f      	ldr	r0, [pc, #124]	; (8000954 <MX_GPIO_Init+0x1a4>)
 80008d8:	f000 ffbe 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4819      	ldr	r0, [pc, #100]	; (8000958 <MX_GPIO_Init+0x1a8>)
 80008f4:	f000 ffb0 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_GPIO_Init+0x1b0>)
 800090e:	f000 ffa3 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000912:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000916:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_GPIO_Init+0x1ac>)
 800092c:	f000 ff94 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_GPIO_Init+0x1ac>)
 8000944:	f000 ff88 	bl	8001858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3730      	adds	r7, #48	; 0x30
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40021000 	.word	0x40021000
 8000958:	40020800 	.word	0x40020800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40020000 	.word	0x40020000

08000964 <process_image>:
 * 		  This implementation reduces the resolution of the images depending on the size
 * 		  of the kernel.
 * @param This is the 3x3 kernel to use to filter the image.
 * @retval None
 */
void process_image(int8_t *kernel){
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b08d      	sub	sp, #52	; 0x34
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	// This will total to kernel_size^2, taking only the pixels intersecting with the kernel.
	int input_index = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
	// The accumulators for each pixel convolution is initialized to zero.
	// The ordering is red, green, blue.
	int16_t accumulator[3] = {0x0000, 0x0000, 0x0000};
 8000970:	2300      	movs	r3, #0
 8000972:	813b      	strh	r3, [r7, #8]
 8000974:	2300      	movs	r3, #0
 8000976:	817b      	strh	r3, [r7, #10]
 8000978:	2300      	movs	r3, #0
 800097a:	81bb      	strh	r3, [r7, #12]
	uint16_t output_index = 0x0000;
 800097c:	2300      	movs	r3, #0
 800097e:	857b      	strh	r3, [r7, #42]	; 0x2a

	for (int image = 0; image < TOTAL_IMAGES; image++) {
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
 8000984:	e0f4      	b.n	8000b70 <process_image+0x20c>
		volatile int8_t* inner_pointer;
		for(int height = 0; height < OUT_HEIGHT; height++){
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	e0ea      	b.n	8000b62 <process_image+0x1fe>
			// The first term is the start address of combined.bin.
			// The second term is the start address of the images depending on the image iteration.
			// The third term indicates the image row.
			image_pointer = image_pixel + (image*IMG_WIDTH*IMG_HEIGHT*CHANNELS) + (IMG_WIDTH*CHANNELS*height);
 800098c:	4b7d      	ldr	r3, [pc, #500]	; (8000b84 <process_image+0x220>)
 800098e:	6819      	ldr	r1, [r3, #0]
 8000990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	031b      	lsls	r3, r3, #12
 800099a:	4618      	mov	r0, r3
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	019b      	lsls	r3, r3, #6
 80009a6:	4403      	add	r3, r0
 80009a8:	440b      	add	r3, r1
 80009aa:	4a77      	ldr	r2, [pc, #476]	; (8000b88 <process_image+0x224>)
 80009ac:	6013      	str	r3, [r2, #0]
			for(int width = 0; width < OUT_WIDTH; width++){
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	e0cf      	b.n	8000b54 <process_image+0x1f0>
				input_index = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				// Reset accumulator for the next set of kernel to image overlaps.
				accumulator[0] = 0x0000;
 80009b8:	2300      	movs	r3, #0
 80009ba:	813b      	strh	r3, [r7, #8]
				accumulator[1] = 0x0000;
 80009bc:	2300      	movs	r3, #0
 80009be:	817b      	strh	r3, [r7, #10]
				accumulator[2] = 0x0000;
 80009c0:	2300      	movs	r3, #0
 80009c2:	81bb      	strh	r3, [r7, #12]

				image_pointer = image_pointer + CHANNELS;
 80009c4:	4b70      	ldr	r3, [pc, #448]	; (8000b88 <process_image+0x224>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3303      	adds	r3, #3
 80009ca:	4a6f      	ldr	r2, [pc, #444]	; (8000b88 <process_image+0x224>)
 80009cc:	6013      	str	r3, [r2, #0]
				inner_pointer = image_pointer;
 80009ce:	4b6e      	ldr	r3, [pc, #440]	; (8000b88 <process_image+0x224>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	623b      	str	r3, [r7, #32]
				// Store the pixels that is intersecting with the kernel.
				for(int k = 0; k < kernel_size; k++){
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e069      	b.n	8000aae <process_image+0x14a>
					for(int l = 0; l < kernel_size; l++){
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	e05a      	b.n	8000a96 <process_image+0x132>

						//handling the edge case
						if (((width < 1 && l < 1) || (width >= IMG_WIDTH-1 && l > 1)) ||
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	dc02      	bgt.n	80009ec <process_image+0x88>
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	dd11      	ble.n	8000a10 <process_image+0xac>
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	2b3e      	cmp	r3, #62	; 0x3e
 80009f0:	dd02      	ble.n	80009f8 <process_image+0x94>
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	dc0b      	bgt.n	8000a10 <process_image+0xac>
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dc02      	bgt.n	8000a04 <process_image+0xa0>
							((height < 1 && k < 1) || (height >= IMG_HEIGHT-1 && k > 1))) {
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dd05      	ble.n	8000a10 <process_image+0xac>
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	2b3e      	cmp	r3, #62	; 0x3e
 8000a08:	dd12      	ble.n	8000a30 <process_image+0xcc>
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	dd0f      	ble.n	8000a30 <process_image+0xcc>
							image_block_red[input_index] = 0x00;
 8000a10:	4a5e      	ldr	r2, [pc, #376]	; (8000b8c <process_image+0x228>)
 8000a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a14:	4413      	add	r3, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
							image_block_green[input_index] = 0x00;
 8000a1a:	4a5d      	ldr	r2, [pc, #372]	; (8000b90 <process_image+0x22c>)
 8000a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1e:	4413      	add	r3, r2
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
							image_block_blue[input_index] = 0x00;
 8000a24:	4a5b      	ldr	r2, [pc, #364]	; (8000b94 <process_image+0x230>)
 8000a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a28:	4413      	add	r3, r2
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	e02c      	b.n	8000a8a <process_image+0x126>
						} else {
							image_block_red[input_index] = *(inner_pointer + (3*l));
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	b2d9      	uxtb	r1, r3
 8000a44:	4a51      	ldr	r2, [pc, #324]	; (8000b8c <process_image+0x228>)
 8000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a48:	4413      	add	r3, r2
 8000a4a:	460a      	mov	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
							image_block_green[input_index] = *(inner_pointer + (3*l) + 1 );
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	3301      	adds	r3, #1
 8000a58:	6a3a      	ldr	r2, [r7, #32]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	b2d9      	uxtb	r1, r3
 8000a62:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <process_image+0x22c>)
 8000a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a66:	4413      	add	r3, r2
 8000a68:	460a      	mov	r2, r1
 8000a6a:	701a      	strb	r2, [r3, #0]
							image_block_blue[input_index] = *(inner_pointer + (3*l) + 2 );
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	3302      	adds	r3, #2
 8000a76:	6a3a      	ldr	r2, [r7, #32]
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	b2d9      	uxtb	r1, r3
 8000a80:	4a44      	ldr	r2, [pc, #272]	; (8000b94 <process_image+0x230>)
 8000a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a84:	4413      	add	r3, r2
 8000a86:	460a      	mov	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
						}
						input_index++;
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					for(int l = 0; l < kernel_size; l++){
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	3301      	adds	r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <process_image+0x234>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	db9e      	blt.n	80009e0 <process_image+0x7c>
					}
					inner_pointer = inner_pointer + (IMG_WIDTH*CHANNELS);
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
 8000aa4:	33c0      	adds	r3, #192	; 0xc0
 8000aa6:	623b      	str	r3, [r7, #32]
				for(int k = 0; k < kernel_size; k++){
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <process_image+0x234>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	db8f      	blt.n	80009da <process_image+0x76>
				}

				/*Ensure that only one of the convolution functions is running to avoid redundancy.*/
				// Perform instrinsic convolution using SMLABB.
				if (chosen_process == 2) {
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <process_image+0x238>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d106      	bne.n	8000ad0 <process_image+0x16c>
					intrinsic_convolution(accumulator, kernel);
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f8d9 	bl	8000c80 <intrinsic_convolution>
 8000ace:	e01b      	b.n	8000b08 <process_image+0x1a4>
				}
				// Perform unrolled convolution with a factor of 3.
				else if (chosen_process == 1) {
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <process_image+0x238>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d106      	bne.n	8000ae6 <process_image+0x182>
					unrolled_convolution(accumulator, kernel);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f926 	bl	8000d30 <unrolled_convolution>
 8000ae4:	e010      	b.n	8000b08 <process_image+0x1a4>
				}
				else if (chosen_process == 3) {
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <process_image+0x238>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d106      	bne.n	8000afc <process_image+0x198>
					intrinsic_unrolled_convolution(accumulator, kernel);
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f9ef 	bl	8000ed8 <intrinsic_unrolled_convolution>
 8000afa:	e005      	b.n	8000b08 <process_image+0x1a4>
				}
				// Perform standard convolution on the gathered pixels against the kernel.
				else {
					standard_convolution(accumulator, kernel);
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f84e 	bl	8000ba4 <standard_convolution>
				}
				// Perform saturation, for a Q4.12 number.
				output[output_index] = saturate(accumulator[0]);
 8000b08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b0c:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 faaa 	bl	8001068 <saturate>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <process_image+0x23c>)
 8000b1a:	551a      	strb	r2, [r3, r4]
				output[output_index+1] = saturate(accumulator[1]);
 8000b1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b22:	1c5c      	adds	r4, r3, #1
 8000b24:	4610      	mov	r0, r2
 8000b26:	f000 fa9f 	bl	8001068 <saturate>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <process_image+0x23c>)
 8000b30:	551a      	strb	r2, [r3, r4]
				output[output_index+2] = saturate(accumulator[2]);
 8000b32:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000b36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b38:	1c9c      	adds	r4, r3, #2
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	f000 fa94 	bl	8001068 <saturate>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <process_image+0x23c>)
 8000b46:	551a      	strb	r2, [r3, r4]
				output_index+=CHANNELS;
 8000b48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b4a:	3303      	adds	r3, #3
 8000b4c:	857b      	strh	r3, [r7, #42]	; 0x2a
			for(int width = 0; width < OUT_WIDTH; width++){
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	3301      	adds	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2b3f      	cmp	r3, #63	; 0x3f
 8000b58:	f77f af2c 	ble.w	80009b4 <process_image+0x50>
		for(int height = 0; height < OUT_HEIGHT; height++){
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	2b3f      	cmp	r3, #63	; 0x3f
 8000b66:	f77f af11 	ble.w	800098c <process_image+0x28>
	for (int image = 0; image < TOTAL_IMAGES; image++) {
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	f77f af07 	ble.w	8000986 <process_image+0x22>
			}
		}
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3734      	adds	r7, #52	; 0x34
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	200001e8 	.word	0x200001e8
 8000b90:	200001f4 	.word	0x200001f4
 8000b94:	20000200 	.word	0x20000200
 8000b98:	20000011 	.word	0x20000011
 8000b9c:	20000012 	.word	0x20000012
 8000ba0:	2000020c 	.word	0x2000020c

08000ba4 <standard_convolution>:
 * @brief Perform standard convolution processes unoptimized.
 * @param accumulator holds three values for the accumulate of red, green, and blue pixels.
 * 		  kernel typically holds 9 values forming 3x3 filter.
 * @retval None
 */
void standard_convolution(int16_t *accumulator, int8_t *kernel) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	for(int m = 0; m<(kernel_size*kernel_size); m++){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e04b      	b.n	8000c4c <standard_convolution+0xa8>
		 accumulator[0] = accumulator[0] + kernel[m]*image_block_red[m];
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bc6:	b299      	uxth	r1, r3
 8000bc8:	4829      	ldr	r0, [pc, #164]	; (8000c70 <standard_convolution+0xcc>)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4403      	add	r3, r0
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	fb11 f303 	smulbb	r3, r1, r3
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	801a      	strh	r2, [r3, #0]
		 accumulator[1] = accumulator[1] + kernel[m]*image_block_green[m];
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3302      	adds	r3, #2
 8000be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6839      	ldr	r1, [r7, #0]
 8000bf0:	440b      	add	r3, r1
 8000bf2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf6:	b299      	uxth	r1, r3
 8000bf8:	481e      	ldr	r0, [pc, #120]	; (8000c74 <standard_convolution+0xd0>)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4403      	add	r3, r0
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	fb11 f303 	smulbb	r3, r1, r3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	b212      	sxth	r2, r2
 8000c12:	801a      	strh	r2, [r3, #0]
		 accumulator[2] = accumulator[2] + kernel[m]*image_block_blue[m];
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3304      	adds	r3, #4
 8000c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	440b      	add	r3, r1
 8000c24:	f993 3000 	ldrsb.w	r3, [r3]
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <standard_convolution+0xd4>)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4403      	add	r3, r0
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	fb11 f303 	smulbb	r3, r1, r3
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3304      	adds	r3, #4
 8000c42:	b212      	sxth	r2, r2
 8000c44:	801a      	strh	r2, [r3, #0]
	for(int m = 0; m<(kernel_size*kernel_size); m++){
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <standard_convolution+0xd8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <standard_convolution+0xd8>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	fb02 f303 	mul.w	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dba9      	blt.n	8000bb4 <standard_convolution+0x10>
	}
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200001e8 	.word	0x200001e8
 8000c74:	200001f4 	.word	0x200001f4
 8000c78:	20000200 	.word	0x20000200
 8000c7c:	20000011 	.word	0x20000011

08000c80 <intrinsic_convolution>:
 * @brief Perform convolution using one of the MAC intrinsics (SMLABB).
 * @param accumulator holds three values for the accumulate of red, green, and blue pixels.
 * 		  kernel typically holds 9 values forming 3x3 filter.
 * @retval None
 */
void intrinsic_convolution(int16_t *accumulator, int8_t *kernel) {
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	for(int m = 0; m<(kernel_size*kernel_size); m++){
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e036      	b.n	8000cfe <intrinsic_convolution+0x7e>
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[0])
						:[op1] "r" (kernel[m]), [op2] "r" (image_block_red[m]), [acc] "r" (accumulator[0])
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	4413      	add	r3, r2
 8000c96:	f993 3000 	ldrsb.w	r3, [r3]
 8000c9a:	4921      	ldr	r1, [pc, #132]	; (8000d20 <intrinsic_convolution+0xa0>)
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	440a      	add	r2, r1
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f9b1 1000 	ldrsh.w	r1, [r1]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000ca8:	fb13 1202 	smlabb	r2, r3, r2, r1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	801a      	strh	r2, [r3, #0]
						);
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[1])
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3302      	adds	r3, #2
						:[op1] "r" (kernel[m]), [op2] "r" (image_block_green[m]), [acc] "r" (accumulator[1])
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	440a      	add	r2, r1
 8000cba:	f992 2000 	ldrsb.w	r2, [r2]
 8000cbe:	4819      	ldr	r0, [pc, #100]	; (8000d24 <intrinsic_convolution+0xa4>)
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	4401      	add	r1, r0
 8000cc4:	7809      	ldrb	r1, [r1, #0]
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	3002      	adds	r0, #2
 8000cca:	f9b0 0000 	ldrsh.w	r0, [r0]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000cce:	fb12 0201 	smlabb	r2, r2, r1, r0
 8000cd2:	801a      	strh	r2, [r3, #0]
						);
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[2])
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3304      	adds	r3, #4
						:[op1] "r" (kernel[m]), [op2] "r" (image_block_blue[m]), [acc] "r" (accumulator[2])
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	6839      	ldr	r1, [r7, #0]
 8000cdc:	440a      	add	r2, r1
 8000cde:	f992 2000 	ldrsb.w	r2, [r2]
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <intrinsic_convolution+0xa8>)
 8000ce4:	68f9      	ldr	r1, [r7, #12]
 8000ce6:	4401      	add	r1, r0
 8000ce8:	7809      	ldrb	r1, [r1, #0]
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	3004      	adds	r0, #4
 8000cee:	f9b0 0000 	ldrsh.w	r0, [r0]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000cf2:	fb12 0201 	smlabb	r2, r2, r1, r0
 8000cf6:	801a      	strh	r2, [r3, #0]
	for(int m = 0; m<(kernel_size*kernel_size); m++){
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <intrinsic_convolution+0xac>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <intrinsic_convolution+0xac>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dbbe      	blt.n	8000c90 <intrinsic_convolution+0x10>
						);
	}
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	200001e8 	.word	0x200001e8
 8000d24:	200001f4 	.word	0x200001f4
 8000d28:	20000200 	.word	0x20000200
 8000d2c:	20000011 	.word	0x20000011

08000d30 <unrolled_convolution>:
 * @brief Perform convolution but with unrolled factor of 3.
 * @param accumulator holds three values for the accumulate of red, green, and blue pixels.
 * 		  kernel typically holds 9 values forming 3x3 filter.
 * @retval None
 */
void unrolled_convolution(int16_t *accumulator, int8_t *kernel) {
 8000d30:	b490      	push	{r4, r7}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
	for(int m = 0; m<(kernel_size*kernel_size); m+=3){
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e0b1      	b.n	8000ea4 <unrolled_convolution+0x174>
		accumulator[0] = accumulator[0] +
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f9b3 3000 	ldrsh.w	r3, [r3]
						(kernel[m]*image_block_red[m]) +
 8000d46:	b29a      	uxth	r2, r3
						(kernel[m+1]*image_block_red[m+1]) +
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	440b      	add	r3, r1
 8000d50:	f993 3000 	ldrsb.w	r3, [r3]
						(kernel[m]*image_block_red[m]) +
 8000d54:	b299      	uxth	r1, r3
						(kernel[m+1]*image_block_red[m+1]) +
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	485b      	ldr	r0, [pc, #364]	; (8000ec8 <unrolled_convolution+0x198>)
 8000d5c:	5cc3      	ldrb	r3, [r0, r3]
						(kernel[m]*image_block_red[m]) +
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	fb11 f303 	smulbb	r3, r1, r3
 8000d64:	b299      	uxth	r1, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6838      	ldr	r0, [r7, #0]
 8000d6a:	4403      	add	r3, r0
 8000d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d70:	b298      	uxth	r0, r3
 8000d72:	4c55      	ldr	r4, [pc, #340]	; (8000ec8 <unrolled_convolution+0x198>)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4423      	add	r3, r4
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	fb10 f303 	smulbb	r3, r0, r3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	440b      	add	r3, r1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	4413      	add	r3, r2
 8000d88:	b29a      	uxth	r2, r3
						(kernel[m+2]*image_block_red[m+2]);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	6839      	ldr	r1, [r7, #0]
 8000d90:	440b      	add	r3, r1
 8000d92:	f993 3000 	ldrsb.w	r3, [r3]
						(kernel[m+1]*image_block_red[m+1]) +
 8000d96:	b299      	uxth	r1, r3
						(kernel[m+2]*image_block_red[m+2]);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	484a      	ldr	r0, [pc, #296]	; (8000ec8 <unrolled_convolution+0x198>)
 8000d9e:	5cc3      	ldrb	r3, [r0, r3]
						(kernel[m+1]*image_block_red[m+1]) +
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	fb11 f303 	smulbb	r3, r1, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b21a      	sxth	r2, r3
		accumulator[0] = accumulator[0] +
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	801a      	strh	r2, [r3, #0]
		accumulator[1] = accumulator[1] +
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3302      	adds	r3, #2
 8000db6:	f9b3 3000 	ldrsh.w	r3, [r3]
						(kernel[m]*image_block_green[m]) +
 8000dba:	b29a      	uxth	r2, r3
						(kernel[m+1]*image_block_green[m+1]) +
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	6839      	ldr	r1, [r7, #0]
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f993 3000 	ldrsb.w	r3, [r3]
						(kernel[m]*image_block_green[m]) +
 8000dc8:	b299      	uxth	r1, r3
						(kernel[m+1]*image_block_green[m+1]) +
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	483f      	ldr	r0, [pc, #252]	; (8000ecc <unrolled_convolution+0x19c>)
 8000dd0:	5cc3      	ldrb	r3, [r0, r3]
						(kernel[m]*image_block_green[m]) +
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	fb11 f303 	smulbb	r3, r1, r3
 8000dd8:	b299      	uxth	r1, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6838      	ldr	r0, [r7, #0]
 8000dde:	4403      	add	r3, r0
 8000de0:	f993 3000 	ldrsb.w	r3, [r3]
 8000de4:	b298      	uxth	r0, r3
 8000de6:	4c39      	ldr	r4, [pc, #228]	; (8000ecc <unrolled_convolution+0x19c>)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4423      	add	r3, r4
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	fb10 f303 	smulbb	r3, r0, r3
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	440b      	add	r3, r1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b29a      	uxth	r2, r3
						(kernel[m+2]*image_block_green[m+2]);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3302      	adds	r3, #2
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	440b      	add	r3, r1
 8000e06:	f993 3000 	ldrsb.w	r3, [r3]
						(kernel[m+1]*image_block_green[m+1]) +
 8000e0a:	b299      	uxth	r1, r3
						(kernel[m+2]*image_block_green[m+2]);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	482e      	ldr	r0, [pc, #184]	; (8000ecc <unrolled_convolution+0x19c>)
 8000e12:	5cc3      	ldrb	r3, [r0, r3]
						(kernel[m+1]*image_block_green[m+1]) +
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	fb11 f303 	smulbb	r3, r1, r3
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29a      	uxth	r2, r3
		accumulator[1] = accumulator[1] +
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3302      	adds	r3, #2
						(kernel[m+1]*image_block_green[m+1]) +
 8000e24:	b212      	sxth	r2, r2
		accumulator[1] = accumulator[1] +
 8000e26:	801a      	strh	r2, [r3, #0]
		accumulator[2] = accumulator[2] +
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
						(kernel[m]*image_block_blue[m]) +
 8000e30:	b29a      	uxth	r2, r3
						(kernel[m+1]*image_block_blue[m+1]) +
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	6839      	ldr	r1, [r7, #0]
 8000e38:	440b      	add	r3, r1
 8000e3a:	f993 3000 	ldrsb.w	r3, [r3]
						(kernel[m]*image_block_blue[m]) +
 8000e3e:	b299      	uxth	r1, r3
						(kernel[m+1]*image_block_blue[m+1]) +
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4822      	ldr	r0, [pc, #136]	; (8000ed0 <unrolled_convolution+0x1a0>)
 8000e46:	5cc3      	ldrb	r3, [r0, r3]
						(kernel[m]*image_block_blue[m]) +
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	fb11 f303 	smulbb	r3, r1, r3
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6838      	ldr	r0, [r7, #0]
 8000e54:	4403      	add	r3, r0
 8000e56:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5a:	b298      	uxth	r0, r3
 8000e5c:	4c1c      	ldr	r4, [pc, #112]	; (8000ed0 <unrolled_convolution+0x1a0>)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4423      	add	r3, r4
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	fb10 f303 	smulbb	r3, r0, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b29a      	uxth	r2, r3
						(kernel[m+2]*image_block_blue[m+2]);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3302      	adds	r3, #2
 8000e78:	6839      	ldr	r1, [r7, #0]
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f993 3000 	ldrsb.w	r3, [r3]
						(kernel[m+1]*image_block_blue[m+1]) +
 8000e80:	b299      	uxth	r1, r3
						(kernel[m+2]*image_block_blue[m+2]);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3302      	adds	r3, #2
 8000e86:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <unrolled_convolution+0x1a0>)
 8000e88:	5cc3      	ldrb	r3, [r0, r3]
						(kernel[m+1]*image_block_blue[m+1]) +
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	fb11 f303 	smulbb	r3, r1, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	b29a      	uxth	r2, r3
		accumulator[2] = accumulator[2] +
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3304      	adds	r3, #4
						(kernel[m+1]*image_block_blue[m+1]) +
 8000e9a:	b212      	sxth	r2, r2
		accumulator[2] = accumulator[2] +
 8000e9c:	801a      	strh	r2, [r3, #0]
	for(int m = 0; m<(kernel_size*kernel_size); m+=3){
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3303      	adds	r3, #3
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <unrolled_convolution+0x1a4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <unrolled_convolution+0x1a4>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f6ff af43 	blt.w	8000d40 <unrolled_convolution+0x10>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc90      	pop	{r4, r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200001e8 	.word	0x200001e8
 8000ecc:	200001f4 	.word	0x200001f4
 8000ed0:	20000200 	.word	0x20000200
 8000ed4:	20000011 	.word	0x20000011

08000ed8 <intrinsic_unrolled_convolution>:

void intrinsic_unrolled_convolution(int16_t *accumulator, int8_t *kernel) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	for(int m = 0; m<(kernel_size*kernel_size); m+=3){
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e0a4      	b.n	8001032 <intrinsic_unrolled_convolution+0x15a>
		// Process red
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[0])
						:[op1] "r" (kernel[m]), [op2] "r" (image_block_red[m]), [acc] "r" (accumulator[0])
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef2:	4959      	ldr	r1, [pc, #356]	; (8001058 <intrinsic_unrolled_convolution+0x180>)
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	440a      	add	r2, r1
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f9b1 1000 	ldrsh.w	r1, [r1]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000f00:	fb13 1202 	smlabb	r2, r3, r2, r1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	801a      	strh	r2, [r3, #0]
						);
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[0])
						:[op1] "r" (kernel[m+1]), [op2] "r" (image_block_red[m+1]), [acc] "r" (accumulator[0])
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	f993 3000 	ldrsb.w	r3, [r3]
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	3201      	adds	r2, #1
 8000f18:	494f      	ldr	r1, [pc, #316]	; (8001058 <intrinsic_unrolled_convolution+0x180>)
 8000f1a:	5c8a      	ldrb	r2, [r1, r2]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	f9b1 1000 	ldrsh.w	r1, [r1]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000f22:	fb13 1202 	smlabb	r2, r3, r2, r1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	801a      	strh	r2, [r3, #0]
						);
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[0])
						:[op1] "r" (kernel[m+2]), [op2] "r" (image_block_red[m+2]), [acc] "r" (accumulator[0])
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	f993 3000 	ldrsb.w	r3, [r3]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	3202      	adds	r2, #2
 8000f3a:	4947      	ldr	r1, [pc, #284]	; (8001058 <intrinsic_unrolled_convolution+0x180>)
 8000f3c:	5c8a      	ldrb	r2, [r1, r2]
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f9b1 1000 	ldrsh.w	r1, [r1]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000f44:	fb13 1202 	smlabb	r2, r3, r2, r1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	801a      	strh	r2, [r3, #0]
						);
		 // Process green
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[1])
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3302      	adds	r3, #2
						:[op1] "r" (kernel[m]), [op2] "r" (image_block_green[m]), [acc] "r" (accumulator[1])
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	440a      	add	r2, r1
 8000f56:	f992 2000 	ldrsb.w	r2, [r2]
 8000f5a:	4840      	ldr	r0, [pc, #256]	; (800105c <intrinsic_unrolled_convolution+0x184>)
 8000f5c:	68f9      	ldr	r1, [r7, #12]
 8000f5e:	4401      	add	r1, r0
 8000f60:	7809      	ldrb	r1, [r1, #0]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	3002      	adds	r0, #2
 8000f66:	f9b0 0000 	ldrsh.w	r0, [r0]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000f6a:	fb12 0201 	smlabb	r2, r2, r1, r0
 8000f6e:	801a      	strh	r2, [r3, #0]
						);
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[1])
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3302      	adds	r3, #2
						:[op1] "r" (kernel[m+1]), [op2] "r" (image_block_green[m+1]), [acc] "r" (accumulator[1])
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	3201      	adds	r2, #1
 8000f78:	6839      	ldr	r1, [r7, #0]
 8000f7a:	440a      	add	r2, r1
 8000f7c:	f992 2000 	ldrsb.w	r2, [r2]
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	3101      	adds	r1, #1
 8000f84:	4835      	ldr	r0, [pc, #212]	; (800105c <intrinsic_unrolled_convolution+0x184>)
 8000f86:	5c41      	ldrb	r1, [r0, r1]
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	3002      	adds	r0, #2
 8000f8c:	f9b0 0000 	ldrsh.w	r0, [r0]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000f90:	fb12 0201 	smlabb	r2, r2, r1, r0
 8000f94:	801a      	strh	r2, [r3, #0]
						);
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[1])
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3302      	adds	r3, #2
						:[op1] "r" (kernel[m+2]), [op2] "r" (image_block_green[m+2]), [acc] "r" (accumulator[1])
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	3202      	adds	r2, #2
 8000f9e:	6839      	ldr	r1, [r7, #0]
 8000fa0:	440a      	add	r2, r1
 8000fa2:	f992 2000 	ldrsb.w	r2, [r2]
 8000fa6:	68f9      	ldr	r1, [r7, #12]
 8000fa8:	3102      	adds	r1, #2
 8000faa:	482c      	ldr	r0, [pc, #176]	; (800105c <intrinsic_unrolled_convolution+0x184>)
 8000fac:	5c41      	ldrb	r1, [r0, r1]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	3002      	adds	r0, #2
 8000fb2:	f9b0 0000 	ldrsh.w	r0, [r0]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000fb6:	fb12 0201 	smlabb	r2, r2, r1, r0
 8000fba:	801a      	strh	r2, [r3, #0]
						);
		 // Process blue
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[2])
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3304      	adds	r3, #4
						:[op1] "r" (kernel[m]), [op2] "r" (image_block_blue[m]), [acc] "r" (accumulator[2])
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	6839      	ldr	r1, [r7, #0]
 8000fc4:	440a      	add	r2, r1
 8000fc6:	f992 2000 	ldrsb.w	r2, [r2]
 8000fca:	4825      	ldr	r0, [pc, #148]	; (8001060 <intrinsic_unrolled_convolution+0x188>)
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	4401      	add	r1, r0
 8000fd0:	7809      	ldrb	r1, [r1, #0]
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	3004      	adds	r0, #4
 8000fd6:	f9b0 0000 	ldrsh.w	r0, [r0]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8000fda:	fb12 0201 	smlabb	r2, r2, r1, r0
 8000fde:	801a      	strh	r2, [r3, #0]
						);
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[2])
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3304      	adds	r3, #4
						:[op1] "r" (kernel[m+1]), [op2] "r" (image_block_blue[m+1]), [acc] "r" (accumulator[2])
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	3201      	adds	r2, #1
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	440a      	add	r2, r1
 8000fec:	f992 2000 	ldrsb.w	r2, [r2]
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	3101      	adds	r1, #1
 8000ff4:	481a      	ldr	r0, [pc, #104]	; (8001060 <intrinsic_unrolled_convolution+0x188>)
 8000ff6:	5c41      	ldrb	r1, [r0, r1]
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	3004      	adds	r0, #4
 8000ffc:	f9b0 0000 	ldrsh.w	r0, [r0]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8001000:	fb12 0201 	smlabb	r2, r2, r1, r0
 8001004:	801a      	strh	r2, [r3, #0]
						);
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accumulator[2])
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
						:[op1] "r" (kernel[m+2]), [op2] "r" (image_block_blue[m+2]), [acc] "r" (accumulator[2])
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	3202      	adds	r2, #2
 800100e:	6839      	ldr	r1, [r7, #0]
 8001010:	440a      	add	r2, r1
 8001012:	f992 2000 	ldrsb.w	r2, [r2]
 8001016:	68f9      	ldr	r1, [r7, #12]
 8001018:	3102      	adds	r1, #2
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <intrinsic_unrolled_convolution+0x188>)
 800101c:	5c41      	ldrb	r1, [r0, r1]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	3004      	adds	r0, #4
 8001022:	f9b0 0000 	ldrsh.w	r0, [r0]
		 __asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8001026:	fb12 0201 	smlabb	r2, r2, r1, r0
 800102a:	801a      	strh	r2, [r3, #0]
	for(int m = 0; m<(kernel_size*kernel_size); m+=3){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3303      	adds	r3, #3
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <intrinsic_unrolled_convolution+0x18c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <intrinsic_unrolled_convolution+0x18c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	429a      	cmp	r2, r3
 8001044:	f6ff af50 	blt.w	8000ee8 <intrinsic_unrolled_convolution+0x10>
						);
	}
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001e8 	.word	0x200001e8
 800105c:	200001f4 	.word	0x200001f4
 8001060:	20000200 	.word	0x20000200
 8001064:	20000011 	.word	0x20000011

08001068 <saturate>:
		  When saturating a Q4.12 format, only consider the fractional bits and
		  revert back to Q0.8 format.
   @param accumulate is the value to saturate.
   @retval The saturated number.
 */
uint8_t saturate(int16_t accumulate) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
	if(accumulate > 0x0FFF){
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800107a:	db03      	blt.n	8001084 <saturate+0x1c>
		accumulate = 0x0FFF;
 800107c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	e005      	b.n	8001090 <saturate+0x28>
	}
	else if(accumulate < 0x0000){
 8001084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	da01      	bge.n	8001090 <saturate+0x28>
		accumulate = 0x0000;
 800108c:	2300      	movs	r3, #0
 800108e:	80fb      	strh	r3, [r7, #6]
	}
	return (uint8_t)(accumulate >> 4);
 8001090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001094:	111b      	asrs	r3, r3, #4
 8001096:	b21b      	sxth	r3, r3
 8001098:	b2db      	uxtb	r3, r3
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010aa:	b672      	cpsid	i
}
 80010ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ae:	e7fe      	b.n	80010ae <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_MspInit+0x4c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x4c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ee:	2007      	movs	r0, #7
 80010f0:	f000 fb70 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a19      	ldr	r2, [pc, #100]	; (8001184 <HAL_I2C_MspInit+0x84>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12c      	bne.n	800117c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800113e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001150:	2304      	movs	r3, #4
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	; (800118c <HAL_I2C_MspInit+0x8c>)
 800115c:	f000 fb7c 	bl	8001858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005400 	.word	0x40005400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400

08001190 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a59      	ldr	r2, [pc, #356]	; (8001314 <HAL_I2S_MspInit+0x184>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d15b      	bne.n	800126a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	4b58      	ldr	r3, [pc, #352]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a57      	ldr	r2, [pc, #348]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	623b      	str	r3, [r7, #32]
 80011cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	4b51      	ldr	r3, [pc, #324]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a50      	ldr	r2, [pc, #320]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a49      	ldr	r2, [pc, #292]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b47      	ldr	r3, [pc, #284]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001206:	2304      	movs	r3, #4
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001216:	2306      	movs	r3, #6
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	483e      	ldr	r0, [pc, #248]	; (800131c <HAL_I2S_MspInit+0x18c>)
 8001222:	f000 fb19 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001226:	2308      	movs	r3, #8
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001236:	2305      	movs	r3, #5
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	4836      	ldr	r0, [pc, #216]	; (800131c <HAL_I2S_MspInit+0x18c>)
 8001242:	f000 fb09 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001246:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001258:	2305      	movs	r3, #5
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	482f      	ldr	r0, [pc, #188]	; (8001320 <HAL_I2S_MspInit+0x190>)
 8001264:	f000 faf8 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001268:	e04f      	b.n	800130a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2d      	ldr	r2, [pc, #180]	; (8001324 <HAL_I2S_MspInit+0x194>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d14a      	bne.n	800130a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <HAL_I2S_MspInit+0x188>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a26      	ldr	r2, [pc, #152]	; (8001318 <HAL_I2S_MspInit+0x188>)
 800127e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_I2S_MspInit+0x188>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_I2S_MspInit+0x188>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_I2S_MspInit+0x188>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_I2S_MspInit+0x188>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012c8:	2310      	movs	r3, #16
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d8:	2306      	movs	r3, #6
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <HAL_I2S_MspInit+0x198>)
 80012e4:	f000 fab8 	bl	8001858 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012fa:	2306      	movs	r3, #6
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_I2S_MspInit+0x18c>)
 8001306:	f000 faa7 	bl	8001858 <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	; 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40003800 	.word	0x40003800
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800
 8001320:	40020400 	.word	0x40020400
 8001324:	40003c00 	.word	0x40003c00
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_SPI_MspInit+0x84>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12b      	bne.n	80013a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001386:	23e0      	movs	r3, #224	; 0xe0
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001396:	2305      	movs	r3, #5
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_SPI_MspInit+0x8c>)
 80013a2:	f000 fa59 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40013000 	.word	0x40013000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f8d0 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <OTG_FS_IRQHandler+0x10>)
 8001416:	f000 fe9d 	bl	8002154 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000f5f0 	.word	0x2000f5f0

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f007 fe38 	bl	80090c8 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20020000 	.word	0x20020000
 8001484:	00000400 	.word	0x00000400
 8001488:	2000f20c 	.word	0x2000f20c
 800148c:	2000fb18 	.word	0x2000fb18

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b8:	f7ff ffea 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f007 fdf7 	bl	80090d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7fe fff5 	bl	80004d4 <main>
  bx  lr    
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80014f8:	080091fc 	.word	0x080091fc
  ldr r2, =_sbss
 80014fc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001500:	2000fb18 	.word	0x2000fb18

08001504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_Init+0x40>)
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_Init+0x40>)
 800151e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x40>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f94f 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fdb8 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023c00 	.word	0x40023c00

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f967 	bl	800183e <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f92f 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000014 	.word	0x20000014
 80015a4:	2000001c 	.word	0x2000001c
 80015a8:	20000018 	.word	0x20000018

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000001c 	.word	0x2000001c
 80015d0:	2000f210 	.word	0x2000f210

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000f210 	.word	0x2000f210

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000001c 	.word	0x2000001c

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e159      	b.n	8001b28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8148 	bne.w	8001b22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80a2 	beq.w	8001b22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <HAL_GPIO_Init+0x2e8>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a56      	ldr	r2, [pc, #344]	; (8001b40 <HAL_GPIO_Init+0x2e8>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b54      	ldr	r3, [pc, #336]	; (8001b40 <HAL_GPIO_Init+0x2e8>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fa:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_GPIO_Init+0x2ec>)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a49      	ldr	r2, [pc, #292]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0x202>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a48      	ldr	r2, [pc, #288]	; (8001b4c <HAL_GPIO_Init+0x2f4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x1fe>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a47      	ldr	r2, [pc, #284]	; (8001b50 <HAL_GPIO_Init+0x2f8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x1fa>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a46      	ldr	r2, [pc, #280]	; (8001b54 <HAL_GPIO_Init+0x2fc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x1f6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a45      	ldr	r2, [pc, #276]	; (8001b58 <HAL_GPIO_Init+0x300>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x1f2>
 8001a46:	2304      	movs	r3, #4
 8001a48:	e008      	b.n	8001a5c <HAL_GPIO_Init+0x204>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x204>
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e004      	b.n	8001a5c <HAL_GPIO_Init+0x204>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_Init+0x204>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x204>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f002 0203 	and.w	r2, r2, #3
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	4093      	lsls	r3, r2
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a6c:	4935      	ldr	r1, [pc, #212]	; (8001b44 <HAL_GPIO_Init+0x2ec>)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7a:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_GPIO_Init+0x304>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9e:	4a2f      	ldr	r2, [pc, #188]	; (8001b5c <HAL_GPIO_Init+0x304>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_GPIO_Init+0x304>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac8:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_GPIO_Init+0x304>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ace:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_GPIO_Init+0x304>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af2:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <HAL_GPIO_Init+0x304>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_GPIO_Init+0x304>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_GPIO_Init+0x304>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3301      	adds	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	f67f aea2 	bls.w	8001874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af02      	add	r7, sp, #8
 8001b98:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e059      	b.n	8001c58 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f006 ff02 	bl	80089c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd2:	d102      	bne.n	8001bda <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fdaa 	bl	8005738 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7c1a      	ldrb	r2, [r3, #16]
 8001bec:	f88d 2000 	strb.w	r2, [sp]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf4:	f003 fd2b 	bl	800564e <USB_CoreInit>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e026      	b.n	8001c58 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fda2 	bl	800575a <USB_SetCurrentMode>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e017      	b.n	8001c58 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7c1a      	ldrb	r2, [r3, #16]
 8001c30:	f88d 2000 	strb.w	r2, [sp]
 8001c34:	3304      	adds	r3, #4
 8001c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c38:	f003 ff44 	bl	8005ac4 <USB_HostInit>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e004      	b.n	8001c58 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08b      	sub	sp, #44	; 0x2c
 8001c64:	af04      	add	r7, sp, #16
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	70fb      	strb	r3, [r7, #3]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70bb      	strb	r3, [r7, #2]
 8001c76:	4613      	mov	r3, r2
 8001c78:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001c7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c7c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_HCD_HC_Init+0x2c>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e09d      	b.n	8001dc8 <HAL_HCD_HC_Init+0x168>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3319      	adds	r3, #25
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	787a      	ldrb	r2, [r7, #1]
 8001cba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3315      	adds	r3, #21
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3326      	adds	r3, #38	; 0x26
 8001ce0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001ce4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	78bb      	ldrb	r3, [r7, #2]
 8001cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cee:	b2d8      	uxtb	r0, r3
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3316      	adds	r3, #22
 8001cfe:	4602      	mov	r2, r0
 8001d00:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	4619      	mov	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fbc8 	bl	800249c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001d0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da0a      	bge.n	8001d2a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	3317      	adds	r3, #23
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	e009      	b.n	8001d3e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3317      	adds	r3, #23
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 f80c 	bl	8005d60 <USB_GetHostSpeed>
 8001d48:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10b      	bne.n	8001d6a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_HCD_HC_Init+0x10a>
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d104      	bne.n	8001d6a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2bbc      	cmp	r3, #188	; 0xbc
 8001d64:	d901      	bls.n	8001d6a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001d66:	23bc      	movs	r3, #188	; 0xbc
 8001d68:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	3318      	adds	r3, #24
 8001d7a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	b298      	uxth	r0, r3
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	3328      	adds	r3, #40	; 0x28
 8001d94:	4602      	mov	r2, r0
 8001d96:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	787c      	ldrb	r4, [r7, #1]
 8001da2:	78ba      	ldrb	r2, [r7, #2]
 8001da4:	78f9      	ldrb	r1, [r7, #3]
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	4623      	mov	r3, r4
 8001db6:	f003 fffb 	bl	8005db0 <USB_HC_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd90      	pop	{r4, r7, pc}

08001dd0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_HCD_HC_Halt+0x1e>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e00f      	b.n	8001e0e <HAL_HCD_HC_Halt+0x3e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fb41 	bl	8006486 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	4608      	mov	r0, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	70fb      	strb	r3, [r7, #3]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	70bb      	strb	r3, [r7, #2]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	3317      	adds	r3, #23
 8001e42:	78ba      	ldrb	r2, [r7, #2]
 8001e44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	3326      	adds	r3, #38	; 0x26
 8001e56:	787a      	ldrb	r2, [r7, #1]
 8001e58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e5a:	7c3b      	ldrb	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d114      	bne.n	8001e8a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	332a      	adds	r3, #42	; 0x2a
 8001e70:	2203      	movs	r2, #3
 8001e72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3319      	adds	r3, #25
 8001e84:	7f3a      	ldrb	r2, [r7, #28]
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e009      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	332a      	adds	r3, #42	; 0x2a
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e9e:	787b      	ldrb	r3, [r7, #1]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	f200 8102 	bhi.w	80020aa <HAL_HCD_HC_SubmitRequest+0x292>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <HAL_HCD_HC_SubmitRequest+0x94>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ebd 	.word	0x08001ebd
 8001eb0:	08002095 	.word	0x08002095
 8001eb4:	08001f81 	.word	0x08001f81
 8001eb8:	0800200b 	.word	0x0800200b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001ebc:	7c3b      	ldrb	r3, [r7, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	f040 80f5 	bne.w	80020ae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001ec4:	78bb      	ldrb	r3, [r7, #2]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d12d      	bne.n	8001f26 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001eca:	8b3b      	ldrh	r3, [r7, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	333d      	adds	r3, #61	; 0x3d
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	333d      	adds	r3, #61	; 0x3d
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10a      	bne.n	8001f10 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	332a      	adds	r3, #42	; 0x2a
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001f0e:	e0ce      	b.n	80020ae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	332a      	adds	r3, #42	; 0x2a
 8001f20:	2202      	movs	r2, #2
 8001f22:	701a      	strb	r2, [r3, #0]
      break;
 8001f24:	e0c3      	b.n	80020ae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	331a      	adds	r3, #26
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	f040 80b8 	bne.w	80020ae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	333c      	adds	r3, #60	; 0x3c
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10a      	bne.n	8001f6a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	332a      	adds	r3, #42	; 0x2a
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
      break;
 8001f68:	e0a1      	b.n	80020ae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	332a      	adds	r3, #42	; 0x2a
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	701a      	strb	r2, [r3, #0]
      break;
 8001f7e:	e096      	b.n	80020ae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f80:	78bb      	ldrb	r3, [r7, #2]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d120      	bne.n	8001fc8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	333d      	adds	r3, #61	; 0x3d
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	332a      	adds	r3, #42	; 0x2a
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001fb0:	e07e      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	332a      	adds	r3, #42	; 0x2a
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	701a      	strb	r2, [r3, #0]
      break;
 8001fc6:	e073      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	333c      	adds	r3, #60	; 0x3c
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	332a      	adds	r3, #42	; 0x2a
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
      break;
 8001ff2:	e05d      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	332a      	adds	r3, #42	; 0x2a
 8002004:	2202      	movs	r2, #2
 8002006:	701a      	strb	r2, [r3, #0]
      break;
 8002008:	e052      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800200a:	78bb      	ldrb	r3, [r7, #2]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d120      	bne.n	8002052 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	333d      	adds	r3, #61	; 0x3d
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	332a      	adds	r3, #42	; 0x2a
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800203a:	e039      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	332a      	adds	r3, #42	; 0x2a
 800204c:	2202      	movs	r2, #2
 800204e:	701a      	strb	r2, [r3, #0]
      break;
 8002050:	e02e      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	333c      	adds	r3, #60	; 0x3c
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	332a      	adds	r3, #42	; 0x2a
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
      break;
 800207c:	e018      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	332a      	adds	r3, #42	; 0x2a
 800208e:	2202      	movs	r2, #2
 8002090:	701a      	strb	r2, [r3, #0]
      break;
 8002092:	e00d      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	332a      	adds	r3, #42	; 0x2a
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
      break;
 80020a8:	e002      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80020aa:	bf00      	nop
 80020ac:	e000      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80020ae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	332c      	adds	r3, #44	; 0x2c
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	8b39      	ldrh	r1, [r7, #24]
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4403      	add	r3, r0
 80020d4:	3334      	adds	r3, #52	; 0x34
 80020d6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	334c      	adds	r3, #76	; 0x4c
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3338      	adds	r3, #56	; 0x38
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3315      	adds	r3, #21
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	334d      	adds	r3, #77	; 0x4d
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3310      	adds	r3, #16
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	1d19      	adds	r1, r3, #4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	799b      	ldrb	r3, [r3, #6]
 8002142:	461a      	mov	r2, r3
 8002144:	f003 ff4a 	bl	8005fdc <USB_HC_StartXfer>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop

08002154 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f003 fc6b 	bl	8005a46 <USB_GetMode>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	f040 80fb 	bne.w	800236e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fc2e 	bl	80059de <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80f1 	beq.w	800236c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fc25 	bl	80059de <USB_ReadInterrupts>
 8002194:	4603      	mov	r3, r0
 8002196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800219e:	d104      	bne.n	80021aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f003 fc15 	bl	80059de <USB_ReadInterrupts>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021be:	d104      	bne.n	80021ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fc05 	bl	80059de <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021de:	d104      	bne.n	80021ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fbf5 	bl	80059de <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d103      	bne.n	8002206 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2202      	movs	r2, #2
 8002204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fbe7 	bl	80059de <USB_ReadInterrupts>
 8002210:	4603      	mov	r3, r0
 8002212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800221a:	d120      	bne.n	800225e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002224:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d113      	bne.n	800225e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002236:	2110      	movs	r1, #16
 8002238:	6938      	ldr	r0, [r7, #16]
 800223a:	f003 fada 	bl	80057f2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800223e:	6938      	ldr	r0, [r7, #16]
 8002240:	f003 fb09 	bl	8005856 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7a5b      	ldrb	r3, [r3, #9]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d105      	bne.n	8002258 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	4618      	mov	r0, r3
 8002254:	f003 fce4 	bl	8005c20 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f006 fc33 	bl	8008ac4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f003 fbbb 	bl	80059de <USB_ReadInterrupts>
 8002268:	4603      	mov	r3, r0
 800226a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002272:	d102      	bne.n	800227a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f001 fd33 	bl	8003ce0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fbad 	bl	80059de <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b08      	cmp	r3, #8
 800228c:	d106      	bne.n	800229c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f006 fbfc 	bl	8008a8c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2208      	movs	r2, #8
 800229a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fb9c 	bl	80059de <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022b0:	d139      	bne.n	8002326 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 f8d4 	bl	8006464 <USB_HC_ReadInterrupt>
 80022bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e025      	b.n	8002310 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d018      	beq.n	800230a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ee:	d106      	bne.n	80022fe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f905 	bl	8002506 <HCD_HC_IN_IRQHandler>
 80022fc:	e005      	b.n	800230a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 ff67 	bl	80031d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	3301      	adds	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	795b      	ldrb	r3, [r3, #5]
 8002314:	461a      	mov	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4293      	cmp	r3, r2
 800231a:	d3d3      	bcc.n	80022c4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f003 fb57 	bl	80059de <USB_ReadInterrupts>
 8002330:	4603      	mov	r3, r0
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b10      	cmp	r3, #16
 8002338:	d101      	bne.n	800233e <HAL_HCD_IRQHandler+0x1ea>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_HCD_IRQHandler+0x1ec>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d014      	beq.n	800236e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0210 	bic.w	r2, r2, #16
 8002352:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f001 fbe4 	bl	8003b22 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0210 	orr.w	r2, r2, #16
 8002368:	619a      	str	r2, [r3, #24]
 800236a:	e000      	b.n	800236e <HAL_HCD_IRQHandler+0x21a>
      return;
 800236c:	bf00      	nop
    }
  }
}
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_HCD_Start+0x16>
 8002386:	2302      	movs	r3, #2
 8002388:	e013      	b.n	80023b2 <HAL_HCD_Start+0x3e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f003 fca8 	bl	8005cee <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f9b7 	bl	8005716 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_HCD_Stop+0x16>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e00d      	b.n	80023ec <HAL_HCD_Stop+0x32>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f004 f972 	bl	80066c6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fc4a 	bl	8005c9a <USB_ResetPort>
 8002406:	4603      	mov	r3, r0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	334c      	adds	r3, #76	; 0x4c
 800242c:	781b      	ldrb	r3, [r3, #0]
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3338      	adds	r3, #56	; 0x38
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f003 fc8c 	bl	8005d8e <USB_GetCurrentFrame>
 8002476:	4603      	mov	r3, r0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fc67 	bl	8005d60 <USB_GetHostSpeed>
 8002492:	4603      	mov	r3, r0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	331a      	adds	r3, #26
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	331b      	adds	r3, #27
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3325      	adds	r3, #37	; 0x25
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3324      	adds	r3, #36	; 0x24
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fa6d 	bl	8005a04 <USB_ReadChInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11a      	bne.n	800256a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	2304      	movs	r3, #4
 8002544:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	334d      	adds	r3, #77	; 0x4d
 8002556:	2207      	movs	r2, #7
 8002558:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f003 ff8f 	bl	8006486 <USB_HC_Halt>
 8002568:	e09e      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f003 fa46 	bl	8005a04 <USB_ReadChInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002582:	d11b      	bne.n	80025bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	461a      	mov	r2, r3
 8002592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002596:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334d      	adds	r3, #77	; 0x4d
 80025a8:	2208      	movs	r2, #8
 80025aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 ff66 	bl	8006486 <USB_HC_Halt>
 80025ba:	e075      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 fa1d 	bl	8005a04 <USB_ReadChInterrupts>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d11a      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2308      	movs	r3, #8
 80025e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	334d      	adds	r3, #77	; 0x4d
 80025f6:	2206      	movs	r2, #6
 80025f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f003 ff3f 	bl	8006486 <USB_HC_Halt>
 8002608:	e04e      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f003 f9f6 	bl	8005a04 <USB_ReadChInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002622:	d11b      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	461a      	mov	r2, r3
 8002632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002636:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	334d      	adds	r3, #77	; 0x4d
 8002648:	2209      	movs	r2, #9
 800264a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f003 ff16 	bl	8006486 <USB_HC_Halt>
 800265a:	e025      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f003 f9cd 	bl	8005a04 <USB_ReadChInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d119      	bne.n	80026a8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	334d      	adds	r3, #77	; 0x4d
 8002696:	2207      	movs	r2, #7
 8002698:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 feef 	bl	8006486 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 f9a7 	bl	8005a04 <USB_ReadChInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c0:	d112      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fedb 	bl	8006486 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e2:	6093      	str	r3, [r2, #8]
 80026e4:	f000 bd75 	b.w	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 f987 	bl	8005a04 <USB_ReadChInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 8128 	bne.w	8002952 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2320      	movs	r3, #32
 8002712:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	331b      	adds	r3, #27
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d119      	bne.n	800275e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	331b      	adds	r3, #27
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	440a      	add	r2, r1
 8002754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	799b      	ldrb	r3, [r3, #6]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01b      	beq.n	800279e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3330      	adds	r3, #48	; 0x30
 8002776:	6819      	ldr	r1, [r3, #0]
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	1ac9      	subs	r1, r1, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4403      	add	r3, r0
 800279a:	3338      	adds	r3, #56	; 0x38
 800279c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	334d      	adds	r3, #77	; 0x4d
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3344      	adds	r3, #68	; 0x44
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	2301      	movs	r3, #1
 80027d6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	3326      	adds	r3, #38	; 0x26
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3326      	adds	r3, #38	; 0x26
 80027fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002800:	2b02      	cmp	r3, #2
 8002802:	d110      	bne.n	8002826 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f003 fe3a 	bl	8006486 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	461a      	mov	r2, r3
 8002820:	2310      	movs	r3, #16
 8002822:	6093      	str	r3, [r2, #8]
 8002824:	e03d      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3326      	adds	r3, #38	; 0x26
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d00a      	beq.n	8002852 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3326      	adds	r3, #38	; 0x26
 800284c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800284e:	2b01      	cmp	r3, #1
 8002850:	d127      	bne.n	80028a2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	0151      	lsls	r1, r2, #5
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	440a      	add	r2, r1
 8002868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002870:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	334c      	adds	r3, #76	; 0x4c
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	334c      	adds	r3, #76	; 0x4c
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f006 f91f 	bl	8008ae0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	799b      	ldrb	r3, [r3, #6]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d13b      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3338      	adds	r3, #56	; 0x38
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4403      	add	r3, r0
 80028ca:	3328      	adds	r3, #40	; 0x28
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	440b      	add	r3, r1
 80028d0:	1e59      	subs	r1, r3, #1
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4403      	add	r3, r0
 80028e0:	3328      	adds	r3, #40	; 0x28
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8470 	beq.w	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	333c      	adds	r3, #60	; 0x3c
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	f083 0301 	eor.w	r3, r3, #1
 800290a:	b2d8      	uxtb	r0, r3
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	333c      	adds	r3, #60	; 0x3c
 800291a:	4602      	mov	r2, r0
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	f000 bc58 	b.w	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	333c      	adds	r3, #60	; 0x3c
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	f083 0301 	eor.w	r3, r3, #1
 800293a:	b2d8      	uxtb	r0, r3
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	333c      	adds	r3, #60	; 0x3c
 800294a:	4602      	mov	r2, r0
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	f000 bc40 	b.w	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 f852 	bl	8005a04 <USB_ReadChInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d131      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	461a      	mov	r2, r3
 8002978:	2320      	movs	r3, #32
 800297a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	331a      	adds	r3, #26
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	f040 841f 	bne.w	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	331b      	adds	r3, #27
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334d      	adds	r3, #77	; 0x4d
 80029b8:	2203      	movs	r2, #3
 80029ba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 fd5e 	bl	8006486 <USB_HC_Halt>
 80029ca:	f000 bc02 	b.w	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 f814 	bl	8005a04 <USB_ReadChInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	f040 8305 	bne.w	8002ff2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	461a      	mov	r2, r3
 80029f6:	2302      	movs	r3, #2
 80029f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	334d      	adds	r3, #77	; 0x4d
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d114      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	334d      	adds	r3, #77	; 0x4d
 8002a20:	2202      	movs	r2, #2
 8002a22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	334c      	adds	r3, #76	; 0x4c
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e2cc      	b.n	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	334d      	adds	r3, #77	; 0x4d
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d114      	bne.n	8002a7a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334d      	adds	r3, #77	; 0x4d
 8002a60:	2202      	movs	r2, #2
 8002a62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	334c      	adds	r3, #76	; 0x4c
 8002a74:	2205      	movs	r2, #5
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e2ac      	b.n	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	334d      	adds	r3, #77	; 0x4d
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b07      	cmp	r3, #7
 8002a8e:	d00b      	beq.n	8002aa8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334d      	adds	r3, #77	; 0x4d
 8002aa0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	f040 80a6 	bne.w	8002bf4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	334d      	adds	r3, #77	; 0x4d
 8002ab8:	2202      	movs	r2, #2
 8002aba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3344      	adds	r3, #68	; 0x44
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4403      	add	r3, r0
 8002adc:	3344      	adds	r3, #68	; 0x44
 8002ade:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3344      	adds	r3, #68	; 0x44
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d943      	bls.n	8002b7e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3344      	adds	r3, #68	; 0x44
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	331a      	adds	r3, #26
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d123      	bne.n	8002b68 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	331b      	adds	r3, #27
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	331c      	adds	r3, #28
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	0151      	lsls	r1, r2, #5
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b66:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334c      	adds	r3, #76	; 0x4c
 8002b78:	2204      	movs	r2, #4
 8002b7a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b7c:	e229      	b.n	8002fd2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	334c      	adds	r3, #76	; 0x4c
 8002b8e:	2202      	movs	r2, #2
 8002b90:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3326      	adds	r3, #38	; 0x26
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3326      	adds	r3, #38	; 0x26
 8002bb8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	f040 8209 	bne.w	8002fd2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bd6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bde:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bf2:	e1ee      	b.n	8002fd2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334d      	adds	r3, #77	; 0x4d
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	f040 80c8 	bne.w	8002d9c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334d      	adds	r3, #77	; 0x4d
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	331b      	adds	r3, #27
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	f040 81ce 	bne.w	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3326      	adds	r3, #38	; 0x26
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d16b      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3348      	adds	r3, #72	; 0x48
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	1c59      	adds	r1, r3, #1
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4403      	add	r3, r0
 8002c6e:	3348      	adds	r3, #72	; 0x48
 8002c70:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3348      	adds	r3, #72	; 0x48
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d943      	bls.n	8002d10 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3348      	adds	r3, #72	; 0x48
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	331b      	adds	r3, #27
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3344      	adds	r3, #68	; 0x44
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d809      	bhi.n	8002cda <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	331c      	adds	r3, #28
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	0151      	lsls	r1, r2, #5
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	440a      	add	r2, r1
 8002cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	334c      	adds	r3, #76	; 0x4c
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e014      	b.n	8002d3a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	334c      	adds	r3, #76	; 0x4c
 8002d20:	2202      	movs	r2, #2
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e009      	b.n	8002d3a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	334c      	adds	r3, #76	; 0x4c
 8002d36:	2202      	movs	r2, #2
 8002d38:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3326      	adds	r3, #38	; 0x26
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3326      	adds	r3, #38	; 0x26
 8002d60:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	f040 8136 	bne.w	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d7e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d86:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	461a      	mov	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e11b      	b.n	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	334d      	adds	r3, #77	; 0x4d
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	f040 8081 	bne.w	8002eb6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334d      	adds	r3, #77	; 0x4d
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	331b      	adds	r3, #27
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f040 80fa 	bne.w	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334c      	adds	r3, #76	; 0x4c
 8002df0:	2202      	movs	r2, #2
 8002df2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	0151      	lsls	r1, r2, #5
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	440a      	add	r2, r1
 8002e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e12:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	0151      	lsls	r1, r2, #5
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	440a      	add	r2, r1
 8002e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e32:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	0151      	lsls	r1, r2, #5
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	440a      	add	r2, r1
 8002e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e4e:	f023 0320 	bic.w	r3, r3, #32
 8002e52:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3326      	adds	r3, #38	; 0x26
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3326      	adds	r3, #38	; 0x26
 8002e7a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f040 80a9 	bne.w	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e98:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ea0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e08e      	b.n	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	334d      	adds	r3, #77	; 0x4d
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d143      	bne.n	8002f54 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334d      	adds	r3, #77	; 0x4d
 8002edc:	2202      	movs	r2, #2
 8002ede:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	334c      	adds	r3, #76	; 0x4c
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	3326      	adds	r3, #38	; 0x26
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3326      	adds	r3, #38	; 0x26
 8002f1a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d159      	bne.n	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f36:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f3e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e03f      	b.n	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	334d      	adds	r3, #77	; 0x4d
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d126      	bne.n	8002fb8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	334d      	adds	r3, #77	; 0x4d
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3344      	adds	r3, #68	; 0x44
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	1c59      	adds	r1, r3, #1
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4403      	add	r3, r0
 8002f9e:	3344      	adds	r3, #68	; 0x44
 8002fa0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	334c      	adds	r3, #76	; 0x4c
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e00d      	b.n	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	334d      	adds	r3, #77	; 0x4d
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	f000 8100 	beq.w	80031d0 <HCD_HC_IN_IRQHandler+0xcca>
 8002fd0:	e000      	b.n	8002fd4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fd2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	334c      	adds	r3, #76	; 0x4c
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f005 fd78 	bl	8008ae0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ff0:	e0ef      	b.n	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 fd02 	bl	8005a04 <USB_ReadChInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d12f      	bne.n	800306a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	461a      	mov	r2, r3
 8003018:	2340      	movs	r3, #64	; 0x40
 800301a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	334d      	adds	r3, #77	; 0x4d
 800302c:	2205      	movs	r2, #5
 800302e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	331a      	adds	r3, #26
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3344      	adds	r3, #68	; 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fa0f 	bl	8006486 <USB_HC_Halt>
 8003068:	e0b3      	b.n	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fcc6 	bl	8005a04 <USB_ReadChInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	f040 80a7 	bne.w	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3326      	adds	r3, #38	; 0x26
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d11b      	bne.n	80030d2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3344      	adds	r3, #68	; 0x44
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	334d      	adds	r3, #77	; 0x4d
 80030be:	2204      	movs	r2, #4
 80030c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 f9db 	bl	8006486 <USB_HC_Halt>
 80030d0:	e03f      	b.n	8003152 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3326      	adds	r3, #38	; 0x26
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3326      	adds	r3, #38	; 0x26
 80030f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d129      	bne.n	8003152 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3344      	adds	r3, #68	; 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	799b      	ldrb	r3, [r3, #6]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HCD_HC_IN_IRQHandler+0xc2a>
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	331b      	adds	r3, #27
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d110      	bne.n	8003152 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	334d      	adds	r3, #77	; 0x4d
 8003140:	2204      	movs	r2, #4
 8003142:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 f99a 	bl	8006486 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	331b      	adds	r3, #27
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d129      	bne.n	80031bc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	331b      	adds	r3, #27
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	0151      	lsls	r1, r2, #5
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	440a      	add	r2, r1
 8003192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b6:	f043 0320 	orr.w	r3, r3, #32
 80031ba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2310      	movs	r3, #16
 80031cc:	6093      	str	r3, [r2, #8]
 80031ce:	e000      	b.n	80031d2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80031d0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fc04 	bl	8005a04 <USB_ReadChInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d11b      	bne.n	800323e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	461a      	mov	r2, r3
 8003214:	2304      	movs	r3, #4
 8003216:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334d      	adds	r3, #77	; 0x4d
 8003228:	2207      	movs	r2, #7
 800322a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f003 f926 	bl	8006486 <USB_HC_Halt>
 800323a:	f000 bc6f 	b.w	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f002 fbdc 	bl	8005a04 <USB_ReadChInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b20      	cmp	r3, #32
 8003254:	f040 8082 	bne.w	800335c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	2320      	movs	r3, #32
 8003268:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	3319      	adds	r3, #25
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d124      	bne.n	80032ca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3319      	adds	r3, #25
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	334c      	adds	r3, #76	; 0x4c
 80032a4:	2202      	movs	r2, #2
 80032a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	334d      	adds	r3, #77	; 0x4d
 80032b8:	2203      	movs	r2, #3
 80032ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f003 f8de 	bl	8006486 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	331a      	adds	r3, #26
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f040 841d 	bne.w	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	331b      	adds	r3, #27
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f040 8411 	bne.w	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3326      	adds	r3, #38	; 0x26
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d009      	beq.n	8003324 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	331b      	adds	r3, #27
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	; 0x4d
 8003334:	2203      	movs	r2, #3
 8003336:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f003 f8a0 	bl	8006486 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3344      	adds	r3, #68	; 0x44
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e3df      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fb4d 	bl	8005a04 <USB_ReadChInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003374:	d111      	bne.n	800339a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003382:	461a      	mov	r2, r3
 8003384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003388:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 f877 	bl	8006486 <USB_HC_Halt>
 8003398:	e3c0      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 fb2e 	bl	8005a04 <USB_ReadChInterrupts>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d168      	bne.n	8003484 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3344      	adds	r3, #68	; 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 fb18 	bl	8005a04 <USB_ReadChInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d112      	bne.n	8003404 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	3319      	adds	r3, #25
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	2340      	movs	r3, #64	; 0x40
 8003402:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	331b      	adds	r3, #27
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d019      	beq.n	800344e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	331b      	adds	r3, #27
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	0151      	lsls	r1, r2, #5
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	440a      	add	r2, r1
 8003444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4413      	add	r3, r2
 8003456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345a:	461a      	mov	r2, r3
 800345c:	2301      	movs	r3, #1
 800345e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334d      	adds	r3, #77	; 0x4d
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f003 f802 	bl	8006486 <USB_HC_Halt>
 8003482:	e34b      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f002 fab9 	bl	8005a04 <USB_ReadChInterrupts>
 8003492:	4603      	mov	r3, r0
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d139      	bne.n	8003510 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	334d      	adds	r3, #77	; 0x4d
 80034ac:	2205      	movs	r2, #5
 80034ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	331a      	adds	r3, #26
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3319      	adds	r3, #25
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3344      	adds	r3, #68	; 0x44
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 ffc5 	bl	8006486 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	461a      	mov	r2, r3
 800350a:	2340      	movs	r3, #64	; 0x40
 800350c:	6093      	str	r3, [r2, #8]
 800350e:	e305      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f002 fa73 	bl	8005a04 <USB_ReadChInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b08      	cmp	r3, #8
 8003526:	d11a      	bne.n	800355e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	461a      	mov	r2, r3
 8003536:	2308      	movs	r3, #8
 8003538:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	334d      	adds	r3, #77	; 0x4d
 800354a:	2206      	movs	r2, #6
 800354c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f002 ff95 	bl	8006486 <USB_HC_Halt>
 800355c:	e2de      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f002 fa4c 	bl	8005a04 <USB_ReadChInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b10      	cmp	r3, #16
 8003574:	d144      	bne.n	8003600 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3344      	adds	r3, #68	; 0x44
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	334d      	adds	r3, #77	; 0x4d
 800359a:	2204      	movs	r2, #4
 800359c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3319      	adds	r3, #25
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d114      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	3318      	adds	r3, #24
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3319      	adds	r3, #25
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 ff4d 	bl	8006486 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	2310      	movs	r3, #16
 80035fc:	6093      	str	r3, [r2, #8]
 80035fe:	e28d      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f002 f9fb 	bl	8005a04 <USB_ReadChInterrupts>
 800360e:	4603      	mov	r3, r0
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d169      	bne.n	80036ec <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	799b      	ldrb	r3, [r3, #6]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	334d      	adds	r3, #77	; 0x4d
 8003630:	2207      	movs	r2, #7
 8003632:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f002 ff22 	bl	8006486 <USB_HC_Halt>
 8003642:	e049      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3344      	adds	r3, #68	; 0x44
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4403      	add	r3, r0
 8003664:	3344      	adds	r3, #68	; 0x44
 8003666:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3344      	adds	r3, #68	; 0x44
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d922      	bls.n	80036c4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3344      	adds	r3, #68	; 0x44
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	334c      	adds	r3, #76	; 0x4c
 80036a2:	2204      	movs	r2, #4
 80036a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	334c      	adds	r3, #76	; 0x4c
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f005 fa0f 	bl	8008ae0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036c2:	e009      	b.n	80036d8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	334c      	adds	r3, #76	; 0x4c
 80036d4:	2202      	movs	r2, #2
 80036d6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	6093      	str	r3, [r2, #8]
 80036ea:	e217      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 f985 	bl	8005a04 <USB_ReadChInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d11b      	bne.n	800373e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334d      	adds	r3, #77	; 0x4d
 8003716:	2209      	movs	r2, #9
 8003718:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f002 feaf 	bl	8006486 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800373a:	6093      	str	r3, [r2, #8]
 800373c:	e1ee      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f002 f95c 	bl	8005a04 <USB_ReadChInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	f040 81df 	bne.w	8003b16 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	2302      	movs	r3, #2
 8003768:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	334d      	adds	r3, #77	; 0x4d
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 8093 	bne.w	80038a8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	334d      	adds	r3, #77	; 0x4d
 8003792:	2202      	movs	r2, #2
 8003794:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	334c      	adds	r3, #76	; 0x4c
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	3326      	adds	r3, #38	; 0x26
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d00b      	beq.n	80037d8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	3326      	adds	r3, #38	; 0x26
 80037d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	f040 8190 	bne.w	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	799b      	ldrb	r3, [r3, #6]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d115      	bne.n	800380c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	333d      	adds	r3, #61	; 0x3d
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	f083 0301 	eor.w	r3, r3, #1
 80037f8:	b2d8      	uxtb	r0, r3
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	333d      	adds	r3, #61	; 0x3d
 8003808:	4602      	mov	r2, r0
 800380a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	799b      	ldrb	r3, [r3, #6]
 8003810:	2b01      	cmp	r3, #1
 8003812:	f040 8171 	bne.w	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3334      	adds	r3, #52	; 0x34
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8165 	beq.w	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3334      	adds	r3, #52	; 0x34
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4403      	add	r3, r0
 800384e:	3328      	adds	r3, #40	; 0x28
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	440b      	add	r3, r1
 8003854:	1e59      	subs	r1, r3, #1
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4403      	add	r3, r0
 8003864:	3328      	adds	r3, #40	; 0x28
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	fbb1 f3f3 	udiv	r3, r1, r3
 800386c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 813f 	beq.w	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	333d      	adds	r3, #61	; 0x3d
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2d8      	uxtb	r0, r3
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	333d      	adds	r3, #61	; 0x3d
 80038a2:	4602      	mov	r2, r0
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e127      	b.n	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	334d      	adds	r3, #77	; 0x4d
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d120      	bne.n	8003900 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	334d      	adds	r3, #77	; 0x4d
 80038ce:	2202      	movs	r2, #2
 80038d0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	331b      	adds	r3, #27
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	f040 8107 	bne.w	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	334c      	adds	r3, #76	; 0x4c
 80038fa:	2202      	movs	r2, #2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	e0fb      	b.n	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	334d      	adds	r3, #77	; 0x4d
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b04      	cmp	r3, #4
 8003914:	d13a      	bne.n	800398c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	334d      	adds	r3, #77	; 0x4d
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	334c      	adds	r3, #76	; 0x4c
 800393a:	2202      	movs	r2, #2
 800393c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	331b      	adds	r3, #27
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 80d1 	bne.w	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	331b      	adds	r3, #27
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	0151      	lsls	r1, r2, #5
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	440a      	add	r2, r1
 8003980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003988:	6053      	str	r3, [r2, #4]
 800398a:	e0b5      	b.n	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334d      	adds	r3, #77	; 0x4d
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d114      	bne.n	80039cc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	334d      	adds	r3, #77	; 0x4d
 80039b2:	2202      	movs	r2, #2
 80039b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	334c      	adds	r3, #76	; 0x4c
 80039c6:	2202      	movs	r2, #2
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e095      	b.n	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	334d      	adds	r3, #77	; 0x4d
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d114      	bne.n	8003a0c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334d      	adds	r3, #77	; 0x4d
 80039f2:	2202      	movs	r2, #2
 80039f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	334c      	adds	r3, #76	; 0x4c
 8003a06:	2205      	movs	r2, #5
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	e075      	b.n	8003af8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	334d      	adds	r3, #77	; 0x4d
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b07      	cmp	r3, #7
 8003a20:	d00a      	beq.n	8003a38 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	334d      	adds	r3, #77	; 0x4d
 8003a32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a34:	2b09      	cmp	r3, #9
 8003a36:	d170      	bne.n	8003b1a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	334d      	adds	r3, #77	; 0x4d
 8003a48:	2202      	movs	r2, #2
 8003a4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3344      	adds	r3, #68	; 0x44
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	1c59      	adds	r1, r3, #1
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4403      	add	r3, r0
 8003a6c:	3344      	adds	r3, #68	; 0x44
 8003a6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3344      	adds	r3, #68	; 0x44
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d914      	bls.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	3344      	adds	r3, #68	; 0x44
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	334c      	adds	r3, #76	; 0x4c
 8003aaa:	2204      	movs	r2, #4
 8003aac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003aae:	e022      	b.n	8003af6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	334c      	adds	r3, #76	; 0x4c
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ada:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ae2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	461a      	mov	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003af6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	334c      	adds	r3, #76	; 0x4c
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f004 ffe6 	bl	8008ae0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b14:	e002      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003b1a:	bf00      	nop
  }
}
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b08a      	sub	sp, #40	; 0x28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	0c5b      	lsrs	r3, r3, #17
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b56:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d004      	beq.n	8003b68 <HCD_RXQLVL_IRQHandler+0x46>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b05      	cmp	r3, #5
 8003b62:	f000 80b6 	beq.w	8003cd2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b66:	e0b7      	b.n	8003cd8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80b3 	beq.w	8003cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	332c      	adds	r3, #44	; 0x2c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a7 	beq.w	8003cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3338      	adds	r3, #56	; 0x38
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	18d1      	adds	r1, r2, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4403      	add	r3, r0
 8003bac:	3334      	adds	r3, #52	; 0x34
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4299      	cmp	r1, r3
 8003bb2:	f200 8083 	bhi.w	8003cbc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	332c      	adds	r3, #44	; 0x2c
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	b292      	uxth	r2, r2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f001 feac 	bl	800592e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	332c      	adds	r3, #44	; 0x2c
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	18d1      	adds	r1, r2, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4403      	add	r3, r0
 8003bfa:	332c      	adds	r3, #44	; 0x2c
 8003bfc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3338      	adds	r3, #56	; 0x38
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	18d1      	adds	r1, r2, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4403      	add	r3, r0
 8003c22:	3338      	adds	r3, #56	; 0x38
 8003c24:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	0cdb      	lsrs	r3, r3, #19
 8003c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c3a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3328      	adds	r3, #40	; 0x28
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d13f      	bne.n	8003cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d03c      	beq.n	8003cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	333c      	adds	r3, #60	; 0x3c
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f083 0301 	eor.w	r3, r3, #1
 8003ca4:	b2d8      	uxtb	r0, r3
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	333c      	adds	r3, #60	; 0x3c
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	701a      	strb	r2, [r3, #0]
      break;
 8003cba:	e00c      	b.n	8003cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334c      	adds	r3, #76	; 0x4c
 8003ccc:	2204      	movs	r2, #4
 8003cce:	701a      	strb	r2, [r3, #0]
      break;
 8003cd0:	e001      	b.n	8003cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003cd6:	bf00      	nop
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3728      	adds	r7, #40	; 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d0c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d10b      	bne.n	8003d30 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d102      	bne.n	8003d28 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f004 fec0 	bl	8008aa8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f043 0302 	orr.w	r3, r3, #2
 8003d2e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d132      	bne.n	8003da0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d126      	bne.n	8003d9a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	7a5b      	ldrb	r3, [r3, #9]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d113      	bne.n	8003d7c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d5e:	d106      	bne.n	8003d6e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 ff5a 	bl	8005c20 <USB_InitFSLSPClkSel>
 8003d6c:	e011      	b.n	8003d92 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2101      	movs	r1, #1
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 ff53 	bl	8005c20 <USB_InitFSLSPClkSel>
 8003d7a:	e00a      	b.n	8003d92 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	79db      	ldrb	r3, [r3, #7]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d106      	bne.n	8003d92 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d90:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f004 feb2 	bl	8008afc <HAL_HCD_PortEnabled_Callback>
 8003d98:	e002      	b.n	8003da0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f004 febc 	bl	8008b18 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d103      	bne.n	8003db2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f043 0320 	orr.w	r3, r3, #32
 8003db0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6013      	str	r3, [r2, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e12b      	b.n	8004032 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd f986 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	; 0x24
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f001 fa20 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8003e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4a81      	ldr	r2, [pc, #516]	; (800403c <HAL_I2C_Init+0x274>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d807      	bhi.n	8003e4c <HAL_I2C_Init+0x84>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a80      	ldr	r2, [pc, #512]	; (8004040 <HAL_I2C_Init+0x278>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bf94      	ite	ls
 8003e44:	2301      	movls	r3, #1
 8003e46:	2300      	movhi	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e006      	b.n	8003e5a <HAL_I2C_Init+0x92>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a7d      	ldr	r2, [pc, #500]	; (8004044 <HAL_I2C_Init+0x27c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e0e7      	b.n	8004032 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a78      	ldr	r2, [pc, #480]	; (8004048 <HAL_I2C_Init+0x280>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0c9b      	lsrs	r3, r3, #18
 8003e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a6a      	ldr	r2, [pc, #424]	; (800403c <HAL_I2C_Init+0x274>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d802      	bhi.n	8003e9c <HAL_I2C_Init+0xd4>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	e009      	b.n	8003eb0 <HAL_I2C_Init+0xe8>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	4a69      	ldr	r2, [pc, #420]	; (800404c <HAL_I2C_Init+0x284>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	3301      	adds	r3, #1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ec2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	495c      	ldr	r1, [pc, #368]	; (800403c <HAL_I2C_Init+0x274>)
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	d819      	bhi.n	8003f04 <HAL_I2C_Init+0x13c>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	1e59      	subs	r1, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_I2C_Init+0x138>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1e59      	subs	r1, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	e051      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f00:	2304      	movs	r3, #4
 8003f02:	e04f      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d111      	bne.n	8003f30 <HAL_I2C_Init+0x168>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1e58      	subs	r0, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	440b      	add	r3, r1
 8003f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	e012      	b.n	8003f56 <HAL_I2C_Init+0x18e>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1e58      	subs	r0, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	0099      	lsls	r1, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f46:	3301      	adds	r3, #1
 8003f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Init+0x196>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e022      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10e      	bne.n	8003f84 <HAL_I2C_Init+0x1bc>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e58      	subs	r0, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6859      	ldr	r1, [r3, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	440b      	add	r3, r1
 8003f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f82:	e00f      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1e58      	subs	r0, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	0099      	lsls	r1, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	6809      	ldr	r1, [r1, #0]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6911      	ldr	r1, [r2, #16]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68d2      	ldr	r2, [r2, #12]
 8003fde:	4311      	orrs	r1, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	000186a0 	.word	0x000186a0
 8004040:	001e847f 	.word	0x001e847f
 8004044:	003d08ff 	.word	0x003d08ff
 8004048:	431bde83 	.word	0x431bde83
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e128      	b.n	80042b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a90      	ldr	r2, [pc, #576]	; (80042bc <HAL_I2S_Init+0x26c>)
 800407a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fd f887 	bl	8001190 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004098:	f023 030f 	bic.w	r3, r3, #15
 800409c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2202      	movs	r2, #2
 80040a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d060      	beq.n	8004170 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80040b6:	2310      	movs	r3, #16
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e001      	b.n	80040c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d802      	bhi.n	80040ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80040ce:	2001      	movs	r0, #1
 80040d0:	f001 f9d2 	bl	8005478 <HAL_RCCEx_GetPeriphCLKFreq>
 80040d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040de:	d125      	bne.n	800412c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	3305      	adds	r3, #5
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e01f      	b.n	800414a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	fbb2 f2f3 	udiv	r2, r2, r3
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	3305      	adds	r3, #5
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e00e      	b.n	800414a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	3305      	adds	r3, #5
 8004148:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4a5c      	ldr	r2, [pc, #368]	; (80042c0 <HAL_I2S_Init+0x270>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	08db      	lsrs	r3, r3, #3
 8004154:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e003      	b.n	8004178 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004170:	2302      	movs	r3, #2
 8004172:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d902      	bls.n	8004184 <HAL_I2S_Init+0x134>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2bff      	cmp	r3, #255	; 0xff
 8004182:	d907      	bls.n	8004194 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	f043 0210 	orr.w	r2, r3, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e08f      	b.n	80042b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	ea42 0103 	orr.w	r1, r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041b2:	f023 030f 	bic.w	r3, r3, #15
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6851      	ldr	r1, [r2, #4]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6892      	ldr	r2, [r2, #8]
 80041be:	4311      	orrs	r1, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68d2      	ldr	r2, [r2, #12]
 80041c4:	4311      	orrs	r1, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6992      	ldr	r2, [r2, #24]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d161      	bne.n	80042a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a38      	ldr	r2, [pc, #224]	; (80042c4 <HAL_I2S_Init+0x274>)
 80041e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a37      	ldr	r2, [pc, #220]	; (80042c8 <HAL_I2S_Init+0x278>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <HAL_I2S_Init+0x1a4>
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_I2S_Init+0x27c>)
 80041f2:	e001      	b.n	80041f8 <HAL_I2S_Init+0x1a8>
 80041f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	4932      	ldr	r1, [pc, #200]	; (80042c8 <HAL_I2S_Init+0x278>)
 8004200:	428a      	cmp	r2, r1
 8004202:	d101      	bne.n	8004208 <HAL_I2S_Init+0x1b8>
 8004204:	4a31      	ldr	r2, [pc, #196]	; (80042cc <HAL_I2S_Init+0x27c>)
 8004206:	e001      	b.n	800420c <HAL_I2S_Init+0x1bc>
 8004208:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800420c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004210:	f023 030f 	bic.w	r3, r3, #15
 8004214:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <HAL_I2S_Init+0x278>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <HAL_I2S_Init+0x1d4>
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_I2S_Init+0x27c>)
 8004222:	e001      	b.n	8004228 <HAL_I2S_Init+0x1d8>
 8004224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004228:	2202      	movs	r2, #2
 800422a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <HAL_I2S_Init+0x278>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_I2S_Init+0x1ea>
 8004236:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_I2S_Init+0x27c>)
 8004238:	e001      	b.n	800423e <HAL_I2S_Init+0x1ee>
 800423a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d003      	beq.n	8004254 <HAL_I2S_Init+0x204>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e001      	b.n	8004260 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800426a:	4313      	orrs	r3, r2
 800426c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004274:	4313      	orrs	r3, r2
 8004276:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800427e:	4313      	orrs	r3, r2
 8004280:	b29a      	uxth	r2, r3
 8004282:	897b      	ldrh	r3, [r7, #10]
 8004284:	4313      	orrs	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800428c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <HAL_I2S_Init+0x278>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_I2S_Init+0x24c>
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <HAL_I2S_Init+0x27c>)
 800429a:	e001      	b.n	80042a0 <HAL_I2S_Init+0x250>
 800429c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042a0:	897a      	ldrh	r2, [r7, #10]
 80042a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	080043c7 	.word	0x080043c7
 80042c0:	cccccccd 	.word	0xcccccccd
 80042c4:	080044dd 	.word	0x080044dd
 80042c8:	40003800 	.word	0x40003800
 80042cc:	40003400 	.word	0x40003400

080042d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	881a      	ldrh	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c9a      	adds	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10e      	bne.n	8004360 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004350:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ffb8 	bl	80042d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	b292      	uxth	r2, r2
 800437c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10e      	bne.n	80043be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff93 	bl	80042e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d13a      	bne.n	8004458 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d109      	bne.n	8004400 <I2S_IRQHandler+0x3a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d102      	bne.n	8004400 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff ffb4 	bl	8004368 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d126      	bne.n	8004458 <I2S_IRQHandler+0x92>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b20      	cmp	r3, #32
 8004416:	d11f      	bne.n	8004458 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004426:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff ff50 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b03      	cmp	r3, #3
 8004462:	d136      	bne.n	80044d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d109      	bne.n	8004482 <I2S_IRQHandler+0xbc>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d102      	bne.n	8004482 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff45 	bl	800430c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d122      	bne.n	80044d2 <I2S_IRQHandler+0x10c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b20      	cmp	r3, #32
 8004498:	d11b      	bne.n	80044d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	f043 0204 	orr.w	r2, r3, #4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff13 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044d2:	bf00      	nop
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a92      	ldr	r2, [pc, #584]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044f6:	4b92      	ldr	r3, [pc, #584]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044f8:	e001      	b.n	80044fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a8b      	ldr	r2, [pc, #556]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004514:	4b8a      	ldr	r3, [pc, #552]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004516:	e001      	b.n	800451c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d004      	beq.n	8004534 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 8099 	bne.w	8004666 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d107      	bne.n	800454e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f925 	bl	8004798 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d107      	bne.n	8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9c8 	bl	80048f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d13a      	bne.n	80045e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d035      	beq.n	80045e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6e      	ldr	r2, [pc, #440]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d101      	bne.n	800458a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004586:	4b6e      	ldr	r3, [pc, #440]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004588:	e001      	b.n	800458e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800458a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4969      	ldr	r1, [pc, #420]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004596:	428b      	cmp	r3, r1
 8004598:	d101      	bne.n	800459e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800459a:	4b69      	ldr	r3, [pc, #420]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800459c:	e001      	b.n	80045a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800459e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fe88 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	f040 80c3 	bne.w	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80bd 	beq.w	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800460e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a49      	ldr	r2, [pc, #292]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800461a:	4b49      	ldr	r3, [pc, #292]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800461c:	e001      	b.n	8004622 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800461e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4944      	ldr	r1, [pc, #272]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800462a:	428b      	cmp	r3, r1
 800462c:	d101      	bne.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800462e:	4b44      	ldr	r3, [pc, #272]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004630:	e001      	b.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004632:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004636:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800463a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800463c:	2300      	movs	r3, #0
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f043 0204 	orr.w	r2, r3, #4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff fe4a 	bl	80042f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004664:	e089      	b.n	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d107      	bne.n	8004680 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8be 	bl	80047fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8fd 	bl	8004894 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d12f      	bne.n	8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02a      	beq.n	8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80046c8:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046ca:	e001      	b.n	80046d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80046cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4919      	ldr	r1, [pc, #100]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046d8:	428b      	cmp	r3, r1
 80046da:	d101      	bne.n	80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80046dc:	4b18      	ldr	r3, [pc, #96]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046de:	e001      	b.n	80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f043 0202 	orr.w	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff fdfa 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b08      	cmp	r3, #8
 800470c:	d136      	bne.n	800477c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d031      	beq.n	800477c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a07      	ldr	r2, [pc, #28]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004724:	e001      	b.n	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004726:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4902      	ldr	r1, [pc, #8]	; (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004732:	428b      	cmp	r3, r1
 8004734:	d106      	bne.n	8004744 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004736:	4b02      	ldr	r3, [pc, #8]	; (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004738:	e006      	b.n	8004748 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800473a:	bf00      	nop
 800473c:	40003800 	.word	0x40003800
 8004740:	40003400 	.word	0x40003400
 8004744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004748:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800474c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800475c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f043 0204 	orr.w	r2, r3, #4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fdc0 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004778:	e000      	b.n	800477c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800477a:	bf00      	nop
}
 800477c:	bf00      	nop
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c99      	adds	r1, r3, #2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6251      	str	r1, [r2, #36]	; 0x24
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ffc9 	bl	8004784 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	1c99      	adds	r1, r3, #2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6251      	str	r1, [r2, #36]	; 0x24
 800480e:	8819      	ldrh	r1, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <I2SEx_TxISR_I2SExt+0x90>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <I2SEx_TxISR_I2SExt+0x22>
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <I2SEx_TxISR_I2SExt+0x94>)
 800481c:	e001      	b.n	8004822 <I2SEx_TxISR_I2SExt+0x26>
 800481e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004822:	460a      	mov	r2, r1
 8004824:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d121      	bne.n	8004882 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a12      	ldr	r2, [pc, #72]	; (800488c <I2SEx_TxISR_I2SExt+0x90>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <I2SEx_TxISR_I2SExt+0x50>
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <I2SEx_TxISR_I2SExt+0x94>)
 800484a:	e001      	b.n	8004850 <I2SEx_TxISR_I2SExt+0x54>
 800484c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	490d      	ldr	r1, [pc, #52]	; (800488c <I2SEx_TxISR_I2SExt+0x90>)
 8004858:	428b      	cmp	r3, r1
 800485a:	d101      	bne.n	8004860 <I2SEx_TxISR_I2SExt+0x64>
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <I2SEx_TxISR_I2SExt+0x94>)
 800485e:	e001      	b.n	8004864 <I2SEx_TxISR_I2SExt+0x68>
 8004860:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004864:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004868:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff81 	bl	8004784 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40003800 	.word	0x40003800
 8004890:	40003400 	.word	0x40003400

08004894 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68d8      	ldr	r0, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	1c99      	adds	r1, r3, #2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048ac:	b282      	uxth	r2, r0
 80048ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d113      	bne.n	80048f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ff4a 	bl	8004784 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a20      	ldr	r2, [pc, #128]	; (8004988 <I2SEx_RxISR_I2SExt+0x90>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <I2SEx_RxISR_I2SExt+0x16>
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <I2SEx_RxISR_I2SExt+0x94>)
 800490c:	e001      	b.n	8004912 <I2SEx_RxISR_I2SExt+0x1a>
 800490e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004912:	68d8      	ldr	r0, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	1c99      	adds	r1, r3, #2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800491e:	b282      	uxth	r2, r0
 8004920:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d121      	bne.n	800497e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a12      	ldr	r2, [pc, #72]	; (8004988 <I2SEx_RxISR_I2SExt+0x90>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <I2SEx_RxISR_I2SExt+0x50>
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <I2SEx_RxISR_I2SExt+0x94>)
 8004946:	e001      	b.n	800494c <I2SEx_RxISR_I2SExt+0x54>
 8004948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	490d      	ldr	r1, [pc, #52]	; (8004988 <I2SEx_RxISR_I2SExt+0x90>)
 8004954:	428b      	cmp	r3, r1
 8004956:	d101      	bne.n	800495c <I2SEx_RxISR_I2SExt+0x64>
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <I2SEx_RxISR_I2SExt+0x94>)
 800495a:	e001      	b.n	8004960 <I2SEx_RxISR_I2SExt+0x68>
 800495c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004960:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004964:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ff03 	bl	8004784 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40003800 	.word	0x40003800
 800498c:	40003400 	.word	0x40003400

08004990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e267      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d075      	beq.n	8004a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ae:	4b88      	ldr	r3, [pc, #544]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d00c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	4b85      	ldr	r3, [pc, #532]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d112      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c6:	4b82      	ldr	r3, [pc, #520]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d2:	d10b      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	4b7e      	ldr	r3, [pc, #504]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d05b      	beq.n	8004a98 <HAL_RCC_OscConfig+0x108>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d157      	bne.n	8004a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e242      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f4:	d106      	bne.n	8004a04 <HAL_RCC_OscConfig+0x74>
 80049f6:	4b76      	ldr	r3, [pc, #472]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a75      	ldr	r2, [pc, #468]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e01d      	b.n	8004a40 <HAL_RCC_OscConfig+0xb0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x98>
 8004a0e:	4b70      	ldr	r3, [pc, #448]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6f      	ldr	r2, [pc, #444]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6c      	ldr	r2, [pc, #432]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0xb0>
 8004a28:	4b69      	ldr	r3, [pc, #420]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a68      	ldr	r2, [pc, #416]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b66      	ldr	r3, [pc, #408]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a65      	ldr	r2, [pc, #404]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fc fdc4 	bl	80015d4 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fc fdc0 	bl	80015d4 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	; 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e207      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b5b      	ldr	r3, [pc, #364]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0xc0>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fc fdb0 	bl	80015d4 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fc fdac 	bl	80015d4 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1f3      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8a:	4b51      	ldr	r3, [pc, #324]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0xe8>
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d063      	beq.n	8004b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aa6:	4b4a      	ldr	r3, [pc, #296]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab2:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d11c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004abe:	4b44      	ldr	r3, [pc, #272]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d116      	bne.n	8004af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aca:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x152>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e1c7      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4937      	ldr	r1, [pc, #220]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af6:	e03a      	b.n	8004b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d020      	beq.n	8004b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b00:	4b34      	ldr	r3, [pc, #208]	; (8004bd4 <HAL_RCC_OscConfig+0x244>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b06:	f7fc fd65 	bl	80015d4 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0e:	f7fc fd61 	bl	80015d4 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e1a8      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b20:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4925      	ldr	r1, [pc, #148]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	600b      	str	r3, [r1, #0]
 8004b40:	e015      	b.n	8004b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <HAL_RCC_OscConfig+0x244>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fc fd44 	bl	80015d4 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fc fd40 	bl	80015d4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e187      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b62:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d036      	beq.n	8004be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <HAL_RCC_OscConfig+0x248>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fc fd24 	bl	80015d4 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fc fd20 	bl	80015d4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e167      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x200>
 8004bae:	e01b      	b.n	8004be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCC_OscConfig+0x248>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb6:	f7fc fd0d 	bl	80015d4 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	e00e      	b.n	8004bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bbe:	f7fc fd09 	bl	80015d4 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d907      	bls.n	8004bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e150      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	42470000 	.word	0x42470000
 8004bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	4b88      	ldr	r3, [pc, #544]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ea      	bne.n	8004bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8097 	beq.w	8004d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b81      	ldr	r3, [pc, #516]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	4b7d      	ldr	r3, [pc, #500]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a7c      	ldr	r2, [pc, #496]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b7a      	ldr	r3, [pc, #488]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b77      	ldr	r3, [pc, #476]	; (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d118      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c32:	4b74      	ldr	r3, [pc, #464]	; (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a73      	ldr	r2, [pc, #460]	; (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3e:	f7fc fcc9 	bl	80015d4 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c46:	f7fc fcc5 	bl	80015d4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e10c      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	4b6a      	ldr	r3, [pc, #424]	; (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
 8004c6c:	4b64      	ldr	r3, [pc, #400]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	4a63      	ldr	r2, [pc, #396]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70
 8004c78:	e01c      	b.n	8004cb4 <HAL_RCC_OscConfig+0x324>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x30c>
 8004c82:	4b5f      	ldr	r3, [pc, #380]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	4a5e      	ldr	r2, [pc, #376]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8e:	4b5c      	ldr	r3, [pc, #368]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4a5b      	ldr	r2, [pc, #364]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0x324>
 8004c9c:	4b58      	ldr	r3, [pc, #352]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	4a57      	ldr	r2, [pc, #348]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca8:	4b55      	ldr	r3, [pc, #340]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4a54      	ldr	r2, [pc, #336]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004cae:	f023 0304 	bic.w	r3, r3, #4
 8004cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fc fc8a 	bl	80015d4 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc4:	f7fc fc86 	bl	80015d4 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e0cb      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cda:	4b49      	ldr	r3, [pc, #292]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0ee      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x334>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce8:	f7fc fc74 	bl	80015d4 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf0:	f7fc fc70 	bl	80015d4 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e0b5      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ee      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d105      	bne.n	8004d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	4a38      	ldr	r2, [pc, #224]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a1 	beq.w	8004e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d2e:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d05c      	beq.n	8004df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d141      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d42:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fc fc44 	bl	80015d4 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fc fc40 	bl	80015d4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e087      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	491b      	ldr	r1, [pc, #108]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d98:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fc fc19 	bl	80015d4 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fc fc15 	bl	80015d4 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e05c      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x416>
 8004dc4:	e054      	b.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fc fc02 	bl	80015d4 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fc fbfe 	bl	80015d4 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e045      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x444>
 8004df2:	e03d      	b.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e038      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40007000 	.word	0x40007000
 8004e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCC_OscConfig+0x4ec>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d028      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d121      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d11a      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d111      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	3b01      	subs	r3, #1
 8004e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800

08004e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0cc      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e94:	4b68      	ldr	r3, [pc, #416]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d90c      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b65      	ldr	r3, [pc, #404]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b63      	ldr	r3, [pc, #396]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0b8      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d020      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed4:	4b59      	ldr	r3, [pc, #356]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a58      	ldr	r2, [pc, #352]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eec:	4b53      	ldr	r3, [pc, #332]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a52      	ldr	r2, [pc, #328]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b50      	ldr	r3, [pc, #320]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	494d      	ldr	r1, [pc, #308]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d044      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b47      	ldr	r3, [pc, #284]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d119      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e07f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d003      	beq.n	8004f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e06f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e067      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5e:	4b37      	ldr	r3, [pc, #220]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 0203 	bic.w	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4934      	ldr	r1, [pc, #208]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f70:	f7fc fb30 	bl	80015d4 <HAL_GetTick>
 8004f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f78:	f7fc fb2c 	bl	80015d4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e04f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 020c 	and.w	r2, r3, #12
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1eb      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d20c      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b22      	ldr	r3, [pc, #136]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b20      	ldr	r3, [pc, #128]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e032      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4916      	ldr	r1, [pc, #88]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	490e      	ldr	r1, [pc, #56]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005006:	f000 f821 	bl	800504c <HAL_RCC_GetSysClockFreq>
 800500a:	4602      	mov	r2, r0
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	490a      	ldr	r1, [pc, #40]	; (8005040 <HAL_RCC_ClockConfig+0x1c0>)
 8005018:	5ccb      	ldrb	r3, [r1, r3]
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x1c8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc fa90 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40023c00 	.word	0x40023c00
 800503c:	40023800 	.word	0x40023800
 8005040:	080091d4 	.word	0x080091d4
 8005044:	20000014 	.word	0x20000014
 8005048:	20000018 	.word	0x20000018

0800504c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b094      	sub	sp, #80	; 0x50
 8005052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	647b      	str	r3, [r7, #68]	; 0x44
 8005058:	2300      	movs	r3, #0
 800505a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505c:	2300      	movs	r3, #0
 800505e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005064:	4b79      	ldr	r3, [pc, #484]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d00d      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x40>
 8005070:	2b08      	cmp	r3, #8
 8005072:	f200 80e1 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x34>
 800507a:	2b04      	cmp	r3, #4
 800507c:	d003      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0x3a>
 800507e:	e0db      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005080:	4b73      	ldr	r3, [pc, #460]	; (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 8005082:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005084:	e0db      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005086:	4b73      	ldr	r3, [pc, #460]	; (8005254 <HAL_RCC_GetSysClockFreq+0x208>)
 8005088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800508a:	e0d8      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800508c:	4b6f      	ldr	r3, [pc, #444]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005096:	4b6d      	ldr	r3, [pc, #436]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a2:	4b6a      	ldr	r3, [pc, #424]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	2200      	movs	r2, #0
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
 80050b6:	2300      	movs	r3, #0
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	0159      	lsls	r1, r3, #5
 80050cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d0:	0150      	lsls	r0, r2, #5
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4621      	mov	r1, r4
 80050d8:	1a51      	subs	r1, r2, r1
 80050da:	6139      	str	r1, [r7, #16]
 80050dc:	4629      	mov	r1, r5
 80050de:	eb63 0301 	sbc.w	r3, r3, r1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f0:	4659      	mov	r1, fp
 80050f2:	018b      	lsls	r3, r1, #6
 80050f4:	4651      	mov	r1, sl
 80050f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050fa:	4651      	mov	r1, sl
 80050fc:	018a      	lsls	r2, r1, #6
 80050fe:	4651      	mov	r1, sl
 8005100:	ebb2 0801 	subs.w	r8, r2, r1
 8005104:	4659      	mov	r1, fp
 8005106:	eb63 0901 	sbc.w	r9, r3, r1
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511e:	4690      	mov	r8, r2
 8005120:	4699      	mov	r9, r3
 8005122:	4623      	mov	r3, r4
 8005124:	eb18 0303 	adds.w	r3, r8, r3
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	462b      	mov	r3, r5
 800512c:	eb49 0303 	adc.w	r3, r9, r3
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800513e:	4629      	mov	r1, r5
 8005140:	024b      	lsls	r3, r1, #9
 8005142:	4621      	mov	r1, r4
 8005144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005148:	4621      	mov	r1, r4
 800514a:	024a      	lsls	r2, r1, #9
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005152:	2200      	movs	r2, #0
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
 8005156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515c:	f7fb f83c 	bl	80001d8 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005168:	e058      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516a:	4b38      	ldr	r3, [pc, #224]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	099b      	lsrs	r3, r3, #6
 8005170:	2200      	movs	r2, #0
 8005172:	4618      	mov	r0, r3
 8005174:	4611      	mov	r1, r2
 8005176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	f04f 0000 	mov.w	r0, #0
 800518c:	f04f 0100 	mov.w	r1, #0
 8005190:	0159      	lsls	r1, r3, #5
 8005192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005196:	0150      	lsls	r0, r2, #5
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4641      	mov	r1, r8
 800519e:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a2:	4649      	mov	r1, r9
 80051a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051bc:	ebb2 040a 	subs.w	r4, r2, sl
 80051c0:	eb63 050b 	sbc.w	r5, r3, fp
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	00eb      	lsls	r3, r5, #3
 80051ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d2:	00e2      	lsls	r2, r4, #3
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
 80051d8:	4643      	mov	r3, r8
 80051da:	18e3      	adds	r3, r4, r3
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	464b      	mov	r3, r9
 80051e0:	eb45 0303 	adc.w	r3, r5, r3
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f2:	4629      	mov	r1, r5
 80051f4:	028b      	lsls	r3, r1, #10
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051fc:	4621      	mov	r1, r4
 80051fe:	028a      	lsls	r2, r1, #10
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	2200      	movs	r2, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	61fa      	str	r2, [r7, #28]
 800520c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005210:	f7fa ffe2 	bl	80001d8 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800522c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 800523a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005240:	4618      	mov	r0, r3
 8005242:	3750      	adds	r7, #80	; 0x50
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	00f42400 	.word	0x00f42400
 8005254:	007a1200 	.word	0x007a1200

08005258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000014 	.word	0x20000014

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a9b      	lsrs	r3, r3, #10
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	080091e4 	.word	0x080091e4

08005298 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d038      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052c0:	4b68      	ldr	r3, [pc, #416]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c6:	f7fc f985 	bl	80015d4 <HAL_GetTick>
 80052ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052ce:	f7fc f981 	bl	80015d4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e0bd      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e0:	4b61      	ldr	r3, [pc, #388]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f0      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	019b      	lsls	r3, r3, #6
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	071b      	lsls	r3, r3, #28
 80052fe:	495a      	ldr	r1, [pc, #360]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005306:	4b57      	ldr	r3, [pc, #348]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800530c:	f7fc f962 	bl	80015d4 <HAL_GetTick>
 8005310:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005314:	f7fc f95e 	bl	80015d4 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e09a      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005326:	4b50      	ldr	r3, [pc, #320]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8083 	beq.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	4b48      	ldr	r3, [pc, #288]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4a47      	ldr	r2, [pc, #284]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534e:	6413      	str	r3, [r2, #64]	; 0x40
 8005350:	4b45      	ldr	r3, [pc, #276]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800535c:	4b43      	ldr	r3, [pc, #268]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a42      	ldr	r2, [pc, #264]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005368:	f7fc f934 	bl	80015d4 <HAL_GetTick>
 800536c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fc f930 	bl	80015d4 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e06c      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005382:	4b3a      	ldr	r3, [pc, #232]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02f      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d028      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ac:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053bc:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053c2:	4a29      	ldr	r2, [pc, #164]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053c8:	4b27      	ldr	r3, [pc, #156]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d114      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fc f8fe 	bl	80015d4 <HAL_GetTick>
 80053d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053da:	e00a      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053dc:	f7fc f8fa 	bl	80015d4 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e034      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f2:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0ee      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540a:	d10d      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800541c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005420:	4911      	ldr	r1, [pc, #68]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005422:	4313      	orrs	r3, r2
 8005424:	608b      	str	r3, [r1, #8]
 8005426:	e005      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4a0e      	ldr	r2, [pc, #56]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005432:	6093      	str	r3, [r2, #8]
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005436:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	4909      	ldr	r1, [pc, #36]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005442:	4313      	orrs	r3, r2
 8005444:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	7d1a      	ldrb	r2, [r3, #20]
 8005456:	4b07      	ldr	r3, [pc, #28]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005458:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	42470068 	.word	0x42470068
 8005468:	40023800 	.word	0x40023800
 800546c:	40007000 	.word	0x40007000
 8005470:	42470e40 	.word	0x42470e40
 8005474:	424711e0 	.word	0x424711e0

08005478 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d141      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005496:	4b25      	ldr	r3, [pc, #148]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d006      	beq.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ac:	d131      	bne.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80054ae:	4b20      	ldr	r3, [pc, #128]	; (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80054b0:	617b      	str	r3, [r7, #20]
          break;
 80054b2:	e031      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c0:	d109      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80054ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	e008      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e0:	4a15      	ldr	r2, [pc, #84]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80054e8:	4b10      	ldr	r3, [pc, #64]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005502:	0f1b      	lsrs	r3, r3, #28
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	617b      	str	r3, [r7, #20]
          break;
 8005510:	e002      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
          break;
 8005516:	bf00      	nop
        }
      }
      break;
 8005518:	e000      	b.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 800551a:	bf00      	nop
    }
  }
  return frequency;
 800551c:	697b      	ldr	r3, [r7, #20]
}
 800551e:	4618      	mov	r0, r3
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40023800 	.word	0x40023800
 8005530:	00bb8000 	.word	0x00bb8000
 8005534:	007a1200 	.word	0x007a1200
 8005538:	00f42400 	.word	0x00f42400

0800553c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e07b      	b.n	8005646 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555e:	d009      	beq.n	8005574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	61da      	str	r2, [r3, #28]
 8005566:	e005      	b.n	8005574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fb fecc 	bl	800132c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f8:	ea42 0103 	orr.w	r1, r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	f003 0104 	and.w	r1, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f003 0210 	and.w	r2, r3, #16
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800564e:	b084      	sub	sp, #16
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	f107 001c 	add.w	r0, r7, #28
 800565c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005660:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005664:	2b01      	cmp	r3, #1
 8005666:	d123      	bne.n	80056b0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800567c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005690:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f9dc 	bl	8005a62 <USB_CoreReset>
 80056aa:	4603      	mov	r3, r0
 80056ac:	73fb      	strb	r3, [r7, #15]
 80056ae:	e01b      	b.n	80056e8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f9d0 	bl	8005a62 <USB_CoreReset>
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
 80056da:	e005      	b.n	80056e8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056e8:	7fbb      	ldrb	r3, [r7, #30]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10b      	bne.n	8005706 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f043 0206 	orr.w	r2, r3, #6
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005706:	7bfb      	ldrb	r3, [r7, #15]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005712:	b004      	add	sp, #16
 8005714:	4770      	bx	lr

08005716 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f023 0201 	bic.w	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d115      	bne.n	80057a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005788:	200a      	movs	r0, #10
 800578a:	f7fb ff2f 	bl	80015ec <HAL_Delay>
      ms += 10U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	330a      	adds	r3, #10
 8005792:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f956 	bl	8005a46 <USB_GetMode>
 800579a:	4603      	mov	r3, r0
 800579c:	2b01      	cmp	r3, #1
 800579e:	d01e      	beq.n	80057de <USB_SetCurrentMode+0x84>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2bc7      	cmp	r3, #199	; 0xc7
 80057a4:	d9f0      	bls.n	8005788 <USB_SetCurrentMode+0x2e>
 80057a6:	e01a      	b.n	80057de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d115      	bne.n	80057da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057ba:	200a      	movs	r0, #10
 80057bc:	f7fb ff16 	bl	80015ec <HAL_Delay>
      ms += 10U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	330a      	adds	r3, #10
 80057c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f93d 	bl	8005a46 <USB_GetMode>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <USB_SetCurrentMode+0x84>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2bc7      	cmp	r3, #199	; 0xc7
 80057d6:	d9f0      	bls.n	80057ba <USB_SetCurrentMode+0x60>
 80057d8:	e001      	b.n	80057de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e005      	b.n	80057ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2bc8      	cmp	r3, #200	; 0xc8
 80057e2:	d101      	bne.n	80057e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800580c:	d901      	bls.n	8005812 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e01b      	b.n	800584a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	daf2      	bge.n	8005800 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	019b      	lsls	r3, r3, #6
 8005822:	f043 0220 	orr.w	r2, r3, #32
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3301      	adds	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005836:	d901      	bls.n	800583c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e006      	b.n	800584a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b20      	cmp	r3, #32
 8005846:	d0f0      	beq.n	800582a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800586e:	d901      	bls.n	8005874 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e018      	b.n	80058a6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	daf2      	bge.n	8005862 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2210      	movs	r2, #16
 8005884:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005892:	d901      	bls.n	8005898 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e006      	b.n	80058a6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d0f0      	beq.n	8005886 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b089      	sub	sp, #36	; 0x24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	4611      	mov	r1, r2
 80058be:	461a      	mov	r2, r3
 80058c0:	460b      	mov	r3, r1
 80058c2:	71fb      	strb	r3, [r7, #7]
 80058c4:	4613      	mov	r3, r2
 80058c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d123      	bne.n	8005920 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058d8:	88bb      	ldrh	r3, [r7, #4]
 80058da:	3303      	adds	r3, #3
 80058dc:	089b      	lsrs	r3, r3, #2
 80058de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e018      	b.n	8005918 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	031a      	lsls	r2, r3, #12
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f2:	461a      	mov	r2, r3
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3301      	adds	r3, #1
 80058fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	3301      	adds	r3, #1
 8005904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3301      	adds	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	3301      	adds	r3, #1
 8005910:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	3301      	adds	r3, #1
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	429a      	cmp	r2, r3
 800591e:	d3e2      	bcc.n	80058e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3724      	adds	r7, #36	; 0x24
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800592e:	b480      	push	{r7}
 8005930:	b08b      	sub	sp, #44	; 0x2c
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	4613      	mov	r3, r2
 800593a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	089b      	lsrs	r3, r3, #2
 8005948:	b29b      	uxth	r3, r3
 800594a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800594c:	88fb      	ldrh	r3, [r7, #6]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005954:	2300      	movs	r3, #0
 8005956:	623b      	str	r3, [r7, #32]
 8005958:	e014      	b.n	8005984 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	601a      	str	r2, [r3, #0]
    pDest++;
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	3301      	adds	r3, #1
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	3301      	adds	r3, #1
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	3301      	adds	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	3301      	adds	r3, #1
 8005982:	623b      	str	r3, [r7, #32]
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	429a      	cmp	r2, r3
 800598a:	d3e6      	bcc.n	800595a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800598c:	8bfb      	ldrh	r3, [r7, #30]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01e      	beq.n	80059d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599c:	461a      	mov	r2, r3
 800599e:	f107 0310 	add.w	r3, r7, #16
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	fa22 f303 	lsr.w	r3, r2, r3
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	701a      	strb	r2, [r3, #0]
      i++;
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	3301      	adds	r3, #1
 80059bc:	623b      	str	r3, [r7, #32]
      pDest++;
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	3301      	adds	r3, #1
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059c4:	8bfb      	ldrh	r3, [r7, #30]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059ca:	8bfb      	ldrh	r3, [r7, #30]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ea      	bne.n	80059a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	372c      	adds	r7, #44	; 0x2c
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4013      	ands	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059f6:	68fb      	ldr	r3, [r7, #12]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4013      	ands	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a38:	68bb      	ldr	r3, [r7, #8]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0301 	and.w	r3, r3, #1
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005a7a:	d901      	bls.n	8005a80 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e01b      	b.n	8005ab8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	daf2      	bge.n	8005a6e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f043 0201 	orr.w	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005aa4:	d901      	bls.n	8005aaa <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e006      	b.n	8005ab8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d0f0      	beq.n	8005a98 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d119      	bne.n	8005b4e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d10a      	bne.n	8005b38 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b30:	f043 0304 	orr.w	r3, r3, #4
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e014      	b.n	8005b62 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b46:	f023 0304 	bic.w	r3, r3, #4
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e009      	b.n	8005b62 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b62:	2110      	movs	r1, #16
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fe44 	bl	80057f2 <USB_FlushTxFifo>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fe6e 	bl	8005856 <USB_FlushRxFifo>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	e015      	b.n	8005bb6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	461a      	mov	r2, r3
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005baa:	461a      	mov	r2, r3
 8005bac:	2300      	movs	r3, #0
 8005bae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005bba:	461a      	mov	r2, r3
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d3e3      	bcc.n	8005b8a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a0e      	ldr	r2, [pc, #56]	; (8005c14 <USB_HostInit+0x150>)
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a0e      	ldr	r2, [pc, #56]	; (8005c18 <USB_HostInit+0x154>)
 8005be0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f043 0210 	orr.w	r2, r3, #16
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <USB_HostInit+0x158>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c10:	b004      	add	sp, #16
 8005c12:	4770      	bx	lr
 8005c14:	00600080 	.word	0x00600080
 8005c18:	004000e0 	.word	0x004000e0
 8005c1c:	a3200008 	.word	0xa3200008

08005c20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
 8005c42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c6e:	6053      	str	r3, [r2, #4]
 8005c70:	e00c      	b.n	8005c8c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d107      	bne.n	8005c88 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c84:	6053      	str	r3, [r2, #4]
 8005c86:	e001      	b.n	8005c8c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005cca:	2064      	movs	r0, #100	; 0x64
 8005ccc:	f7fb fc8e 	bl	80015ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cdc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005cde:	200a      	movs	r0, #10
 8005ce0:	f7fb fc84 	bl	80015ec <HAL_Delay>

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d12:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <USB_DriveVbus+0x44>
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d106      	bne.n	8005d32 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d30:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d109      	bne.n	8005d52 <USB_DriveVbus+0x64>
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d50:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	0c5b      	lsrs	r3, r3, #17
 8005d7e:	f003 0303 	and.w	r3, r3, #3
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	b29b      	uxth	r3, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	4608      	mov	r0, r1
 8005dba:	4611      	mov	r1, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	70fb      	strb	r3, [r7, #3]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	70bb      	strb	r3, [r7, #2]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	461a      	mov	r2, r3
 8005de0:	f04f 33ff 	mov.w	r3, #4294967295
 8005de4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005de6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d867      	bhi.n	8005ebe <USB_HC_Init+0x10e>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <USB_HC_Init+0x44>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e81 	.word	0x08005e81
 8005dfc:	08005e05 	.word	0x08005e05
 8005e00:	08005e43 	.word	0x08005e43
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e10:	461a      	mov	r2, r3
 8005e12:	f240 439d 	movw	r3, #1181	; 0x49d
 8005e16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	da51      	bge.n	8005ec4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e3e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005e40:	e040      	b.n	8005ec4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da34      	bge.n	8005ec8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e7c:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e7e:	e023      	b.n	8005ec8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f240 2325 	movw	r3, #549	; 0x225
 8005e92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da17      	bge.n	8005ecc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005eba:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ebc:	e006      	b.n	8005ecc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	77fb      	strb	r3, [r7, #31]
      break;
 8005ec2:	e004      	b.n	8005ece <USB_HC_Init+0x11e>
      break;
 8005ec4:	bf00      	nop
 8005ec6:	e002      	b.n	8005ece <USB_HC_Init+0x11e>
      break;
 8005ec8:	bf00      	nop
 8005eca:	e000      	b.n	8005ece <USB_HC_Init+0x11e>
      break;
 8005ecc:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eda:	461a      	mov	r2, r3
 8005edc:	2300      	movs	r3, #0
 8005ede:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005efa:	f043 0302 	orr.w	r3, r3, #2
 8005efe:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	2101      	movs	r1, #1
 8005f10:	fa01 f303 	lsl.w	r3, r1, r3
 8005f14:	6939      	ldr	r1, [r7, #16]
 8005f16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da03      	bge.n	8005f3a <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	e001      	b.n	8005f3e <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ff0e 	bl	8005d60 <USB_GetHostSpeed>
 8005f44:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d106      	bne.n	8005f5c <USB_HC_Init+0x1ac>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d003      	beq.n	8005f5c <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e001      	b.n	8005f60 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f60:	787b      	ldrb	r3, [r7, #1]
 8005f62:	059b      	lsls	r3, r3, #22
 8005f64:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f68:	78bb      	ldrb	r3, [r7, #2]
 8005f6a:	02db      	lsls	r3, r3, #11
 8005f6c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f70:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f76:	049b      	lsls	r3, r3, #18
 8005f78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f7c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005f7e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f84:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f9e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005fa0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d003      	beq.n	8005fb0 <USB_HC_Init+0x200>
 8005fa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d10f      	bne.n	8005fd0 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fce:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop

08005fdc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08c      	sub	sp, #48	; 0x30
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ff8:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	799b      	ldrb	r3, [r3, #6]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d158      	bne.n	80060b4 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006002:	2301      	movs	r3, #1
 8006004:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	78db      	ldrb	r3, [r3, #3]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800600e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	8a92      	ldrh	r2, [r2, #20]
 8006014:	fb03 f202 	mul.w	r2, r3, r2
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	61da      	str	r2, [r3, #28]
 800601c:	e079      	b.n	8006112 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	7c9b      	ldrb	r3, [r3, #18]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d130      	bne.n	8006088 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	2bbc      	cmp	r3, #188	; 0xbc
 800602c:	d918      	bls.n	8006060 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	8a9b      	ldrh	r3, [r3, #20]
 8006032:	461a      	mov	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d003      	beq.n	8006050 <USB_HC_StartXfer+0x74>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d103      	bne.n	8006058 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2202      	movs	r2, #2
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e05c      	b.n	8006112 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2201      	movs	r2, #1
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	e058      	b.n	8006112 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d007      	beq.n	8006080 <USB_HC_StartXfer+0xa4>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d003      	beq.n	8006080 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2204      	movs	r2, #4
 800607c:	60da      	str	r2, [r3, #12]
 800607e:	e048      	b.n	8006112 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2203      	movs	r2, #3
 8006084:	60da      	str	r2, [r3, #12]
 8006086:	e044      	b.n	8006112 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d10d      	bne.n	80060aa <USB_HC_StartXfer+0xce>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	8a92      	ldrh	r2, [r2, #20]
 8006096:	4293      	cmp	r3, r2
 8006098:	d907      	bls.n	80060aa <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800609a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	8a92      	ldrh	r2, [r2, #20]
 80060a0:	fb03 f202 	mul.w	r2, r3, r2
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	61da      	str	r2, [r3, #28]
 80060a8:	e033      	b.n	8006112 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6a1a      	ldr	r2, [r3, #32]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	61da      	str	r2, [r3, #28]
 80060b2:	e02e      	b.n	8006112 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d018      	beq.n	80060ee <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	8a92      	ldrh	r2, [r2, #20]
 80060c4:	4413      	add	r3, r2
 80060c6:	3b01      	subs	r3, #1
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	8a92      	ldrh	r2, [r2, #20]
 80060cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d0:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80060d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060d4:	8b7b      	ldrh	r3, [r7, #26]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d90b      	bls.n	80060f2 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80060da:	8b7b      	ldrh	r3, [r7, #26]
 80060dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	8a92      	ldrh	r2, [r2, #20]
 80060e4:	fb03 f202 	mul.w	r2, r3, r2
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61da      	str	r2, [r3, #28]
 80060ec:	e001      	b.n	80060f2 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80060ee:	2301      	movs	r3, #1
 80060f0:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	78db      	ldrb	r3, [r3, #3]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	8a92      	ldrh	r2, [r2, #20]
 8006100:	fb03 f202 	mul.w	r2, r3, r2
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	61da      	str	r2, [r3, #28]
 8006108:	e003      	b.n	8006112 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800611a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800611c:	04d9      	lsls	r1, r3, #19
 800611e:	4ba4      	ldr	r3, [pc, #656]	; (80063b0 <USB_HC_StartXfer+0x3d4>)
 8006120:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006122:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	7d9b      	ldrb	r3, [r3, #22]
 8006128:	075b      	lsls	r3, r3, #29
 800612a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800612e:	69f9      	ldr	r1, [r7, #28]
 8006130:	0148      	lsls	r0, r1, #5
 8006132:	6a39      	ldr	r1, [r7, #32]
 8006134:	4401      	add	r1, r0
 8006136:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800613a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800613c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6999      	ldr	r1, [r3, #24]
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006154:	460a      	mov	r2, r1
 8006156:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	6a3a      	ldr	r2, [r7, #32]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800618e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	7e7b      	ldrb	r3, [r7, #25]
 80061a0:	075b      	lsls	r3, r3, #29
 80061a2:	69f9      	ldr	r1, [r7, #28]
 80061a4:	0148      	lsls	r0, r1, #5
 80061a6:	6a39      	ldr	r1, [r7, #32]
 80061a8:	4401      	add	r1, r0
 80061aa:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	799b      	ldrb	r3, [r3, #6]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	f040 80c4 	bne.w	8006344 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	7c5b      	ldrb	r3, [r3, #17]
 80061c0:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061c6:	4313      	orrs	r3, r2
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061d8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	6a3a      	ldr	r2, [r7, #32]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	79db      	ldrb	r3, [r3, #7]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d123      	bne.n	800624a <USB_HC_StartXfer+0x26e>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	78db      	ldrb	r3, [r3, #3]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d11f      	bne.n	800624a <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	4413      	add	r3, r2
 8006212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	6a3a      	ldr	r2, [r7, #32]
 800621e:	440a      	add	r2, r1
 8006220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006228:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	4413      	add	r3, r2
 8006232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	440a      	add	r2, r1
 8006240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006248:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	7c9b      	ldrb	r3, [r3, #18]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d003      	beq.n	800625a <USB_HC_StartXfer+0x27e>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	7c9b      	ldrb	r3, [r3, #18]
 8006256:	2b03      	cmp	r3, #3
 8006258:	d117      	bne.n	800628a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800625e:	2b01      	cmp	r3, #1
 8006260:	d113      	bne.n	800628a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	78db      	ldrb	r3, [r3, #3]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d10f      	bne.n	800628a <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	6a3a      	ldr	r2, [r7, #32]
 800627e:	440a      	add	r2, r1
 8006280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006288:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	7c9b      	ldrb	r3, [r3, #18]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d163      	bne.n	800635a <USB_HC_StartXfer+0x37e>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	78db      	ldrb	r3, [r3, #3]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d15f      	bne.n	800635a <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d859      	bhi.n	8006358 <USB_HC_StartXfer+0x37c>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <USB_HC_StartXfer+0x2d0>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	080062df 	.word	0x080062df
 80062b4:	08006301 	.word	0x08006301
 80062b8:	08006323 	.word	0x08006323
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	6a3a      	ldr	r2, [r7, #32]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	6053      	str	r3, [r2, #4]
          break;
 80062dc:	e03d      	b.n	800635a <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f8:	f043 030e 	orr.w	r3, r3, #14
 80062fc:	6053      	str	r3, [r2, #4]
          break;
 80062fe:	e02c      	b.n	800635a <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	440a      	add	r2, r1
 8006316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800631e:	6053      	str	r3, [r2, #4]
          break;
 8006320:	e01b      	b.n	800635a <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	6a3a      	ldr	r2, [r7, #32]
 8006336:	440a      	add	r2, r1
 8006338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800633c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006340:	6053      	str	r3, [r2, #4]
          break;
 8006342:	e00a      	b.n	800635a <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	461a      	mov	r2, r3
 8006352:	2300      	movs	r3, #0
 8006354:	6053      	str	r3, [r2, #4]
 8006356:	e000      	b.n	800635a <USB_HC_StartXfer+0x37e>
          break;
 8006358:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006370:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	78db      	ldrb	r3, [r3, #3]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	e003      	b.n	800638c <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800638a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006392:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a0:	461a      	mov	r2, r3
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e055      	b.n	800645c <USB_HC_StartXfer+0x480>
 80063b0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	78db      	ldrb	r3, [r3, #3]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d14e      	bne.n	800645a <USB_HC_StartXfer+0x47e>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d04a      	beq.n	800645a <USB_HC_StartXfer+0x47e>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	79db      	ldrb	r3, [r3, #7]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d146      	bne.n	800645a <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	7c9b      	ldrb	r3, [r3, #18]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d831      	bhi.n	8006438 <USB_HC_StartXfer+0x45c>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <USB_HC_StartXfer+0x400>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	08006411 	.word	0x08006411
 80063e4:	080063ed 	.word	0x080063ed
 80063e8:	08006411 	.word	0x08006411
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	3303      	adds	r3, #3
 80063f2:	089b      	lsrs	r3, r3, #2
 80063f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063f6:	8afa      	ldrh	r2, [r7, #22]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	429a      	cmp	r2, r3
 8006400:	d91c      	bls.n	800643c <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f043 0220 	orr.w	r2, r3, #32
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	619a      	str	r2, [r3, #24]
        }
        break;
 800640e:	e015      	b.n	800643c <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	3303      	adds	r3, #3
 8006416:	089b      	lsrs	r3, r3, #2
 8006418:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800641a:	8afa      	ldrh	r2, [r7, #22]
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	b29b      	uxth	r3, r3
 8006426:	429a      	cmp	r2, r3
 8006428:	d90a      	bls.n	8006440 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	619a      	str	r2, [r3, #24]
        }
        break;
 8006436:	e003      	b.n	8006440 <USB_HC_StartXfer+0x464>

      default:
        break;
 8006438:	bf00      	nop
 800643a:	e002      	b.n	8006442 <USB_HC_StartXfer+0x466>
        break;
 800643c:	bf00      	nop
 800643e:	e000      	b.n	8006442 <USB_HC_StartXfer+0x466>
        break;
 8006440:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6999      	ldr	r1, [r3, #24]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	785a      	ldrb	r2, [r3, #1]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	b29b      	uxth	r3, r3
 8006450:	2000      	movs	r0, #0
 8006452:	9000      	str	r0, [sp, #0]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff fa2c 	bl	80058b2 <USB_WritePacket>
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3728      	adds	r7, #40	; 0x28
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	b29b      	uxth	r3, r3
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006486:	b480      	push	{r7}
 8006488:	b089      	sub	sp, #36	; 0x24
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	0c9b      	lsrs	r3, r3, #18
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	0fdb      	lsrs	r3, r3, #31
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	0fdb      	lsrs	r3, r3, #31
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d10d      	bne.n	8006508 <USB_HC_Halt+0x82>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <USB_HC_Halt+0x82>
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d002      	beq.n	8006504 <USB_HC_Halt+0x7e>
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d101      	bne.n	8006508 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	e0d8      	b.n	80066ba <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <USB_HC_Halt+0x8e>
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d173      	bne.n	80065fc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	440a      	add	r2, r1
 800652a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006532:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d14a      	bne.n	80065d6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d133      	bne.n	80065b4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	440a      	add	r2, r1
 8006562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800656a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	440a      	add	r2, r1
 8006582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	3301      	adds	r3, #1
 8006590:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006598:	d82e      	bhi.n	80065f8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b0:	d0ec      	beq.n	800658c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065b2:	e081      	b.n	80066b8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065d4:	e070      	b.n	80066b8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065f6:	e05f      	b.n	80066b8 <USB_HC_Halt+0x232>
            break;
 80065f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065fa:	e05d      	b.n	80066b8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	440a      	add	r2, r1
 8006612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800661a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d133      	bne.n	8006694 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	440a      	add	r2, r1
 8006642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800664a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4413      	add	r3, r2
 8006654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	440a      	add	r2, r1
 8006662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006666:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800666a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	3301      	adds	r3, #1
 8006670:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006678:	d81d      	bhi.n	80066b6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800668c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006690:	d0ec      	beq.n	800666c <USB_HC_Halt+0x1e6>
 8006692:	e011      	b.n	80066b8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	e000      	b.n	80066b8 <USB_HC_Halt+0x232>
          break;
 80066b6:	bf00      	nop
    }
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3724      	adds	r7, #36	; 0x24
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b088      	sub	sp, #32
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff f82c 	bl	8005738 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066e0:	2110      	movs	r1, #16
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff f885 	bl	80057f2 <USB_FlushTxFifo>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff f8af 	bl	8005856 <USB_FlushRxFifo>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	e01f      	b.n	8006748 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	4413      	add	r3, r2
 8006710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006726:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800672e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673c:	461a      	mov	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	3301      	adds	r3, #1
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d9dc      	bls.n	8006708 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e034      	b.n	80067be <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	4413      	add	r3, r2
 800675c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800676a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006772:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800677a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	461a      	mov	r2, r3
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800679a:	d80c      	bhi.n	80067b6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b2:	d0ec      	beq.n	800678e <USB_StopHost+0xc8>
 80067b4:	e000      	b.n	80067b8 <USB_StopHost+0xf2>
        break;
 80067b6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	3301      	adds	r3, #1
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b0f      	cmp	r3, #15
 80067c2:	d9c7      	bls.n	8006754 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ca:	461a      	mov	r2, r3
 80067cc:	f04f 33ff 	mov.w	r3, #4294967295
 80067d0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f04f 32ff 	mov.w	r2, #4294967295
 80067d8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fe ff9b 	bl	8005716 <USB_EnableGlobalInt>

  return ret;
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80067ea:	b590      	push	{r4, r7, lr}
 80067ec:	b089      	sub	sp, #36	; 0x24
 80067ee:	af04      	add	r7, sp, #16
 80067f0:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80067f2:	2301      	movs	r3, #1
 80067f4:	2202      	movs	r2, #2
 80067f6:	2102      	movs	r1, #2
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fc86 	bl	800710a <USBH_FindInterface>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2bff      	cmp	r3, #255	; 0xff
 8006806:	d002      	beq.n	800680e <USBH_CDC_InterfaceInit+0x24>
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d901      	bls.n	8006812 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800680e:	2302      	movs	r3, #2
 8006810:	e13d      	b.n	8006a8e <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fc5b 	bl	80070d2 <USBH_SelectInterface>
 800681c:	4603      	mov	r3, r0
 800681e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006826:	2302      	movs	r3, #2
 8006828:	e131      	b.n	8006a8e <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006830:	2050      	movs	r0, #80	; 0x50
 8006832:	f002 fb75 	bl	8008f20 <malloc>
 8006836:	4603      	mov	r3, r0
 8006838:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800684a:	2302      	movs	r3, #2
 800684c:	e11f      	b.n	8006a8e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800684e:	2250      	movs	r2, #80	; 0x50
 8006850:	2100      	movs	r1, #0
 8006852:	68b8      	ldr	r0, [r7, #8]
 8006854:	f002 fc20 	bl	8009098 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	211a      	movs	r1, #26
 800685e:	fb01 f303 	mul.w	r3, r1, r3
 8006862:	4413      	add	r3, r2
 8006864:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	b25b      	sxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	da15      	bge.n	800689c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	211a      	movs	r1, #26
 8006876:	fb01 f303 	mul.w	r3, r1, r3
 800687a:	4413      	add	r3, r2
 800687c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	211a      	movs	r1, #26
 800688c:	fb01 f303 	mul.w	r3, r1, r3
 8006890:	4413      	add	r3, r2
 8006892:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006896:	881a      	ldrh	r2, [r3, #0]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 ffcf 	bl	8008846 <USBH_AllocPipe>
 80068a8:	4603      	mov	r3, r0
 80068aa:	461a      	mov	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	7819      	ldrb	r1, [r3, #0]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	7858      	ldrb	r0, [r3, #1]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	8952      	ldrh	r2, [r2, #10]
 80068c8:	9202      	str	r2, [sp, #8]
 80068ca:	2203      	movs	r2, #3
 80068cc:	9201      	str	r2, [sp, #4]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	4623      	mov	r3, r4
 80068d2:	4602      	mov	r2, r0
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 ff87 	bl	80087e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f002 fa96 	bl	8008e14 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80068e8:	2300      	movs	r3, #0
 80068ea:	2200      	movs	r2, #0
 80068ec:	210a      	movs	r1, #10
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fc0b 	bl	800710a <USBH_FindInterface>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2bff      	cmp	r3, #255	; 0xff
 80068fc:	d002      	beq.n	8006904 <USBH_CDC_InterfaceInit+0x11a>
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d901      	bls.n	8006908 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006904:	2302      	movs	r3, #2
 8006906:	e0c2      	b.n	8006a8e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	211a      	movs	r1, #26
 800690e:	fb01 f303 	mul.w	r3, r1, r3
 8006912:	4413      	add	r3, r2
 8006914:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	b25b      	sxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	da16      	bge.n	800694e <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	211a      	movs	r1, #26
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	4413      	add	r3, r2
 800692c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	211a      	movs	r1, #26
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	4413      	add	r3, r2
 8006942:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006946:	881a      	ldrh	r2, [r3, #0]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	835a      	strh	r2, [r3, #26]
 800694c:	e015      	b.n	800697a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	211a      	movs	r1, #26
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	4413      	add	r3, r2
 800695a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	211a      	movs	r1, #26
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006974:	881a      	ldrh	r2, [r3, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	211a      	movs	r1, #26
 8006980:	fb01 f303 	mul.w	r3, r1, r3
 8006984:	4413      	add	r3, r2
 8006986:	f203 3356 	addw	r3, r3, #854	; 0x356
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b25b      	sxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	da16      	bge.n	80069c0 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	211a      	movs	r1, #26
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	4413      	add	r3, r2
 800699e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	211a      	movs	r1, #26
 80069ae:	fb01 f303 	mul.w	r3, r1, r3
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069b8:	881a      	ldrh	r2, [r3, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	835a      	strh	r2, [r3, #26]
 80069be:	e015      	b.n	80069ec <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	211a      	movs	r1, #26
 80069c6:	fb01 f303 	mul.w	r3, r1, r3
 80069ca:	4413      	add	r3, r2
 80069cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069d0:	781a      	ldrb	r2, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	211a      	movs	r1, #26
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069e6:	881a      	ldrh	r2, [r3, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	7b9b      	ldrb	r3, [r3, #14]
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 ff27 	bl	8008846 <USBH_AllocPipe>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	7bdb      	ldrb	r3, [r3, #15]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 ff1d 	bl	8008846 <USBH_AllocPipe>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	7b59      	ldrb	r1, [r3, #13]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	7b98      	ldrb	r0, [r3, #14]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	8b12      	ldrh	r2, [r2, #24]
 8006a2c:	9202      	str	r2, [sp, #8]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	9201      	str	r2, [sp, #4]
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	4623      	mov	r3, r4
 8006a36:	4602      	mov	r2, r0
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fed5 	bl	80087e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	7b19      	ldrb	r1, [r3, #12]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	7bd8      	ldrb	r0, [r3, #15]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	8b52      	ldrh	r2, [r2, #26]
 8006a56:	9202      	str	r2, [sp, #8]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	9201      	str	r2, [sp, #4]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	4623      	mov	r3, r4
 8006a60:	4602      	mov	r2, r0
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 fec0 	bl	80087e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	7b5b      	ldrb	r3, [r3, #13]
 8006a74:	2200      	movs	r2, #0
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f002 f9cb 	bl	8008e14 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	7b1b      	ldrb	r3, [r3, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f002 f9c4 	bl	8008e14 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}

08006a96 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 feb5 	bl	8008826 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fee0 	bl	8008888 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	7b1b      	ldrb	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00e      	beq.n	8006af4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	7b1b      	ldrb	r3, [r3, #12]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fea2 	bl	8008826 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	7b1b      	ldrb	r3, [r3, #12]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fecd 	bl	8008888 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	7b5b      	ldrb	r3, [r3, #13]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00e      	beq.n	8006b1a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	7b5b      	ldrb	r3, [r3, #13]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fe8f 	bl	8008826 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	7b5b      	ldrb	r3, [r3, #13]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 feba 	bl	8008888 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f002 f9fe 	bl	8008f30 <free>
    phost->pActiveClass->pData = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3340      	adds	r3, #64	; 0x40
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f8b2 	bl	8006cca <GetLineCoding>
 8006b66:	4603      	mov	r3, r0
 8006b68:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d105      	bne.n	8006b7c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b76:	2102      	movs	r1, #2
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b90:	2301      	movs	r3, #1
 8006b92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d877      	bhi.n	8006c9c <USBH_CDC_Process+0x114>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <USBH_CDC_Process+0x2c>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006bc9 	.word	0x08006bc9
 8006bb8:	08006bcf 	.word	0x08006bcf
 8006bbc:	08006bff 	.word	0x08006bff
 8006bc0:	08006c73 	.word	0x08006c73
 8006bc4:	08006c81 	.word	0x08006c81
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]
      break;
 8006bcc:	e06d      	b.n	8006caa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f897 	bl	8006d08 <SetLineCoding>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bec:	e058      	b.n	8006ca0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d055      	beq.n	8006ca0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bfc:	e050      	b.n	8006ca0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	3340      	adds	r3, #64	; 0x40
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f860 	bl	8006cca <GetLineCoding>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d126      	bne.n	8006c62 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	791b      	ldrb	r3, [r3, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d13b      	bne.n	8006ca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c36:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d133      	bne.n	8006ca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c46:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d12b      	bne.n	8006ca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c54:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d124      	bne.n	8006ca4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f958 	bl	8006f10 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c60:	e020      	b.n	8006ca4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d01d      	beq.n	8006ca4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c70:	e018      	b.n	8006ca4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f867 	bl	8006d46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f8da 	bl	8006e32 <CDC_ProcessReception>
      break;
 8006c7e:	e014      	b.n	8006caa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 f822 	bl	8007ccc <USBH_ClrFeature>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c9a:	e005      	b.n	8006ca8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c9c:	bf00      	nop
 8006c9e:	e004      	b.n	8006caa <USBH_CDC_Process+0x122>
      break;
 8006ca0:	bf00      	nop
 8006ca2:	e002      	b.n	8006caa <USBH_CDC_Process+0x122>
      break;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <USBH_CDC_Process+0x122>
      break;
 8006ca8:	bf00      	nop

  }

  return status;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	22a1      	movs	r2, #161	; 0xa1
 8006cd8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2221      	movs	r2, #33	; 0x21
 8006cde:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2207      	movs	r2, #7
 8006cf0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2207      	movs	r2, #7
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fb23 	bl	8008344 <USBH_CtlReq>
 8006cfe:	4603      	mov	r3, r0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2221      	movs	r2, #33	; 0x21
 8006d16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2207      	movs	r2, #7
 8006d2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2207      	movs	r2, #7
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fb04 	bl	8008344 <USBH_CtlReq>
 8006d3c:	4603      	mov	r3, r0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af02      	add	r7, sp, #8
 8006d4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d002      	beq.n	8006d6c <CDC_ProcessTransmission+0x26>
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d023      	beq.n	8006db2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d6a:	e05e      	b.n	8006e2a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	8b12      	ldrh	r2, [r2, #24]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d90b      	bls.n	8006d90 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	69d9      	ldr	r1, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8b1a      	ldrh	r2, [r3, #24]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	7b5b      	ldrb	r3, [r3, #13]
 8006d84:	2001      	movs	r0, #1
 8006d86:	9000      	str	r0, [sp, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fcea 	bl	8008762 <USBH_BulkSendData>
 8006d8e:	e00b      	b.n	8006da8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	7b5b      	ldrb	r3, [r3, #13]
 8006d9e:	2001      	movs	r0, #1
 8006da0:	9000      	str	r0, [sp, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 fcdd 	bl	8008762 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006db0:	e03b      	b.n	8006e2a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	7b5b      	ldrb	r3, [r3, #13]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f002 f801 	bl	8008dc0 <USBH_LL_GetURBState>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006dc2:	7afb      	ldrb	r3, [r7, #11]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d128      	bne.n	8006e1a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	8b12      	ldrh	r2, [r2, #24]
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d90e      	bls.n	8006df2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	8b12      	ldrh	r2, [r2, #24]
 8006ddc:	1a9a      	subs	r2, r3, r2
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	8b12      	ldrh	r2, [r2, #24]
 8006dea:	441a      	add	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	61da      	str	r2, [r3, #28]
 8006df0:	e002      	b.n	8006df8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d004      	beq.n	8006e0a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e08:	e00e      	b.n	8006e28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f868 	bl	8006ee8 <USBH_CDC_TransmitCallback>
      break;
 8006e18:	e006      	b.n	8006e28 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d103      	bne.n	8006e28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e28:	bf00      	nop
  }
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b086      	sub	sp, #24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e44:	2300      	movs	r3, #0
 8006e46:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d002      	beq.n	8006e58 <CDC_ProcessReception+0x26>
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d00e      	beq.n	8006e74 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e56:	e043      	b.n	8006ee0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	6a19      	ldr	r1, [r3, #32]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	8b5a      	ldrh	r2, [r3, #26]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	7b1b      	ldrb	r3, [r3, #12]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fca1 	bl	80087ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e72:	e035      	b.n	8006ee0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	7b1b      	ldrb	r3, [r3, #12]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 ffa0 	bl	8008dc0 <USBH_LL_GetURBState>
 8006e80:	4603      	mov	r3, r0
 8006e82:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e84:	7cfb      	ldrb	r3, [r7, #19]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d129      	bne.n	8006ede <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	7b1b      	ldrb	r3, [r3, #12]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 ff03 	bl	8008c9c <USBH_LL_GetLastXferSize>
 8006e96:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d016      	beq.n	8006ed0 <CDC_ProcessReception+0x9e>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	8b5b      	ldrh	r3, [r3, #26]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d910      	bls.n	8006ed0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1ad2      	subs	r2, r2, r3
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	6a1a      	ldr	r2, [r3, #32]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	441a      	add	r2, r3
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2203      	movs	r2, #3
 8006eca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ece:	e006      	b.n	8006ede <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f80f 	bl	8006efc <USBH_CDC_ReceiveCallback>
      break;
 8006ede:	bf00      	nop
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e029      	b.n	8006f90 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	79fa      	ldrb	r2, [r7, #7]
 8006f40:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f81f 	bl	8006f98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f001 fdd3 	bl	8008b34 <USBH_LL_Init>

  return USBH_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e009      	b.n	8006fbe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	33e0      	adds	r3, #224	; 0xe0
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b0f      	cmp	r3, #15
 8006fc2:	d9f2      	bls.n	8006faa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	e009      	b.n	8006fde <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe4:	d3f1      	bcc.n	8006fca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	331c      	adds	r3, #28
 8007036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f002 f82b 	bl	8009098 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f002 f822 	bl	8009098 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f203 3326 	addw	r3, r3, #806	; 0x326
 800705a:	2212      	movs	r2, #18
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f002 f81a 	bl	8009098 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800706a:	223e      	movs	r2, #62	; 0x3e
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f002 f812 	bl	8009098 <memset>

  return USBH_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d016      	beq.n	80070c0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10e      	bne.n	80070ba <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070a2:	1c59      	adds	r1, r3, #1
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	33de      	adds	r3, #222	; 0xde
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	e004      	b.n	80070c4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	73fb      	strb	r3, [r7, #15]
 80070be:	e001      	b.n	80070c4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070c0:	2302      	movs	r3, #2
 80070c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d204      	bcs.n	80070f8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070f6:	e001      	b.n	80070fc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070f8:	2302      	movs	r3, #2
 80070fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800710a:	b480      	push	{r7}
 800710c:	b087      	sub	sp, #28
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	461a      	mov	r2, r3
 8007118:	4603      	mov	r3, r0
 800711a:	70fb      	strb	r3, [r7, #3]
 800711c:	460b      	mov	r3, r1
 800711e:	70bb      	strb	r3, [r7, #2]
 8007120:	4613      	mov	r3, r2
 8007122:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007132:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007134:	e025      	b.n	8007182 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	221a      	movs	r2, #26
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	3308      	adds	r3, #8
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	3302      	adds	r3, #2
 8007146:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	795b      	ldrb	r3, [r3, #5]
 800714c:	78fa      	ldrb	r2, [r7, #3]
 800714e:	429a      	cmp	r2, r3
 8007150:	d002      	beq.n	8007158 <USBH_FindInterface+0x4e>
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	2bff      	cmp	r3, #255	; 0xff
 8007156:	d111      	bne.n	800717c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800715c:	78ba      	ldrb	r2, [r7, #2]
 800715e:	429a      	cmp	r2, r3
 8007160:	d002      	beq.n	8007168 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007162:	78bb      	ldrb	r3, [r7, #2]
 8007164:	2bff      	cmp	r3, #255	; 0xff
 8007166:	d109      	bne.n	800717c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800716c:	787a      	ldrb	r2, [r7, #1]
 800716e:	429a      	cmp	r2, r3
 8007170:	d002      	beq.n	8007178 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007172:	787b      	ldrb	r3, [r7, #1]
 8007174:	2bff      	cmp	r3, #255	; 0xff
 8007176:	d101      	bne.n	800717c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	e006      	b.n	800718a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	3301      	adds	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d9d6      	bls.n	8007136 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007188:	23ff      	movs	r3, #255	; 0xff
}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fd04 	bl	8008bac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071a4:	2101      	movs	r1, #1
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fe1d 	bl	8008de6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af04      	add	r7, sp, #16
 80071be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071c0:	2302      	movs	r3, #2
 80071c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d102      	bne.n	80071da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2203      	movs	r2, #3
 80071d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b0b      	cmp	r3, #11
 80071e2:	f200 81be 	bhi.w	8007562 <USBH_Process+0x3aa>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <USBH_Process+0x34>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	0800721d 	.word	0x0800721d
 80071f0:	0800724f 	.word	0x0800724f
 80071f4:	080072b7 	.word	0x080072b7
 80071f8:	080074fd 	.word	0x080074fd
 80071fc:	08007563 	.word	0x08007563
 8007200:	0800735b 	.word	0x0800735b
 8007204:	080074a3 	.word	0x080074a3
 8007208:	08007391 	.word	0x08007391
 800720c:	080073b1 	.word	0x080073b1
 8007210:	080073d1 	.word	0x080073d1
 8007214:	08007415 	.word	0x08007415
 8007218:	080074e5 	.word	0x080074e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 819e 	beq.w	8007566 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007230:	20c8      	movs	r0, #200	; 0xc8
 8007232:	f001 fe22 	bl	8008e7a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fd15 	bl	8008c66 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800724c:	e18b      	b.n	8007566 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007254:	2b01      	cmp	r3, #1
 8007256:	d107      	bne.n	8007268 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007266:	e18d      	b.n	8007584 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800726e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007272:	d914      	bls.n	800729e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800727a:	3301      	adds	r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800728a:	2b03      	cmp	r3, #3
 800728c:	d903      	bls.n	8007296 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	220d      	movs	r2, #13
 8007292:	701a      	strb	r2, [r3, #0]
      break;
 8007294:	e176      	b.n	8007584 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
      break;
 800729c:	e172      	b.n	8007584 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072a4:	f103 020a 	add.w	r2, r3, #10
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072ae:	200a      	movs	r0, #10
 80072b0:	f001 fde3 	bl	8008e7a <USBH_Delay>
      break;
 80072b4:	e166      	b.n	8007584 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072c6:	2104      	movs	r1, #4
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072cc:	2064      	movs	r0, #100	; 0x64
 80072ce:	f001 fdd4 	bl	8008e7a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fca0 	bl	8008c18 <USBH_LL_GetSpeed>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2205      	movs	r2, #5
 80072e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072e8:	2100      	movs	r1, #0
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 faab 	bl	8008846 <USBH_AllocPipe>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 faa3 	bl	8008846 <USBH_AllocPipe>
 8007300:	4603      	mov	r3, r0
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7919      	ldrb	r1, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800731c:	b292      	uxth	r2, r2
 800731e:	9202      	str	r2, [sp, #8]
 8007320:	2200      	movs	r2, #0
 8007322:	9201      	str	r2, [sp, #4]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	4603      	mov	r3, r0
 8007328:	2280      	movs	r2, #128	; 0x80
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fa5c 	bl	80087e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	7959      	ldrb	r1, [r3, #5]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007344:	b292      	uxth	r2, r2
 8007346:	9202      	str	r2, [sp, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	9201      	str	r2, [sp, #4]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	4603      	mov	r3, r0
 8007350:	2200      	movs	r2, #0
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fa48 	bl	80087e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007358:	e114      	b.n	8007584 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f918 	bl	8007590 <USBH_HandleEnum>
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	f040 80fe 	bne.w	800756a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800737c:	2b01      	cmp	r3, #1
 800737e:	d103      	bne.n	8007388 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2208      	movs	r2, #8
 8007384:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007386:	e0f0      	b.n	800756a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2207      	movs	r2, #7
 800738c:	701a      	strb	r2, [r3, #0]
      break;
 800738e:	e0ec      	b.n	800756a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 80e9 	beq.w	800756e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073a2:	2101      	movs	r1, #1
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2208      	movs	r2, #8
 80073ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073ae:	e0de      	b.n	800756e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fc3f 	bl	8007c3e <USBH_SetCfg>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f040 80d5 	bne.w	8007572 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2209      	movs	r2, #9
 80073cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073ce:	e0d0      	b.n	8007572 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d016      	beq.n	800740c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80073de:	2101      	movs	r1, #1
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fc4f 	bl	8007c84 <USBH_SetFeature>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	220a      	movs	r2, #10
 80073f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073f8:	e0bd      	b.n	8007576 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b03      	cmp	r3, #3
 8007400:	f040 80b9 	bne.w	8007576 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	220a      	movs	r2, #10
 8007408:	701a      	strb	r2, [r3, #0]
      break;
 800740a:	e0b4      	b.n	8007576 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	220a      	movs	r2, #10
 8007410:	701a      	strb	r2, [r3, #0]
      break;
 8007412:	e0b0      	b.n	8007576 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80ad 	beq.w	800757a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
 800742c:	e016      	b.n	800745c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800742e:	7bfa      	ldrb	r2, [r7, #15]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	32de      	adds	r2, #222	; 0xde
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	791a      	ldrb	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007440:	429a      	cmp	r2, r3
 8007442:	d108      	bne.n	8007456 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007444:	7bfa      	ldrb	r2, [r7, #15]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32de      	adds	r2, #222	; 0xde
 800744a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007454:	e005      	b.n	8007462 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	3301      	adds	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0e5      	beq.n	800742e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d016      	beq.n	800749a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2206      	movs	r2, #6
 8007482:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800748a:	2103      	movs	r1, #3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007490:	e073      	b.n	800757a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	220d      	movs	r2, #13
 8007496:	701a      	strb	r2, [r3, #0]
      break;
 8007498:	e06f      	b.n	800757a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	220d      	movs	r2, #13
 800749e:	701a      	strb	r2, [r3, #0]
      break;
 80074a0:	e06b      	b.n	800757a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d017      	beq.n	80074dc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
 80074b8:	4603      	mov	r3, r0
 80074ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	220b      	movs	r2, #11
 80074c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074ca:	e058      	b.n	800757e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d154      	bne.n	800757e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	220d      	movs	r2, #13
 80074d8:	701a      	strb	r2, [r3, #0]
      break;
 80074da:	e050      	b.n	800757e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	220d      	movs	r2, #13
 80074e0:	701a      	strb	r2, [r3, #0]
      break;
 80074e2:	e04c      	b.n	800757e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d049      	beq.n	8007582 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
      }
      break;
 80074fa:	e042      	b.n	8007582 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff fd47 	bl	8006f98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007538:	2105      	movs	r1, #5
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b01      	cmp	r3, #1
 8007548:	d107      	bne.n	800755a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff fe1f 	bl	8007196 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007558:	e014      	b.n	8007584 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fb26 	bl	8008bac <USBH_LL_Start>
      break;
 8007560:	e010      	b.n	8007584 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007562:	bf00      	nop
 8007564:	e00e      	b.n	8007584 <USBH_Process+0x3cc>
      break;
 8007566:	bf00      	nop
 8007568:	e00c      	b.n	8007584 <USBH_Process+0x3cc>
      break;
 800756a:	bf00      	nop
 800756c:	e00a      	b.n	8007584 <USBH_Process+0x3cc>
    break;
 800756e:	bf00      	nop
 8007570:	e008      	b.n	8007584 <USBH_Process+0x3cc>
      break;
 8007572:	bf00      	nop
 8007574:	e006      	b.n	8007584 <USBH_Process+0x3cc>
      break;
 8007576:	bf00      	nop
 8007578:	e004      	b.n	8007584 <USBH_Process+0x3cc>
      break;
 800757a:	bf00      	nop
 800757c:	e002      	b.n	8007584 <USBH_Process+0x3cc>
      break;
 800757e:	bf00      	nop
 8007580:	e000      	b.n	8007584 <USBH_Process+0x3cc>
      break;
 8007582:	bf00      	nop
  }
  return USBH_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop

08007590 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af04      	add	r7, sp, #16
 8007596:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800759c:	2301      	movs	r3, #1
 800759e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b07      	cmp	r3, #7
 80075a6:	f200 81c1 	bhi.w	800792c <USBH_HandleEnum+0x39c>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <USBH_HandleEnum+0x20>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075d1 	.word	0x080075d1
 80075b4:	0800768f 	.word	0x0800768f
 80075b8:	080076f9 	.word	0x080076f9
 80075bc:	08007787 	.word	0x08007787
 80075c0:	080077f1 	.word	0x080077f1
 80075c4:	08007861 	.word	0x08007861
 80075c8:	080078a7 	.word	0x080078a7
 80075cc:	080078ed 	.word	0x080078ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075d0:	2108      	movs	r1, #8
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa50 	bl	8007a78 <USBH_Get_DevDesc>
 80075d8:	4603      	mov	r3, r0
 80075da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d130      	bne.n	8007644 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7919      	ldrb	r1, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007606:	b292      	uxth	r2, r2
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4603      	mov	r3, r0
 8007612:	2280      	movs	r2, #128	; 0x80
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f8e7 	bl	80087e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	7959      	ldrb	r1, [r3, #5]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800762e:	b292      	uxth	r2, r2
 8007630:	9202      	str	r2, [sp, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	9201      	str	r2, [sp, #4]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	4603      	mov	r3, r0
 800763a:	2200      	movs	r2, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f8d3 	bl	80087e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007642:	e175      	b.n	8007930 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b03      	cmp	r3, #3
 8007648:	f040 8172 	bne.w	8007930 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007652:	3301      	adds	r3, #1
 8007654:	b2da      	uxtb	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007662:	2b03      	cmp	r3, #3
 8007664:	d903      	bls.n	800766e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	220d      	movs	r2, #13
 800766a:	701a      	strb	r2, [r3, #0]
      break;
 800766c:	e160      	b.n	8007930 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	795b      	ldrb	r3, [r3, #5]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 f907 	bl	8008888 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	791b      	ldrb	r3, [r3, #4]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 f901 	bl	8008888 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
      break;
 800768c:	e150      	b.n	8007930 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800768e:	2112      	movs	r1, #18
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f9f1 	bl	8007a78 <USBH_Get_DevDesc>
 8007696:	4603      	mov	r3, r0
 8007698:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d103      	bne.n	80076a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076a6:	e145      	b.n	8007934 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	f040 8142 	bne.w	8007934 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076b6:	3301      	adds	r3, #1
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d903      	bls.n	80076d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	220d      	movs	r2, #13
 80076ce:	701a      	strb	r2, [r3, #0]
      break;
 80076d0:	e130      	b.n	8007934 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	795b      	ldrb	r3, [r3, #5]
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 f8d5 	bl	8008888 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	791b      	ldrb	r3, [r3, #4]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f8cf 	bl	8008888 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]
      break;
 80076f6:	e11d      	b.n	8007934 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076f8:	2101      	movs	r1, #1
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa7b 	bl	8007bf6 <USBH_SetAddress>
 8007700:	4603      	mov	r3, r0
 8007702:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d132      	bne.n	8007770 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800770a:	2002      	movs	r0, #2
 800770c:	f001 fbb5 	bl	8008e7a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2203      	movs	r2, #3
 800771c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	7919      	ldrb	r1, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007732:	b292      	uxth	r2, r2
 8007734:	9202      	str	r2, [sp, #8]
 8007736:	2200      	movs	r2, #0
 8007738:	9201      	str	r2, [sp, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	4603      	mov	r3, r0
 800773e:	2280      	movs	r2, #128	; 0x80
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 f851 	bl	80087e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	7959      	ldrb	r1, [r3, #5]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800775a:	b292      	uxth	r2, r2
 800775c:	9202      	str	r2, [sp, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	9201      	str	r2, [sp, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	4603      	mov	r3, r0
 8007766:	2200      	movs	r2, #0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 f83d 	bl	80087e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800776e:	e0e3      	b.n	8007938 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b03      	cmp	r3, #3
 8007774:	f040 80e0 	bne.w	8007938 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	220d      	movs	r2, #13
 800777c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	705a      	strb	r2, [r3, #1]
      break;
 8007784:	e0d8      	b.n	8007938 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007786:	2109      	movs	r1, #9
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f9a1 	bl	8007ad0 <USBH_Get_CfgDesc>
 800778e:	4603      	mov	r3, r0
 8007790:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2204      	movs	r2, #4
 800779c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800779e:	e0cd      	b.n	800793c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	f040 80ca 	bne.w	800793c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ae:	3301      	adds	r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d903      	bls.n	80077ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	220d      	movs	r2, #13
 80077c6:	701a      	strb	r2, [r3, #0]
      break;
 80077c8:	e0b8      	b.n	800793c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	795b      	ldrb	r3, [r3, #5]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f859 	bl	8008888 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f853 	bl	8008888 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	701a      	strb	r2, [r3, #0]
      break;
 80077ee:	e0a5      	b.n	800793c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f969 	bl	8007ad0 <USBH_Get_CfgDesc>
 80077fe:	4603      	mov	r3, r0
 8007800:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2205      	movs	r2, #5
 800780c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800780e:	e097      	b.n	8007940 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b03      	cmp	r3, #3
 8007814:	f040 8094 	bne.w	8007940 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800781e:	3301      	adds	r3, #1
 8007820:	b2da      	uxtb	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800782e:	2b03      	cmp	r3, #3
 8007830:	d903      	bls.n	800783a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	220d      	movs	r2, #13
 8007836:	701a      	strb	r2, [r3, #0]
      break;
 8007838:	e082      	b.n	8007940 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	795b      	ldrb	r3, [r3, #5]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 f821 	bl	8008888 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	791b      	ldrb	r3, [r3, #4]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f81b 	bl	8008888 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
      break;
 800785e:	e06f      	b.n	8007940 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007866:	2b00      	cmp	r3, #0
 8007868:	d019      	beq.n	800789e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007876:	23ff      	movs	r3, #255	; 0xff
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f953 	bl	8007b24 <USBH_Get_StringDesc>
 800787e:	4603      	mov	r3, r0
 8007880:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2206      	movs	r2, #6
 800788c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800788e:	e059      	b.n	8007944 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b03      	cmp	r3, #3
 8007894:	d156      	bne.n	8007944 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2206      	movs	r2, #6
 800789a:	705a      	strb	r2, [r3, #1]
      break;
 800789c:	e052      	b.n	8007944 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2206      	movs	r2, #6
 80078a2:	705a      	strb	r2, [r3, #1]
      break;
 80078a4:	e04e      	b.n	8007944 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d019      	beq.n	80078e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078bc:	23ff      	movs	r3, #255	; 0xff
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f930 	bl	8007b24 <USBH_Get_StringDesc>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2207      	movs	r2, #7
 80078d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078d4:	e038      	b.n	8007948 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d135      	bne.n	8007948 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2207      	movs	r2, #7
 80078e0:	705a      	strb	r2, [r3, #1]
      break;
 80078e2:	e031      	b.n	8007948 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2207      	movs	r2, #7
 80078e8:	705a      	strb	r2, [r3, #1]
      break;
 80078ea:	e02d      	b.n	8007948 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d017      	beq.n	8007926 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007902:	23ff      	movs	r3, #255	; 0xff
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f90d 	bl	8007b24 <USBH_Get_StringDesc>
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007918:	e018      	b.n	800794c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b03      	cmp	r3, #3
 800791e:	d115      	bne.n	800794c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
      break;
 8007924:	e012      	b.n	800794c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
      break;
 800792a:	e00f      	b.n	800794c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800792c:	bf00      	nop
 800792e:	e00e      	b.n	800794e <USBH_HandleEnum+0x3be>
      break;
 8007930:	bf00      	nop
 8007932:	e00c      	b.n	800794e <USBH_HandleEnum+0x3be>
      break;
 8007934:	bf00      	nop
 8007936:	e00a      	b.n	800794e <USBH_HandleEnum+0x3be>
      break;
 8007938:	bf00      	nop
 800793a:	e008      	b.n	800794e <USBH_HandleEnum+0x3be>
      break;
 800793c:	bf00      	nop
 800793e:	e006      	b.n	800794e <USBH_HandleEnum+0x3be>
      break;
 8007940:	bf00      	nop
 8007942:	e004      	b.n	800794e <USBH_HandleEnum+0x3be>
      break;
 8007944:	bf00      	nop
 8007946:	e002      	b.n	800794e <USBH_HandleEnum+0x3be>
      break;
 8007948:	bf00      	nop
 800794a:	e000      	b.n	800794e <USBH_HandleEnum+0x3be>
      break;
 800794c:	bf00      	nop
  }
  return Status;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f804 	bl	800799a <USBH_HandleSof>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b0b      	cmp	r3, #11
 80079aa:	d10a      	bne.n	80079c2 <USBH_HandleSof+0x28>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
  }
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079da:	bf00      	nop
}
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079f6:	bf00      	nop
}
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 f8c6 	bl	8008be2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	791b      	ldrb	r3, [r3, #4]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 ff13 	bl	8008888 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	795b      	ldrb	r3, [r3, #5]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 ff0d 	bl	8008888 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007a84:	887b      	ldrh	r3, [r7, #2]
 8007a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8a:	d901      	bls.n	8007a90 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e01b      	b.n	8007ac8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a96:	887b      	ldrh	r3, [r7, #2]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f872 	bl	8007b8c <USBH_GetDescriptor>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ab8:	887a      	ldrh	r2, [r7, #2]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f929 	bl	8007d14 <USBH_ParseDevDesc>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	331c      	adds	r3, #28
 8007ae0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae8:	d901      	bls.n	8007aee <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e016      	b.n	8007b1c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007aee:	887b      	ldrh	r3, [r7, #2]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f846 	bl	8007b8c <USBH_GetDescriptor>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d107      	bne.n	8007b1a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b0a:	887b      	ldrh	r3, [r7, #2]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f9b3 	bl	8007e7c <USBH_ParseCfgDesc>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	460b      	mov	r3, r1
 8007b32:	72fb      	strb	r3, [r7, #11]
 8007b34:	4613      	mov	r3, r2
 8007b36:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007b38:	893b      	ldrh	r3, [r7, #8]
 8007b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b3e:	d802      	bhi.n	8007b46 <USBH_Get_StringDesc+0x22>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e01c      	b.n	8007b84 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b52:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b5a:	893b      	ldrh	r3, [r7, #8]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	2100      	movs	r1, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f812 	bl	8007b8c <USBH_GetDescriptor>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d107      	bne.n	8007b82 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b78:	893a      	ldrh	r2, [r7, #8]
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fb93 	bl	80082a8 <USBH_ParseStringDesc>
  }

  return status;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	607b      	str	r3, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	72fb      	strb	r3, [r7, #11]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	789b      	ldrb	r3, [r3, #2]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d11c      	bne.n	8007be0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2206      	movs	r2, #6
 8007bb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	893a      	ldrh	r2, [r7, #8]
 8007bbc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bbe:	893b      	ldrh	r3, [r7, #8]
 8007bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bc8:	d104      	bne.n	8007bd4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f240 4209 	movw	r2, #1033	; 0x409
 8007bd0:	829a      	strh	r2, [r3, #20]
 8007bd2:	e002      	b.n	8007bda <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8b3a      	ldrh	r2, [r7, #24]
 8007bde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007be0:	8b3b      	ldrh	r3, [r7, #24]
 8007be2:	461a      	mov	r2, r3
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fbac 	bl	8008344 <USBH_CtlReq>
 8007bec:	4603      	mov	r3, r0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	789b      	ldrb	r3, [r3, #2]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10f      	bne.n	8007c2a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2205      	movs	r2, #5
 8007c14:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fb88 	bl	8008344 <USBH_CtlReq>
 8007c34:	4603      	mov	r3, r0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	789b      	ldrb	r3, [r3, #2]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d10e      	bne.n	8007c70 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2209      	movs	r2, #9
 8007c5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	887a      	ldrh	r2, [r7, #2]
 8007c62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb65 	bl	8008344 <USBH_CtlReq>
 8007c7a:	4603      	mov	r3, r0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	789b      	ldrb	r3, [r3, #2]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10f      	bne.n	8007cb8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2203      	movs	r2, #3
 8007ca2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fb41 	bl	8008344 <USBH_CtlReq>
 8007cc2:	4603      	mov	r3, r0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	789b      	ldrb	r3, [r3, #2]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d10f      	bne.n	8007d00 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d00:	2200      	movs	r2, #0
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fb1d 	bl	8008344 <USBH_CtlReq>
 8007d0a:	4603      	mov	r3, r0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007d28:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007d34:	2302      	movs	r3, #2
 8007d36:	e098      	b.n	8007e6a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	781a      	ldrb	r2, [r3, #0]
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	785a      	ldrb	r2, [r3, #1]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3302      	adds	r3, #2
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	3303      	adds	r3, #3
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	791a      	ldrb	r2, [r3, #4]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	795a      	ldrb	r2, [r3, #5]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	799a      	ldrb	r2, [r3, #6]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	79da      	ldrb	r2, [r3, #7]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d11b      	bne.n	8007dd0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	79db      	ldrb	r3, [r3, #7]
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	dc0f      	bgt.n	8007dc0 <USBH_ParseDevDesc+0xac>
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	db0f      	blt.n	8007dc4 <USBH_ParseDevDesc+0xb0>
 8007da4:	3b08      	subs	r3, #8
 8007da6:	4a34      	ldr	r2, [pc, #208]	; (8007e78 <USBH_ParseDevDesc+0x164>)
 8007da8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf14      	ite	ne
 8007db4:	2301      	movne	r3, #1
 8007db6:	2300      	moveq	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <USBH_ParseDevDesc+0xb8>
 8007dbe:	e001      	b.n	8007dc4 <USBH_ParseDevDesc+0xb0>
 8007dc0:	2b40      	cmp	r3, #64	; 0x40
 8007dc2:	d003      	beq.n	8007dcc <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	71da      	strb	r2, [r3, #7]
        break;
 8007dca:	e000      	b.n	8007dce <USBH_ParseDevDesc+0xba>
        break;
 8007dcc:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007dce:	e00e      	b.n	8007dee <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d107      	bne.n	8007dea <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	79db      	ldrb	r3, [r3, #7]
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d005      	beq.n	8007dee <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	2208      	movs	r2, #8
 8007de6:	71da      	strb	r2, [r3, #7]
 8007de8:	e001      	b.n	8007dee <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007dea:	2303      	movs	r3, #3
 8007dec:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007dee:	88fb      	ldrh	r3, [r7, #6]
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d939      	bls.n	8007e68 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	3308      	adds	r3, #8
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	3309      	adds	r3, #9
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	330a      	adds	r3, #10
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	330b      	adds	r3, #11
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	4313      	orrs	r3, r2
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	330d      	adds	r3, #13
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	7b9a      	ldrb	r2, [r3, #14]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	7bda      	ldrb	r2, [r3, #15]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	7c1a      	ldrb	r2, [r3, #16]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	7c5a      	ldrb	r2, [r3, #17]
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	01000101 	.word	0x01000101

08007e7c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08c      	sub	sp, #48	; 0x30
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e90:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e0db      	b.n	8008066 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	781a      	ldrb	r2, [r3, #0]
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	785a      	ldrb	r2, [r3, #1]
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3302      	adds	r3, #2
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	3303      	adds	r3, #3
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ede:	bf28      	it	cs
 8007ee0:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	791a      	ldrb	r2, [r3, #4]
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	795a      	ldrb	r2, [r3, #5]
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	799a      	ldrb	r2, [r3, #6]
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	79da      	ldrb	r2, [r3, #7]
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	7a1a      	ldrb	r2, [r3, #8]
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d002      	beq.n	8007f20 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	2209      	movs	r2, #9
 8007f1e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	f240 809d 	bls.w	8008062 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f28:	2309      	movs	r3, #9
 8007f2a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f30:	e081      	b.n	8008036 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f32:	f107 0316 	add.w	r3, r7, #22
 8007f36:	4619      	mov	r1, r3
 8007f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3a:	f000 f9e8 	bl	800830e <USBH_GetNextDesc>
 8007f3e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d176      	bne.n	8008036 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d002      	beq.n	8007f56 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	2209      	movs	r2, #9
 8007f54:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f5a:	221a      	movs	r2, #26
 8007f5c:	fb02 f303 	mul.w	r3, r2, r3
 8007f60:	3308      	adds	r3, #8
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	4413      	add	r3, r2
 8007f66:	3302      	adds	r3, #2
 8007f68:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f6c:	69f8      	ldr	r0, [r7, #28]
 8007f6e:	f000 f87e 	bl	800806e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f7c:	e043      	b.n	8008006 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f7e:	f107 0316 	add.w	r3, r7, #22
 8007f82:	4619      	mov	r1, r3
 8007f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f86:	f000 f9c2 	bl	800830e <USBH_GetNextDesc>
 8007f8a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	785b      	ldrb	r3, [r3, #1]
 8007f90:	2b05      	cmp	r3, #5
 8007f92:	d138      	bne.n	8008006 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	795b      	ldrb	r3, [r3, #5]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d113      	bne.n	8007fc4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d003      	beq.n	8007fac <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	799b      	ldrb	r3, [r3, #6]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d10b      	bne.n	8007fc4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	79db      	ldrb	r3, [r3, #7]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <USBH_ParseCfgDesc+0x150>
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b09      	cmp	r3, #9
 8007fba:	d007      	beq.n	8007fcc <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	2209      	movs	r2, #9
 8007fc0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fc2:	e003      	b.n	8007fcc <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e000      	b.n	8007fce <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fcc:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fd6:	3201      	adds	r2, #1
 8007fd8:	00d2      	lsls	r2, r2, #3
 8007fda:	211a      	movs	r1, #26
 8007fdc:	fb01 f303 	mul.w	r3, r1, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	6a3a      	ldr	r2, [r7, #32]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	3304      	adds	r3, #4
 8007fea:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fee:	69b9      	ldr	r1, [r7, #24]
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 f870 	bl	80080d6 <USBH_ParseEPDesc>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008000:	3301      	adds	r3, #1
 8008002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	791b      	ldrb	r3, [r3, #4]
 800800a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800800e:	429a      	cmp	r2, r3
 8008010:	d204      	bcs.n	800801c <USBH_ParseCfgDesc+0x1a0>
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	885a      	ldrh	r2, [r3, #2]
 8008016:	8afb      	ldrh	r3, [r7, #22]
 8008018:	429a      	cmp	r2, r3
 800801a:	d8b0      	bhi.n	8007f7e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	791b      	ldrb	r3, [r3, #4]
 8008020:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008024:	429a      	cmp	r2, r3
 8008026:	d201      	bcs.n	800802c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008028:	2303      	movs	r3, #3
 800802a:	e01c      	b.n	8008066 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800802c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008030:	3301      	adds	r3, #1
 8008032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800803a:	2b01      	cmp	r3, #1
 800803c:	d805      	bhi.n	800804a <USBH_ParseCfgDesc+0x1ce>
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	885a      	ldrh	r2, [r3, #2]
 8008042:	8afb      	ldrh	r3, [r7, #22]
 8008044:	429a      	cmp	r2, r3
 8008046:	f63f af74 	bhi.w	8007f32 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	791b      	ldrb	r3, [r3, #4]
 800804e:	2b02      	cmp	r3, #2
 8008050:	bf28      	it	cs
 8008052:	2302      	movcs	r3, #2
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800805a:	429a      	cmp	r2, r3
 800805c:	d201      	bcs.n	8008062 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800805e:	2303      	movs	r3, #3
 8008060:	e001      	b.n	8008066 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008066:	4618      	mov	r0, r3
 8008068:	3730      	adds	r7, #48	; 0x30
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781a      	ldrb	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	785a      	ldrb	r2, [r3, #1]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	789a      	ldrb	r2, [r3, #2]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	78da      	ldrb	r2, [r3, #3]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	3304      	adds	r3, #4
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	bf28      	it	cs
 80080a2:	2302      	movcs	r3, #2
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	795a      	ldrb	r2, [r3, #5]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	799a      	ldrb	r2, [r3, #6]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	79da      	ldrb	r2, [r3, #7]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	7a1a      	ldrb	r2, [r3, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	721a      	strb	r2, [r3, #8]
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b087      	sub	sp, #28
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	785a      	ldrb	r2, [r3, #1]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	789a      	ldrb	r2, [r3, #2]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	78da      	ldrb	r2, [r3, #3]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3304      	adds	r3, #4
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b29a      	uxth	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3305      	adds	r3, #5
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	b29b      	uxth	r3, r3
 800811a:	4313      	orrs	r3, r2
 800811c:	b29a      	uxth	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	799a      	ldrb	r2, [r3, #6]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	889b      	ldrh	r3, [r3, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d009      	beq.n	8008146 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813a:	d804      	bhi.n	8008146 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008144:	d901      	bls.n	800814a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8008146:	2303      	movs	r3, #3
 8008148:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008150:	2b00      	cmp	r3, #0
 8008152:	d136      	bne.n	80081c2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	78db      	ldrb	r3, [r3, #3]
 8008158:	f003 0303 	and.w	r3, r3, #3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d108      	bne.n	8008172 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	889b      	ldrh	r3, [r3, #4]
 8008164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008168:	f240 8097 	bls.w	800829a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800816c:	2303      	movs	r3, #3
 800816e:	75fb      	strb	r3, [r7, #23]
 8008170:	e093      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	78db      	ldrb	r3, [r3, #3]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	889b      	ldrh	r3, [r3, #4]
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	f240 8089 	bls.w	800829a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008188:	2303      	movs	r3, #3
 800818a:	75fb      	strb	r3, [r7, #23]
 800818c:	e085      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	78db      	ldrb	r3, [r3, #3]
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	2b01      	cmp	r3, #1
 8008198:	d005      	beq.n	80081a6 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	78db      	ldrb	r3, [r3, #3]
 800819e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d10a      	bne.n	80081bc <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	799b      	ldrb	r3, [r3, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <USBH_ParseEPDesc+0xe0>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	799b      	ldrb	r3, [r3, #6]
 80081b2:	2b10      	cmp	r3, #16
 80081b4:	d970      	bls.n	8008298 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081b6:	2303      	movs	r3, #3
 80081b8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081ba:	e06d      	b.n	8008298 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80081bc:	2303      	movs	r3, #3
 80081be:	75fb      	strb	r3, [r7, #23]
 80081c0:	e06b      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d13c      	bne.n	8008246 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	78db      	ldrb	r3, [r3, #3]
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d005      	beq.n	80081e4 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	78db      	ldrb	r3, [r3, #3]
 80081dc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	889b      	ldrh	r3, [r3, #4]
 80081e8:	2b40      	cmp	r3, #64	; 0x40
 80081ea:	d956      	bls.n	800829a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80081ec:	2303      	movs	r3, #3
 80081ee:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80081f0:	e053      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	78db      	ldrb	r3, [r3, #3]
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d10e      	bne.n	800821c <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	799b      	ldrb	r3, [r3, #6]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800820a:	2b10      	cmp	r3, #16
 800820c:	d803      	bhi.n	8008216 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008212:	2b40      	cmp	r3, #64	; 0x40
 8008214:	d941      	bls.n	800829a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008216:	2303      	movs	r3, #3
 8008218:	75fb      	strb	r3, [r7, #23]
 800821a:	e03e      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	78db      	ldrb	r3, [r3, #3]
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	2b03      	cmp	r3, #3
 8008226:	d10b      	bne.n	8008240 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	799b      	ldrb	r3, [r3, #6]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <USBH_ParseEPDesc+0x164>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	889b      	ldrh	r3, [r3, #4]
 8008234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008238:	d32f      	bcc.n	800829a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800823a:	2303      	movs	r3, #3
 800823c:	75fb      	strb	r3, [r7, #23]
 800823e:	e02c      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008240:	2303      	movs	r3, #3
 8008242:	75fb      	strb	r3, [r7, #23]
 8008244:	e029      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800824c:	2b02      	cmp	r3, #2
 800824e:	d120      	bne.n	8008292 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	78db      	ldrb	r3, [r3, #3]
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	889b      	ldrh	r3, [r3, #4]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d01a      	beq.n	800829a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008264:	2303      	movs	r3, #3
 8008266:	75fb      	strb	r3, [r7, #23]
 8008268:	e017      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	78db      	ldrb	r3, [r3, #3]
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b03      	cmp	r3, #3
 8008274:	d10a      	bne.n	800828c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	799b      	ldrb	r3, [r3, #6]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <USBH_ParseEPDesc+0x1b0>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	889b      	ldrh	r3, [r3, #4]
 8008282:	2b08      	cmp	r3, #8
 8008284:	d909      	bls.n	800829a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008286:	2303      	movs	r3, #3
 8008288:	75fb      	strb	r3, [r7, #23]
 800828a:	e006      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800828c:	2303      	movs	r3, #3
 800828e:	75fb      	strb	r3, [r7, #23]
 8008290:	e003      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008292:	2303      	movs	r3, #3
 8008294:	75fb      	strb	r3, [r7, #23]
 8008296:	e000      	b.n	800829a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008298:	bf00      	nop
  }

  return status;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
}
 800829c:	4618      	mov	r0, r3
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d120      	bne.n	8008302 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	1e9a      	subs	r2, r3, #2
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	bf28      	it	cs
 80082cc:	4613      	movcs	r3, r2
 80082ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3302      	adds	r3, #2
 80082d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80082d6:	2300      	movs	r3, #0
 80082d8:	82fb      	strh	r3, [r7, #22]
 80082da:	e00b      	b.n	80082f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80082dc:	8afb      	ldrh	r3, [r7, #22]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80082ee:	8afb      	ldrh	r3, [r7, #22]
 80082f0:	3302      	adds	r3, #2
 80082f2:	82fb      	strh	r3, [r7, #22]
 80082f4:	8afa      	ldrh	r2, [r7, #22]
 80082f6:	8abb      	ldrh	r3, [r7, #20]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d3ef      	bcc.n	80082dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
  }
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	881a      	ldrh	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	4413      	add	r3, r2
 8008324:	b29a      	uxth	r2, r3
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4413      	add	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008336:	68fb      	ldr	r3, [r7, #12]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008352:	2301      	movs	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	789b      	ldrb	r3, [r3, #2]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d002      	beq.n	8008364 <USBH_CtlReq+0x20>
 800835e:	2b02      	cmp	r3, #2
 8008360:	d00f      	beq.n	8008382 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008362:	e027      	b.n	80083b4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	88fa      	ldrh	r2, [r7, #6]
 800836e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2202      	movs	r2, #2
 800837a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800837c:	2301      	movs	r3, #1
 800837e:	75fb      	strb	r3, [r7, #23]
      break;
 8008380:	e018      	b.n	80083b4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 f81c 	bl	80083c0 <USBH_HandleControl>
 8008388:	4603      	mov	r3, r0
 800838a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <USBH_CtlReq+0x54>
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	2b03      	cmp	r3, #3
 8008396:	d106      	bne.n	80083a6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	761a      	strb	r2, [r3, #24]
      break;
 80083a4:	e005      	b.n	80083b2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d102      	bne.n	80083b2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	709a      	strb	r2, [r3, #2]
      break;
 80083b2:	bf00      	nop
  }
  return status;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	7e1b      	ldrb	r3, [r3, #24]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	2b0a      	cmp	r3, #10
 80083d8:	f200 8156 	bhi.w	8008688 <USBH_HandleControl+0x2c8>
 80083dc:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <USBH_HandleControl+0x24>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	08008411 	.word	0x08008411
 80083e8:	0800842b 	.word	0x0800842b
 80083ec:	08008495 	.word	0x08008495
 80083f0:	080084bb 	.word	0x080084bb
 80083f4:	080084f3 	.word	0x080084f3
 80083f8:	0800851d 	.word	0x0800851d
 80083fc:	0800856f 	.word	0x0800856f
 8008400:	08008591 	.word	0x08008591
 8008404:	080085cd 	.word	0x080085cd
 8008408:	080085f3 	.word	0x080085f3
 800840c:	08008631 	.word	0x08008631
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f103 0110 	add.w	r1, r3, #16
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	795b      	ldrb	r3, [r3, #5]
 800841a:	461a      	mov	r2, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f943 	bl	80086a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2202      	movs	r2, #2
 8008426:	761a      	strb	r2, [r3, #24]
      break;
 8008428:	e139      	b.n	800869e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	795b      	ldrb	r3, [r3, #5]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fcc5 	bl	8008dc0 <USBH_LL_GetURBState>
 8008436:	4603      	mov	r3, r0
 8008438:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d11e      	bne.n	800847e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	7c1b      	ldrb	r3, [r3, #16]
 8008444:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008448:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8adb      	ldrh	r3, [r3, #22]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00a      	beq.n	8008468 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008452:	7b7b      	ldrb	r3, [r7, #13]
 8008454:	2b80      	cmp	r3, #128	; 0x80
 8008456:	d103      	bne.n	8008460 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2203      	movs	r2, #3
 800845c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800845e:	e115      	b.n	800868c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2205      	movs	r2, #5
 8008464:	761a      	strb	r2, [r3, #24]
      break;
 8008466:	e111      	b.n	800868c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008468:	7b7b      	ldrb	r3, [r7, #13]
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d103      	bne.n	8008476 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2209      	movs	r2, #9
 8008472:	761a      	strb	r2, [r3, #24]
      break;
 8008474:	e10a      	b.n	800868c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2207      	movs	r2, #7
 800847a:	761a      	strb	r2, [r3, #24]
      break;
 800847c:	e106      	b.n	800868c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b04      	cmp	r3, #4
 8008482:	d003      	beq.n	800848c <USBH_HandleControl+0xcc>
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b02      	cmp	r3, #2
 8008488:	f040 8100 	bne.w	800868c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	220b      	movs	r2, #11
 8008490:	761a      	strb	r2, [r3, #24]
      break;
 8008492:	e0fb      	b.n	800868c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800849a:	b29a      	uxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6899      	ldr	r1, [r3, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	899a      	ldrh	r2, [r3, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	791b      	ldrb	r3, [r3, #4]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f93a 	bl	8008726 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2204      	movs	r2, #4
 80084b6:	761a      	strb	r2, [r3, #24]
      break;
 80084b8:	e0f1      	b.n	800869e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	791b      	ldrb	r3, [r3, #4]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fc7d 	bl	8008dc0 <USBH_LL_GetURBState>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d102      	bne.n	80084d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2209      	movs	r2, #9
 80084d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b05      	cmp	r3, #5
 80084da:	d102      	bne.n	80084e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80084dc:	2303      	movs	r3, #3
 80084de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084e0:	e0d6      	b.n	8008690 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	f040 80d3 	bne.w	8008690 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	220b      	movs	r2, #11
 80084ee:	761a      	strb	r2, [r3, #24]
      break;
 80084f0:	e0ce      	b.n	8008690 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6899      	ldr	r1, [r3, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	899a      	ldrh	r2, [r3, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	795b      	ldrb	r3, [r3, #5]
 80084fe:	2001      	movs	r0, #1
 8008500:	9000      	str	r0, [sp, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f8ea 	bl	80086dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2206      	movs	r2, #6
 8008518:	761a      	strb	r2, [r3, #24]
      break;
 800851a:	e0c0      	b.n	800869e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	795b      	ldrb	r3, [r3, #5]
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fc4c 	bl	8008dc0 <USBH_LL_GetURBState>
 8008528:	4603      	mov	r3, r0
 800852a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d103      	bne.n	800853a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2207      	movs	r2, #7
 8008536:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008538:	e0ac      	b.n	8008694 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b05      	cmp	r3, #5
 800853e:	d105      	bne.n	800854c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	220c      	movs	r2, #12
 8008544:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008546:	2303      	movs	r3, #3
 8008548:	73fb      	strb	r3, [r7, #15]
      break;
 800854a:	e0a3      	b.n	8008694 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d103      	bne.n	800855a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2205      	movs	r2, #5
 8008556:	761a      	strb	r2, [r3, #24]
      break;
 8008558:	e09c      	b.n	8008694 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b04      	cmp	r3, #4
 800855e:	f040 8099 	bne.w	8008694 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	220b      	movs	r2, #11
 8008566:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008568:	2302      	movs	r3, #2
 800856a:	73fb      	strb	r3, [r7, #15]
      break;
 800856c:	e092      	b.n	8008694 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	791b      	ldrb	r3, [r3, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	2100      	movs	r1, #0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8d5 	bl	8008726 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2208      	movs	r2, #8
 800858c:	761a      	strb	r2, [r3, #24]

      break;
 800858e:	e086      	b.n	800869e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	791b      	ldrb	r3, [r3, #4]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fc12 	bl	8008dc0 <USBH_LL_GetURBState>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d105      	bne.n	80085b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	220d      	movs	r2, #13
 80085aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085b0:	e072      	b.n	8008698 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d103      	bne.n	80085c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	220b      	movs	r2, #11
 80085bc:	761a      	strb	r2, [r3, #24]
      break;
 80085be:	e06b      	b.n	8008698 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b05      	cmp	r3, #5
 80085c4:	d168      	bne.n	8008698 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80085c6:	2303      	movs	r3, #3
 80085c8:	73fb      	strb	r3, [r7, #15]
      break;
 80085ca:	e065      	b.n	8008698 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	795b      	ldrb	r3, [r3, #5]
 80085d0:	2201      	movs	r2, #1
 80085d2:	9200      	str	r2, [sp, #0]
 80085d4:	2200      	movs	r2, #0
 80085d6:	2100      	movs	r1, #0
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f87f 	bl	80086dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	220a      	movs	r2, #10
 80085ee:	761a      	strb	r2, [r3, #24]
      break;
 80085f0:	e055      	b.n	800869e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	795b      	ldrb	r3, [r3, #5]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fbe1 	bl	8008dc0 <USBH_LL_GetURBState>
 80085fe:	4603      	mov	r3, r0
 8008600:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d105      	bne.n	8008614 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	220d      	movs	r2, #13
 8008610:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008612:	e043      	b.n	800869c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d103      	bne.n	8008622 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2209      	movs	r2, #9
 800861e:	761a      	strb	r2, [r3, #24]
      break;
 8008620:	e03c      	b.n	800869c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d139      	bne.n	800869c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	220b      	movs	r2, #11
 800862c:	761a      	strb	r2, [r3, #24]
      break;
 800862e:	e035      	b.n	800869c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7e5b      	ldrb	r3, [r3, #25]
 8008634:	3301      	adds	r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	765a      	strb	r2, [r3, #25]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7e5b      	ldrb	r3, [r3, #25]
 8008640:	2b02      	cmp	r3, #2
 8008642:	d806      	bhi.n	8008652 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008650:	e025      	b.n	800869e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008658:	2106      	movs	r1, #6
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	795b      	ldrb	r3, [r3, #5]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f90c 	bl	8008888 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	791b      	ldrb	r3, [r3, #4]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f906 	bl	8008888 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008682:	2302      	movs	r3, #2
 8008684:	73fb      	strb	r3, [r7, #15]
      break;
 8008686:	e00a      	b.n	800869e <USBH_HandleControl+0x2de>

    default:
      break;
 8008688:	bf00      	nop
 800868a:	e008      	b.n	800869e <USBH_HandleControl+0x2de>
      break;
 800868c:	bf00      	nop
 800868e:	e006      	b.n	800869e <USBH_HandleControl+0x2de>
      break;
 8008690:	bf00      	nop
 8008692:	e004      	b.n	800869e <USBH_HandleControl+0x2de>
      break;
 8008694:	bf00      	nop
 8008696:	e002      	b.n	800869e <USBH_HandleControl+0x2de>
      break;
 8008698:	bf00      	nop
 800869a:	e000      	b.n	800869e <USBH_HandleControl+0x2de>
      break;
 800869c:	bf00      	nop
  }

  return status;
 800869e:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af04      	add	r7, sp, #16
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086b6:	79f9      	ldrb	r1, [r7, #7]
 80086b8:	2300      	movs	r3, #0
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	2308      	movs	r3, #8
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	2300      	movs	r3, #0
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	2300      	movs	r3, #0
 80086ca:	2200      	movs	r2, #0
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fb46 	bl	8008d5e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af04      	add	r7, sp, #16
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4611      	mov	r1, r2
 80086e8:	461a      	mov	r2, r3
 80086ea:	460b      	mov	r3, r1
 80086ec:	80fb      	strh	r3, [r7, #6]
 80086ee:	4613      	mov	r3, r2
 80086f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008700:	7979      	ldrb	r1, [r7, #5]
 8008702:	7e3b      	ldrb	r3, [r7, #24]
 8008704:	9303      	str	r3, [sp, #12]
 8008706:	88fb      	ldrh	r3, [r7, #6]
 8008708:	9302      	str	r3, [sp, #8]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	2301      	movs	r3, #1
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	2300      	movs	r3, #0
 8008714:	2200      	movs	r2, #0
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fb21 	bl	8008d5e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b088      	sub	sp, #32
 800872a:	af04      	add	r7, sp, #16
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	4611      	mov	r1, r2
 8008732:	461a      	mov	r2, r3
 8008734:	460b      	mov	r3, r1
 8008736:	80fb      	strh	r3, [r7, #6]
 8008738:	4613      	mov	r3, r2
 800873a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800873c:	7979      	ldrb	r1, [r7, #5]
 800873e:	2300      	movs	r3, #0
 8008740:	9303      	str	r3, [sp, #12]
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	9302      	str	r3, [sp, #8]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	9301      	str	r3, [sp, #4]
 800874a:	2301      	movs	r3, #1
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	2300      	movs	r3, #0
 8008750:	2201      	movs	r2, #1
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 fb03 	bl	8008d5e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008758:	2300      	movs	r3, #0

}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b088      	sub	sp, #32
 8008766:	af04      	add	r7, sp, #16
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	4611      	mov	r1, r2
 800876e:	461a      	mov	r2, r3
 8008770:	460b      	mov	r3, r1
 8008772:	80fb      	strh	r3, [r7, #6]
 8008774:	4613      	mov	r3, r2
 8008776:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008786:	7979      	ldrb	r1, [r7, #5]
 8008788:	7e3b      	ldrb	r3, [r7, #24]
 800878a:	9303      	str	r3, [sp, #12]
 800878c:	88fb      	ldrh	r3, [r7, #6]
 800878e:	9302      	str	r3, [sp, #8]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	2301      	movs	r3, #1
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	2302      	movs	r3, #2
 800879a:	2200      	movs	r2, #0
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 fade 	bl	8008d5e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af04      	add	r7, sp, #16
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	4611      	mov	r1, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	460b      	mov	r3, r1
 80087bc:	80fb      	strh	r3, [r7, #6]
 80087be:	4613      	mov	r3, r2
 80087c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087c2:	7979      	ldrb	r1, [r7, #5]
 80087c4:	2300      	movs	r3, #0
 80087c6:	9303      	str	r3, [sp, #12]
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	2301      	movs	r3, #1
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	2302      	movs	r3, #2
 80087d6:	2201      	movs	r2, #1
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 fac0 	bl	8008d5e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af04      	add	r7, sp, #16
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	4608      	mov	r0, r1
 80087f2:	4611      	mov	r1, r2
 80087f4:	461a      	mov	r2, r3
 80087f6:	4603      	mov	r3, r0
 80087f8:	70fb      	strb	r3, [r7, #3]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70bb      	strb	r3, [r7, #2]
 80087fe:	4613      	mov	r3, r2
 8008800:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008802:	7878      	ldrb	r0, [r7, #1]
 8008804:	78ba      	ldrb	r2, [r7, #2]
 8008806:	78f9      	ldrb	r1, [r7, #3]
 8008808:	8b3b      	ldrh	r3, [r7, #24]
 800880a:	9302      	str	r3, [sp, #8]
 800880c:	7d3b      	ldrb	r3, [r7, #20]
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	7c3b      	ldrb	r3, [r7, #16]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4603      	mov	r3, r0
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa53 	bl	8008cc2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fa72 	bl	8008d20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f836 	bl	80088c4 <USBH_GetFreePipe>
 8008858:	4603      	mov	r3, r0
 800885a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800885c:	89fb      	ldrh	r3, [r7, #14]
 800885e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008862:	4293      	cmp	r3, r2
 8008864:	d00a      	beq.n	800887c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	89fb      	ldrh	r3, [r7, #14]
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	33e0      	adds	r3, #224	; 0xe0
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800887c:	89fb      	ldrh	r3, [r7, #14]
 800887e:	b2db      	uxtb	r3, r3
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d80d      	bhi.n	80088b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	33e0      	adds	r3, #224	; 0xe0
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	33e0      	adds	r3, #224	; 0xe0
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
 80088d4:	e00f      	b.n	80088f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	33e0      	adds	r3, #224	; 0xe0
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d102      	bne.n	80088f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	e007      	b.n	8008900 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	3301      	adds	r3, #1
 80088f4:	73fb      	strb	r3, [r7, #15]
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	2b0f      	cmp	r3, #15
 80088fa:	d9ec      	bls.n	80088d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80088fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008910:	2201      	movs	r2, #1
 8008912:	490e      	ldr	r1, [pc, #56]	; (800894c <MX_USB_HOST_Init+0x40>)
 8008914:	480e      	ldr	r0, [pc, #56]	; (8008950 <MX_USB_HOST_Init+0x44>)
 8008916:	f7fe fb05 	bl	8006f24 <USBH_Init>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008920:	f7f8 fbc1 	bl	80010a6 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008924:	490b      	ldr	r1, [pc, #44]	; (8008954 <MX_USB_HOST_Init+0x48>)
 8008926:	480a      	ldr	r0, [pc, #40]	; (8008950 <MX_USB_HOST_Init+0x44>)
 8008928:	f7fe fba9 	bl	800707e <USBH_RegisterClass>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008932:	f7f8 fbb8 	bl	80010a6 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008936:	4806      	ldr	r0, [pc, #24]	; (8008950 <MX_USB_HOST_Init+0x44>)
 8008938:	f7fe fc2d 	bl	8007196 <USBH_Start>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008942:	f7f8 fbb0 	bl	80010a6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008946:	bf00      	nop
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	0800896d 	.word	0x0800896d
 8008950:	2000f214 	.word	0x2000f214
 8008954:	20000020 	.word	0x20000020

08008958 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800895c:	4802      	ldr	r0, [pc, #8]	; (8008968 <MX_USB_HOST_Process+0x10>)
 800895e:	f7fe fc2b 	bl	80071b8 <USBH_Process>
}
 8008962:	bf00      	nop
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	2000f214 	.word	0x2000f214

0800896c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	3b01      	subs	r3, #1
 800897c:	2b04      	cmp	r3, #4
 800897e:	d819      	bhi.n	80089b4 <USBH_UserProcess+0x48>
 8008980:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <USBH_UserProcess+0x1c>)
 8008982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008986:	bf00      	nop
 8008988:	080089b5 	.word	0x080089b5
 800898c:	080089a5 	.word	0x080089a5
 8008990:	080089b5 	.word	0x080089b5
 8008994:	080089ad 	.word	0x080089ad
 8008998:	0800899d 	.word	0x0800899d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800899c:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <USBH_UserProcess+0x58>)
 800899e:	2203      	movs	r2, #3
 80089a0:	701a      	strb	r2, [r3, #0]
  break;
 80089a2:	e008      	b.n	80089b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <USBH_UserProcess+0x58>)
 80089a6:	2202      	movs	r2, #2
 80089a8:	701a      	strb	r2, [r3, #0]
  break;
 80089aa:	e004      	b.n	80089b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089ac:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <USBH_UserProcess+0x58>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	701a      	strb	r2, [r3, #0]
  break;
 80089b2:	e000      	b.n	80089b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80089b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	2000f5ec 	.word	0x2000f5ec

080089c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08a      	sub	sp, #40	; 0x28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	605a      	str	r2, [r3, #4]
 80089da:	609a      	str	r2, [r3, #8]
 80089dc:	60da      	str	r2, [r3, #12]
 80089de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089e8:	d147      	bne.n	8008a7a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089ea:	2300      	movs	r3, #0
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	4b25      	ldr	r3, [pc, #148]	; (8008a84 <HAL_HCD_MspInit+0xbc>)
 80089f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f2:	4a24      	ldr	r2, [pc, #144]	; (8008a84 <HAL_HCD_MspInit+0xbc>)
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	6313      	str	r3, [r2, #48]	; 0x30
 80089fa:	4b22      	ldr	r3, [pc, #136]	; (8008a84 <HAL_HCD_MspInit+0xbc>)
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	4619      	mov	r1, r3
 8008a1a:	481b      	ldr	r0, [pc, #108]	; (8008a88 <HAL_HCD_MspInit+0xc0>)
 8008a1c:	f7f8 ff1c 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a26:	2302      	movs	r3, #2
 8008a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a32:	230a      	movs	r3, #10
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a36:	f107 0314 	add.w	r3, r7, #20
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4812      	ldr	r0, [pc, #72]	; (8008a88 <HAL_HCD_MspInit+0xc0>)
 8008a3e:	f7f8 ff0b 	bl	8001858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a42:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <HAL_HCD_MspInit+0xbc>)
 8008a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a46:	4a0f      	ldr	r2, [pc, #60]	; (8008a84 <HAL_HCD_MspInit+0xbc>)
 8008a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4c:	6353      	str	r3, [r2, #52]	; 0x34
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <HAL_HCD_MspInit+0xbc>)
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	4a0b      	ldr	r2, [pc, #44]	; (8008a84 <HAL_HCD_MspInit+0xbc>)
 8008a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <HAL_HCD_MspInit+0xbc>)
 8008a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	2043      	movs	r0, #67	; 0x43
 8008a70:	f7f8 febb 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a74:	2043      	movs	r0, #67	; 0x43
 8008a76:	f7f8 fed4 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3728      	adds	r7, #40	; 0x28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40023800 	.word	0x40023800
 8008a88:	40020000 	.word	0x40020000

08008a8c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe ff6b 	bl	8007976 <USBH_LL_IncTimer>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe ffa3 	bl	8007a02 <USBH_LL_Connect>
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe ffac 	bl	8007a30 <USBH_LL_Disconnect>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
 8008aec:	4613      	mov	r3, r2
 8008aee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe ff5d 	bl	80079ca <USBH_LL_PortEnabled>
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe ff5d 	bl	80079e6 <USBH_LL_PortDisabled>
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d12a      	bne.n	8008b9c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b46:	4a18      	ldr	r2, [pc, #96]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a15      	ldr	r2, [pc, #84]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b52:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b56:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b5c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b5e:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b60:	2208      	movs	r2, #8
 8008b62:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b64:	4b10      	ldr	r3, [pc, #64]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b70:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b72:	2202      	movs	r2, #2
 8008b74:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b76:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b7c:	480a      	ldr	r0, [pc, #40]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b7e:	f7f9 f808 	bl	8001b92 <HAL_HCD_Init>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008b88:	f7f8 fa8d 	bl	80010a6 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008b8c:	4806      	ldr	r0, [pc, #24]	; (8008ba8 <USBH_LL_Init+0x74>)
 8008b8e:	f7f9 fc69 	bl	8002464 <HAL_HCD_GetCurrentFrame>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fe fede 	bl	8007958 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	2000f5f0 	.word	0x2000f5f0

08008bac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f9 fbd6 	bl	8002374 <HAL_HCD_Start>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f95e 	bl	8008e90 <USBH_Get_USB_Status>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7f9 fbde 	bl	80023ba <HAL_HCD_Stop>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 f943 	bl	8008e90 <USBH_Get_USB_Status>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c20:	2301      	movs	r3, #1
 8008c22:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7f9 fc28 	bl	8002480 <HAL_HCD_GetCurrentSpeed>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d00c      	beq.n	8008c50 <USBH_LL_GetSpeed+0x38>
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d80d      	bhi.n	8008c56 <USBH_LL_GetSpeed+0x3e>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <USBH_LL_GetSpeed+0x2c>
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d003      	beq.n	8008c4a <USBH_LL_GetSpeed+0x32>
 8008c42:	e008      	b.n	8008c56 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
    break;
 8008c48:	e008      	b.n	8008c5c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4e:	e005      	b.n	8008c5c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c50:	2302      	movs	r3, #2
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	e002      	b.n	8008c5c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008c56:	2301      	movs	r3, #1
 8008c58:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5a:	bf00      	nop
  }
  return  speed;
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7f9 fbb9 	bl	80023f4 <HAL_HCD_ResetPort>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 f901 	bl	8008e90 <USBH_Get_USB_Status>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7f9 fbc1 	bl	800243a <HAL_HCD_HC_GetXferCount>
 8008cb8:	4603      	mov	r3, r0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cc2:	b590      	push	{r4, r7, lr}
 8008cc4:	b089      	sub	sp, #36	; 0x24
 8008cc6:	af04      	add	r7, sp, #16
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	4608      	mov	r0, r1
 8008ccc:	4611      	mov	r1, r2
 8008cce:	461a      	mov	r2, r3
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	70fb      	strb	r3, [r7, #3]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70bb      	strb	r3, [r7, #2]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cea:	787c      	ldrb	r4, [r7, #1]
 8008cec:	78ba      	ldrb	r2, [r7, #2]
 8008cee:	78f9      	ldrb	r1, [r7, #3]
 8008cf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cf2:	9302      	str	r3, [sp, #8]
 8008cf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	4623      	mov	r3, r4
 8008d02:	f7f8 ffad 	bl	8001c60 <HAL_HCD_HC_Init>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f8bf 	bl	8008e90 <USBH_Get_USB_Status>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd90      	pop	{r4, r7, pc}

08008d20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d3a:	78fa      	ldrb	r2, [r7, #3]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f9 f846 	bl	8001dd0 <HAL_HCD_HC_Halt>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 f8a0 	bl	8008e90 <USBH_Get_USB_Status>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d5e:	b590      	push	{r4, r7, lr}
 8008d60:	b089      	sub	sp, #36	; 0x24
 8008d62:	af04      	add	r7, sp, #16
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	4608      	mov	r0, r1
 8008d68:	4611      	mov	r1, r2
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	70fb      	strb	r3, [r7, #3]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70bb      	strb	r3, [r7, #2]
 8008d74:	4613      	mov	r3, r2
 8008d76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d86:	787c      	ldrb	r4, [r7, #1]
 8008d88:	78ba      	ldrb	r2, [r7, #2]
 8008d8a:	78f9      	ldrb	r1, [r7, #3]
 8008d8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d90:	9303      	str	r3, [sp, #12]
 8008d92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d94:	9302      	str	r3, [sp, #8]
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4623      	mov	r3, r4
 8008da2:	f7f9 f839 	bl	8001e18 <HAL_HCD_HC_SubmitRequest>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 f86f 	bl	8008e90 <USBH_Get_USB_Status>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd90      	pop	{r4, r7, pc}

08008dc0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dd2:	78fa      	ldrb	r2, [r7, #3]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7f9 fb1a 	bl	8002410 <HAL_HCD_HC_GetURBState>
 8008ddc:	4603      	mov	r3, r0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	460b      	mov	r3, r1
 8008df0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d103      	bne.n	8008e04 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f872 	bl	8008ee8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e04:	20c8      	movs	r0, #200	; 0xc8
 8008e06:	f7f8 fbf1 	bl	80015ec <HAL_Delay>
  return USBH_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
 8008e20:	4613      	mov	r3, r2
 8008e22:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e2a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e2c:	78fa      	ldrb	r2, [r7, #3]
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	4613      	mov	r3, r2
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	3317      	adds	r3, #23
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	68f9      	ldr	r1, [r7, #12]
 8008e46:	4613      	mov	r3, r2
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	333c      	adds	r3, #60	; 0x3c
 8008e52:	78ba      	ldrb	r2, [r7, #2]
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	e009      	b.n	8008e6c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	440b      	add	r3, r1
 8008e66:	333d      	adds	r3, #61	; 0x3d
 8008e68:	78ba      	ldrb	r2, [r7, #2]
 8008e6a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7f8 fbb2 	bl	80015ec <HAL_Delay>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d817      	bhi.n	8008ed4 <USBH_Get_USB_Status+0x44>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <USBH_Get_USB_Status+0x1c>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ebd 	.word	0x08008ebd
 8008eb0:	08008ec3 	.word	0x08008ec3
 8008eb4:	08008ec9 	.word	0x08008ec9
 8008eb8:	08008ecf 	.word	0x08008ecf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec0:	e00b      	b.n	8008eda <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec6:	e008      	b.n	8008eda <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ecc:	e005      	b.n	8008eda <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed2:	e002      	b.n	8008eda <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed8:	bf00      	nop
  }
  return usb_status;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	e001      	b.n	8008f06 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008f02:	2301      	movs	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	4803      	ldr	r0, [pc, #12]	; (8008f1c <MX_DriverVbusFS+0x34>)
 8008f0e:	f7f8 fe27 	bl	8001b60 <HAL_GPIO_WritePin>
}
 8008f12:	bf00      	nop
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	40020800 	.word	0x40020800

08008f20 <malloc>:
 8008f20:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <malloc+0xc>)
 8008f22:	4601      	mov	r1, r0
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	f000 b82b 	b.w	8008f80 <_malloc_r>
 8008f2a:	bf00      	nop
 8008f2c:	2000008c 	.word	0x2000008c

08008f30 <free>:
 8008f30:	4b02      	ldr	r3, [pc, #8]	; (8008f3c <free+0xc>)
 8008f32:	4601      	mov	r1, r0
 8008f34:	6818      	ldr	r0, [r3, #0]
 8008f36:	f000 b8f3 	b.w	8009120 <_free_r>
 8008f3a:	bf00      	nop
 8008f3c:	2000008c 	.word	0x2000008c

08008f40 <sbrk_aligned>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	4e0e      	ldr	r6, [pc, #56]	; (8008f7c <sbrk_aligned+0x3c>)
 8008f44:	460c      	mov	r4, r1
 8008f46:	6831      	ldr	r1, [r6, #0]
 8008f48:	4605      	mov	r5, r0
 8008f4a:	b911      	cbnz	r1, 8008f52 <sbrk_aligned+0x12>
 8008f4c:	f000 f8ac 	bl	80090a8 <_sbrk_r>
 8008f50:	6030      	str	r0, [r6, #0]
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f8a7 	bl	80090a8 <_sbrk_r>
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	d00a      	beq.n	8008f74 <sbrk_aligned+0x34>
 8008f5e:	1cc4      	adds	r4, r0, #3
 8008f60:	f024 0403 	bic.w	r4, r4, #3
 8008f64:	42a0      	cmp	r0, r4
 8008f66:	d007      	beq.n	8008f78 <sbrk_aligned+0x38>
 8008f68:	1a21      	subs	r1, r4, r0
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f89c 	bl	80090a8 <_sbrk_r>
 8008f70:	3001      	adds	r0, #1
 8008f72:	d101      	bne.n	8008f78 <sbrk_aligned+0x38>
 8008f74:	f04f 34ff 	mov.w	r4, #4294967295
 8008f78:	4620      	mov	r0, r4
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	2000f9d4 	.word	0x2000f9d4

08008f80 <_malloc_r>:
 8008f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f84:	1ccd      	adds	r5, r1, #3
 8008f86:	f025 0503 	bic.w	r5, r5, #3
 8008f8a:	3508      	adds	r5, #8
 8008f8c:	2d0c      	cmp	r5, #12
 8008f8e:	bf38      	it	cc
 8008f90:	250c      	movcc	r5, #12
 8008f92:	2d00      	cmp	r5, #0
 8008f94:	4607      	mov	r7, r0
 8008f96:	db01      	blt.n	8008f9c <_malloc_r+0x1c>
 8008f98:	42a9      	cmp	r1, r5
 8008f9a:	d905      	bls.n	8008fa8 <_malloc_r+0x28>
 8008f9c:	230c      	movs	r3, #12
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	2600      	movs	r6, #0
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800907c <_malloc_r+0xfc>
 8008fac:	f000 f868 	bl	8009080 <__malloc_lock>
 8008fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb4:	461c      	mov	r4, r3
 8008fb6:	bb5c      	cbnz	r4, 8009010 <_malloc_r+0x90>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	4638      	mov	r0, r7
 8008fbc:	f7ff ffc0 	bl	8008f40 <sbrk_aligned>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	d155      	bne.n	8009072 <_malloc_r+0xf2>
 8008fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8008fca:	4626      	mov	r6, r4
 8008fcc:	2e00      	cmp	r6, #0
 8008fce:	d145      	bne.n	800905c <_malloc_r+0xdc>
 8008fd0:	2c00      	cmp	r4, #0
 8008fd2:	d048      	beq.n	8009066 <_malloc_r+0xe6>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4638      	mov	r0, r7
 8008fda:	eb04 0903 	add.w	r9, r4, r3
 8008fde:	f000 f863 	bl	80090a8 <_sbrk_r>
 8008fe2:	4581      	cmp	r9, r0
 8008fe4:	d13f      	bne.n	8009066 <_malloc_r+0xe6>
 8008fe6:	6821      	ldr	r1, [r4, #0]
 8008fe8:	1a6d      	subs	r5, r5, r1
 8008fea:	4629      	mov	r1, r5
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff ffa7 	bl	8008f40 <sbrk_aligned>
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d037      	beq.n	8009066 <_malloc_r+0xe6>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	442b      	add	r3, r5
 8008ffa:	6023      	str	r3, [r4, #0]
 8008ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d038      	beq.n	8009076 <_malloc_r+0xf6>
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	42a2      	cmp	r2, r4
 8009008:	d12b      	bne.n	8009062 <_malloc_r+0xe2>
 800900a:	2200      	movs	r2, #0
 800900c:	605a      	str	r2, [r3, #4]
 800900e:	e00f      	b.n	8009030 <_malloc_r+0xb0>
 8009010:	6822      	ldr	r2, [r4, #0]
 8009012:	1b52      	subs	r2, r2, r5
 8009014:	d41f      	bmi.n	8009056 <_malloc_r+0xd6>
 8009016:	2a0b      	cmp	r2, #11
 8009018:	d917      	bls.n	800904a <_malloc_r+0xca>
 800901a:	1961      	adds	r1, r4, r5
 800901c:	42a3      	cmp	r3, r4
 800901e:	6025      	str	r5, [r4, #0]
 8009020:	bf18      	it	ne
 8009022:	6059      	strne	r1, [r3, #4]
 8009024:	6863      	ldr	r3, [r4, #4]
 8009026:	bf08      	it	eq
 8009028:	f8c8 1000 	streq.w	r1, [r8]
 800902c:	5162      	str	r2, [r4, r5]
 800902e:	604b      	str	r3, [r1, #4]
 8009030:	4638      	mov	r0, r7
 8009032:	f104 060b 	add.w	r6, r4, #11
 8009036:	f000 f829 	bl	800908c <__malloc_unlock>
 800903a:	f026 0607 	bic.w	r6, r6, #7
 800903e:	1d23      	adds	r3, r4, #4
 8009040:	1af2      	subs	r2, r6, r3
 8009042:	d0ae      	beq.n	8008fa2 <_malloc_r+0x22>
 8009044:	1b9b      	subs	r3, r3, r6
 8009046:	50a3      	str	r3, [r4, r2]
 8009048:	e7ab      	b.n	8008fa2 <_malloc_r+0x22>
 800904a:	42a3      	cmp	r3, r4
 800904c:	6862      	ldr	r2, [r4, #4]
 800904e:	d1dd      	bne.n	800900c <_malloc_r+0x8c>
 8009050:	f8c8 2000 	str.w	r2, [r8]
 8009054:	e7ec      	b.n	8009030 <_malloc_r+0xb0>
 8009056:	4623      	mov	r3, r4
 8009058:	6864      	ldr	r4, [r4, #4]
 800905a:	e7ac      	b.n	8008fb6 <_malloc_r+0x36>
 800905c:	4634      	mov	r4, r6
 800905e:	6876      	ldr	r6, [r6, #4]
 8009060:	e7b4      	b.n	8008fcc <_malloc_r+0x4c>
 8009062:	4613      	mov	r3, r2
 8009064:	e7cc      	b.n	8009000 <_malloc_r+0x80>
 8009066:	230c      	movs	r3, #12
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	4638      	mov	r0, r7
 800906c:	f000 f80e 	bl	800908c <__malloc_unlock>
 8009070:	e797      	b.n	8008fa2 <_malloc_r+0x22>
 8009072:	6025      	str	r5, [r4, #0]
 8009074:	e7dc      	b.n	8009030 <_malloc_r+0xb0>
 8009076:	605b      	str	r3, [r3, #4]
 8009078:	deff      	udf	#255	; 0xff
 800907a:	bf00      	nop
 800907c:	2000f9d0 	.word	0x2000f9d0

08009080 <__malloc_lock>:
 8009080:	4801      	ldr	r0, [pc, #4]	; (8009088 <__malloc_lock+0x8>)
 8009082:	f000 b84b 	b.w	800911c <__retarget_lock_acquire_recursive>
 8009086:	bf00      	nop
 8009088:	2000fb14 	.word	0x2000fb14

0800908c <__malloc_unlock>:
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <__malloc_unlock+0x8>)
 800908e:	f000 b846 	b.w	800911e <__retarget_lock_release_recursive>
 8009092:	bf00      	nop
 8009094:	2000fb14 	.word	0x2000fb14

08009098 <memset>:
 8009098:	4402      	add	r2, r0
 800909a:	4603      	mov	r3, r0
 800909c:	4293      	cmp	r3, r2
 800909e:	d100      	bne.n	80090a2 <memset+0xa>
 80090a0:	4770      	bx	lr
 80090a2:	f803 1b01 	strb.w	r1, [r3], #1
 80090a6:	e7f9      	b.n	800909c <memset+0x4>

080090a8 <_sbrk_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d06      	ldr	r5, [pc, #24]	; (80090c4 <_sbrk_r+0x1c>)
 80090ac:	2300      	movs	r3, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	f7f8 f9b6 	bl	8001424 <_sbrk>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_sbrk_r+0x1a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_sbrk_r+0x1a>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	2000fb10 	.word	0x2000fb10

080090c8 <__errno>:
 80090c8:	4b01      	ldr	r3, [pc, #4]	; (80090d0 <__errno+0x8>)
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	2000008c 	.word	0x2000008c

080090d4 <__libc_init_array>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	4d0d      	ldr	r5, [pc, #52]	; (800910c <__libc_init_array+0x38>)
 80090d8:	4c0d      	ldr	r4, [pc, #52]	; (8009110 <__libc_init_array+0x3c>)
 80090da:	1b64      	subs	r4, r4, r5
 80090dc:	10a4      	asrs	r4, r4, #2
 80090de:	2600      	movs	r6, #0
 80090e0:	42a6      	cmp	r6, r4
 80090e2:	d109      	bne.n	80090f8 <__libc_init_array+0x24>
 80090e4:	4d0b      	ldr	r5, [pc, #44]	; (8009114 <__libc_init_array+0x40>)
 80090e6:	4c0c      	ldr	r4, [pc, #48]	; (8009118 <__libc_init_array+0x44>)
 80090e8:	f000 f866 	bl	80091b8 <_init>
 80090ec:	1b64      	subs	r4, r4, r5
 80090ee:	10a4      	asrs	r4, r4, #2
 80090f0:	2600      	movs	r6, #0
 80090f2:	42a6      	cmp	r6, r4
 80090f4:	d105      	bne.n	8009102 <__libc_init_array+0x2e>
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fc:	4798      	blx	r3
 80090fe:	3601      	adds	r6, #1
 8009100:	e7ee      	b.n	80090e0 <__libc_init_array+0xc>
 8009102:	f855 3b04 	ldr.w	r3, [r5], #4
 8009106:	4798      	blx	r3
 8009108:	3601      	adds	r6, #1
 800910a:	e7f2      	b.n	80090f2 <__libc_init_array+0x1e>
 800910c:	080091f4 	.word	0x080091f4
 8009110:	080091f4 	.word	0x080091f4
 8009114:	080091f4 	.word	0x080091f4
 8009118:	080091f8 	.word	0x080091f8

0800911c <__retarget_lock_acquire_recursive>:
 800911c:	4770      	bx	lr

0800911e <__retarget_lock_release_recursive>:
 800911e:	4770      	bx	lr

08009120 <_free_r>:
 8009120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009122:	2900      	cmp	r1, #0
 8009124:	d044      	beq.n	80091b0 <_free_r+0x90>
 8009126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800912a:	9001      	str	r0, [sp, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f1a1 0404 	sub.w	r4, r1, #4
 8009132:	bfb8      	it	lt
 8009134:	18e4      	addlt	r4, r4, r3
 8009136:	f7ff ffa3 	bl	8009080 <__malloc_lock>
 800913a:	4a1e      	ldr	r2, [pc, #120]	; (80091b4 <_free_r+0x94>)
 800913c:	9801      	ldr	r0, [sp, #4]
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	b933      	cbnz	r3, 8009150 <_free_r+0x30>
 8009142:	6063      	str	r3, [r4, #4]
 8009144:	6014      	str	r4, [r2, #0]
 8009146:	b003      	add	sp, #12
 8009148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800914c:	f7ff bf9e 	b.w	800908c <__malloc_unlock>
 8009150:	42a3      	cmp	r3, r4
 8009152:	d908      	bls.n	8009166 <_free_r+0x46>
 8009154:	6825      	ldr	r5, [r4, #0]
 8009156:	1961      	adds	r1, r4, r5
 8009158:	428b      	cmp	r3, r1
 800915a:	bf01      	itttt	eq
 800915c:	6819      	ldreq	r1, [r3, #0]
 800915e:	685b      	ldreq	r3, [r3, #4]
 8009160:	1949      	addeq	r1, r1, r5
 8009162:	6021      	streq	r1, [r4, #0]
 8009164:	e7ed      	b.n	8009142 <_free_r+0x22>
 8009166:	461a      	mov	r2, r3
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	b10b      	cbz	r3, 8009170 <_free_r+0x50>
 800916c:	42a3      	cmp	r3, r4
 800916e:	d9fa      	bls.n	8009166 <_free_r+0x46>
 8009170:	6811      	ldr	r1, [r2, #0]
 8009172:	1855      	adds	r5, r2, r1
 8009174:	42a5      	cmp	r5, r4
 8009176:	d10b      	bne.n	8009190 <_free_r+0x70>
 8009178:	6824      	ldr	r4, [r4, #0]
 800917a:	4421      	add	r1, r4
 800917c:	1854      	adds	r4, r2, r1
 800917e:	42a3      	cmp	r3, r4
 8009180:	6011      	str	r1, [r2, #0]
 8009182:	d1e0      	bne.n	8009146 <_free_r+0x26>
 8009184:	681c      	ldr	r4, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	6053      	str	r3, [r2, #4]
 800918a:	440c      	add	r4, r1
 800918c:	6014      	str	r4, [r2, #0]
 800918e:	e7da      	b.n	8009146 <_free_r+0x26>
 8009190:	d902      	bls.n	8009198 <_free_r+0x78>
 8009192:	230c      	movs	r3, #12
 8009194:	6003      	str	r3, [r0, #0]
 8009196:	e7d6      	b.n	8009146 <_free_r+0x26>
 8009198:	6825      	ldr	r5, [r4, #0]
 800919a:	1961      	adds	r1, r4, r5
 800919c:	428b      	cmp	r3, r1
 800919e:	bf04      	itt	eq
 80091a0:	6819      	ldreq	r1, [r3, #0]
 80091a2:	685b      	ldreq	r3, [r3, #4]
 80091a4:	6063      	str	r3, [r4, #4]
 80091a6:	bf04      	itt	eq
 80091a8:	1949      	addeq	r1, r1, r5
 80091aa:	6021      	streq	r1, [r4, #0]
 80091ac:	6054      	str	r4, [r2, #4]
 80091ae:	e7ca      	b.n	8009146 <_free_r+0x26>
 80091b0:	b003      	add	sp, #12
 80091b2:	bd30      	pop	{r4, r5, pc}
 80091b4:	2000f9d0 	.word	0x2000f9d0

080091b8 <_init>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr

080091c4 <_fini>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr
