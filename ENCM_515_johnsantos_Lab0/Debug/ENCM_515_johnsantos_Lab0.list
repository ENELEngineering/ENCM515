
ENCM_515_johnsantos_Lab0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009748  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080098e8  080098e8  000198e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009960  08009960  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009968  08009968  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800996c  0800996c  0001996c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000088  080099f8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  080099f8  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154df  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b72  00000000  00000000  000355da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00039150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db1  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f26  00000000  00000000  0003b109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018acc  00000000  00000000  0005502f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000905e9  00000000  00000000  0006dafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005258  00000000  00000000  000fe0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0010333c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080098d0 	.word	0x080098d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080098d0 	.word	0x080098d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fd0f 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f837 	bl	8000648 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f89d 	bl	8000718 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f97d 	bl	80008dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80005e2:	f000 f8b9 	bl	8000758 <MX_I2C1_Init>
  MX_I2S2_Init();
 80005e6:	f000 f8e5 	bl	80007b4 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005ea:	f000 f911 	bl	8000810 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ee:	f000 f93f 	bl	8000870 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005f2:	f007 ff1b 	bl	800842c <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (Loop >= 100) {
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <main+0x70>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b63      	cmp	r3, #99	; 0x63
 80005fc:	d902      	bls.n	8000604 <main+0x38>
		Loop = 0;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <main+0x70>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // Toggle LED
 8000604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <main+0x74>)
 800060a:	f001 f838 	bl	800167e <HAL_GPIO_TogglePin>
	HAL_Delay(1000); // Delay 1 second.
 800060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000612:	f000 fd61 	bl	80010d8 <HAL_Delay>

	// printf("\n The LED was toggled! \n\r"); // Debug print example.

	Loop += 1;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <main+0x70>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <main+0x70>)
 8000620:	701a      	strb	r2, [r3, #0]

	int result = test_assembly(4, 9);
 8000622:	2109      	movs	r1, #9
 8000624:	2004      	movs	r0, #4
 8000626:	f000 fa4f 	bl	8000ac8 <test_assembly>
 800062a:	6078      	str	r0, [r7, #4]
	printf("\n The result of test_assembly is: %d \n\r", result);
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <main+0x78>)
 8000630:	f008 fb84 	bl	8008d3c <iprintf>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000634:	f007 ff20 	bl	8008478 <MX_USB_HOST_Process>
  {
 8000638:	e7dd      	b.n	80005f6 <main+0x2a>
 800063a:	bf00      	nop
 800063c:	200001e0 	.word	0x200001e0
 8000640:	40020c00 	.word	0x40020c00
 8000644:	080098e8 	.word	0x080098e8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f008 fbc5 	bl	8008de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xc8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <SystemClock_Config+0xc8>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <SystemClock_Config+0xcc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xcc>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <SystemClock_Config+0xcc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006bc:	23c0      	movs	r3, #192	; 0xc0
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 feef 	bl	80044b0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 fa08 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2103      	movs	r1, #3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 f951 	bl	80049a0 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000704:	f000 f9f2 	bl	8000aec <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800072e:	2301      	movs	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000732:	23c8      	movs	r3, #200	; 0xc8
 8000734:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000736:	2305      	movs	r3, #5
 8000738:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4618      	mov	r0, r3
 8000742:	f004 fb39 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800074c:	f000 f9ce 	bl	8000aec <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f003 f8a7 	bl	80038e8 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f9a4 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000a4 	.word	0x200000a4
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2S2_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_I2S2_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2S2_Init+0x50>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2S2_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_I2S2_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_I2S2_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_I2S2_Init+0x50>)
 80007da:	4a0c      	ldr	r2, [pc, #48]	; (800080c <MX_I2S2_Init+0x58>)
 80007dc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2S2_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_I2S2_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2S2_Init+0x50>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2S2_Init+0x50>)
 80007f2:	f003 f9bd 	bl	8003b70 <HAL_I2S_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f976 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000f8 	.word	0x200000f8
 8000808:	40003800 	.word	0x40003800
 800080c:	00017700 	.word	0x00017700

08000810 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_I2S3_Init+0x54>)
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_I2S3_Init+0x58>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2S3_Init+0x54>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_I2S3_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_I2S3_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_I2S3_Init+0x54>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_I2S3_Init+0x54>)
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <MX_I2S3_Init+0x5c>)
 800083a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_I2S3_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_I2S3_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_I2S3_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2S3_Init+0x54>)
 8000850:	f003 f98e 	bl	8003b70 <HAL_I2S_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800085a:	f000 f947 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000140 	.word	0x20000140
 8000868:	40003c00 	.word	0x40003c00
 800086c:	00017700 	.word	0x00017700

08000870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_SPI1_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x64>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008bc:	220a      	movs	r2, #10
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_SPI1_Init+0x64>)
 80008c2:	f004 fbcb 	bl	800505c <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008cc:	f000 f90e 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000188 	.word	0x20000188
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b61      	ldr	r3, [pc, #388]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a60      	ldr	r2, [pc, #384]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b5e      	ldr	r3, [pc, #376]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b5a      	ldr	r3, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a59      	ldr	r2, [pc, #356]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b53      	ldr	r3, [pc, #332]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a52      	ldr	r2, [pc, #328]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b50      	ldr	r3, [pc, #320]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a4b      	ldr	r2, [pc, #300]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b45      	ldr	r3, [pc, #276]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a44      	ldr	r2, [pc, #272]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a3d      	ldr	r2, [pc, #244]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_GPIO_Init+0x1a0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2108      	movs	r1, #8
 800099e:	4838      	ldr	r0, [pc, #224]	; (8000a80 <MX_GPIO_Init+0x1a4>)
 80009a0:	f000 fe54 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2101      	movs	r1, #1
 80009a8:	4836      	ldr	r0, [pc, #216]	; (8000a84 <MX_GPIO_Init+0x1a8>)
 80009aa:	f000 fe4f 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ae:	2200      	movs	r2, #0
 80009b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009b4:	4834      	ldr	r0, [pc, #208]	; (8000a88 <MX_GPIO_Init+0x1ac>)
 80009b6:	f000 fe49 	bl	800164c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	482c      	ldr	r0, [pc, #176]	; (8000a80 <MX_GPIO_Init+0x1a4>)
 80009ce:	f000 fcb9 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4825      	ldr	r0, [pc, #148]	; (8000a80 <MX_GPIO_Init+0x1a4>)
 80009ea:	f000 fcab 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009ee:	2332      	movs	r3, #50	; 0x32
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481f      	ldr	r0, [pc, #124]	; (8000a80 <MX_GPIO_Init+0x1a4>)
 8000a04:	f000 fc9e 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4819      	ldr	r0, [pc, #100]	; (8000a84 <MX_GPIO_Init+0x1a8>)
 8000a20:	f000 fc90 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <MX_GPIO_Init+0x1b0>)
 8000a3a:	f000 fc83 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a42:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_GPIO_Init+0x1ac>)
 8000a58:	f000 fc74 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <MX_GPIO_Init+0x1ac>)
 8000a70:	f000 fc68 	bl	8001344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a74:	bf00      	nop
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40020000 	.word	0x40020000

08000a90 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char* ptr, int len) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e009      	b.n	8000ab6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	60ba      	str	r2, [r7, #8]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fd66 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbf1      	blt.n	8000aa2 <_write+0x12>
	}
	return len;
 8000abe:	687b      	ldr	r3, [r7, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <test_assembly>:

int test_assembly(int a, int b) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
	int res = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
	__asm volatile ("ADD %[result], %[input_i], %[input_b]"
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
	: [result] "=r" (res)
	: [input_i] "r" (a), [input_b] "r" (b)
	);
	return res;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fbc2 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12c      	bne.n	8000bc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <HAL_I2C_MspInit+0x8c>)
 8000ba4:	f000 fbce 	bl	8001344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a59      	ldr	r2, [pc, #356]	; (8000d5c <HAL_I2S_MspInit+0x184>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d15b      	bne.n	8000cb2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	4b58      	ldr	r3, [pc, #352]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a57      	ldr	r2, [pc, #348]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	4b51      	ldr	r3, [pc, #324]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a50      	ldr	r2, [pc, #320]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a49      	ldr	r2, [pc, #292]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	483e      	ldr	r0, [pc, #248]	; (8000d64 <HAL_I2S_MspInit+0x18c>)
 8000c6a:	f000 fb6b 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4836      	ldr	r0, [pc, #216]	; (8000d64 <HAL_I2S_MspInit+0x18c>)
 8000c8a:	f000 fb5b 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	482f      	ldr	r0, [pc, #188]	; (8000d68 <HAL_I2S_MspInit+0x190>)
 8000cac:	f000 fb4a 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cb0:	e04f      	b.n	8000d52 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <HAL_I2S_MspInit+0x194>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d14a      	bne.n	8000d52 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_I2S_MspInit+0x188>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d10:	2310      	movs	r3, #16
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d20:	2306      	movs	r3, #6
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <HAL_I2S_MspInit+0x198>)
 8000d2c:	f000 fb0a 	bl	8001344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d30:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d42:	2306      	movs	r3, #6
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_I2S_MspInit+0x18c>)
 8000d4e:	f000 faf9 	bl	8001344 <HAL_GPIO_Init>
}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40003800 	.word	0x40003800
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40003c00 	.word	0x40003c00
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_SPI_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dce:	23e0      	movs	r3, #224	; 0xe0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dde:	2305      	movs	r3, #5
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_SPI_MspInit+0x8c>)
 8000dea:	f000 faab 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f922 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <OTG_FS_IRQHandler+0x10>)
 8000e5e:	f000 ff09 	bl	8001c74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200005c8 	.word	0x200005c8

08000e6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
  }

  return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ece:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_isatty>:

int _isatty(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f007 ffb0 	bl	8008ea4 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20020000 	.word	0x20020000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	200001e4 	.word	0x200001e4
 8000f78:	20000af8 	.word	0x20000af8

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa4:	f7ff ffea 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fce:	f007 ff6f 	bl	8008eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fafb 	bl	80005cc <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000fe4:	08009970 	.word	0x08009970
  ldr r2, =_sbss
 8000fe8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000fec:	20000af4 	.word	0x20000af4

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f94f 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fd66 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f967 	bl	800132a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f92f 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	20000008 	.word	0x20000008
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	200001e8 	.word	0x200001e8

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200001e8 	.word	0x200001e8

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008

08001120 <__NVIC_SetPriorityGrouping>:
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff3e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff31 	bl	8001184 <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa2 	bl	800127c <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e159      	b.n	8001614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8148 	bne.w	800160e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80a2 	beq.w	800160e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a56      	ldr	r2, [pc, #344]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_GPIO_Init+0x2ec>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a49      	ldr	r2, [pc, #292]	; (8001634 <HAL_GPIO_Init+0x2f0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d019      	beq.n	8001546 <HAL_GPIO_Init+0x202>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a48      	ldr	r2, [pc, #288]	; (8001638 <HAL_GPIO_Init+0x2f4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x1fe>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_GPIO_Init+0x2f8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x1fa>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a46      	ldr	r2, [pc, #280]	; (8001640 <HAL_GPIO_Init+0x2fc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x1f6>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a45      	ldr	r2, [pc, #276]	; (8001644 <HAL_GPIO_Init+0x300>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x1f2>
 8001532:	2304      	movs	r3, #4
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001536:	2307      	movs	r3, #7
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x204>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x204>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001546:	2300      	movs	r3, #0
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x2ec>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <HAL_GPIO_Init+0x304>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015de:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_GPIO_Init+0x304>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f aea2 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800167e:	b480      	push	{r7}
 8001680:	b085      	sub	sp, #20
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001690:	887a      	ldrh	r2, [r7, #2]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	041a      	lsls	r2, r3, #16
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43d9      	mvns	r1, r3
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	400b      	ands	r3, r1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af02      	add	r7, sp, #8
 80016b8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e059      	b.n	8001778 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f006 ff02 	bl	80084e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f2:	d102      	bne.n	80016fa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fdaa 	bl	8005258 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7c1a      	ldrb	r2, [r3, #16]
 800170c:	f88d 2000 	strb.w	r2, [sp]
 8001710:	3304      	adds	r3, #4
 8001712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001714:	f003 fd2b 	bl	800516e <USB_CoreInit>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2202      	movs	r2, #2
 8001722:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e026      	b.n	8001778 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2101      	movs	r1, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f003 fda2 	bl	800527a <USB_SetCurrentMode>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e017      	b.n	8001778 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7c1a      	ldrb	r2, [r3, #16]
 8001750:	f88d 2000 	strb.w	r2, [sp]
 8001754:	3304      	adds	r3, #4
 8001756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001758:	f003 ff44 	bl	80055e4 <USB_HostInit>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e004      	b.n	8001778 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b08b      	sub	sp, #44	; 0x2c
 8001784:	af04      	add	r7, sp, #16
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	70fb      	strb	r3, [r7, #3]
 8001792:	460b      	mov	r3, r1
 8001794:	70bb      	strb	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800179a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800179c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_HCD_HC_Init+0x2c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e09d      	b.n	80018e8 <HAL_HCD_HC_Init+0x168>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3319      	adds	r3, #25
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3314      	adds	r3, #20
 80017d8:	787a      	ldrb	r2, [r7, #1]
 80017da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3315      	adds	r3, #21
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3326      	adds	r3, #38	; 0x26
 8001800:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001804:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	78bb      	ldrb	r3, [r7, #2]
 800180a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800180e:	b2d8      	uxtb	r0, r3
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3316      	adds	r3, #22
 800181e:	4602      	mov	r2, r0
 8001820:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fbc8 	bl	8001fbc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800182c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da0a      	bge.n	800184a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3317      	adds	r3, #23
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e009      	b.n	800185e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3317      	adds	r3, #23
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f004 f80c 	bl	8005880 <USB_GetHostSpeed>
 8001868:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800186a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800186e:	2b01      	cmp	r3, #1
 8001870:	d10b      	bne.n	800188a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001872:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_HCD_HC_Init+0x10a>
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d104      	bne.n	800188a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2bbc      	cmp	r3, #188	; 0xbc
 8001884:	d901      	bls.n	800188a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001886:	23bc      	movs	r3, #188	; 0xbc
 8001888:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3318      	adds	r3, #24
 800189a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800189e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	b298      	uxth	r0, r3
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3328      	adds	r3, #40	; 0x28
 80018b4:	4602      	mov	r2, r0
 80018b6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	787c      	ldrb	r4, [r7, #1]
 80018c2:	78ba      	ldrb	r2, [r7, #2]
 80018c4:	78f9      	ldrb	r1, [r7, #3]
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4623      	mov	r3, r4
 80018d6:	f003 fffb 	bl	80058d0 <USB_HC_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_HCD_HC_Halt+0x1e>
 800190a:	2302      	movs	r3, #2
 800190c:	e00f      	b.n	800192e <HAL_HCD_HC_Halt+0x3e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fb41 	bl	8005fa6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4603      	mov	r3, r0
 8001948:	70fb      	strb	r3, [r7, #3]
 800194a:	460b      	mov	r3, r1
 800194c:	70bb      	strb	r3, [r7, #2]
 800194e:	4613      	mov	r3, r2
 8001950:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3317      	adds	r3, #23
 8001962:	78ba      	ldrb	r2, [r7, #2]
 8001964:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3326      	adds	r3, #38	; 0x26
 8001976:	787a      	ldrb	r2, [r7, #1]
 8001978:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800197a:	7c3b      	ldrb	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d114      	bne.n	80019aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	332a      	adds	r3, #42	; 0x2a
 8001990:	2203      	movs	r2, #3
 8001992:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3319      	adds	r3, #25
 80019a4:	7f3a      	ldrb	r2, [r7, #28]
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e009      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	332a      	adds	r3, #42	; 0x2a
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019be:	787b      	ldrb	r3, [r7, #1]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	f200 8102 	bhi.w	8001bca <HAL_HCD_HC_SubmitRequest+0x292>
 80019c6:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	08001bb5 	.word	0x08001bb5
 80019d4:	08001aa1 	.word	0x08001aa1
 80019d8:	08001b2b 	.word	0x08001b2b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80019dc:	7c3b      	ldrb	r3, [r7, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80f5 	bne.w	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80019e4:	78bb      	ldrb	r3, [r7, #2]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d12d      	bne.n	8001a46 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80019ea:	8b3b      	ldrh	r3, [r7, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	333d      	adds	r3, #61	; 0x3d
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	333d      	adds	r3, #61	; 0x3d
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10a      	bne.n	8001a30 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	332a      	adds	r3, #42	; 0x2a
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a2e:	e0ce      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	332a      	adds	r3, #42	; 0x2a
 8001a40:	2202      	movs	r2, #2
 8001a42:	701a      	strb	r2, [r3, #0]
      break;
 8001a44:	e0c3      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	331a      	adds	r3, #26
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	f040 80b8 	bne.w	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	333c      	adds	r3, #60	; 0x3c
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	332a      	adds	r3, #42	; 0x2a
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
      break;
 8001a88:	e0a1      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	332a      	adds	r3, #42	; 0x2a
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	e096      	b.n	8001bce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001aa0:	78bb      	ldrb	r3, [r7, #2]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d120      	bne.n	8001ae8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	333d      	adds	r3, #61	; 0x3d
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	332a      	adds	r3, #42	; 0x2a
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ad0:	e07e      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	332a      	adds	r3, #42	; 0x2a
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	701a      	strb	r2, [r3, #0]
      break;
 8001ae6:	e073      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	333c      	adds	r3, #60	; 0x3c
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10a      	bne.n	8001b14 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afe:	78fa      	ldrb	r2, [r7, #3]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	332a      	adds	r3, #42	; 0x2a
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
      break;
 8001b12:	e05d      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	332a      	adds	r3, #42	; 0x2a
 8001b24:	2202      	movs	r2, #2
 8001b26:	701a      	strb	r2, [r3, #0]
      break;
 8001b28:	e052      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d120      	bne.n	8001b72 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	333d      	adds	r3, #61	; 0x3d
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	332a      	adds	r3, #42	; 0x2a
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b5a:	e039      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	332a      	adds	r3, #42	; 0x2a
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	701a      	strb	r2, [r3, #0]
      break;
 8001b70:	e02e      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	333c      	adds	r3, #60	; 0x3c
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	332a      	adds	r3, #42	; 0x2a
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
      break;
 8001b9c:	e018      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b9e:	78fa      	ldrb	r2, [r7, #3]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	332a      	adds	r3, #42	; 0x2a
 8001bae:	2202      	movs	r2, #2
 8001bb0:	701a      	strb	r2, [r3, #0]
      break;
 8001bb2:	e00d      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	332a      	adds	r3, #42	; 0x2a
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
      break;
 8001bc8:	e002      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001bca:	bf00      	nop
 8001bcc:	e000      	b.n	8001bd0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001bce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	332c      	adds	r3, #44	; 0x2c
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	8b39      	ldrh	r1, [r7, #24]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4403      	add	r3, r0
 8001bf4:	3334      	adds	r3, #52	; 0x34
 8001bf6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	334c      	adds	r3, #76	; 0x4c
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	3338      	adds	r3, #56	; 0x38
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3315      	adds	r3, #21
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	334d      	adds	r3, #77	; 0x4d
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3310      	adds	r3, #16
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	1d19      	adds	r1, r3, #4
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	799b      	ldrb	r3, [r3, #6]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f003 ff4a 	bl	8005afc <USB_HC_StartXfer>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop

08001c74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 fc6b 	bl	8005566 <USB_GetMode>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	f040 80fb 	bne.w	8001e8e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 fc2e 	bl	80054fe <USB_ReadInterrupts>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80f1 	beq.w	8001e8c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fc25 	bl	80054fe <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cbe:	d104      	bne.n	8001cca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fc15 	bl	80054fe <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cde:	d104      	bne.n	8001cea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fc05 	bl	80054fe <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cfe:	d104      	bne.n	8001d0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fbf5 	bl	80054fe <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d103      	bne.n	8001d26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fbe7 	bl	80054fe <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d3a:	d120      	bne.n	8001d7e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d113      	bne.n	8001d7e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d56:	2110      	movs	r1, #16
 8001d58:	6938      	ldr	r0, [r7, #16]
 8001d5a:	f003 fada 	bl	8005312 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d5e:	6938      	ldr	r0, [r7, #16]
 8001d60:	f003 fb09 	bl	8005376 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7a5b      	ldrb	r3, [r3, #9]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d105      	bne.n	8001d78 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fce4 	bl	8005740 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f006 fc33 	bl	80085e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fbbb 	bl	80054fe <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d92:	d102      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f001 fd33 	bl	8003800 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fbad 	bl	80054fe <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d106      	bne.n	8001dbc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f006 fbfc 	bl	80085ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2208      	movs	r2, #8
 8001dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fb9c 	bl	80054fe <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dd0:	d139      	bne.n	8001e46 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 f8d4 	bl	8005f84 <USB_HC_ReadInterrupt>
 8001ddc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e025      	b.n	8001e30 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d018      	beq.n	8001e2a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0e:	d106      	bne.n	8001e1e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f905 	bl	8002026 <HCD_HC_IN_IRQHandler>
 8001e1c:	e005      	b.n	8001e2a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4619      	mov	r1, r3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 ff67 	bl	8002cf8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	795b      	ldrb	r3, [r3, #5]
 8001e34:	461a      	mov	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d3d3      	bcc.n	8001de4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fb57 	bl	80054fe <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d101      	bne.n	8001e5e <HAL_HCD_IRQHandler+0x1ea>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_HCD_IRQHandler+0x1ec>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d014      	beq.n	8001e8e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0210 	bic.w	r2, r2, #16
 8001e72:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f001 fbe4 	bl	8003642 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0210 	orr.w	r2, r2, #16
 8001e88:	619a      	str	r2, [r3, #24]
 8001e8a:	e000      	b.n	8001e8e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001e8c:	bf00      	nop
    }
  }
}
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_HCD_Start+0x16>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e013      	b.n	8001ed2 <HAL_HCD_Start+0x3e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fca8 	bl	800580e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 f9b7 	bl	8005236 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_HCD_Stop+0x16>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e00d      	b.n	8001f0c <HAL_HCD_Stop+0x32>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 f972 	bl	80061e6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fc4a 	bl	80057ba <USB_ResetPort>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	334c      	adds	r3, #76	; 0x4c
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3338      	adds	r3, #56	; 0x38
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fc8c 	bl	80058ae <USB_GetCurrentFrame>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fc67 	bl	8005880 <USB_GetHostSpeed>
 8001fb2:	4603      	mov	r3, r0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	331a      	adds	r3, #26
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	331b      	adds	r3, #27
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3325      	adds	r3, #37	; 0x25
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3324      	adds	r3, #36	; 0x24
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fa6d 	bl	8005524 <USB_ReadChInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d11a      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	461a      	mov	r2, r3
 8002062:	2304      	movs	r3, #4
 8002064:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	334d      	adds	r3, #77	; 0x4d
 8002076:	2207      	movs	r2, #7
 8002078:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f003 ff8f 	bl	8005fa6 <USB_HC_Halt>
 8002088:	e09e      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fa46 	bl	8005524 <USB_ReadChInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a2:	d11b      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	461a      	mov	r2, r3
 80020b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	334d      	adds	r3, #77	; 0x4d
 80020c8:	2208      	movs	r2, #8
 80020ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 ff66 	bl	8005fa6 <USB_HC_Halt>
 80020da:	e075      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fa1d 	bl	8005524 <USB_ReadChInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d11a      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	461a      	mov	r2, r3
 8002102:	2308      	movs	r3, #8
 8002104:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	334d      	adds	r3, #77	; 0x4d
 8002116:	2206      	movs	r2, #6
 8002118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f003 ff3f 	bl	8005fa6 <USB_HC_Halt>
 8002128:	e04e      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f003 f9f6 	bl	8005524 <USB_ReadChInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d11b      	bne.n	800217c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002156:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	334d      	adds	r3, #77	; 0x4d
 8002168:	2209      	movs	r2, #9
 800216a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f003 ff16 	bl	8005fa6 <USB_HC_Halt>
 800217a:	e025      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f003 f9cd 	bl	8005524 <USB_ReadChInterrupts>
 800218a:	4603      	mov	r3, r0
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d119      	bne.n	80021c8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a0:	461a      	mov	r2, r3
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	334d      	adds	r3, #77	; 0x4d
 80021b6:	2207      	movs	r2, #7
 80021b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 feef 	bl	8005fa6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 f9a7 	bl	8005524 <USB_ReadChInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e0:	d112      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fedb 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	461a      	mov	r2, r3
 80021fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002202:	6093      	str	r3, [r2, #8]
 8002204:	f000 bd75 	b.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f003 f987 	bl	8005524 <USB_ReadChInterrupts>
 8002216:	4603      	mov	r3, r0
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	f040 8128 	bne.w	8002472 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	461a      	mov	r2, r3
 8002230:	2320      	movs	r3, #32
 8002232:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	331b      	adds	r3, #27
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d119      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	331b      	adds	r3, #27
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	0151      	lsls	r1, r2, #5
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	440a      	add	r2, r1
 8002274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	799b      	ldrb	r3, [r3, #6]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01b      	beq.n	80022be <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3330      	adds	r3, #48	; 0x30
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	1ac9      	subs	r1, r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4403      	add	r3, r0
 80022ba:	3338      	adds	r3, #56	; 0x38
 80022bc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	334d      	adds	r3, #77	; 0x4d
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3344      	adds	r3, #68	; 0x44
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3326      	adds	r3, #38	; 0x26
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3326      	adds	r3, #38	; 0x26
 800231e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002320:	2b02      	cmp	r3, #2
 8002322:	d110      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fe3a 	bl	8005fa6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	2310      	movs	r3, #16
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e03d      	b.n	80023c2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3326      	adds	r3, #38	; 0x26
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d00a      	beq.n	8002372 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3326      	adds	r3, #38	; 0x26
 800236c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800236e:	2b01      	cmp	r3, #1
 8002370:	d127      	bne.n	80023c2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	0151      	lsls	r1, r2, #5
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	440a      	add	r2, r1
 8002388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002390:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	334c      	adds	r3, #76	; 0x4c
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334c      	adds	r3, #76	; 0x4c
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	4619      	mov	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f006 f91f 	bl	8008600 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	799b      	ldrb	r3, [r3, #6]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d13b      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3338      	adds	r3, #56	; 0x38
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4403      	add	r3, r0
 80023ea:	3328      	adds	r3, #40	; 0x28
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	440b      	add	r3, r1
 80023f0:	1e59      	subs	r1, r3, #1
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4403      	add	r3, r0
 8002400:	3328      	adds	r3, #40	; 0x28
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	fbb1 f3f3 	udiv	r3, r1, r3
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8470 	beq.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	333c      	adds	r3, #60	; 0x3c
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	f083 0301 	eor.w	r3, r3, #1
 800242a:	b2d8      	uxtb	r0, r3
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	333c      	adds	r3, #60	; 0x3c
 800243a:	4602      	mov	r2, r0
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	f000 bc58 	b.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	333c      	adds	r3, #60	; 0x3c
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	f083 0301 	eor.w	r3, r3, #1
 800245a:	b2d8      	uxtb	r0, r3
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	333c      	adds	r3, #60	; 0x3c
 800246a:	4602      	mov	r2, r0
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	f000 bc40 	b.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f003 f852 	bl	8005524 <USB_ReadChInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d131      	bne.n	80024ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	461a      	mov	r2, r3
 8002498:	2320      	movs	r3, #32
 800249a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	331a      	adds	r3, #26
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	f040 841f 	bne.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	331b      	adds	r3, #27
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	334d      	adds	r3, #77	; 0x4d
 80024d8:	2203      	movs	r2, #3
 80024da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fd5e 	bl	8005fa6 <USB_HC_Halt>
 80024ea:	f000 bc02 	b.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 f814 	bl	8005524 <USB_ReadChInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b02      	cmp	r3, #2
 8002504:	f040 8305 	bne.w	8002b12 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2302      	movs	r3, #2
 8002518:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334d      	adds	r3, #77	; 0x4d
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d114      	bne.n	800255a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	334d      	adds	r3, #77	; 0x4d
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334c      	adds	r3, #76	; 0x4c
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e2cc      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	334d      	adds	r3, #77	; 0x4d
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d114      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334d      	adds	r3, #77	; 0x4d
 8002580:	2202      	movs	r2, #2
 8002582:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	334c      	adds	r3, #76	; 0x4c
 8002594:	2205      	movs	r2, #5
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e2ac      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	334d      	adds	r3, #77	; 0x4d
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b07      	cmp	r3, #7
 80025ae:	d00b      	beq.n	80025c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	334d      	adds	r3, #77	; 0x4d
 80025c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	f040 80a6 	bne.w	8002714 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	334d      	adds	r3, #77	; 0x4d
 80025d8:	2202      	movs	r2, #2
 80025da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3344      	adds	r3, #68	; 0x44
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	1c59      	adds	r1, r3, #1
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4403      	add	r3, r0
 80025fc:	3344      	adds	r3, #68	; 0x44
 80025fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3344      	adds	r3, #68	; 0x44
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d943      	bls.n	800269e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3344      	adds	r3, #68	; 0x44
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	331a      	adds	r3, #26
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d123      	bne.n	8002688 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	331b      	adds	r3, #27
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	331c      	adds	r3, #28
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	440a      	add	r2, r1
 800267e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	; 0x4c
 8002698:	2204      	movs	r2, #4
 800269a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800269c:	e229      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334c      	adds	r3, #76	; 0x4c
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3326      	adds	r3, #38	; 0x26
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	; 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026da:	2b02      	cmp	r3, #2
 80026dc:	f040 8209 	bne.w	8002af2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002712:	e1ee      	b.n	8002af2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	; 0x4d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b05      	cmp	r3, #5
 8002728:	f040 80c8 	bne.w	80028bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	; 0x4d
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	331b      	adds	r3, #27
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 81ce 	bne.w	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3326      	adds	r3, #38	; 0x26
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d16b      	bne.n	8002846 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3348      	adds	r3, #72	; 0x48
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1c59      	adds	r1, r3, #1
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4403      	add	r3, r0
 800278e:	3348      	adds	r3, #72	; 0x48
 8002790:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3348      	adds	r3, #72	; 0x48
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d943      	bls.n	8002830 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3348      	adds	r3, #72	; 0x48
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	331b      	adds	r3, #27
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3344      	adds	r3, #68	; 0x44
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d809      	bhi.n	80027fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	331c      	adds	r3, #28
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	0151      	lsls	r1, r2, #5
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	440a      	add	r2, r1
 8002810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002818:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	334c      	adds	r3, #76	; 0x4c
 800282a:	2204      	movs	r2, #4
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e014      	b.n	800285a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	334c      	adds	r3, #76	; 0x4c
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e009      	b.n	800285a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	334c      	adds	r3, #76	; 0x4c
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3326      	adds	r3, #38	; 0x26
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	3326      	adds	r3, #38	; 0x26
 8002880:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002882:	2b02      	cmp	r3, #2
 8002884:	f040 8136 	bne.w	8002af4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800289e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e11b      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	334d      	adds	r3, #77	; 0x4d
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	f040 8081 	bne.w	80029d6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334d      	adds	r3, #77	; 0x4d
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	331b      	adds	r3, #27
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	f040 80fa 	bne.w	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334c      	adds	r3, #76	; 0x4c
 8002910:	2202      	movs	r2, #2
 8002912:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	0151      	lsls	r1, r2, #5
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	440a      	add	r2, r1
 800292a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002932:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	0151      	lsls	r1, r2, #5
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	440a      	add	r2, r1
 800294a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002952:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	0151      	lsls	r1, r2, #5
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296e:	f023 0320 	bic.w	r3, r3, #32
 8002972:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3326      	adds	r3, #38	; 0x26
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3326      	adds	r3, #38	; 0x26
 800299a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800299c:	2b02      	cmp	r3, #2
 800299e:	f040 80a9 	bne.w	8002af4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e08e      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	334d      	adds	r3, #77	; 0x4d
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d143      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	334d      	adds	r3, #77	; 0x4d
 80029fc:	2202      	movs	r2, #2
 80029fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	334c      	adds	r3, #76	; 0x4c
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3326      	adds	r3, #38	; 0x26
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3326      	adds	r3, #38	; 0x26
 8002a3a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d159      	bne.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a56:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a5e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e03f      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	334d      	adds	r3, #77	; 0x4d
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d126      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	334d      	adds	r3, #77	; 0x4d
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3344      	adds	r3, #68	; 0x44
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c59      	adds	r1, r3, #1
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4403      	add	r3, r0
 8002abe:	3344      	adds	r3, #68	; 0x44
 8002ac0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	334c      	adds	r3, #76	; 0x4c
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e00d      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334d      	adds	r3, #77	; 0x4d
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	f000 8100 	beq.w	8002cf0 <HCD_HC_IN_IRQHandler+0xcca>
 8002af0:	e000      	b.n	8002af4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002af2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334c      	adds	r3, #76	; 0x4c
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f005 fd78 	bl	8008600 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b10:	e0ef      	b.n	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fd02 	bl	8005524 <USB_ReadChInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d12f      	bne.n	8002b8a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	2340      	movs	r3, #64	; 0x40
 8002b3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	334d      	adds	r3, #77	; 0x4d
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	331a      	adds	r3, #26
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	3344      	adds	r3, #68	; 0x44
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 fa0f 	bl	8005fa6 <USB_HC_Halt>
 8002b88:	e0b3      	b.n	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f002 fcc6 	bl	8005524 <USB_ReadChInterrupts>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	f040 80a7 	bne.w	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3326      	adds	r3, #38	; 0x26
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d11b      	bne.n	8002bf2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3344      	adds	r3, #68	; 0x44
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	334d      	adds	r3, #77	; 0x4d
 8002bde:	2204      	movs	r2, #4
 8002be0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 f9db 	bl	8005fa6 <USB_HC_Halt>
 8002bf0:	e03f      	b.n	8002c72 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3326      	adds	r3, #38	; 0x26
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3326      	adds	r3, #38	; 0x26
 8002c18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d129      	bne.n	8002c72 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3344      	adds	r3, #68	; 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	799b      	ldrb	r3, [r3, #6]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	331b      	adds	r3, #27
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d110      	bne.n	8002c72 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334d      	adds	r3, #77	; 0x4d
 8002c60:	2204      	movs	r2, #4
 8002c62:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 f99a 	bl	8005fa6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	331b      	adds	r3, #27
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d129      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	331b      	adds	r3, #27
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	0151      	lsls	r1, r2, #5
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	440a      	add	r2, r1
 8002cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	0151      	lsls	r1, r2, #5
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
 8002cda:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2310      	movs	r3, #16
 8002cec:	6093      	str	r3, [r2, #8]
 8002cee:	e000      	b.n	8002cf2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002cf0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 fc04 	bl	8005524 <USB_ReadChInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d11b      	bne.n	8002d5e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	2304      	movs	r3, #4
 8002d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	334d      	adds	r3, #77	; 0x4d
 8002d48:	2207      	movs	r2, #7
 8002d4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 f926 	bl	8005fa6 <USB_HC_Halt>
 8002d5a:	f000 bc6f 	b.w	800363c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fbdc 	bl	8005524 <USB_ReadChInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	f040 8082 	bne.w	8002e7c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	461a      	mov	r2, r3
 8002d86:	2320      	movs	r3, #32
 8002d88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3319      	adds	r3, #25
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d124      	bne.n	8002dea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3319      	adds	r3, #25
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334c      	adds	r3, #76	; 0x4c
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	334d      	adds	r3, #77	; 0x4d
 8002dd8:	2203      	movs	r2, #3
 8002dda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f003 f8de 	bl	8005fa6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	331a      	adds	r3, #26
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	f040 841d 	bne.w	800363c <HCD_HC_OUT_IRQHandler+0x944>
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	331b      	adds	r3, #27
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 8411 	bne.w	800363c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3326      	adds	r3, #38	; 0x26
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d009      	beq.n	8002e44 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	331b      	adds	r3, #27
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334d      	adds	r3, #77	; 0x4d
 8002e54:	2203      	movs	r2, #3
 8002e56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f003 f8a0 	bl	8005fa6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3344      	adds	r3, #68	; 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e3df      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 fb4d 	bl	8005524 <USB_ReadChInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e94:	d111      	bne.n	8002eba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 f877 	bl	8005fa6 <USB_HC_Halt>
 8002eb8:	e3c0      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f002 fb2e 	bl	8005524 <USB_ReadChInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d168      	bne.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3344      	adds	r3, #68	; 0x44
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fb18 	bl	8005524 <USB_ReadChInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d112      	bne.n	8002f24 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3319      	adds	r3, #25
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2340      	movs	r3, #64	; 0x40
 8002f22:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	331b      	adds	r3, #27
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d019      	beq.n	8002f6e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	331b      	adds	r3, #27
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	0151      	lsls	r1, r2, #5
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	440a      	add	r2, r1
 8002f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334d      	adds	r3, #77	; 0x4d
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 f802 	bl	8005fa6 <USB_HC_Halt>
 8002fa2:	e34b      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 fab9 	bl	8005524 <USB_ReadChInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d139      	bne.n	8003030 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	334d      	adds	r3, #77	; 0x4d
 8002fcc:	2205      	movs	r2, #5
 8002fce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	331a      	adds	r3, #26
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3319      	adds	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3344      	adds	r3, #68	; 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f002 ffc5 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2340      	movs	r3, #64	; 0x40
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e305      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f002 fa73 	bl	8005524 <USB_ReadChInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d11a      	bne.n	800307e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2308      	movs	r3, #8
 8003058:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	334d      	adds	r3, #77	; 0x4d
 800306a:	2206      	movs	r2, #6
 800306c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f002 ff95 	bl	8005fa6 <USB_HC_Halt>
 800307c:	e2de      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f002 fa4c 	bl	8005524 <USB_ReadChInterrupts>
 800308c:	4603      	mov	r3, r0
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b10      	cmp	r3, #16
 8003094:	d144      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3344      	adds	r3, #68	; 0x44
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334d      	adds	r3, #77	; 0x4d
 80030ba:	2204      	movs	r2, #4
 80030bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3319      	adds	r3, #25
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d114      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3318      	adds	r3, #24
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3319      	adds	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f002 ff4d 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2310      	movs	r3, #16
 800311c:	6093      	str	r3, [r2, #8]
 800311e:	e28d      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f002 f9fb 	bl	8005524 <USB_ReadChInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d169      	bne.n	800320c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	799b      	ldrb	r3, [r3, #6]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	334d      	adds	r3, #77	; 0x4d
 8003150:	2207      	movs	r2, #7
 8003152:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f002 ff22 	bl	8005fa6 <USB_HC_Halt>
 8003162:	e049      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3344      	adds	r3, #68	; 0x44
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4403      	add	r3, r0
 8003184:	3344      	adds	r3, #68	; 0x44
 8003186:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3344      	adds	r3, #68	; 0x44
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d922      	bls.n	80031e4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3344      	adds	r3, #68	; 0x44
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	334c      	adds	r3, #76	; 0x4c
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	334c      	adds	r3, #76	; 0x4c
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f005 fa0f 	bl	8008600 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031e2:	e009      	b.n	80031f8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	334c      	adds	r3, #76	; 0x4c
 80031f4:	2202      	movs	r2, #2
 80031f6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	461a      	mov	r2, r3
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	6093      	str	r3, [r2, #8]
 800320a:	e217      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f002 f985 	bl	8005524 <USB_ReadChInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003224:	d11b      	bne.n	800325e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	334d      	adds	r3, #77	; 0x4d
 8003236:	2209      	movs	r2, #9
 8003238:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f002 feaf 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e1ee      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f002 f95c 	bl	8005524 <USB_ReadChInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	f040 81df 	bne.w	8003636 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	461a      	mov	r2, r3
 8003286:	2302      	movs	r3, #2
 8003288:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	334d      	adds	r3, #77	; 0x4d
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	f040 8093 	bne.w	80033c8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334d      	adds	r3, #77	; 0x4d
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	334c      	adds	r3, #76	; 0x4c
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	3326      	adds	r3, #38	; 0x26
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d00b      	beq.n	80032f8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3326      	adds	r3, #38	; 0x26
 80032f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	f040 8190 	bne.w	8003618 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	799b      	ldrb	r3, [r3, #6]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d115      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	333d      	adds	r3, #61	; 0x3d
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2d8      	uxtb	r0, r3
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	333d      	adds	r3, #61	; 0x3d
 8003328:	4602      	mov	r2, r0
 800332a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	799b      	ldrb	r3, [r3, #6]
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 8171 	bne.w	8003618 <HCD_HC_OUT_IRQHandler+0x920>
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3334      	adds	r3, #52	; 0x34
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8165 	beq.w	8003618 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3334      	adds	r3, #52	; 0x34
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	3328      	adds	r3, #40	; 0x28
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	440b      	add	r3, r1
 8003374:	1e59      	subs	r1, r3, #1
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4403      	add	r3, r0
 8003384:	3328      	adds	r3, #40	; 0x28
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	fbb1 f3f3 	udiv	r3, r1, r3
 800338c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 813f 	beq.w	8003618 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	333d      	adds	r3, #61	; 0x3d
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	f083 0301 	eor.w	r3, r3, #1
 80033b2:	b2d8      	uxtb	r0, r3
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	333d      	adds	r3, #61	; 0x3d
 80033c2:	4602      	mov	r2, r0
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e127      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	334d      	adds	r3, #77	; 0x4d
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d120      	bne.n	8003420 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	334d      	adds	r3, #77	; 0x4d
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	331b      	adds	r3, #27
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	f040 8107 	bne.w	8003618 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	334c      	adds	r3, #76	; 0x4c
 800341a:	2202      	movs	r2, #2
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e0fb      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	334d      	adds	r3, #77	; 0x4d
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d13a      	bne.n	80034ac <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	334d      	adds	r3, #77	; 0x4d
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334c      	adds	r3, #76	; 0x4c
 800345a:	2202      	movs	r2, #2
 800345c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	331b      	adds	r3, #27
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	f040 80d1 	bne.w	8003618 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	331b      	adds	r3, #27
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	0151      	lsls	r1, r2, #5
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	440a      	add	r2, r1
 80034a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a8:	6053      	str	r3, [r2, #4]
 80034aa:	e0b5      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	334d      	adds	r3, #77	; 0x4d
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b05      	cmp	r3, #5
 80034c0:	d114      	bne.n	80034ec <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334d      	adds	r3, #77	; 0x4d
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	334c      	adds	r3, #76	; 0x4c
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e095      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334d      	adds	r3, #77	; 0x4d
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d114      	bne.n	800352c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	334d      	adds	r3, #77	; 0x4d
 8003512:	2202      	movs	r2, #2
 8003514:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334c      	adds	r3, #76	; 0x4c
 8003526:	2205      	movs	r2, #5
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e075      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	334d      	adds	r3, #77	; 0x4d
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b07      	cmp	r3, #7
 8003540:	d00a      	beq.n	8003558 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	334d      	adds	r3, #77	; 0x4d
 8003552:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003554:	2b09      	cmp	r3, #9
 8003556:	d170      	bne.n	800363a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	334d      	adds	r3, #77	; 0x4d
 8003568:	2202      	movs	r2, #2
 800356a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3344      	adds	r3, #68	; 0x44
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4403      	add	r3, r0
 800358c:	3344      	adds	r3, #68	; 0x44
 800358e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3344      	adds	r3, #68	; 0x44
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d914      	bls.n	80035d0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3344      	adds	r3, #68	; 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	334c      	adds	r3, #76	; 0x4c
 80035ca:	2204      	movs	r2, #4
 80035cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035ce:	e022      	b.n	8003616 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334c      	adds	r3, #76	; 0x4c
 80035e0:	2202      	movs	r2, #2
 80035e2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003602:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003610:	461a      	mov	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003616:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334c      	adds	r3, #76	; 0x4c
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f004 ffe6 	bl	8008600 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003634:	e002      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800363a:	bf00      	nop
  }
}
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b08a      	sub	sp, #40	; 0x28
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	0c5b      	lsrs	r3, r3, #17
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003676:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d004      	beq.n	8003688 <HCD_RXQLVL_IRQHandler+0x46>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b05      	cmp	r3, #5
 8003682:	f000 80b6 	beq.w	80037f2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003686:	e0b7      	b.n	80037f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80b3 	beq.w	80037f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	332c      	adds	r3, #44	; 0x2c
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80a7 	beq.w	80037f6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3338      	adds	r3, #56	; 0x38
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	18d1      	adds	r1, r2, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4403      	add	r3, r0
 80036cc:	3334      	adds	r3, #52	; 0x34
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4299      	cmp	r1, r3
 80036d2:	f200 8083 	bhi.w	80037dc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	332c      	adds	r3, #44	; 0x2c
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	b292      	uxth	r2, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	f001 feac 	bl	800544e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	332c      	adds	r3, #44	; 0x2c
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	18d1      	adds	r1, r2, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4403      	add	r3, r0
 800371a:	332c      	adds	r3, #44	; 0x2c
 800371c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3338      	adds	r3, #56	; 0x38
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	18d1      	adds	r1, r2, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4403      	add	r3, r0
 8003742:	3338      	adds	r3, #56	; 0x38
 8003744:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	0cdb      	lsrs	r3, r3, #19
 8003756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3328      	adds	r3, #40	; 0x28
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4293      	cmp	r3, r2
 8003774:	d13f      	bne.n	80037f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d03c      	beq.n	80037f6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003792:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800379a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	333c      	adds	r3, #60	; 0x3c
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2d8      	uxtb	r0, r3
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	333c      	adds	r3, #60	; 0x3c
 80037d6:	4602      	mov	r2, r0
 80037d8:	701a      	strb	r2, [r3, #0]
      break;
 80037da:	e00c      	b.n	80037f6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	334c      	adds	r3, #76	; 0x4c
 80037ec:	2204      	movs	r2, #4
 80037ee:	701a      	strb	r2, [r3, #0]
      break;
 80037f0:	e001      	b.n	80037f6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80037f6:	bf00      	nop
  }
}
 80037f8:	bf00      	nop
 80037fa:	3728      	adds	r7, #40	; 0x28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800382c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	d10b      	bne.n	8003850 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d102      	bne.n	8003848 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f004 fec0 	bl	80085c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f043 0302 	orr.w	r3, r3, #2
 800384e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b08      	cmp	r3, #8
 8003858:	d132      	bne.n	80038c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f043 0308 	orr.w	r3, r3, #8
 8003860:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d126      	bne.n	80038ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	7a5b      	ldrb	r3, [r3, #9]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d113      	bne.n	800389c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800387a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800387e:	d106      	bne.n	800388e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2102      	movs	r1, #2
 8003886:	4618      	mov	r0, r3
 8003888:	f001 ff5a 	bl	8005740 <USB_InitFSLSPClkSel>
 800388c:	e011      	b.n	80038b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f001 ff53 	bl	8005740 <USB_InitFSLSPClkSel>
 800389a:	e00a      	b.n	80038b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	79db      	ldrb	r3, [r3, #7]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d106      	bne.n	80038b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038aa:	461a      	mov	r2, r3
 80038ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f004 feb2 	bl	800861c <HAL_HCD_PortEnabled_Callback>
 80038b8:	e002      	b.n	80038c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f004 febc 	bl	8008638 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d103      	bne.n	80038d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f043 0320 	orr.w	r3, r3, #32
 80038d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6013      	str	r3, [r2, #0]
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e12b      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd f91a 	bl	8000b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800393a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800394a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800394c:	f001 fa20 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a81      	ldr	r2, [pc, #516]	; (8003b5c <HAL_I2C_Init+0x274>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d807      	bhi.n	800396c <HAL_I2C_Init+0x84>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a80      	ldr	r2, [pc, #512]	; (8003b60 <HAL_I2C_Init+0x278>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e006      	b.n	800397a <HAL_I2C_Init+0x92>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a7d      	ldr	r2, [pc, #500]	; (8003b64 <HAL_I2C_Init+0x27c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0e7      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a78      	ldr	r2, [pc, #480]	; (8003b68 <HAL_I2C_Init+0x280>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a6a      	ldr	r2, [pc, #424]	; (8003b5c <HAL_I2C_Init+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <HAL_I2C_Init+0xd4>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e009      	b.n	80039d0 <HAL_I2C_Init+0xe8>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_I2C_Init+0x284>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	3301      	adds	r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	495c      	ldr	r1, [pc, #368]	; (8003b5c <HAL_I2C_Init+0x274>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d819      	bhi.n	8003a24 <HAL_I2C_Init+0x13c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e59      	subs	r1, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fe:	1c59      	adds	r1, r3, #1
 8003a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a04:	400b      	ands	r3, r1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_I2C_Init+0x138>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e59      	subs	r1, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	e051      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e04f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_I2C_Init+0x168>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_I2C_Init+0x18e>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x196>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_I2C_Init+0x1bc>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e58      	subs	r0, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6911      	ldr	r1, [r2, #16]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000186a0 	.word	0x000186a0
 8003b60:	001e847f 	.word	0x001e847f
 8003b64:	003d08ff 	.word	0x003d08ff
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e128      	b.n	8003dd4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a90      	ldr	r2, [pc, #576]	; (8003ddc <HAL_I2S_Init+0x26c>)
 8003b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fd f81b 	bl	8000bd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bb8:	f023 030f 	bic.w	r3, r3, #15
 8003bbc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d060      	beq.n	8003c90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e001      	b.n	8003be0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d802      	bhi.n	8003bee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f001 f9d2 	bl	8004f98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bf4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfe:	d125      	bne.n	8003c4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	3305      	adds	r3, #5
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	e01f      	b.n	8003c6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	3305      	adds	r3, #5
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	e00e      	b.n	8003c6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	3305      	adds	r3, #5
 8003c68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4a5c      	ldr	r2, [pc, #368]	; (8003de0 <HAL_I2S_Init+0x270>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	08db      	lsrs	r3, r3, #3
 8003c74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e003      	b.n	8003c98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c90:	2302      	movs	r3, #2
 8003c92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d902      	bls.n	8003ca4 <HAL_I2S_Init+0x134>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2bff      	cmp	r3, #255	; 0xff
 8003ca2:	d907      	bls.n	8003cb4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	f043 0210 	orr.w	r2, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e08f      	b.n	8003dd4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	ea42 0103 	orr.w	r1, r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cd2:	f023 030f 	bic.w	r3, r3, #15
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6851      	ldr	r1, [r2, #4]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68d2      	ldr	r2, [r2, #12]
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6992      	ldr	r2, [r2, #24]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d161      	bne.n	8003dc4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <HAL_I2S_Init+0x274>)
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a37      	ldr	r2, [pc, #220]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d101      	bne.n	8003d14 <HAL_I2S_Init+0x1a4>
 8003d10:	4b36      	ldr	r3, [pc, #216]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003d12:	e001      	b.n	8003d18 <HAL_I2S_Init+0x1a8>
 8003d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	4932      	ldr	r1, [pc, #200]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003d20:	428a      	cmp	r2, r1
 8003d22:	d101      	bne.n	8003d28 <HAL_I2S_Init+0x1b8>
 8003d24:	4a31      	ldr	r2, [pc, #196]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003d26:	e001      	b.n	8003d2c <HAL_I2S_Init+0x1bc>
 8003d28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d30:	f023 030f 	bic.w	r3, r3, #15
 8003d34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_I2S_Init+0x1d4>
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003d42:	e001      	b.n	8003d48 <HAL_I2S_Init+0x1d8>
 8003d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d48:	2202      	movs	r2, #2
 8003d4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_I2S_Init+0x1ea>
 8003d56:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003d58:	e001      	b.n	8003d5e <HAL_I2S_Init+0x1ee>
 8003d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6a:	d003      	beq.n	8003d74 <HAL_I2S_Init+0x204>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e001      	b.n	8003d80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <HAL_I2S_Init+0x278>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_I2S_Init+0x24c>
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_I2S_Init+0x27c>)
 8003dba:	e001      	b.n	8003dc0 <HAL_I2S_Init+0x250>
 8003dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc0:	897a      	ldrh	r2, [r7, #10]
 8003dc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	08003ee7 	.word	0x08003ee7
 8003de0:	cccccccd 	.word	0xcccccccd
 8003de4:	08003ffd 	.word	0x08003ffd
 8003de8:	40003800 	.word	0x40003800
 8003dec:	40003400 	.word	0x40003400

08003df0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10e      	bne.n	8003e80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffb8 	bl	8003df0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	b292      	uxth	r2, r2
 8003e9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	1c9a      	adds	r2, r3, #2
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10e      	bne.n	8003ede <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ece:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff93 	bl	8003e04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d13a      	bne.n	8003f78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d109      	bne.n	8003f20 <I2S_IRQHandler+0x3a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d102      	bne.n	8003f20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffb4 	bl	8003e88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d126      	bne.n	8003f78 <I2S_IRQHandler+0x92>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d11f      	bne.n	8003f78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	f043 0202 	orr.w	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ff50 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d136      	bne.n	8003ff2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d109      	bne.n	8003fa2 <I2S_IRQHandler+0xbc>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d102      	bne.n	8003fa2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff45 	bl	8003e2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d122      	bne.n	8003ff2 <I2S_IRQHandler+0x10c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d11b      	bne.n	8003ff2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	f043 0204 	orr.w	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff13 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a92      	ldr	r2, [pc, #584]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004016:	4b92      	ldr	r3, [pc, #584]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004018:	e001      	b.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800401a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a8b      	ldr	r2, [pc, #556]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004034:	4b8a      	ldr	r3, [pc, #552]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004036:	e001      	b.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004048:	d004      	beq.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 8099 	bne.w	8004186 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d107      	bne.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f925 	bl	80042b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9c8 	bl	8004418 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d13a      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d035      	beq.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6e      	ldr	r2, [pc, #440]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040a6:	4b6e      	ldr	r3, [pc, #440]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a8:	e001      	b.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4969      	ldr	r1, [pc, #420]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b6:	428b      	cmp	r3, r1
 80040b8:	d101      	bne.n	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040ba:	4b69      	ldr	r3, [pc, #420]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040bc:	e001      	b.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f043 0202 	orr.w	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe88 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b08      	cmp	r3, #8
 8004110:	f040 80c3 	bne.w	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80bd 	beq.w	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800412e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a49      	ldr	r2, [pc, #292]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800413a:	4b49      	ldr	r3, [pc, #292]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800413c:	e001      	b.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4944      	ldr	r1, [pc, #272]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800414a:	428b      	cmp	r3, r1
 800414c:	d101      	bne.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800414e:	4b44      	ldr	r3, [pc, #272]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004150:	e001      	b.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800415a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f043 0204 	orr.w	r2, r3, #4
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff fe4a 	bl	8003e18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004184:	e089      	b.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d107      	bne.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8be 	bl	800431c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8fd 	bl	80043b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d12f      	bne.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02a      	beq.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041e8:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ea:	e001      	b.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4919      	ldr	r1, [pc, #100]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041f8:	428b      	cmp	r3, r1
 80041fa:	d101      	bne.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041fc:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041fe:	e001      	b.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004208:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f043 0202 	orr.w	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fdfa 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d136      	bne.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d031      	beq.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004244:	e001      	b.n	800424a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4902      	ldr	r1, [pc, #8]	; (800425c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004252:	428b      	cmp	r3, r1
 8004254:	d106      	bne.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004256:	4b02      	ldr	r3, [pc, #8]	; (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004258:	e006      	b.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800425a:	bf00      	nop
 800425c:	40003800 	.word	0x40003800
 8004260:	40003400 	.word	0x40003400
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800426c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800427c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fdc0 	bl	8003e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004298:	e000      	b.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800429a:	bf00      	nop
}
 800429c:	bf00      	nop
 800429e:	3720      	adds	r7, #32
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c99      	adds	r1, r3, #2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6251      	str	r1, [r2, #36]	; 0x24
 80042ca:	881a      	ldrh	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d113      	bne.n	8004312 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ffc9 	bl	80042a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	1c99      	adds	r1, r3, #2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6251      	str	r1, [r2, #36]	; 0x24
 800432e:	8819      	ldrh	r1, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <I2SEx_TxISR_I2SExt+0x90>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <I2SEx_TxISR_I2SExt+0x22>
 800433a:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <I2SEx_TxISR_I2SExt+0x94>)
 800433c:	e001      	b.n	8004342 <I2SEx_TxISR_I2SExt+0x26>
 800433e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004342:	460a      	mov	r2, r1
 8004344:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d121      	bne.n	80043a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a12      	ldr	r2, [pc, #72]	; (80043ac <I2SEx_TxISR_I2SExt+0x90>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d101      	bne.n	800436c <I2SEx_TxISR_I2SExt+0x50>
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <I2SEx_TxISR_I2SExt+0x94>)
 800436a:	e001      	b.n	8004370 <I2SEx_TxISR_I2SExt+0x54>
 800436c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	490d      	ldr	r1, [pc, #52]	; (80043ac <I2SEx_TxISR_I2SExt+0x90>)
 8004378:	428b      	cmp	r3, r1
 800437a:	d101      	bne.n	8004380 <I2SEx_TxISR_I2SExt+0x64>
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <I2SEx_TxISR_I2SExt+0x94>)
 800437e:	e001      	b.n	8004384 <I2SEx_TxISR_I2SExt+0x68>
 8004380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004388:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d106      	bne.n	80043a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff ff81 	bl	80042a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40003800 	.word	0x40003800
 80043b0:	40003400 	.word	0x40003400

080043b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68d8      	ldr	r0, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	1c99      	adds	r1, r3, #2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043cc:	b282      	uxth	r2, r0
 80043ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d113      	bne.n	8004410 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ff4a 	bl	80042a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <I2SEx_RxISR_I2SExt+0x16>
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <I2SEx_RxISR_I2SExt+0x94>)
 800442c:	e001      	b.n	8004432 <I2SEx_RxISR_I2SExt+0x1a>
 800442e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004432:	68d8      	ldr	r0, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	1c99      	adds	r1, r3, #2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800443e:	b282      	uxth	r2, r0
 8004440:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d121      	bne.n	800449e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <I2SEx_RxISR_I2SExt+0x50>
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <I2SEx_RxISR_I2SExt+0x94>)
 8004466:	e001      	b.n	800446c <I2SEx_RxISR_I2SExt+0x54>
 8004468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	490d      	ldr	r1, [pc, #52]	; (80044a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004474:	428b      	cmp	r3, r1
 8004476:	d101      	bne.n	800447c <I2SEx_RxISR_I2SExt+0x64>
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <I2SEx_RxISR_I2SExt+0x94>)
 800447a:	e001      	b.n	8004480 <I2SEx_RxISR_I2SExt+0x68>
 800447c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004480:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004484:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff03 	bl	80042a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40003800 	.word	0x40003800
 80044ac:	40003400 	.word	0x40003400

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e267      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d075      	beq.n	80045ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ce:	4b88      	ldr	r3, [pc, #544]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d00c      	beq.n	80044f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044da:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d112      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e6:	4b82      	ldr	r3, [pc, #520]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f2:	d10b      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	4b7e      	ldr	r3, [pc, #504]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d05b      	beq.n	80045b8 <HAL_RCC_OscConfig+0x108>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d157      	bne.n	80045b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e242      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d106      	bne.n	8004524 <HAL_RCC_OscConfig+0x74>
 8004516:	4b76      	ldr	r3, [pc, #472]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a75      	ldr	r2, [pc, #468]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b70      	ldr	r3, [pc, #448]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6f      	ldr	r2, [pc, #444]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b6d      	ldr	r3, [pc, #436]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6c      	ldr	r2, [pc, #432]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004548:	4b69      	ldr	r3, [pc, #420]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a68      	ldr	r2, [pc, #416]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b66      	ldr	r3, [pc, #408]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a65      	ldr	r2, [pc, #404]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fc fdaa 	bl	80010c0 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004570:	f7fc fda6 	bl	80010c0 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e207      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b5b      	ldr	r3, [pc, #364]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xc0>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fc fd96 	bl	80010c0 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004598:	f7fc fd92 	bl	80010c0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1f3      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	4b51      	ldr	r3, [pc, #324]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0xe8>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d063      	beq.n	800468e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045c6:	4b4a      	ldr	r3, [pc, #296]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d11c      	bne.n	8004618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045de:	4b44      	ldr	r3, [pc, #272]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x152>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e1c7      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b3b      	ldr	r3, [pc, #236]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4937      	ldr	r1, [pc, #220]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	e03a      	b.n	800468e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004620:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <HAL_RCC_OscConfig+0x244>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fc fd4b 	bl	80010c0 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462e:	f7fc fd47 	bl	80010c0 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1a8      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4925      	ldr	r1, [pc, #148]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	e015      	b.n	800468e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004662:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_RCC_OscConfig+0x244>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fc fd2a 	bl	80010c0 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004670:	f7fc fd26 	bl	80010c0 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e187      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d036      	beq.n	8004708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <HAL_RCC_OscConfig+0x248>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fc fd0a 	bl	80010c0 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fc fd06 	bl	80010c0 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e167      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_OscConfig+0x240>)
 80046c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x200>
 80046ce:	e01b      	b.n	8004708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <HAL_RCC_OscConfig+0x248>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7fc fcf3 	bl	80010c0 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	e00e      	b.n	80046fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046de:	f7fc fcef 	bl	80010c0 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d907      	bls.n	80046fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e150      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
 80046f0:	40023800 	.word	0x40023800
 80046f4:	42470000 	.word	0x42470000
 80046f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fc:	4b88      	ldr	r3, [pc, #544]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1ea      	bne.n	80046de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8097 	beq.w	8004844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471a:	4b81      	ldr	r3, [pc, #516]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	4b7d      	ldr	r3, [pc, #500]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	4a7c      	ldr	r2, [pc, #496]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 8004730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004734:	6413      	str	r3, [r2, #64]	; 0x40
 8004736:	4b7a      	ldr	r3, [pc, #488]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	4b77      	ldr	r3, [pc, #476]	; (8004924 <HAL_RCC_OscConfig+0x474>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d118      	bne.n	8004784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004752:	4b74      	ldr	r3, [pc, #464]	; (8004924 <HAL_RCC_OscConfig+0x474>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a73      	ldr	r2, [pc, #460]	; (8004924 <HAL_RCC_OscConfig+0x474>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475e:	f7fc fcaf 	bl	80010c0 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fc fcab 	bl	80010c0 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e10c      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <HAL_RCC_OscConfig+0x474>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x2ea>
 800478c:	4b64      	ldr	r3, [pc, #400]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	4a63      	ldr	r2, [pc, #396]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6713      	str	r3, [r2, #112]	; 0x70
 8004798:	e01c      	b.n	80047d4 <HAL_RCC_OscConfig+0x324>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x30c>
 80047a2:	4b5f      	ldr	r3, [pc, #380]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	4a5e      	ldr	r2, [pc, #376]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
 80047ae:	4b5c      	ldr	r3, [pc, #368]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	4a5b      	ldr	r2, [pc, #364]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ba:	e00b      	b.n	80047d4 <HAL_RCC_OscConfig+0x324>
 80047bc:	4b58      	ldr	r3, [pc, #352]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4a57      	ldr	r2, [pc, #348]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
 80047c8:	4b55      	ldr	r3, [pc, #340]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a54      	ldr	r2, [pc, #336]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047ce:	f023 0304 	bic.w	r3, r3, #4
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fc fc70 	bl	80010c0 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fc fc6c 	bl	80010c0 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0cb      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	4b49      	ldr	r3, [pc, #292]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ee      	beq.n	80047e4 <HAL_RCC_OscConfig+0x334>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004808:	f7fc fc5a 	bl	80010c0 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fc fc56 	bl	80010c0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0b5      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004826:	4b3e      	ldr	r3, [pc, #248]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ee      	bne.n	8004810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004838:	4b39      	ldr	r3, [pc, #228]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	4a38      	ldr	r2, [pc, #224]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a1 	beq.w	8004990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800484e:	4b34      	ldr	r3, [pc, #208]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b08      	cmp	r3, #8
 8004858:	d05c      	beq.n	8004914 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d141      	bne.n	80048e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	4b31      	ldr	r3, [pc, #196]	; (8004928 <HAL_RCC_OscConfig+0x478>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fc fc2a 	bl	80010c0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004870:	f7fc fc26 	bl	80010c0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e087      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69da      	ldr	r2, [r3, #28]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	019b      	lsls	r3, r3, #6
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	3b01      	subs	r3, #1
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	061b      	lsls	r3, r3, #24
 80048b2:	491b      	ldr	r1, [pc, #108]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b8:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <HAL_RCC_OscConfig+0x478>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fc fbff 	bl	80010c0 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fc fbfb 	bl	80010c0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e05c      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x416>
 80048e4:	e054      	b.n	8004990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <HAL_RCC_OscConfig+0x478>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fc fbe8 	bl	80010c0 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fc fbe4 	bl	80010c0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e045      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCC_OscConfig+0x470>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x444>
 8004912:	e03d      	b.n	8004990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d107      	bne.n	800492c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e038      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
 8004920:	40023800 	.word	0x40023800
 8004924:	40007000 	.word	0x40007000
 8004928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_RCC_OscConfig+0x4ec>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d028      	beq.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d121      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d11a      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004964:	4293      	cmp	r3, r2
 8004966:	d111      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	3b01      	subs	r3, #1
 8004976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d107      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800

080049a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0cc      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b68      	ldr	r3, [pc, #416]	; (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d90c      	bls.n	80049dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b65      	ldr	r3, [pc, #404]	; (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b63      	ldr	r3, [pc, #396]	; (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b8      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a58      	ldr	r2, [pc, #352]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a52      	ldr	r2, [pc, #328]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b50      	ldr	r3, [pc, #320]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	494d      	ldr	r1, [pc, #308]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d044      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d119      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e06f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e067      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7e:	4b37      	ldr	r3, [pc, #220]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f023 0203 	bic.w	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4934      	ldr	r1, [pc, #208]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a90:	f7fc fb16 	bl	80010c0 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fc fb12 	bl	80010c0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e04f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 020c 	and.w	r2, r3, #12
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d1eb      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b25      	ldr	r3, [pc, #148]	; (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d20c      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e032      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4916      	ldr	r1, [pc, #88]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	490e      	ldr	r1, [pc, #56]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b26:	f000 f821 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	490a      	ldr	r1, [pc, #40]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_RCC_ClockConfig+0x1c8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fc fa76 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023c00 	.word	0x40023c00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	08009914 	.word	0x08009914
 8004b64:	20000000 	.word	0x20000000
 8004b68:	20000004 	.word	0x20000004

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b094      	sub	sp, #80	; 0x50
 8004b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	647b      	str	r3, [r7, #68]	; 0x44
 8004b78:	2300      	movs	r3, #0
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b84:	4b79      	ldr	r3, [pc, #484]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x40>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	f200 80e1 	bhi.w	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b9e:	e0db      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b73      	ldr	r3, [pc, #460]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ba2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ba4:	e0db      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba6:	4b73      	ldr	r3, [pc, #460]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004baa:	e0d8      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bac:	4b6f      	ldr	r3, [pc, #444]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d063      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0159      	lsls	r1, r3, #5
 8004bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf0:	0150      	lsls	r0, r2, #5
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	1a51      	subs	r1, r2, r1
 8004bfa:	6139      	str	r1, [r7, #16]
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c10:	4659      	mov	r1, fp
 8004c12:	018b      	lsls	r3, r1, #6
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	018a      	lsls	r2, r1, #6
 8004c1e:	4651      	mov	r1, sl
 8004c20:	ebb2 0801 	subs.w	r8, r2, r1
 8004c24:	4659      	mov	r1, fp
 8004c26:	eb63 0901 	sbc.w	r9, r3, r1
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c3e:	4690      	mov	r8, r2
 8004c40:	4699      	mov	r9, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	eb18 0303 	adds.w	r3, r8, r3
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	eb49 0303 	adc.w	r3, r9, r3
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	024b      	lsls	r3, r1, #9
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c68:	4621      	mov	r1, r4
 8004c6a:	024a      	lsls	r2, r1, #9
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c72:	2200      	movs	r2, #0
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c7c:	f7fb fb00 	bl	8000280 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4613      	mov	r3, r2
 8004c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c88:	e058      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8a:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	099b      	lsrs	r3, r3, #6
 8004c90:	2200      	movs	r2, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	4611      	mov	r1, r2
 8004c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f04f 0000 	mov.w	r0, #0
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	0159      	lsls	r1, r3, #5
 8004cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb6:	0150      	lsls	r0, r2, #5
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	00eb      	lsls	r3, r5, #3
 8004cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf2:	00e2      	lsls	r2, r4, #3
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	18e3      	adds	r3, r4, r3
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb45 0303 	adc.w	r3, r5, r3
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d12:	4629      	mov	r1, r5
 8004d14:	028b      	lsls	r3, r1, #10
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	028a      	lsls	r2, r1, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d26:	2200      	movs	r2, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d30:	f7fb faa6 	bl	8000280 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3750      	adds	r7, #80	; 0x50
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	007a1200 	.word	0x007a1200

08004d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000000 	.word	0x20000000

08004d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d94:	f7ff fff0 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0a9b      	lsrs	r3, r3, #10
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	; (8004db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	08009924 	.word	0x08009924

08004db8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d038      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004de0:	4b68      	ldr	r3, [pc, #416]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004de6:	f7fc f96b 	bl	80010c0 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dee:	f7fc f967 	bl	80010c0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e0bd      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e00:	4b61      	ldr	r3, [pc, #388]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f0      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	019b      	lsls	r3, r3, #6
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	071b      	lsls	r3, r3, #28
 8004e1e:	495a      	ldr	r1, [pc, #360]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e26:	4b57      	ldr	r3, [pc, #348]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e2c:	f7fc f948 	bl	80010c0 <HAL_GetTick>
 8004e30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e34:	f7fc f944 	bl	80010c0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e09a      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e46:	4b50      	ldr	r3, [pc, #320]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8083 	beq.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	4b48      	ldr	r3, [pc, #288]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	4a47      	ldr	r2, [pc, #284]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e70:	4b45      	ldr	r3, [pc, #276]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e7c:	4b43      	ldr	r3, [pc, #268]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a42      	ldr	r2, [pc, #264]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e88:	f7fc f91a 	bl	80010c0 <HAL_GetTick>
 8004e8c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e90:	f7fc f916 	bl	80010c0 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e06c      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ea2:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eae:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d02f      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d028      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ecc:	4b2e      	ldr	r3, [pc, #184]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ed6:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004edc:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ee2:	4a29      	ldr	r2, [pc, #164]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ee8:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d114      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fc f8e4 	bl	80010c0 <HAL_GetTick>
 8004ef8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efa:	e00a      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efc:	f7fc f8e0 	bl	80010c0 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e034      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ee      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f2a:	d10d      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f40:	4911      	ldr	r1, [pc, #68]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]
 8004f46:	e005      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f48:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a0e      	ldr	r2, [pc, #56]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f52:	6093      	str	r3, [r2, #8]
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f60:	4909      	ldr	r1, [pc, #36]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7d1a      	ldrb	r2, [r3, #20]
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f78:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	42470068 	.word	0x42470068
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40007000 	.word	0x40007000
 8004f90:	42470e40 	.word	0x42470e40
 8004f94:	424711e0 	.word	0x424711e0

08004f98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d141      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fb6:	4b25      	ldr	r3, [pc, #148]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d006      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fcc:	d131      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fce:	4b20      	ldr	r3, [pc, #128]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fd0:	617b      	str	r3, [r7, #20]
          break;
 8004fd2:	e031      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fe2:	4b1a      	ldr	r3, [pc, #104]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fec:	4a19      	ldr	r2, [pc, #100]	; (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	e008      	b.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005000:	4a15      	ldr	r2, [pc, #84]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005008:	4b10      	ldr	r3, [pc, #64]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005022:	0f1b      	lsrs	r3, r3, #28
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	fbb2 f3f3 	udiv	r3, r2, r3
 800502e:	617b      	str	r3, [r7, #20]
          break;
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
          break;
 8005036:	bf00      	nop
        }
      }
      break;
 8005038:	e000      	b.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 800503a:	bf00      	nop
    }
  }
  return frequency;
 800503c:	697b      	ldr	r3, [r7, #20]
}
 800503e:	4618      	mov	r0, r3
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	00bb8000 	.word	0x00bb8000
 8005054:	007a1200 	.word	0x007a1200
 8005058:	00f42400 	.word	0x00f42400

0800505c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e07b      	b.n	8005166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507e:	d009      	beq.n	8005094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	61da      	str	r2, [r3, #28]
 8005086:	e005      	b.n	8005094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fb fe60 	bl	8000d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	ea42 0103 	orr.w	r1, r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	f003 0104 	and.w	r1, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0210 	and.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800516e:	b084      	sub	sp, #16
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	f107 001c 	add.w	r0, r7, #28
 800517c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005180:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005184:	2b01      	cmp	r3, #1
 8005186:	d123      	bne.n	80051d0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800519c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f9dc 	bl	8005582 <USB_CoreReset>
 80051ca:	4603      	mov	r3, r0
 80051cc:	73fb      	strb	r3, [r7, #15]
 80051ce:	e01b      	b.n	8005208 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f9d0 	bl	8005582 <USB_CoreReset>
 80051e2:	4603      	mov	r3, r0
 80051e4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
 80051fa:	e005      	b.n	8005208 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005208:	7fbb      	ldrb	r3, [r7, #30]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d10b      	bne.n	8005226 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f043 0206 	orr.w	r2, r3, #6
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005232:	b004      	add	sp, #16
 8005234:	4770      	bx	lr

08005236 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f023 0201 	bic.w	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d115      	bne.n	80052c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052a8:	200a      	movs	r0, #10
 80052aa:	f7fb ff15 	bl	80010d8 <HAL_Delay>
      ms += 10U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	330a      	adds	r3, #10
 80052b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f956 	bl	8005566 <USB_GetMode>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d01e      	beq.n	80052fe <USB_SetCurrentMode+0x84>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2bc7      	cmp	r3, #199	; 0xc7
 80052c4:	d9f0      	bls.n	80052a8 <USB_SetCurrentMode+0x2e>
 80052c6:	e01a      	b.n	80052fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d115      	bne.n	80052fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052da:	200a      	movs	r0, #10
 80052dc:	f7fb fefc 	bl	80010d8 <HAL_Delay>
      ms += 10U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	330a      	adds	r3, #10
 80052e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f93d 	bl	8005566 <USB_GetMode>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <USB_SetCurrentMode+0x84>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2bc7      	cmp	r3, #199	; 0xc7
 80052f6:	d9f0      	bls.n	80052da <USB_SetCurrentMode+0x60>
 80052f8:	e001      	b.n	80052fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e005      	b.n	800530a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2bc8      	cmp	r3, #200	; 0xc8
 8005302:	d101      	bne.n	8005308 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800532c:	d901      	bls.n	8005332 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e01b      	b.n	800536a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	daf2      	bge.n	8005320 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005356:	d901      	bls.n	800535c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b20      	cmp	r3, #32
 8005366:	d0f0      	beq.n	800534a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800538e:	d901      	bls.n	8005394 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e018      	b.n	80053c6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	daf2      	bge.n	8005382 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2210      	movs	r2, #16
 80053a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053b2:	d901      	bls.n	80053b8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e006      	b.n	80053c6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d0f0      	beq.n	80053a6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b089      	sub	sp, #36	; 0x24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	4611      	mov	r1, r2
 80053de:	461a      	mov	r2, r3
 80053e0:	460b      	mov	r3, r1
 80053e2:	71fb      	strb	r3, [r7, #7]
 80053e4:	4613      	mov	r3, r2
 80053e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d123      	bne.n	8005440 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053f8:	88bb      	ldrh	r3, [r7, #4]
 80053fa:	3303      	adds	r3, #3
 80053fc:	089b      	lsrs	r3, r3, #2
 80053fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e018      	b.n	8005438 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	031a      	lsls	r2, r3, #12
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	4413      	add	r3, r2
 800540e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005412:	461a      	mov	r2, r3
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6013      	str	r3, [r2, #0]
      pSrc++;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	3301      	adds	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	3301      	adds	r3, #1
 8005424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3301      	adds	r3, #1
 800542a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	3301      	adds	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	3301      	adds	r3, #1
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	d3e2      	bcc.n	8005406 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3724      	adds	r7, #36	; 0x24
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800544e:	b480      	push	{r7}
 8005450:	b08b      	sub	sp, #44	; 0x2c
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	4613      	mov	r3, r2
 800545a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	089b      	lsrs	r3, r3, #2
 8005468:	b29b      	uxth	r3, r3
 800546a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005474:	2300      	movs	r3, #0
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	e014      	b.n	80054a4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	601a      	str	r2, [r3, #0]
    pDest++;
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	3301      	adds	r3, #1
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	3301      	adds	r3, #1
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	3301      	adds	r3, #1
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	3301      	adds	r3, #1
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	3301      	adds	r3, #1
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d3e6      	bcc.n	800547a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054ac:	8bfb      	ldrh	r3, [r7, #30]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01e      	beq.n	80054f0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054bc:	461a      	mov	r2, r3
 80054be:	f107 0310 	add.w	r3, r7, #16
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	fa22 f303 	lsr.w	r3, r2, r3
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	701a      	strb	r2, [r3, #0]
      i++;
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	3301      	adds	r3, #1
 80054dc:	623b      	str	r3, [r7, #32]
      pDest++;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	3301      	adds	r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054e4:	8bfb      	ldrh	r3, [r7, #30]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054ea:	8bfb      	ldrh	r3, [r7, #30]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ea      	bne.n	80054c6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	372c      	adds	r7, #44	; 0x2c
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4013      	ands	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005516:	68fb      	ldr	r3, [r7, #12]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005558:	68bb      	ldr	r3, [r7, #8]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0301 	and.w	r3, r3, #1
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800559a:	d901      	bls.n	80055a0 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e01b      	b.n	80055d8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	daf2      	bge.n	800558e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f043 0201 	orr.w	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3301      	adds	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055c4:	d901      	bls.n	80055ca <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e006      	b.n	80055d8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d0f0      	beq.n	80055b8 <USB_CoreReset+0x36>

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055e4:	b084      	sub	sp, #16
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005604:	461a      	mov	r2, r3
 8005606:	2300      	movs	r3, #0
 8005608:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d119      	bne.n	800566e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800563a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800563e:	2b01      	cmp	r3, #1
 8005640:	d10a      	bne.n	8005658 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005650:	f043 0304 	orr.w	r3, r3, #4
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e014      	b.n	8005682 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005666:	f023 0304 	bic.w	r3, r3, #4
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e009      	b.n	8005682 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005682:	2110      	movs	r1, #16
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff fe44 	bl	8005312 <USB_FlushTxFifo>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fe6e 	bl	8005376 <USB_FlushRxFifo>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	e015      	b.n	80056d6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	461a      	mov	r2, r3
 80056b8:	f04f 33ff 	mov.w	r3, #4294967295
 80056bc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	461a      	mov	r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	3301      	adds	r3, #1
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80056da:	461a      	mov	r2, r3
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4293      	cmp	r3, r2
 80056e0:	d3e3      	bcc.n	80056aa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a0e      	ldr	r2, [pc, #56]	; (8005734 <USB_HostInit+0x150>)
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <USB_HostInit+0x154>)
 8005700:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005704:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f043 0210 	orr.w	r2, r3, #16
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <USB_HostInit+0x158>)
 800571e:	4313      	orrs	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005730:	b004      	add	sp, #16
 8005732:	4770      	bx	lr
 8005734:	00600080 	.word	0x00600080
 8005738:	004000e0 	.word	0x004000e0
 800573c:	a3200008 	.word	0xa3200008

08005740 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005778:	4313      	orrs	r3, r2
 800577a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d107      	bne.n	8005792 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005788:	461a      	mov	r2, r3
 800578a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800578e:	6053      	str	r3, [r2, #4]
 8005790:	e00c      	b.n	80057ac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d107      	bne.n	80057a8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800579e:	461a      	mov	r2, r3
 80057a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80057a4:	6053      	str	r3, [r2, #4]
 80057a6:	e001      	b.n	80057ac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80057ea:	2064      	movs	r0, #100	; 0x64
 80057ec:	f7fb fc74 	bl	80010d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80057fe:	200a      	movs	r0, #10
 8005800:	f7fb fc6a 	bl	80010d8 <HAL_Delay>

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005832:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <USB_DriveVbus+0x44>
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d106      	bne.n	8005852 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800584c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005850:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585c:	d109      	bne.n	8005872 <USB_DriveVbus+0x64>
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800586c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005870:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	0c5b      	lsrs	r3, r3, #17
 800589e:	f003 0303 	and.w	r3, r3, #3
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	b29b      	uxth	r3, r3
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	461a      	mov	r2, r3
 80058de:	4603      	mov	r3, r0
 80058e0:	70fb      	strb	r3, [r7, #3]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70bb      	strb	r3, [r7, #2]
 80058e6:	4613      	mov	r3, r2
 80058e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	461a      	mov	r2, r3
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005906:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800590a:	2b03      	cmp	r3, #3
 800590c:	d867      	bhi.n	80059de <USB_HC_Init+0x10e>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <USB_HC_Init+0x44>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005925 	.word	0x08005925
 8005918:	080059a1 	.word	0x080059a1
 800591c:	08005925 	.word	0x08005925
 8005920:	08005963 	.word	0x08005963
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005930:	461a      	mov	r2, r3
 8005932:	f240 439d 	movw	r3, #1181	; 0x49d
 8005936:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005938:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800593c:	2b00      	cmp	r3, #0
 800593e:	da51      	bge.n	80059e4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	440a      	add	r2, r1
 8005956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005960:	e040      	b.n	80059e4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	461a      	mov	r2, r3
 8005970:	f240 639d 	movw	r3, #1693	; 0x69d
 8005974:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005976:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da34      	bge.n	80059e8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	440a      	add	r2, r1
 8005994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800599e:	e023      	b.n	80059e8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	461a      	mov	r2, r3
 80059ae:	f240 2325 	movw	r3, #549	; 0x225
 80059b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80059b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	da17      	bge.n	80059ec <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80059da:	60d3      	str	r3, [r2, #12]
      }
      break;
 80059dc:	e006      	b.n	80059ec <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	77fb      	strb	r3, [r7, #31]
      break;
 80059e2:	e004      	b.n	80059ee <USB_HC_Init+0x11e>
      break;
 80059e4:	bf00      	nop
 80059e6:	e002      	b.n	80059ee <USB_HC_Init+0x11e>
      break;
 80059e8:	bf00      	nop
 80059ea:	e000      	b.n	80059ee <USB_HC_Init+0x11e>
      break;
 80059ec:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	461a      	mov	r2, r3
 80059fc:	2300      	movs	r3, #0
 80059fe:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a1a:	f043 0302 	orr.w	r3, r3, #2
 8005a1e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	2101      	movs	r1, #1
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	6939      	ldr	r1, [r7, #16]
 8005a36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005a4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	da03      	bge.n	8005a5a <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	e001      	b.n	8005a5e <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ff0e 	bl	8005880 <USB_GetHostSpeed>
 8005a64:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d106      	bne.n	8005a7c <USB_HC_Init+0x1ac>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d003      	beq.n	8005a7c <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e001      	b.n	8005a80 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	059b      	lsls	r3, r3, #22
 8005a84:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a88:	78bb      	ldrb	r3, [r7, #2]
 8005a8a:	02db      	lsls	r3, r3, #11
 8005a8c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a90:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005a92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a96:	049b      	lsls	r3, r3, #18
 8005a98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005a9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005a9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005aa4:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005aae:	78fa      	ldrb	r2, [r7, #3]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005abe:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005ac0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d003      	beq.n	8005ad0 <USB_HC_Init+0x200>
 8005ac8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d10f      	bne.n	8005af0 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop

08005afc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b18:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	799b      	ldrb	r3, [r3, #6]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d158      	bne.n	8005bd4 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005b22:	2301      	movs	r3, #1
 8005b24:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	78db      	ldrb	r3, [r3, #3]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	8a92      	ldrh	r2, [r2, #20]
 8005b34:	fb03 f202 	mul.w	r2, r3, r2
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	61da      	str	r2, [r3, #28]
 8005b3c:	e079      	b.n	8005c32 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	7c9b      	ldrb	r3, [r3, #18]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d130      	bne.n	8005ba8 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	2bbc      	cmp	r3, #188	; 0xbc
 8005b4c:	d918      	bls.n	8005b80 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	8a9b      	ldrh	r3, [r3, #20]
 8005b52:	461a      	mov	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d003      	beq.n	8005b70 <USB_HC_StartXfer+0x74>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d103      	bne.n	8005b78 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2202      	movs	r2, #2
 8005b74:	60da      	str	r2, [r3, #12]
 8005b76:	e05c      	b.n	8005c32 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	e058      	b.n	8005c32 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6a1a      	ldr	r2, [r3, #32]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d007      	beq.n	8005ba0 <USB_HC_StartXfer+0xa4>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d003      	beq.n	8005ba0 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	e048      	b.n	8005c32 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	60da      	str	r2, [r3, #12]
 8005ba6:	e044      	b.n	8005c32 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d10d      	bne.n	8005bca <USB_HC_StartXfer+0xce>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	8a92      	ldrh	r2, [r2, #20]
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d907      	bls.n	8005bca <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005bba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	8a92      	ldrh	r2, [r2, #20]
 8005bc0:	fb03 f202 	mul.w	r2, r3, r2
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	61da      	str	r2, [r3, #28]
 8005bc8:	e033      	b.n	8005c32 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6a1a      	ldr	r2, [r3, #32]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	61da      	str	r2, [r3, #28]
 8005bd2:	e02e      	b.n	8005c32 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d018      	beq.n	8005c0e <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	8a92      	ldrh	r2, [r2, #20]
 8005be4:	4413      	add	r3, r2
 8005be6:	3b01      	subs	r3, #1
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	8a92      	ldrh	r2, [r2, #20]
 8005bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf0:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8005bf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005bf4:	8b7b      	ldrh	r3, [r7, #26]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d90b      	bls.n	8005c12 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005bfa:	8b7b      	ldrh	r3, [r7, #26]
 8005bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	8a92      	ldrh	r2, [r2, #20]
 8005c04:	fb03 f202 	mul.w	r2, r3, r2
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	61da      	str	r2, [r3, #28]
 8005c0c:	e001      	b.n	8005c12 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	78db      	ldrb	r3, [r3, #3]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	8a92      	ldrh	r2, [r2, #20]
 8005c20:	fb03 f202 	mul.w	r2, r3, r2
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61da      	str	r2, [r3, #28]
 8005c28:	e003      	b.n	8005c32 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c3c:	04d9      	lsls	r1, r3, #19
 8005c3e:	4ba4      	ldr	r3, [pc, #656]	; (8005ed0 <USB_HC_StartXfer+0x3d4>)
 8005c40:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c42:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	7d9b      	ldrb	r3, [r3, #22]
 8005c48:	075b      	lsls	r3, r3, #29
 8005c4a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c4e:	69f9      	ldr	r1, [r7, #28]
 8005c50:	0148      	lsls	r0, r1, #5
 8005c52:	6a39      	ldr	r1, [r7, #32]
 8005c54:	4401      	add	r1, r0
 8005c56:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c5a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c5c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d009      	beq.n	8005c78 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6999      	ldr	r1, [r3, #24]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c74:	460a      	mov	r2, r1
 8005c76:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf0c      	ite	eq
 8005c88:	2301      	moveq	r3, #1
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	6a3a      	ldr	r2, [r7, #32]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005caa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cae:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	7e7b      	ldrb	r3, [r7, #25]
 8005cc0:	075b      	lsls	r3, r3, #29
 8005cc2:	69f9      	ldr	r1, [r7, #28]
 8005cc4:	0148      	lsls	r0, r1, #5
 8005cc6:	6a39      	ldr	r1, [r7, #32]
 8005cc8:	4401      	add	r1, r0
 8005cca:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	799b      	ldrb	r3, [r3, #6]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	f040 80c4 	bne.w	8005e64 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	7c5b      	ldrb	r3, [r3, #17]
 8005ce0:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005cf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005cf8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	6a3a      	ldr	r2, [r7, #32]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	79db      	ldrb	r3, [r3, #7]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d123      	bne.n	8005d6a <USB_HC_StartXfer+0x26e>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	78db      	ldrb	r3, [r3, #3]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d11f      	bne.n	8005d6a <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	6a3a      	ldr	r2, [r7, #32]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	6a3a      	ldr	r2, [r7, #32]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d68:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	7c9b      	ldrb	r3, [r3, #18]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d003      	beq.n	8005d7a <USB_HC_StartXfer+0x27e>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	7c9b      	ldrb	r3, [r3, #18]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d117      	bne.n	8005daa <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d113      	bne.n	8005daa <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	78db      	ldrb	r3, [r3, #3]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d10f      	bne.n	8005daa <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da8:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	7c9b      	ldrb	r3, [r3, #18]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d163      	bne.n	8005e7a <USB_HC_StartXfer+0x37e>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	78db      	ldrb	r3, [r3, #3]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d15f      	bne.n	8005e7a <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d859      	bhi.n	8005e78 <USB_HC_StartXfer+0x37c>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <USB_HC_StartXfer+0x2d0>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005dff 	.word	0x08005dff
 8005dd4:	08005e21 	.word	0x08005e21
 8005dd8:	08005e43 	.word	0x08005e43
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfa:	6053      	str	r3, [r2, #4]
          break;
 8005dfc:	e03d      	b.n	8005e7a <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e18:	f043 030e 	orr.w	r3, r3, #14
 8005e1c:	6053      	str	r3, [r2, #4]
          break;
 8005e1e:	e02c      	b.n	8005e7a <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	6a3a      	ldr	r2, [r7, #32]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e3e:	6053      	str	r3, [r2, #4]
          break;
 8005e40:	e01b      	b.n	8005e7a <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e60:	6053      	str	r3, [r2, #4]
          break;
 8005e62:	e00a      	b.n	8005e7a <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e70:	461a      	mov	r2, r3
 8005e72:	2300      	movs	r3, #0
 8005e74:	6053      	str	r3, [r2, #4]
 8005e76:	e000      	b.n	8005e7a <USB_HC_StartXfer+0x37e>
          break;
 8005e78:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e90:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	78db      	ldrb	r3, [r3, #3]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d004      	beq.n	8005ea4 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	e003      	b.n	8005eac <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eaa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e055      	b.n	8005f7c <USB_HC_StartXfer+0x480>
 8005ed0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	78db      	ldrb	r3, [r3, #3]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d14e      	bne.n	8005f7a <USB_HC_StartXfer+0x47e>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d04a      	beq.n	8005f7a <USB_HC_StartXfer+0x47e>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	79db      	ldrb	r3, [r3, #7]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d146      	bne.n	8005f7a <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	7c9b      	ldrb	r3, [r3, #18]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d831      	bhi.n	8005f58 <USB_HC_StartXfer+0x45c>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <USB_HC_StartXfer+0x400>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f0d 	.word	0x08005f0d
 8005f00:	08005f31 	.word	0x08005f31
 8005f04:	08005f0d 	.word	0x08005f0d
 8005f08:	08005f31 	.word	0x08005f31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	3303      	adds	r3, #3
 8005f12:	089b      	lsrs	r3, r3, #2
 8005f14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f16:	8afa      	ldrh	r2, [r7, #22]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d91c      	bls.n	8005f5c <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f043 0220 	orr.w	r2, r3, #32
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f2e:	e015      	b.n	8005f5c <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	3303      	adds	r3, #3
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f3a:	8afa      	ldrh	r2, [r7, #22]
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d90a      	bls.n	8005f60 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f56:	e003      	b.n	8005f60 <USB_HC_StartXfer+0x464>

      default:
        break;
 8005f58:	bf00      	nop
 8005f5a:	e002      	b.n	8005f62 <USB_HC_StartXfer+0x466>
        break;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <USB_HC_StartXfer+0x466>
        break;
 8005f60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	6999      	ldr	r1, [r3, #24]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	785a      	ldrb	r2, [r3, #1]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2000      	movs	r0, #0
 8005f72:	9000      	str	r0, [sp, #0]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fa2c 	bl	80053d2 <USB_WritePacket>
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3728      	adds	r7, #40	; 0x28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	b29b      	uxth	r3, r3
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b089      	sub	sp, #36	; 0x24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	0c9b      	lsrs	r3, r3, #18
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	0fdb      	lsrs	r3, r3, #31
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	0fdb      	lsrs	r3, r3, #31
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b20      	cmp	r3, #32
 800600a:	d10d      	bne.n	8006028 <USB_HC_Halt+0x82>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <USB_HC_Halt+0x82>
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d002      	beq.n	8006024 <USB_HC_Halt+0x7e>
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d101      	bne.n	8006028 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e0d8      	b.n	80061da <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <USB_HC_Halt+0x8e>
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d173      	bne.n	800611c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	440a      	add	r2, r1
 800604a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006052:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b00      	cmp	r3, #0
 800605e:	d14a      	bne.n	80060f6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d133      	bne.n	80060d4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800608a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060aa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	3301      	adds	r3, #1
 80060b0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060b8:	d82e      	bhi.n	8006118 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d0:	d0ec      	beq.n	80060ac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060d2:	e081      	b.n	80061d8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060f2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060f4:	e070      	b.n	80061d8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006114:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006116:	e05f      	b.n	80061d8 <USB_HC_Halt+0x232>
            break;
 8006118:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800611a:	e05d      	b.n	80061d8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	440a      	add	r2, r1
 8006132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006136:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800613a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d133      	bne.n	80061b4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800616a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	440a      	add	r2, r1
 8006182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800618a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3301      	adds	r3, #1
 8006190:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006198:	d81d      	bhi.n	80061d6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b0:	d0ec      	beq.n	800618c <USB_HC_Halt+0x1e6>
 80061b2:	e011      	b.n	80061d8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e000      	b.n	80061d8 <USB_HC_Halt+0x232>
          break;
 80061d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3724      	adds	r7, #36	; 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b088      	sub	sp, #32
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff f82c 	bl	8005258 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006200:	2110      	movs	r1, #16
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff f885 	bl	8005312 <USB_FlushTxFifo>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff f8af 	bl	8005376 <USB_FlushRxFifo>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006222:	2300      	movs	r3, #0
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	e01f      	b.n	8006268 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800623e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006246:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800624e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625c:	461a      	mov	r2, r3
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	3301      	adds	r3, #1
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b0f      	cmp	r3, #15
 800626c:	d9dc      	bls.n	8006228 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e034      	b.n	80062de <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800628a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006292:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800629a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	461a      	mov	r2, r3
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ba:	d80c      	bhi.n	80062d6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062d2:	d0ec      	beq.n	80062ae <USB_StopHost+0xc8>
 80062d4:	e000      	b.n	80062d8 <USB_StopHost+0xf2>
        break;
 80062d6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	3301      	adds	r3, #1
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b0f      	cmp	r3, #15
 80062e2:	d9c7      	bls.n	8006274 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ea:	461a      	mov	r2, r3
 80062ec:	f04f 33ff 	mov.w	r3, #4294967295
 80062f0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f04f 32ff 	mov.w	r2, #4294967295
 80062f8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fe ff9b 	bl	8005236 <USB_EnableGlobalInt>

  return ret;
 8006300:	7ffb      	ldrb	r3, [r7, #31]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800630a:	b590      	push	{r4, r7, lr}
 800630c:	b089      	sub	sp, #36	; 0x24
 800630e:	af04      	add	r7, sp, #16
 8006310:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006312:	2301      	movs	r3, #1
 8006314:	2202      	movs	r2, #2
 8006316:	2102      	movs	r1, #2
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fc86 	bl	8006c2a <USBH_FindInterface>
 800631e:	4603      	mov	r3, r0
 8006320:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	2bff      	cmp	r3, #255	; 0xff
 8006326:	d002      	beq.n	800632e <USBH_CDC_InterfaceInit+0x24>
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d901      	bls.n	8006332 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800632e:	2302      	movs	r3, #2
 8006330:	e13d      	b.n	80065ae <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fc5b 	bl	8006bf2 <USBH_SelectInterface>
 800633c:	4603      	mov	r3, r0
 800633e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006346:	2302      	movs	r3, #2
 8006348:	e131      	b.n	80065ae <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006350:	2050      	movs	r0, #80	; 0x50
 8006352:	f002 fb75 	bl	8008a40 <malloc>
 8006356:	4603      	mov	r3, r0
 8006358:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800636a:	2302      	movs	r3, #2
 800636c:	e11f      	b.n	80065ae <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800636e:	2250      	movs	r2, #80	; 0x50
 8006370:	2100      	movs	r1, #0
 8006372:	68b8      	ldr	r0, [r7, #8]
 8006374:	f002 fd37 	bl	8008de6 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	211a      	movs	r1, #26
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	4413      	add	r3, r2
 8006384:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	b25b      	sxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	da15      	bge.n	80063bc <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	211a      	movs	r1, #26
 8006396:	fb01 f303 	mul.w	r3, r1, r3
 800639a:	4413      	add	r3, r2
 800639c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	211a      	movs	r1, #26
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063b6:	881a      	ldrh	r2, [r3, #0]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 ffcf 	bl	8008366 <USBH_AllocPipe>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461a      	mov	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	7819      	ldrb	r1, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	7858      	ldrb	r0, [r3, #1]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	8952      	ldrh	r2, [r2, #10]
 80063e8:	9202      	str	r2, [sp, #8]
 80063ea:	2203      	movs	r2, #3
 80063ec:	9201      	str	r2, [sp, #4]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	4623      	mov	r3, r4
 80063f2:	4602      	mov	r2, r0
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 ff87 	bl	8008308 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f002 fa96 	bl	8008934 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006408:	2300      	movs	r3, #0
 800640a:	2200      	movs	r2, #0
 800640c:	210a      	movs	r1, #10
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fc0b 	bl	8006c2a <USBH_FindInterface>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	2bff      	cmp	r3, #255	; 0xff
 800641c:	d002      	beq.n	8006424 <USBH_CDC_InterfaceInit+0x11a>
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d901      	bls.n	8006428 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006424:	2302      	movs	r3, #2
 8006426:	e0c2      	b.n	80065ae <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	211a      	movs	r1, #26
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	4413      	add	r3, r2
 8006434:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	b25b      	sxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	da16      	bge.n	800646e <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	211a      	movs	r1, #26
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	211a      	movs	r1, #26
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	4413      	add	r3, r2
 8006462:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006466:	881a      	ldrh	r2, [r3, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	835a      	strh	r2, [r3, #26]
 800646c:	e015      	b.n	800649a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	211a      	movs	r1, #26
 8006474:	fb01 f303 	mul.w	r3, r1, r3
 8006478:	4413      	add	r3, r2
 800647a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800647e:	781a      	ldrb	r2, [r3, #0]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	211a      	movs	r1, #26
 800648a:	fb01 f303 	mul.w	r3, r1, r3
 800648e:	4413      	add	r3, r2
 8006490:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006494:	881a      	ldrh	r2, [r3, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	211a      	movs	r1, #26
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	4413      	add	r3, r2
 80064a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	b25b      	sxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	da16      	bge.n	80064e0 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	211a      	movs	r1, #26
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	211a      	movs	r1, #26
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	835a      	strh	r2, [r3, #26]
 80064de:	e015      	b.n	800650c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	211a      	movs	r1, #26
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	211a      	movs	r1, #26
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006506:	881a      	ldrh	r2, [r3, #0]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	7b9b      	ldrb	r3, [r3, #14]
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 ff27 	bl	8008366 <USBH_AllocPipe>
 8006518:	4603      	mov	r3, r0
 800651a:	461a      	mov	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	7bdb      	ldrb	r3, [r3, #15]
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 ff1d 	bl	8008366 <USBH_AllocPipe>
 800652c:	4603      	mov	r3, r0
 800652e:	461a      	mov	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	7b59      	ldrb	r1, [r3, #13]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	7b98      	ldrb	r0, [r3, #14]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	8b12      	ldrh	r2, [r2, #24]
 800654c:	9202      	str	r2, [sp, #8]
 800654e:	2202      	movs	r2, #2
 8006550:	9201      	str	r2, [sp, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4623      	mov	r3, r4
 8006556:	4602      	mov	r2, r0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fed5 	bl	8008308 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	7b19      	ldrb	r1, [r3, #12]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	7bd8      	ldrb	r0, [r3, #15]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	8b52      	ldrh	r2, [r2, #26]
 8006576:	9202      	str	r2, [sp, #8]
 8006578:	2202      	movs	r2, #2
 800657a:	9201      	str	r2, [sp, #4]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4623      	mov	r3, r4
 8006580:	4602      	mov	r2, r0
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fec0 	bl	8008308 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	7b5b      	ldrb	r3, [r3, #13]
 8006594:	2200      	movs	r2, #0
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f002 f9cb 	bl	8008934 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	7b1b      	ldrb	r3, [r3, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f002 f9c4 	bl	8008934 <USBH_LL_SetToggle>

  return USBH_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}

080065b6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00e      	beq.n	80065ee <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 feb5 	bl	8008346 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fee0 	bl	80083a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	7b1b      	ldrb	r3, [r3, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00e      	beq.n	8006614 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	7b1b      	ldrb	r3, [r3, #12]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 fea2 	bl	8008346 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	7b1b      	ldrb	r3, [r3, #12]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fecd 	bl	80083a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	7b5b      	ldrb	r3, [r3, #13]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00e      	beq.n	800663a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	7b5b      	ldrb	r3, [r3, #13]
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fe8f 	bl	8008346 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	7b5b      	ldrb	r3, [r3, #13]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 feba 	bl	80083a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	4618      	mov	r0, r3
 8006650:	f002 f9fe 	bl	8008a50 <free>
    phost->pActiveClass->pData = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800665a:	2200      	movs	r2, #0
 800665c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3340      	adds	r3, #64	; 0x40
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f8b2 	bl	80067ea <GetLineCoding>
 8006686:	4603      	mov	r3, r0
 8006688:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006696:	2102      	movs	r1, #2
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800669c:	7afb      	ldrb	r3, [r7, #11]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066b0:	2301      	movs	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d877      	bhi.n	80067bc <USBH_CDC_Process+0x114>
 80066cc:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <USBH_CDC_Process+0x2c>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	080066e9 	.word	0x080066e9
 80066d8:	080066ef 	.word	0x080066ef
 80066dc:	0800671f 	.word	0x0800671f
 80066e0:	08006793 	.word	0x08006793
 80066e4:	080067a1 	.word	0x080067a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73fb      	strb	r3, [r7, #15]
      break;
 80066ec:	e06d      	b.n	80067ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f897 	bl	8006828 <SetLineCoding>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800670c:	e058      	b.n	80067c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d055      	beq.n	80067c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2204      	movs	r2, #4
 8006718:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800671c:	e050      	b.n	80067c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	3340      	adds	r3, #64	; 0x40
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f860 	bl	80067ea <GetLineCoding>
 800672a:	4603      	mov	r3, r0
 800672c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d126      	bne.n	8006782 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006746:	791b      	ldrb	r3, [r3, #4]
 8006748:	429a      	cmp	r2, r3
 800674a:	d13b      	bne.n	80067c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006756:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006758:	429a      	cmp	r2, r3
 800675a:	d133      	bne.n	80067c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006766:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006768:	429a      	cmp	r2, r3
 800676a:	d12b      	bne.n	80067c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006774:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006776:	429a      	cmp	r2, r3
 8006778:	d124      	bne.n	80067c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f958 	bl	8006a30 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006780:	e020      	b.n	80067c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d01d      	beq.n	80067c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2204      	movs	r2, #4
 800678c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006790:	e018      	b.n	80067c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f867 	bl	8006866 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f8da 	bl	8006952 <CDC_ProcessReception>
      break;
 800679e:	e014      	b.n	80067ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 f822 	bl	80077ec <USBH_ClrFeature>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80067ba:	e005      	b.n	80067c8 <USBH_CDC_Process+0x120>

    default:
      break;
 80067bc:	bf00      	nop
 80067be:	e004      	b.n	80067ca <USBH_CDC_Process+0x122>
      break;
 80067c0:	bf00      	nop
 80067c2:	e002      	b.n	80067ca <USBH_CDC_Process+0x122>
      break;
 80067c4:	bf00      	nop
 80067c6:	e000      	b.n	80067ca <USBH_CDC_Process+0x122>
      break;
 80067c8:	bf00      	nop

  }

  return status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	22a1      	movs	r2, #161	; 0xa1
 80067f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2221      	movs	r2, #33	; 0x21
 80067fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2207      	movs	r2, #7
 8006810:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2207      	movs	r2, #7
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fb23 	bl	8007e64 <USBH_CtlReq>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2221      	movs	r2, #33	; 0x21
 8006836:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2207      	movs	r2, #7
 800684e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2207      	movs	r2, #7
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 fb04 	bl	8007e64 <USBH_CtlReq>
 800685c:	4603      	mov	r3, r0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af02      	add	r7, sp, #8
 800686c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006878:	2300      	movs	r3, #0
 800687a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006882:	2b01      	cmp	r3, #1
 8006884:	d002      	beq.n	800688c <CDC_ProcessTransmission+0x26>
 8006886:	2b02      	cmp	r3, #2
 8006888:	d023      	beq.n	80068d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800688a:	e05e      	b.n	800694a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	8b12      	ldrh	r2, [r2, #24]
 8006894:	4293      	cmp	r3, r2
 8006896:	d90b      	bls.n	80068b0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	69d9      	ldr	r1, [r3, #28]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8b1a      	ldrh	r2, [r3, #24]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	7b5b      	ldrb	r3, [r3, #13]
 80068a4:	2001      	movs	r0, #1
 80068a6:	9000      	str	r0, [sp, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fcea 	bl	8008282 <USBH_BulkSendData>
 80068ae:	e00b      	b.n	80068c8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	7b5b      	ldrb	r3, [r3, #13]
 80068be:	2001      	movs	r0, #1
 80068c0:	9000      	str	r0, [sp, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fcdd 	bl	8008282 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068d0:	e03b      	b.n	800694a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	7b5b      	ldrb	r3, [r3, #13]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f002 f801 	bl	80088e0 <USBH_LL_GetURBState>
 80068de:	4603      	mov	r3, r0
 80068e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d128      	bne.n	800693a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	8b12      	ldrh	r2, [r2, #24]
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d90e      	bls.n	8006912 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	8b12      	ldrh	r2, [r2, #24]
 80068fc:	1a9a      	subs	r2, r3, r2
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	8b12      	ldrh	r2, [r2, #24]
 800690a:	441a      	add	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	61da      	str	r2, [r3, #28]
 8006910:	e002      	b.n	8006918 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006928:	e00e      	b.n	8006948 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f868 	bl	8006a08 <USBH_CDC_TransmitCallback>
      break;
 8006938:	e006      	b.n	8006948 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d103      	bne.n	8006948 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006948:	bf00      	nop
  }
}
 800694a:	bf00      	nop
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006964:	2300      	movs	r3, #0
 8006966:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800696e:	2b03      	cmp	r3, #3
 8006970:	d002      	beq.n	8006978 <CDC_ProcessReception+0x26>
 8006972:	2b04      	cmp	r3, #4
 8006974:	d00e      	beq.n	8006994 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006976:	e043      	b.n	8006a00 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	6a19      	ldr	r1, [r3, #32]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	8b5a      	ldrh	r2, [r3, #26]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	7b1b      	ldrb	r3, [r3, #12]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 fca1 	bl	80082cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2204      	movs	r2, #4
 800698e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006992:	e035      	b.n	8006a00 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	7b1b      	ldrb	r3, [r3, #12]
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 ffa0 	bl	80088e0 <USBH_LL_GetURBState>
 80069a0:	4603      	mov	r3, r0
 80069a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d129      	bne.n	80069fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	7b1b      	ldrb	r3, [r3, #12]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 ff03 	bl	80087bc <USBH_LL_GetLastXferSize>
 80069b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d016      	beq.n	80069f0 <CDC_ProcessReception+0x9e>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	8b5b      	ldrh	r3, [r3, #26]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d910      	bls.n	80069f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	441a      	add	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2203      	movs	r2, #3
 80069ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069ee:	e006      	b.n	80069fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f80f 	bl	8006a1c <USBH_CDC_ReceiveCallback>
      break;
 80069fe:	bf00      	nop
  }
}
 8006a00:	bf00      	nop
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e029      	b.n	8006ab0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	79fa      	ldrb	r2, [r7, #7]
 8006a60:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f81f 	bl	8006ab8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f001 fdd3 	bl	8008654 <USBH_LL_Init>

  return USBH_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e009      	b.n	8006ade <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	33e0      	adds	r3, #224	; 0xe0
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b0f      	cmp	r3, #15
 8006ae2:	d9f2      	bls.n	8006aca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e009      	b.n	8006afe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006af4:	2200      	movs	r2, #0
 8006af6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b04:	d3f1      	bcc.n	8006aea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2240      	movs	r2, #64	; 0x40
 8006b2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	331c      	adds	r3, #28
 8006b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f002 f942 	bl	8008de6 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f002 f939 	bl	8008de6 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f203 3326 	addw	r3, r3, #806	; 0x326
 8006b7a:	2212      	movs	r2, #18
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f002 f931 	bl	8008de6 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b8a:	223e      	movs	r2, #62	; 0x3e
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f002 f929 	bl	8008de6 <memset>

  return USBH_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d016      	beq.n	8006be0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10e      	bne.n	8006bda <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bc2:	1c59      	adds	r1, r3, #1
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	33de      	adds	r3, #222	; 0xde
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
 8006bd8:	e004      	b.n	8006be4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	73fb      	strb	r3, [r7, #15]
 8006bde:	e001      	b.n	8006be4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006be0:	2302      	movs	r3, #2
 8006be2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d204      	bcs.n	8006c18 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c16:	e001      	b.n	8006c1c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	4608      	mov	r0, r1
 8006c34:	4611      	mov	r1, r2
 8006c36:	461a      	mov	r2, r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	70fb      	strb	r3, [r7, #3]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70bb      	strb	r3, [r7, #2]
 8006c40:	4613      	mov	r3, r2
 8006c42:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c52:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c54:	e025      	b.n	8006ca2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	221a      	movs	r2, #26
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	3308      	adds	r3, #8
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	3302      	adds	r3, #2
 8006c66:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	795b      	ldrb	r3, [r3, #5]
 8006c6c:	78fa      	ldrb	r2, [r7, #3]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d002      	beq.n	8006c78 <USBH_FindInterface+0x4e>
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	2bff      	cmp	r3, #255	; 0xff
 8006c76:	d111      	bne.n	8006c9c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c7c:	78ba      	ldrb	r2, [r7, #2]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d002      	beq.n	8006c88 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c82:	78bb      	ldrb	r3, [r7, #2]
 8006c84:	2bff      	cmp	r3, #255	; 0xff
 8006c86:	d109      	bne.n	8006c9c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c8c:	787a      	ldrb	r2, [r7, #1]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d002      	beq.n	8006c98 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c92:	787b      	ldrb	r3, [r7, #1]
 8006c94:	2bff      	cmp	r3, #255	; 0xff
 8006c96:	d101      	bne.n	8006c9c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	e006      	b.n	8006caa <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d9d6      	bls.n	8006c56 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ca8:	23ff      	movs	r3, #255	; 0xff
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fd04 	bl	80086cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fe1d 	bl	8008906 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af04      	add	r7, sp, #16
 8006cde:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d102      	bne.n	8006cfa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b0b      	cmp	r3, #11
 8006d02:	f200 81be 	bhi.w	8007082 <USBH_Process+0x3aa>
 8006d06:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBH_Process+0x34>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d3d 	.word	0x08006d3d
 8006d10:	08006d6f 	.word	0x08006d6f
 8006d14:	08006dd7 	.word	0x08006dd7
 8006d18:	0800701d 	.word	0x0800701d
 8006d1c:	08007083 	.word	0x08007083
 8006d20:	08006e7b 	.word	0x08006e7b
 8006d24:	08006fc3 	.word	0x08006fc3
 8006d28:	08006eb1 	.word	0x08006eb1
 8006d2c:	08006ed1 	.word	0x08006ed1
 8006d30:	08006ef1 	.word	0x08006ef1
 8006d34:	08006f35 	.word	0x08006f35
 8006d38:	08007005 	.word	0x08007005
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 819e 	beq.w	8007086 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d50:	20c8      	movs	r0, #200	; 0xc8
 8006d52:	f001 fe22 	bl	800899a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fd15 	bl	8008786 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d6c:	e18b      	b.n	8007086 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d107      	bne.n	8006d88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d86:	e18d      	b.n	80070a4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d92:	d914      	bls.n	8006dbe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d903      	bls.n	8006db6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	220d      	movs	r2, #13
 8006db2:	701a      	strb	r2, [r3, #0]
      break;
 8006db4:	e176      	b.n	80070a4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
      break;
 8006dbc:	e172      	b.n	80070a4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dc4:	f103 020a 	add.w	r2, r3, #10
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006dce:	200a      	movs	r0, #10
 8006dd0:	f001 fde3 	bl	800899a <USBH_Delay>
      break;
 8006dd4:	e166      	b.n	80070a4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de6:	2104      	movs	r1, #4
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006dec:	2064      	movs	r0, #100	; 0x64
 8006dee:	f001 fdd4 	bl	800899a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fca0 	bl	8008738 <USBH_LL_GetSpeed>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2205      	movs	r2, #5
 8006e06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e08:	2100      	movs	r1, #0
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 faab 	bl	8008366 <USBH_AllocPipe>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e18:	2180      	movs	r1, #128	; 0x80
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 faa3 	bl	8008366 <USBH_AllocPipe>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7919      	ldrb	r1, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e3c:	b292      	uxth	r2, r2
 8006e3e:	9202      	str	r2, [sp, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	9201      	str	r2, [sp, #4]
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	4603      	mov	r3, r0
 8006e48:	2280      	movs	r2, #128	; 0x80
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fa5c 	bl	8008308 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7959      	ldrb	r1, [r3, #5]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e64:	b292      	uxth	r2, r2
 8006e66:	9202      	str	r2, [sp, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	9201      	str	r2, [sp, #4]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2200      	movs	r2, #0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fa48 	bl	8008308 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e78:	e114      	b.n	80070a4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f918 	bl	80070b0 <USBH_HandleEnum>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 80fe 	bne.w	800708a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d103      	bne.n	8006ea8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2208      	movs	r2, #8
 8006ea4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ea6:	e0f0      	b.n	800708a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2207      	movs	r2, #7
 8006eac:	701a      	strb	r2, [r3, #0]
      break;
 8006eae:	e0ec      	b.n	800708a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 80e9 	beq.w	800708e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2208      	movs	r2, #8
 8006ecc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006ece:	e0de      	b.n	800708e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fc3f 	bl	800775e <USBH_SetCfg>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 80d5 	bne.w	8007092 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2209      	movs	r2, #9
 8006eec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eee:	e0d0      	b.n	8007092 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d016      	beq.n	8006f2c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006efe:	2101      	movs	r1, #1
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc4f 	bl	80077a4 <USBH_SetFeature>
 8006f06:	4603      	mov	r3, r0
 8006f08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d103      	bne.n	8006f1a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	220a      	movs	r2, #10
 8006f16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f18:	e0bd      	b.n	8007096 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	f040 80b9 	bne.w	8007096 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	220a      	movs	r2, #10
 8006f28:	701a      	strb	r2, [r3, #0]
      break;
 8006f2a:	e0b4      	b.n	8007096 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	220a      	movs	r2, #10
 8006f30:	701a      	strb	r2, [r3, #0]
      break;
 8006f32:	e0b0      	b.n	8007096 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80ad 	beq.w	800709a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
 8006f4c:	e016      	b.n	8006f7c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	32de      	adds	r2, #222	; 0xde
 8006f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f58:	791a      	ldrb	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d108      	bne.n	8006f76 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f64:	7bfa      	ldrb	r2, [r7, #15]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	32de      	adds	r2, #222	; 0xde
 8006f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006f74:	e005      	b.n	8006f82 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0e5      	beq.n	8006f4e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d016      	beq.n	8006fba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2206      	movs	r2, #6
 8006fa2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006faa:	2103      	movs	r1, #3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fb0:	e073      	b.n	800709a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	220d      	movs	r2, #13
 8006fb6:	701a      	strb	r2, [r3, #0]
      break;
 8006fb8:	e06f      	b.n	800709a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	220d      	movs	r2, #13
 8006fbe:	701a      	strb	r2, [r3, #0]
      break;
 8006fc0:	e06b      	b.n	800709a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d017      	beq.n	8006ffc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d103      	bne.n	8006fec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	220b      	movs	r2, #11
 8006fe8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fea:	e058      	b.n	800709e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d154      	bne.n	800709e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	220d      	movs	r2, #13
 8006ff8:	701a      	strb	r2, [r3, #0]
      break;
 8006ffa:	e050      	b.n	800709e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	220d      	movs	r2, #13
 8007000:	701a      	strb	r2, [r3, #0]
      break;
 8007002:	e04c      	b.n	800709e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d049      	beq.n	80070a2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	4798      	blx	r3
      }
      break;
 800701a:	e042      	b.n	80070a2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fd47 	bl	8006ab8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007058:	2105      	movs	r1, #5
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b01      	cmp	r3, #1
 8007068:	d107      	bne.n	800707a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fe1f 	bl	8006cb6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007078:	e014      	b.n	80070a4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fb26 	bl	80086cc <USBH_LL_Start>
      break;
 8007080:	e010      	b.n	80070a4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007082:	bf00      	nop
 8007084:	e00e      	b.n	80070a4 <USBH_Process+0x3cc>
      break;
 8007086:	bf00      	nop
 8007088:	e00c      	b.n	80070a4 <USBH_Process+0x3cc>
      break;
 800708a:	bf00      	nop
 800708c:	e00a      	b.n	80070a4 <USBH_Process+0x3cc>
    break;
 800708e:	bf00      	nop
 8007090:	e008      	b.n	80070a4 <USBH_Process+0x3cc>
      break;
 8007092:	bf00      	nop
 8007094:	e006      	b.n	80070a4 <USBH_Process+0x3cc>
      break;
 8007096:	bf00      	nop
 8007098:	e004      	b.n	80070a4 <USBH_Process+0x3cc>
      break;
 800709a:	bf00      	nop
 800709c:	e002      	b.n	80070a4 <USBH_Process+0x3cc>
      break;
 800709e:	bf00      	nop
 80070a0:	e000      	b.n	80070a4 <USBH_Process+0x3cc>
      break;
 80070a2:	bf00      	nop
  }
  return USBH_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop

080070b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af04      	add	r7, sp, #16
 80070b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80070bc:	2301      	movs	r3, #1
 80070be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b07      	cmp	r3, #7
 80070c6:	f200 81c1 	bhi.w	800744c <USBH_HandleEnum+0x39c>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <USBH_HandleEnum+0x20>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	080071af 	.word	0x080071af
 80070d8:	08007219 	.word	0x08007219
 80070dc:	080072a7 	.word	0x080072a7
 80070e0:	08007311 	.word	0x08007311
 80070e4:	08007381 	.word	0x08007381
 80070e8:	080073c7 	.word	0x080073c7
 80070ec:	0800740d 	.word	0x0800740d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070f0:	2108      	movs	r1, #8
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa50 	bl	8007598 <USBH_Get_DevDesc>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d130      	bne.n	8007164 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7919      	ldrb	r1, [r3, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007126:	b292      	uxth	r2, r2
 8007128:	9202      	str	r2, [sp, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	9201      	str	r2, [sp, #4]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	4603      	mov	r3, r0
 8007132:	2280      	movs	r2, #128	; 0x80
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 f8e7 	bl	8008308 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7959      	ldrb	r1, [r3, #5]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800714e:	b292      	uxth	r2, r2
 8007150:	9202      	str	r2, [sp, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	9201      	str	r2, [sp, #4]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	4603      	mov	r3, r0
 800715a:	2200      	movs	r2, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 f8d3 	bl	8008308 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007162:	e175      	b.n	8007450 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b03      	cmp	r3, #3
 8007168:	f040 8172 	bne.w	8007450 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007172:	3301      	adds	r3, #1
 8007174:	b2da      	uxtb	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007182:	2b03      	cmp	r3, #3
 8007184:	d903      	bls.n	800718e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	220d      	movs	r2, #13
 800718a:	701a      	strb	r2, [r3, #0]
      break;
 800718c:	e160      	b.n	8007450 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	795b      	ldrb	r3, [r3, #5]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f907 	bl	80083a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	791b      	ldrb	r3, [r3, #4]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f901 	bl	80083a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
      break;
 80071ac:	e150      	b.n	8007450 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80071ae:	2112      	movs	r1, #18
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9f1 	bl	8007598 <USBH_Get_DevDesc>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071c6:	e145      	b.n	8007454 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	f040 8142 	bne.w	8007454 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071d6:	3301      	adds	r3, #1
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d903      	bls.n	80071f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	220d      	movs	r2, #13
 80071ee:	701a      	strb	r2, [r3, #0]
      break;
 80071f0:	e130      	b.n	8007454 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	795b      	ldrb	r3, [r3, #5]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 f8d5 	bl	80083a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	791b      	ldrb	r3, [r3, #4]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 f8cf 	bl	80083a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
      break;
 8007216:	e11d      	b.n	8007454 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007218:	2101      	movs	r1, #1
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa7b 	bl	8007716 <USBH_SetAddress>
 8007220:	4603      	mov	r3, r0
 8007222:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d132      	bne.n	8007290 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800722a:	2002      	movs	r0, #2
 800722c:	f001 fbb5 	bl	800899a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2203      	movs	r2, #3
 800723c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7919      	ldrb	r1, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007252:	b292      	uxth	r2, r2
 8007254:	9202      	str	r2, [sp, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	9201      	str	r2, [sp, #4]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4603      	mov	r3, r0
 800725e:	2280      	movs	r2, #128	; 0x80
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f851 	bl	8008308 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	7959      	ldrb	r1, [r3, #5]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800727a:	b292      	uxth	r2, r2
 800727c:	9202      	str	r2, [sp, #8]
 800727e:	2200      	movs	r2, #0
 8007280:	9201      	str	r2, [sp, #4]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4603      	mov	r3, r0
 8007286:	2200      	movs	r2, #0
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f83d 	bl	8008308 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800728e:	e0e3      	b.n	8007458 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b03      	cmp	r3, #3
 8007294:	f040 80e0 	bne.w	8007458 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	220d      	movs	r2, #13
 800729c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	705a      	strb	r2, [r3, #1]
      break;
 80072a4:	e0d8      	b.n	8007458 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80072a6:	2109      	movs	r1, #9
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9a1 	bl	80075f0 <USBH_Get_CfgDesc>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2204      	movs	r2, #4
 80072bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072be:	e0cd      	b.n	800745c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	f040 80ca 	bne.w	800745c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ce:	3301      	adds	r3, #1
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d903      	bls.n	80072ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	220d      	movs	r2, #13
 80072e6:	701a      	strb	r2, [r3, #0]
      break;
 80072e8:	e0b8      	b.n	800745c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	795b      	ldrb	r3, [r3, #5]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 f859 	bl	80083a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	791b      	ldrb	r3, [r3, #4]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 f853 	bl	80083a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
      break;
 800730e:	e0a5      	b.n	800745c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f969 	bl	80075f0 <USBH_Get_CfgDesc>
 800731e:	4603      	mov	r3, r0
 8007320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2205      	movs	r2, #5
 800732c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800732e:	e097      	b.n	8007460 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b03      	cmp	r3, #3
 8007334:	f040 8094 	bne.w	8007460 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800733e:	3301      	adds	r3, #1
 8007340:	b2da      	uxtb	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800734e:	2b03      	cmp	r3, #3
 8007350:	d903      	bls.n	800735a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	220d      	movs	r2, #13
 8007356:	701a      	strb	r2, [r3, #0]
      break;
 8007358:	e082      	b.n	8007460 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	795b      	ldrb	r3, [r3, #5]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f821 	bl	80083a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	791b      	ldrb	r3, [r3, #4]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f81b 	bl	80083a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
      break;
 800737e:	e06f      	b.n	8007460 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007386:	2b00      	cmp	r3, #0
 8007388:	d019      	beq.n	80073be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007396:	23ff      	movs	r3, #255	; 0xff
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f953 	bl	8007644 <USBH_Get_StringDesc>
 800739e:	4603      	mov	r3, r0
 80073a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2206      	movs	r2, #6
 80073ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073ae:	e059      	b.n	8007464 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d156      	bne.n	8007464 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2206      	movs	r2, #6
 80073ba:	705a      	strb	r2, [r3, #1]
      break;
 80073bc:	e052      	b.n	8007464 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2206      	movs	r2, #6
 80073c2:	705a      	strb	r2, [r3, #1]
      break;
 80073c4:	e04e      	b.n	8007464 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d019      	beq.n	8007404 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073dc:	23ff      	movs	r3, #255	; 0xff
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f930 	bl	8007644 <USBH_Get_StringDesc>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2207      	movs	r2, #7
 80073f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073f4:	e038      	b.n	8007468 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d135      	bne.n	8007468 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2207      	movs	r2, #7
 8007400:	705a      	strb	r2, [r3, #1]
      break;
 8007402:	e031      	b.n	8007468 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2207      	movs	r2, #7
 8007408:	705a      	strb	r2, [r3, #1]
      break;
 800740a:	e02d      	b.n	8007468 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007412:	2b00      	cmp	r3, #0
 8007414:	d017      	beq.n	8007446 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007422:	23ff      	movs	r3, #255	; 0xff
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f90d 	bl	8007644 <USBH_Get_StringDesc>
 800742a:	4603      	mov	r3, r0
 800742c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007438:	e018      	b.n	800746c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d115      	bne.n	800746c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
      break;
 8007444:	e012      	b.n	800746c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]
      break;
 800744a:	e00f      	b.n	800746c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800744c:	bf00      	nop
 800744e:	e00e      	b.n	800746e <USBH_HandleEnum+0x3be>
      break;
 8007450:	bf00      	nop
 8007452:	e00c      	b.n	800746e <USBH_HandleEnum+0x3be>
      break;
 8007454:	bf00      	nop
 8007456:	e00a      	b.n	800746e <USBH_HandleEnum+0x3be>
      break;
 8007458:	bf00      	nop
 800745a:	e008      	b.n	800746e <USBH_HandleEnum+0x3be>
      break;
 800745c:	bf00      	nop
 800745e:	e006      	b.n	800746e <USBH_HandleEnum+0x3be>
      break;
 8007460:	bf00      	nop
 8007462:	e004      	b.n	800746e <USBH_HandleEnum+0x3be>
      break;
 8007464:	bf00      	nop
 8007466:	e002      	b.n	800746e <USBH_HandleEnum+0x3be>
      break;
 8007468:	bf00      	nop
 800746a:	e000      	b.n	800746e <USBH_HandleEnum+0x3be>
      break;
 800746c:	bf00      	nop
  }
  return Status;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f804 	bl	80074ba <USBH_HandleSof>
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b0b      	cmp	r3, #11
 80074ca:	d10a      	bne.n	80074e2 <USBH_HandleSof+0x28>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
  }
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80074fa:	bf00      	nop
}
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007516:	bf00      	nop
}
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 f8c6 	bl	8008702 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 ff13 	bl	80083a8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	795b      	ldrb	r3, [r3, #5]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 ff0d 	bl	80083a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af02      	add	r7, sp, #8
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80075a4:	887b      	ldrh	r3, [r7, #2]
 80075a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075aa:	d901      	bls.n	80075b0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e01b      	b.n	80075e8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80075b6:	887b      	ldrh	r3, [r7, #2]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075c0:	2100      	movs	r1, #0
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f872 	bl	80076ac <USBH_GetDescriptor>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075d8:	887a      	ldrh	r2, [r7, #2]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f929 	bl	8007834 <USBH_ParseDevDesc>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	331c      	adds	r3, #28
 8007600:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007602:	887b      	ldrh	r3, [r7, #2]
 8007604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007608:	d901      	bls.n	800760e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800760a:	2303      	movs	r3, #3
 800760c:	e016      	b.n	800763c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800760e:	887b      	ldrh	r3, [r7, #2]
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007618:	2100      	movs	r1, #0
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f846 	bl	80076ac <USBH_GetDescriptor>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d107      	bne.n	800763a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800762a:	887b      	ldrh	r3, [r7, #2]
 800762c:	461a      	mov	r2, r3
 800762e:	68b9      	ldr	r1, [r7, #8]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f9b3 	bl	800799c <USBH_ParseCfgDesc>
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	461a      	mov	r2, r3
 8007650:	460b      	mov	r3, r1
 8007652:	72fb      	strb	r3, [r7, #11]
 8007654:	4613      	mov	r3, r2
 8007656:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007658:	893b      	ldrh	r3, [r7, #8]
 800765a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765e:	d802      	bhi.n	8007666 <USBH_Get_StringDesc+0x22>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007666:	2303      	movs	r3, #3
 8007668:	e01c      	b.n	80076a4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	b29b      	uxth	r3, r3
 800766e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007672:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800767a:	893b      	ldrh	r3, [r7, #8]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	460b      	mov	r3, r1
 8007680:	2100      	movs	r1, #0
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 f812 	bl	80076ac <USBH_GetDescriptor>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d107      	bne.n	80076a2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007698:	893a      	ldrh	r2, [r7, #8]
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fb93 	bl	8007dc8 <USBH_ParseStringDesc>
  }

  return status;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	607b      	str	r3, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	72fb      	strb	r3, [r7, #11]
 80076ba:	4613      	mov	r3, r2
 80076bc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	789b      	ldrb	r3, [r3, #2]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d11c      	bne.n	8007700 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80076c6:	7afb      	ldrb	r3, [r7, #11]
 80076c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2206      	movs	r2, #6
 80076d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	893a      	ldrh	r2, [r7, #8]
 80076dc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80076de:	893b      	ldrh	r3, [r7, #8]
 80076e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e8:	d104      	bne.n	80076f4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f240 4209 	movw	r2, #1033	; 0x409
 80076f0:	829a      	strh	r2, [r3, #20]
 80076f2:	e002      	b.n	80076fa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8b3a      	ldrh	r2, [r7, #24]
 80076fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007700:	8b3b      	ldrh	r3, [r7, #24]
 8007702:	461a      	mov	r2, r3
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fbac 	bl	8007e64 <USBH_CtlReq>
 800770c:	4603      	mov	r3, r0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d10f      	bne.n	800774a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2205      	movs	r2, #5
 8007734:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	b29a      	uxth	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fb88 	bl	8007e64 <USBH_CtlReq>
 8007754:	4603      	mov	r3, r0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	789b      	ldrb	r3, [r3, #2]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10e      	bne.n	8007790 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2209      	movs	r2, #9
 800777c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	887a      	ldrh	r2, [r7, #2]
 8007782:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007790:	2200      	movs	r2, #0
 8007792:	2100      	movs	r1, #0
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fb65 	bl	8007e64 <USBH_CtlReq>
 800779a:	4603      	mov	r3, r0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	789b      	ldrb	r3, [r3, #2]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d10f      	bne.n	80077d8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2203      	movs	r2, #3
 80077c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077d8:	2200      	movs	r2, #0
 80077da:	2100      	movs	r1, #0
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb41 	bl	8007e64 <USBH_CtlReq>
 80077e2:	4603      	mov	r3, r0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	789b      	ldrb	r3, [r3, #2]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d10f      	bne.n	8007820 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007812:	78fb      	ldrb	r3, [r7, #3]
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007820:	2200      	movs	r2, #0
 8007822:	2100      	movs	r1, #0
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fb1d 	bl	8007e64 <USBH_CtlReq>
 800782a:	4603      	mov	r3, r0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007848:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007854:	2302      	movs	r3, #2
 8007856:	e098      	b.n	800798a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	785a      	ldrb	r2, [r3, #1]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	3302      	adds	r3, #2
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	b29a      	uxth	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	3303      	adds	r3, #3
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	021b      	lsls	r3, r3, #8
 800787a:	b29b      	uxth	r3, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	b29a      	uxth	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	791a      	ldrb	r2, [r3, #4]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	795a      	ldrb	r2, [r3, #5]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	799a      	ldrb	r2, [r3, #6]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	79da      	ldrb	r2, [r3, #7]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11b      	bne.n	80078f0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	79db      	ldrb	r3, [r3, #7]
 80078bc:	2b20      	cmp	r3, #32
 80078be:	dc0f      	bgt.n	80078e0 <USBH_ParseDevDesc+0xac>
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	db0f      	blt.n	80078e4 <USBH_ParseDevDesc+0xb0>
 80078c4:	3b08      	subs	r3, #8
 80078c6:	4a34      	ldr	r2, [pc, #208]	; (8007998 <USBH_ParseDevDesc+0x164>)
 80078c8:	fa22 f303 	lsr.w	r3, r2, r3
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	bf14      	ite	ne
 80078d4:	2301      	movne	r3, #1
 80078d6:	2300      	moveq	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <USBH_ParseDevDesc+0xb8>
 80078de:	e001      	b.n	80078e4 <USBH_ParseDevDesc+0xb0>
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d003      	beq.n	80078ec <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2208      	movs	r2, #8
 80078e8:	71da      	strb	r2, [r3, #7]
        break;
 80078ea:	e000      	b.n	80078ee <USBH_ParseDevDesc+0xba>
        break;
 80078ec:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80078ee:	e00e      	b.n	800790e <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d107      	bne.n	800790a <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	79db      	ldrb	r3, [r3, #7]
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d005      	beq.n	800790e <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	2208      	movs	r2, #8
 8007906:	71da      	strb	r2, [r3, #7]
 8007908:	e001      	b.n	800790e <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800790a:	2303      	movs	r3, #3
 800790c:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d939      	bls.n	8007988 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	3308      	adds	r3, #8
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b29a      	uxth	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3309      	adds	r3, #9
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	b29b      	uxth	r3, r3
 8007928:	4313      	orrs	r3, r2
 800792a:	b29a      	uxth	r2, r3
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	330a      	adds	r3, #10
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b29a      	uxth	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	330b      	adds	r3, #11
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	b29b      	uxth	r3, r3
 8007944:	4313      	orrs	r3, r2
 8007946:	b29a      	uxth	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	330c      	adds	r3, #12
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b29a      	uxth	r2, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	330d      	adds	r3, #13
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	b29b      	uxth	r3, r3
 8007960:	4313      	orrs	r3, r2
 8007962:	b29a      	uxth	r2, r3
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	7b9a      	ldrb	r2, [r3, #14]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	7bda      	ldrb	r2, [r3, #15]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	7c1a      	ldrb	r2, [r3, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	7c5a      	ldrb	r2, [r3, #17]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007988:	7dfb      	ldrb	r3, [r7, #23]
}
 800798a:	4618      	mov	r0, r3
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	01000101 	.word	0x01000101

0800799c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08c      	sub	sp, #48	; 0x30
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80079ca:	2302      	movs	r3, #2
 80079cc:	e0db      	b.n	8007b86 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	785a      	ldrb	r2, [r3, #1]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	3302      	adds	r3, #2
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3303      	adds	r3, #3
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fe:	bf28      	it	cs
 8007a00:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	791a      	ldrb	r2, [r3, #4]
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	795a      	ldrb	r2, [r3, #5]
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	799a      	ldrb	r2, [r3, #6]
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	79da      	ldrb	r2, [r3, #7]
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	7a1a      	ldrb	r2, [r3, #8]
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d002      	beq.n	8007a40 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	2209      	movs	r2, #9
 8007a3e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	2b09      	cmp	r3, #9
 8007a44:	f240 809d 	bls.w	8007b82 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a48:	2309      	movs	r3, #9
 8007a4a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a50:	e081      	b.n	8007b56 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a52:	f107 0316 	add.w	r3, r7, #22
 8007a56:	4619      	mov	r1, r3
 8007a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a5a:	f000 f9e8 	bl	8007e2e <USBH_GetNextDesc>
 8007a5e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d176      	bne.n	8007b56 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b09      	cmp	r3, #9
 8007a6e:	d002      	beq.n	8007a76 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	2209      	movs	r2, #9
 8007a74:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a7a:	221a      	movs	r2, #26
 8007a7c:	fb02 f303 	mul.w	r3, r2, r3
 8007a80:	3308      	adds	r3, #8
 8007a82:	6a3a      	ldr	r2, [r7, #32]
 8007a84:	4413      	add	r3, r2
 8007a86:	3302      	adds	r3, #2
 8007a88:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a8c:	69f8      	ldr	r0, [r7, #28]
 8007a8e:	f000 f87e 	bl	8007b8e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a9c:	e043      	b.n	8007b26 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a9e:	f107 0316 	add.w	r3, r7, #22
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aa6:	f000 f9c2 	bl	8007e2e <USBH_GetNextDesc>
 8007aaa:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b05      	cmp	r3, #5
 8007ab2:	d138      	bne.n	8007b26 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	795b      	ldrb	r3, [r3, #5]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d113      	bne.n	8007ae4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d003      	beq.n	8007acc <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	799b      	ldrb	r3, [r3, #6]
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d10b      	bne.n	8007ae4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	79db      	ldrb	r3, [r3, #7]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <USBH_ParseCfgDesc+0x150>
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b09      	cmp	r3, #9
 8007ada:	d007      	beq.n	8007aec <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	2209      	movs	r2, #9
 8007ae0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ae2:	e003      	b.n	8007aec <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	2207      	movs	r2, #7
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e000      	b.n	8007aee <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007aec:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007af6:	3201      	adds	r2, #1
 8007af8:	00d2      	lsls	r2, r2, #3
 8007afa:	211a      	movs	r1, #26
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	4413      	add	r3, r2
 8007b02:	3308      	adds	r3, #8
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	4413      	add	r3, r2
 8007b08:	3304      	adds	r3, #4
 8007b0a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b0e:	69b9      	ldr	r1, [r7, #24]
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f870 	bl	8007bf6 <USBH_ParseEPDesc>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b20:	3301      	adds	r3, #1
 8007b22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	791b      	ldrb	r3, [r3, #4]
 8007b2a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d204      	bcs.n	8007b3c <USBH_ParseCfgDesc+0x1a0>
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	885a      	ldrh	r2, [r3, #2]
 8007b36:	8afb      	ldrh	r3, [r7, #22]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d8b0      	bhi.n	8007a9e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	791b      	ldrb	r3, [r3, #4]
 8007b40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d201      	bcs.n	8007b4c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e01c      	b.n	8007b86 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8007b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b50:	3301      	adds	r3, #1
 8007b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d805      	bhi.n	8007b6a <USBH_ParseCfgDesc+0x1ce>
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	885a      	ldrh	r2, [r3, #2]
 8007b62:	8afb      	ldrh	r3, [r7, #22]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	f63f af74 	bhi.w	8007a52 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	791b      	ldrb	r3, [r3, #4]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	bf28      	it	cs
 8007b72:	2302      	movcs	r3, #2
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d201      	bcs.n	8007b82 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e001      	b.n	8007b86 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8007b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3730      	adds	r7, #48	; 0x30
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	785a      	ldrb	r2, [r3, #1]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	789a      	ldrb	r2, [r3, #2]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	78da      	ldrb	r2, [r3, #3]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	bf28      	it	cs
 8007bc2:	2302      	movcs	r3, #2
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	795a      	ldrb	r2, [r3, #5]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	799a      	ldrb	r2, [r3, #6]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	79da      	ldrb	r2, [r3, #7]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	7a1a      	ldrb	r2, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	721a      	strb	r2, [r3, #8]
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b087      	sub	sp, #28
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	785a      	ldrb	r2, [r3, #1]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	789a      	ldrb	r2, [r3, #2]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	78da      	ldrb	r2, [r3, #3]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3305      	adds	r3, #5
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	799a      	ldrb	r2, [r3, #6]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	889b      	ldrh	r3, [r3, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5a:	d804      	bhi.n	8007c66 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c64:	d901      	bls.n	8007c6a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8007c66:	2303      	movs	r3, #3
 8007c68:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d136      	bne.n	8007ce2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	78db      	ldrb	r3, [r3, #3]
 8007c78:	f003 0303 	and.w	r3, r3, #3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d108      	bne.n	8007c92 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	889b      	ldrh	r3, [r3, #4]
 8007c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c88:	f240 8097 	bls.w	8007dba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	75fb      	strb	r3, [r7, #23]
 8007c90:	e093      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	78db      	ldrb	r3, [r3, #3]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d107      	bne.n	8007cae <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	889b      	ldrh	r3, [r3, #4]
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	f240 8089 	bls.w	8007dba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	75fb      	strb	r3, [r7, #23]
 8007cac:	e085      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	78db      	ldrb	r3, [r3, #3]
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d005      	beq.n	8007cc6 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	78db      	ldrb	r3, [r3, #3]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d10a      	bne.n	8007cdc <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	799b      	ldrb	r3, [r3, #6]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <USBH_ParseEPDesc+0xe0>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	799b      	ldrb	r3, [r3, #6]
 8007cd2:	2b10      	cmp	r3, #16
 8007cd4:	d970      	bls.n	8007db8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cda:	e06d      	b.n	8007db8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	75fb      	strb	r3, [r7, #23]
 8007ce0:	e06b      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d13c      	bne.n	8007d66 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	78db      	ldrb	r3, [r3, #3]
 8007cf0:	f003 0303 	and.w	r3, r3, #3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d005      	beq.n	8007d04 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	78db      	ldrb	r3, [r3, #3]
 8007cfc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d106      	bne.n	8007d12 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	889b      	ldrh	r3, [r3, #4]
 8007d08:	2b40      	cmp	r3, #64	; 0x40
 8007d0a:	d956      	bls.n	8007dba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007d10:	e053      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	78db      	ldrb	r3, [r3, #3]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d10e      	bne.n	8007d3c <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	799b      	ldrb	r3, [r3, #6]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d803      	bhi.n	8007d36 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d941      	bls.n	8007dba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007d36:	2303      	movs	r3, #3
 8007d38:	75fb      	strb	r3, [r7, #23]
 8007d3a:	e03e      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	78db      	ldrb	r3, [r3, #3]
 8007d40:	f003 0303 	and.w	r3, r3, #3
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d10b      	bne.n	8007d60 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	799b      	ldrb	r3, [r3, #6]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <USBH_ParseEPDesc+0x164>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	889b      	ldrh	r3, [r3, #4]
 8007d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d58:	d32f      	bcc.n	8007dba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	75fb      	strb	r3, [r7, #23]
 8007d5e:	e02c      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007d60:	2303      	movs	r3, #3
 8007d62:	75fb      	strb	r3, [r7, #23]
 8007d64:	e029      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d120      	bne.n	8007db2 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	78db      	ldrb	r3, [r3, #3]
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d106      	bne.n	8007d8a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	889b      	ldrh	r3, [r3, #4]
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d01a      	beq.n	8007dba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007d84:	2303      	movs	r3, #3
 8007d86:	75fb      	strb	r3, [r7, #23]
 8007d88:	e017      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	78db      	ldrb	r3, [r3, #3]
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d10a      	bne.n	8007dac <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	799b      	ldrb	r3, [r3, #6]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <USBH_ParseEPDesc+0x1b0>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	889b      	ldrh	r3, [r3, #4]
 8007da2:	2b08      	cmp	r3, #8
 8007da4:	d909      	bls.n	8007dba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007da6:	2303      	movs	r3, #3
 8007da8:	75fb      	strb	r3, [r7, #23]
 8007daa:	e006      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007dac:	2303      	movs	r3, #3
 8007dae:	75fb      	strb	r3, [r7, #23]
 8007db0:	e003      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007db2:	2303      	movs	r3, #3
 8007db4:	75fb      	strb	r3, [r7, #23]
 8007db6:	e000      	b.n	8007dba <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007db8:	bf00      	nop
  }

  return status;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d120      	bne.n	8007e22 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	1e9a      	subs	r2, r3, #2
 8007de6:	88fb      	ldrh	r3, [r7, #6]
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bf28      	it	cs
 8007dec:	4613      	movcs	r3, r2
 8007dee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3302      	adds	r3, #2
 8007df4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007df6:	2300      	movs	r3, #0
 8007df8:	82fb      	strh	r3, [r7, #22]
 8007dfa:	e00b      	b.n	8007e14 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007dfc:	8afb      	ldrh	r3, [r7, #22]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007e0e:	8afb      	ldrh	r3, [r7, #22]
 8007e10:	3302      	adds	r3, #2
 8007e12:	82fb      	strh	r3, [r7, #22]
 8007e14:	8afa      	ldrh	r2, [r7, #22]
 8007e16:	8abb      	ldrh	r3, [r7, #20]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d3ef      	bcc.n	8007dfc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
  }
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b085      	sub	sp, #20
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	881a      	ldrh	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	4413      	add	r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4413      	add	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e56:	68fb      	ldr	r3, [r7, #12]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e72:	2301      	movs	r3, #1
 8007e74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	789b      	ldrb	r3, [r3, #2]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d002      	beq.n	8007e84 <USBH_CtlReq+0x20>
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d00f      	beq.n	8007ea2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e82:	e027      	b.n	8007ed4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea0:	e018      	b.n	8007ed4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 f81c 	bl	8007ee0 <USBH_HandleControl>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <USBH_CtlReq+0x54>
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d106      	bne.n	8007ec6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	761a      	strb	r2, [r3, #24]
      break;
 8007ec4:	e005      	b.n	8007ed2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d102      	bne.n	8007ed2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	709a      	strb	r2, [r3, #2]
      break;
 8007ed2:	bf00      	nop
  }
  return status;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7e1b      	ldrb	r3, [r3, #24]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	2b0a      	cmp	r3, #10
 8007ef8:	f200 8156 	bhi.w	80081a8 <USBH_HandleControl+0x2c8>
 8007efc:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <USBH_HandleControl+0x24>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	08007f4b 	.word	0x08007f4b
 8007f0c:	08007fb5 	.word	0x08007fb5
 8007f10:	08007fdb 	.word	0x08007fdb
 8007f14:	08008013 	.word	0x08008013
 8007f18:	0800803d 	.word	0x0800803d
 8007f1c:	0800808f 	.word	0x0800808f
 8007f20:	080080b1 	.word	0x080080b1
 8007f24:	080080ed 	.word	0x080080ed
 8007f28:	08008113 	.word	0x08008113
 8007f2c:	08008151 	.word	0x08008151
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f103 0110 	add.w	r1, r3, #16
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	795b      	ldrb	r3, [r3, #5]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f943 	bl	80081c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	761a      	strb	r2, [r3, #24]
      break;
 8007f48:	e139      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	795b      	ldrb	r3, [r3, #5]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fcc5 	bl	80088e0 <USBH_LL_GetURBState>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d11e      	bne.n	8007f9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7c1b      	ldrb	r3, [r3, #16]
 8007f64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8adb      	ldrh	r3, [r3, #22]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f72:	7b7b      	ldrb	r3, [r7, #13]
 8007f74:	2b80      	cmp	r3, #128	; 0x80
 8007f76:	d103      	bne.n	8007f80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f7e:	e115      	b.n	80081ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2205      	movs	r2, #5
 8007f84:	761a      	strb	r2, [r3, #24]
      break;
 8007f86:	e111      	b.n	80081ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007f88:	7b7b      	ldrb	r3, [r7, #13]
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	d103      	bne.n	8007f96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2209      	movs	r2, #9
 8007f92:	761a      	strb	r2, [r3, #24]
      break;
 8007f94:	e10a      	b.n	80081ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2207      	movs	r2, #7
 8007f9a:	761a      	strb	r2, [r3, #24]
      break;
 8007f9c:	e106      	b.n	80081ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d003      	beq.n	8007fac <USBH_HandleControl+0xcc>
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	f040 8100 	bne.w	80081ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220b      	movs	r2, #11
 8007fb0:	761a      	strb	r2, [r3, #24]
      break;
 8007fb2:	e0fb      	b.n	80081ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6899      	ldr	r1, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	899a      	ldrh	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	791b      	ldrb	r3, [r3, #4]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f93a 	bl	8008246 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	761a      	strb	r2, [r3, #24]
      break;
 8007fd8:	e0f1      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	791b      	ldrb	r3, [r3, #4]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fc7d 	bl	80088e0 <USBH_LL_GetURBState>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d102      	bne.n	8007ff6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2209      	movs	r2, #9
 8007ff4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b05      	cmp	r3, #5
 8007ffa:	d102      	bne.n	8008002 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008000:	e0d6      	b.n	80081b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b04      	cmp	r3, #4
 8008006:	f040 80d3 	bne.w	80081b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	220b      	movs	r2, #11
 800800e:	761a      	strb	r2, [r3, #24]
      break;
 8008010:	e0ce      	b.n	80081b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6899      	ldr	r1, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	899a      	ldrh	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	795b      	ldrb	r3, [r3, #5]
 800801e:	2001      	movs	r0, #1
 8008020:	9000      	str	r0, [sp, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f8ea 	bl	80081fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800802e:	b29a      	uxth	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2206      	movs	r2, #6
 8008038:	761a      	strb	r2, [r3, #24]
      break;
 800803a:	e0c0      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	795b      	ldrb	r3, [r3, #5]
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fc4c 	bl	80088e0 <USBH_LL_GetURBState>
 8008048:	4603      	mov	r3, r0
 800804a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d103      	bne.n	800805a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2207      	movs	r2, #7
 8008056:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008058:	e0ac      	b.n	80081b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b05      	cmp	r3, #5
 800805e:	d105      	bne.n	800806c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	220c      	movs	r2, #12
 8008064:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008066:	2303      	movs	r3, #3
 8008068:	73fb      	strb	r3, [r7, #15]
      break;
 800806a:	e0a3      	b.n	80081b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d103      	bne.n	800807a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2205      	movs	r2, #5
 8008076:	761a      	strb	r2, [r3, #24]
      break;
 8008078:	e09c      	b.n	80081b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b04      	cmp	r3, #4
 800807e:	f040 8099 	bne.w	80081b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	220b      	movs	r2, #11
 8008086:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008088:	2302      	movs	r3, #2
 800808a:	73fb      	strb	r3, [r7, #15]
      break;
 800808c:	e092      	b.n	80081b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	791b      	ldrb	r3, [r3, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f8d5 	bl	8008246 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2208      	movs	r2, #8
 80080ac:	761a      	strb	r2, [r3, #24]

      break;
 80080ae:	e086      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	791b      	ldrb	r3, [r3, #4]
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fc12 	bl	80088e0 <USBH_LL_GetURBState>
 80080bc:	4603      	mov	r3, r0
 80080be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d105      	bne.n	80080d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	220d      	movs	r2, #13
 80080ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080d0:	e072      	b.n	80081b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d103      	bne.n	80080e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	220b      	movs	r2, #11
 80080dc:	761a      	strb	r2, [r3, #24]
      break;
 80080de:	e06b      	b.n	80081b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	2b05      	cmp	r3, #5
 80080e4:	d168      	bne.n	80081b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80080e6:	2303      	movs	r3, #3
 80080e8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ea:	e065      	b.n	80081b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	795b      	ldrb	r3, [r3, #5]
 80080f0:	2201      	movs	r2, #1
 80080f2:	9200      	str	r2, [sp, #0]
 80080f4:	2200      	movs	r2, #0
 80080f6:	2100      	movs	r1, #0
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f87f 	bl	80081fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	220a      	movs	r2, #10
 800810e:	761a      	strb	r2, [r3, #24]
      break;
 8008110:	e055      	b.n	80081be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	795b      	ldrb	r3, [r3, #5]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fbe1 	bl	80088e0 <USBH_LL_GetURBState>
 800811e:	4603      	mov	r3, r0
 8008120:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d105      	bne.n	8008134 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	220d      	movs	r2, #13
 8008130:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008132:	e043      	b.n	80081bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d103      	bne.n	8008142 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2209      	movs	r2, #9
 800813e:	761a      	strb	r2, [r3, #24]
      break;
 8008140:	e03c      	b.n	80081bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b04      	cmp	r3, #4
 8008146:	d139      	bne.n	80081bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	220b      	movs	r2, #11
 800814c:	761a      	strb	r2, [r3, #24]
      break;
 800814e:	e035      	b.n	80081bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7e5b      	ldrb	r3, [r3, #25]
 8008154:	3301      	adds	r3, #1
 8008156:	b2da      	uxtb	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	765a      	strb	r2, [r3, #25]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7e5b      	ldrb	r3, [r3, #25]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d806      	bhi.n	8008172 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008170:	e025      	b.n	80081be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008178:	2106      	movs	r1, #6
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	795b      	ldrb	r3, [r3, #5]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f90c 	bl	80083a8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	791b      	ldrb	r3, [r3, #4]
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f906 	bl	80083a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081a2:	2302      	movs	r3, #2
 80081a4:	73fb      	strb	r3, [r7, #15]
      break;
 80081a6:	e00a      	b.n	80081be <USBH_HandleControl+0x2de>

    default:
      break;
 80081a8:	bf00      	nop
 80081aa:	e008      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081ac:	bf00      	nop
 80081ae:	e006      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081b0:	bf00      	nop
 80081b2:	e004      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081b4:	bf00      	nop
 80081b6:	e002      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081b8:	bf00      	nop
 80081ba:	e000      	b.n	80081be <USBH_HandleControl+0x2de>
      break;
 80081bc:	bf00      	nop
  }

  return status;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af04      	add	r7, sp, #16
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081d6:	79f9      	ldrb	r1, [r7, #7]
 80081d8:	2300      	movs	r3, #0
 80081da:	9303      	str	r3, [sp, #12]
 80081dc:	2308      	movs	r3, #8
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	2300      	movs	r3, #0
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	2200      	movs	r2, #0
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fb46 	bl	800887e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af04      	add	r7, sp, #16
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	4611      	mov	r1, r2
 8008208:	461a      	mov	r2, r3
 800820a:	460b      	mov	r3, r1
 800820c:	80fb      	strh	r3, [r7, #6]
 800820e:	4613      	mov	r3, r2
 8008210:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008220:	7979      	ldrb	r1, [r7, #5]
 8008222:	7e3b      	ldrb	r3, [r7, #24]
 8008224:	9303      	str	r3, [sp, #12]
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	9302      	str	r3, [sp, #8]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	2301      	movs	r3, #1
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	2200      	movs	r2, #0
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fb21 	bl	800887e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b088      	sub	sp, #32
 800824a:	af04      	add	r7, sp, #16
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	4611      	mov	r1, r2
 8008252:	461a      	mov	r2, r3
 8008254:	460b      	mov	r3, r1
 8008256:	80fb      	strh	r3, [r7, #6]
 8008258:	4613      	mov	r3, r2
 800825a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800825c:	7979      	ldrb	r1, [r7, #5]
 800825e:	2300      	movs	r3, #0
 8008260:	9303      	str	r3, [sp, #12]
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	9302      	str	r3, [sp, #8]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	2301      	movs	r3, #1
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	2300      	movs	r3, #0
 8008270:	2201      	movs	r2, #1
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 fb03 	bl	800887e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008278:	2300      	movs	r3, #0

}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b088      	sub	sp, #32
 8008286:	af04      	add	r7, sp, #16
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	4611      	mov	r1, r2
 800828e:	461a      	mov	r2, r3
 8008290:	460b      	mov	r3, r1
 8008292:	80fb      	strh	r3, [r7, #6]
 8008294:	4613      	mov	r3, r2
 8008296:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082a6:	7979      	ldrb	r1, [r7, #5]
 80082a8:	7e3b      	ldrb	r3, [r7, #24]
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	88fb      	ldrh	r3, [r7, #6]
 80082ae:	9302      	str	r3, [sp, #8]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	2301      	movs	r3, #1
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	2302      	movs	r3, #2
 80082ba:	2200      	movs	r2, #0
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 fade 	bl	800887e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af04      	add	r7, sp, #16
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	460b      	mov	r3, r1
 80082dc:	80fb      	strh	r3, [r7, #6]
 80082de:	4613      	mov	r3, r2
 80082e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082e2:	7979      	ldrb	r1, [r7, #5]
 80082e4:	2300      	movs	r3, #0
 80082e6:	9303      	str	r3, [sp, #12]
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	2301      	movs	r3, #1
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2302      	movs	r3, #2
 80082f6:	2201      	movs	r2, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fac0 	bl	800887e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	4608      	mov	r0, r1
 8008312:	4611      	mov	r1, r2
 8008314:	461a      	mov	r2, r3
 8008316:	4603      	mov	r3, r0
 8008318:	70fb      	strb	r3, [r7, #3]
 800831a:	460b      	mov	r3, r1
 800831c:	70bb      	strb	r3, [r7, #2]
 800831e:	4613      	mov	r3, r2
 8008320:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008322:	7878      	ldrb	r0, [r7, #1]
 8008324:	78ba      	ldrb	r2, [r7, #2]
 8008326:	78f9      	ldrb	r1, [r7, #3]
 8008328:	8b3b      	ldrh	r3, [r7, #24]
 800832a:	9302      	str	r3, [sp, #8]
 800832c:	7d3b      	ldrb	r3, [r7, #20]
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	7c3b      	ldrb	r3, [r7, #16]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	4603      	mov	r3, r0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa53 	bl	80087e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa72 	bl	8008840 <USBH_LL_ClosePipe>

  return USBH_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f836 	bl	80083e4 <USBH_GetFreePipe>
 8008378:	4603      	mov	r3, r0
 800837a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008382:	4293      	cmp	r3, r2
 8008384:	d00a      	beq.n	800839c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	89fb      	ldrh	r3, [r7, #14]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	33e0      	adds	r3, #224	; 0xe0
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800839c:	89fb      	ldrh	r3, [r7, #14]
 800839e:	b2db      	uxtb	r3, r3
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	2b0f      	cmp	r3, #15
 80083b8:	d80d      	bhi.n	80083d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	33e0      	adds	r3, #224	; 0xe0
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	33e0      	adds	r3, #224	; 0xe0
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	e00f      	b.n	8008416 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	33e0      	adds	r3, #224	; 0xe0
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	b29b      	uxth	r3, r3
 800840e:	e007      	b.n	8008420 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	3301      	adds	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b0f      	cmp	r3, #15
 800841a:	d9ec      	bls.n	80083f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800841c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008430:	2201      	movs	r2, #1
 8008432:	490e      	ldr	r1, [pc, #56]	; (800846c <MX_USB_HOST_Init+0x40>)
 8008434:	480e      	ldr	r0, [pc, #56]	; (8008470 <MX_USB_HOST_Init+0x44>)
 8008436:	f7fe fb05 	bl	8006a44 <USBH_Init>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008440:	f7f8 fb54 	bl	8000aec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008444:	490b      	ldr	r1, [pc, #44]	; (8008474 <MX_USB_HOST_Init+0x48>)
 8008446:	480a      	ldr	r0, [pc, #40]	; (8008470 <MX_USB_HOST_Init+0x44>)
 8008448:	f7fe fba9 	bl	8006b9e <USBH_RegisterClass>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008452:	f7f8 fb4b 	bl	8000aec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008456:	4806      	ldr	r0, [pc, #24]	; (8008470 <MX_USB_HOST_Init+0x44>)
 8008458:	f7fe fc2d 	bl	8006cb6 <USBH_Start>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008462:	f7f8 fb43 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	0800848d 	.word	0x0800848d
 8008470:	200001ec 	.word	0x200001ec
 8008474:	2000000c 	.word	0x2000000c

08008478 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800847c:	4802      	ldr	r0, [pc, #8]	; (8008488 <MX_USB_HOST_Process+0x10>)
 800847e:	f7fe fc2b 	bl	8006cd8 <USBH_Process>
}
 8008482:	bf00      	nop
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	200001ec 	.word	0x200001ec

0800848c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	3b01      	subs	r3, #1
 800849c:	2b04      	cmp	r3, #4
 800849e:	d819      	bhi.n	80084d4 <USBH_UserProcess+0x48>
 80084a0:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <USBH_UserProcess+0x1c>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084c5 	.word	0x080084c5
 80084b0:	080084d5 	.word	0x080084d5
 80084b4:	080084cd 	.word	0x080084cd
 80084b8:	080084bd 	.word	0x080084bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <USBH_UserProcess+0x58>)
 80084be:	2203      	movs	r2, #3
 80084c0:	701a      	strb	r2, [r3, #0]
  break;
 80084c2:	e008      	b.n	80084d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <USBH_UserProcess+0x58>)
 80084c6:	2202      	movs	r2, #2
 80084c8:	701a      	strb	r2, [r3, #0]
  break;
 80084ca:	e004      	b.n	80084d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <USBH_UserProcess+0x58>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	701a      	strb	r2, [r3, #0]
  break;
 80084d2:	e000      	b.n	80084d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80084d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	200005c4 	.word	0x200005c4

080084e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08a      	sub	sp, #40	; 0x28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084f0:	f107 0314 	add.w	r3, r7, #20
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	605a      	str	r2, [r3, #4]
 80084fa:	609a      	str	r2, [r3, #8]
 80084fc:	60da      	str	r2, [r3, #12]
 80084fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008508:	d147      	bne.n	800859a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800850a:	2300      	movs	r3, #0
 800850c:	613b      	str	r3, [r7, #16]
 800850e:	4b25      	ldr	r3, [pc, #148]	; (80085a4 <HAL_HCD_MspInit+0xbc>)
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	4a24      	ldr	r2, [pc, #144]	; (80085a4 <HAL_HCD_MspInit+0xbc>)
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	6313      	str	r3, [r2, #48]	; 0x30
 800851a:	4b22      	ldr	r3, [pc, #136]	; (80085a4 <HAL_HCD_MspInit+0xbc>)
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800852a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800852c:	2300      	movs	r3, #0
 800852e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008530:	2300      	movs	r3, #0
 8008532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008534:	f107 0314 	add.w	r3, r7, #20
 8008538:	4619      	mov	r1, r3
 800853a:	481b      	ldr	r0, [pc, #108]	; (80085a8 <HAL_HCD_MspInit+0xc0>)
 800853c:	f7f8 ff02 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008540:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008546:	2302      	movs	r3, #2
 8008548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854a:	2300      	movs	r3, #0
 800854c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800854e:	2303      	movs	r3, #3
 8008550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008552:	230a      	movs	r3, #10
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008556:	f107 0314 	add.w	r3, r7, #20
 800855a:	4619      	mov	r1, r3
 800855c:	4812      	ldr	r0, [pc, #72]	; (80085a8 <HAL_HCD_MspInit+0xc0>)
 800855e:	f7f8 fef1 	bl	8001344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008562:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <HAL_HCD_MspInit+0xbc>)
 8008564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008566:	4a0f      	ldr	r2, [pc, #60]	; (80085a4 <HAL_HCD_MspInit+0xbc>)
 8008568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856c:	6353      	str	r3, [r2, #52]	; 0x34
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <HAL_HCD_MspInit+0xbc>)
 8008574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008576:	4a0b      	ldr	r2, [pc, #44]	; (80085a4 <HAL_HCD_MspInit+0xbc>)
 8008578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800857c:	6453      	str	r3, [r2, #68]	; 0x44
 800857e:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <HAL_HCD_MspInit+0xbc>)
 8008580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800858a:	2200      	movs	r2, #0
 800858c:	2100      	movs	r1, #0
 800858e:	2043      	movs	r0, #67	; 0x43
 8008590:	f7f8 fea1 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008594:	2043      	movs	r0, #67	; 0x43
 8008596:	f7f8 feba 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800859a:	bf00      	nop
 800859c:	3728      	adds	r7, #40	; 0x28
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	40023800 	.word	0x40023800
 80085a8:	40020000 	.word	0x40020000

080085ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe ff6b 	bl	8007496 <USBH_LL_IncTimer>
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe ffa3 	bl	8007522 <USBH_LL_Connect>
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe ffac 	bl	8007550 <USBH_LL_Disconnect>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
 800860c:	4613      	mov	r3, r2
 800860e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe ff5d 	bl	80074ea <USBH_LL_PortEnabled>
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe ff5d 	bl	8007506 <USBH_LL_PortDisabled>
}
 800864c:	bf00      	nop
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008662:	2b01      	cmp	r3, #1
 8008664:	d12a      	bne.n	80086bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008666:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <USBH_LL_Init+0x74>)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <USBH_LL_Init+0x74>)
 8008672:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <USBH_LL_Init+0x74>)
 8008678:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800867c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800867e:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <USBH_LL_Init+0x74>)
 8008680:	2208      	movs	r2, #8
 8008682:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008684:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <USBH_LL_Init+0x74>)
 8008686:	2201      	movs	r2, #1
 8008688:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800868a:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <USBH_LL_Init+0x74>)
 800868c:	2200      	movs	r2, #0
 800868e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008690:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <USBH_LL_Init+0x74>)
 8008692:	2202      	movs	r2, #2
 8008694:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <USBH_LL_Init+0x74>)
 8008698:	2200      	movs	r2, #0
 800869a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800869c:	480a      	ldr	r0, [pc, #40]	; (80086c8 <USBH_LL_Init+0x74>)
 800869e:	f7f9 f808 	bl	80016b2 <HAL_HCD_Init>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80086a8:	f7f8 fa20 	bl	8000aec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80086ac:	4806      	ldr	r0, [pc, #24]	; (80086c8 <USBH_LL_Init+0x74>)
 80086ae:	f7f9 fc69 	bl	8001f84 <HAL_HCD_GetCurrentFrame>
 80086b2:	4603      	mov	r3, r0
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7fe fede 	bl	8007478 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	200005c8 	.word	0x200005c8

080086cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7f9 fbd6 	bl	8001e94 <HAL_HCD_Start>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 f95e 	bl	80089b0 <USBH_Get_USB_Status>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008718:	4618      	mov	r0, r3
 800871a:	f7f9 fbde 	bl	8001eda <HAL_HCD_Stop>
 800871e:	4603      	mov	r3, r0
 8008720:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	4618      	mov	r0, r3
 8008726:	f000 f943 	bl	80089b0 <USBH_Get_USB_Status>
 800872a:	4603      	mov	r3, r0
 800872c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008740:	2301      	movs	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800874a:	4618      	mov	r0, r3
 800874c:	f7f9 fc28 	bl	8001fa0 <HAL_HCD_GetCurrentSpeed>
 8008750:	4603      	mov	r3, r0
 8008752:	2b02      	cmp	r3, #2
 8008754:	d00c      	beq.n	8008770 <USBH_LL_GetSpeed+0x38>
 8008756:	2b02      	cmp	r3, #2
 8008758:	d80d      	bhi.n	8008776 <USBH_LL_GetSpeed+0x3e>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <USBH_LL_GetSpeed+0x2c>
 800875e:	2b01      	cmp	r3, #1
 8008760:	d003      	beq.n	800876a <USBH_LL_GetSpeed+0x32>
 8008762:	e008      	b.n	8008776 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
    break;
 8008768:	e008      	b.n	800877c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800876a:	2301      	movs	r3, #1
 800876c:	73fb      	strb	r3, [r7, #15]
    break;
 800876e:	e005      	b.n	800877c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008770:	2302      	movs	r3, #2
 8008772:	73fb      	strb	r3, [r7, #15]
    break;
 8008774:	e002      	b.n	800877c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008776:	2301      	movs	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]
    break;
 800877a:	bf00      	nop
  }
  return  speed;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800879c:	4618      	mov	r0, r3
 800879e:	f7f9 fbb9 	bl	8001f14 <HAL_HCD_ResetPort>
 80087a2:	4603      	mov	r3, r0
 80087a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 f901 	bl	80089b0 <USBH_Get_USB_Status>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7f9 fbc1 	bl	8001f5a <HAL_HCD_HC_GetXferCount>
 80087d8:	4603      	mov	r3, r0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087e2:	b590      	push	{r4, r7, lr}
 80087e4:	b089      	sub	sp, #36	; 0x24
 80087e6:	af04      	add	r7, sp, #16
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	4608      	mov	r0, r1
 80087ec:	4611      	mov	r1, r2
 80087ee:	461a      	mov	r2, r3
 80087f0:	4603      	mov	r3, r0
 80087f2:	70fb      	strb	r3, [r7, #3]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70bb      	strb	r3, [r7, #2]
 80087f8:	4613      	mov	r3, r2
 80087fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800880a:	787c      	ldrb	r4, [r7, #1]
 800880c:	78ba      	ldrb	r2, [r7, #2]
 800880e:	78f9      	ldrb	r1, [r7, #3]
 8008810:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008812:	9302      	str	r3, [sp, #8]
 8008814:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4623      	mov	r3, r4
 8008822:	f7f8 ffad 	bl	8001780 <HAL_HCD_HC_Init>
 8008826:	4603      	mov	r3, r0
 8008828:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	4618      	mov	r0, r3
 800882e:	f000 f8bf 	bl	80089b0 <USBH_Get_USB_Status>
 8008832:	4603      	mov	r3, r0
 8008834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008836:	7bbb      	ldrb	r3, [r7, #14]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	bd90      	pop	{r4, r7, pc}

08008840 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	4611      	mov	r1, r2
 800885e:	4618      	mov	r0, r3
 8008860:	f7f9 f846 	bl	80018f0 <HAL_HCD_HC_Halt>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 f8a0 	bl	80089b0 <USBH_Get_USB_Status>
 8008870:	4603      	mov	r3, r0
 8008872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008874:	7bbb      	ldrb	r3, [r7, #14]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800887e:	b590      	push	{r4, r7, lr}
 8008880:	b089      	sub	sp, #36	; 0x24
 8008882:	af04      	add	r7, sp, #16
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	4608      	mov	r0, r1
 8008888:	4611      	mov	r1, r2
 800888a:	461a      	mov	r2, r3
 800888c:	4603      	mov	r3, r0
 800888e:	70fb      	strb	r3, [r7, #3]
 8008890:	460b      	mov	r3, r1
 8008892:	70bb      	strb	r3, [r7, #2]
 8008894:	4613      	mov	r3, r2
 8008896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088a6:	787c      	ldrb	r4, [r7, #1]
 80088a8:	78ba      	ldrb	r2, [r7, #2]
 80088aa:	78f9      	ldrb	r1, [r7, #3]
 80088ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80088b0:	9303      	str	r3, [sp, #12]
 80088b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088b4:	9302      	str	r3, [sp, #8]
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	4623      	mov	r3, r4
 80088c2:	f7f9 f839 	bl	8001938 <HAL_HCD_HC_SubmitRequest>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 f86f 	bl	80089b0 <USBH_Get_USB_Status>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd90      	pop	{r4, r7, pc}

080088e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088f2:	78fa      	ldrb	r2, [r7, #3]
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7f9 fb1a 	bl	8001f30 <HAL_HCD_HC_GetURBState>
 80088fc:	4603      	mov	r3, r0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008918:	2b01      	cmp	r3, #1
 800891a:	d103      	bne.n	8008924 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	4618      	mov	r0, r3
 8008920:	f000 f872 	bl	8008a08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008924:	20c8      	movs	r0, #200	; 0xc8
 8008926:	f7f8 fbd7 	bl	80010d8 <HAL_Delay>
  return USBH_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
 8008940:	4613      	mov	r3, r2
 8008942:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800894a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800894c:	78fa      	ldrb	r2, [r7, #3]
 800894e:	68f9      	ldr	r1, [r7, #12]
 8008950:	4613      	mov	r3, r2
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	1a9b      	subs	r3, r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	440b      	add	r3, r1
 800895a:	3317      	adds	r3, #23
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	68f9      	ldr	r1, [r7, #12]
 8008966:	4613      	mov	r3, r2
 8008968:	011b      	lsls	r3, r3, #4
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	333c      	adds	r3, #60	; 0x3c
 8008972:	78ba      	ldrb	r2, [r7, #2]
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e009      	b.n	800898c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	4613      	mov	r3, r2
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	440b      	add	r3, r1
 8008986:	333d      	adds	r3, #61	; 0x3d
 8008988:	78ba      	ldrb	r2, [r7, #2]
 800898a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7f8 fb98 	bl	80010d8 <HAL_Delay>
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d817      	bhi.n	80089f4 <USBH_Get_USB_Status+0x44>
 80089c4:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <USBH_Get_USB_Status+0x1c>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089dd 	.word	0x080089dd
 80089d0:	080089e3 	.word	0x080089e3
 80089d4:	080089e9 	.word	0x080089e9
 80089d8:	080089ef 	.word	0x080089ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	73fb      	strb	r3, [r7, #15]
    break;
 80089e0:	e00b      	b.n	80089fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80089e2:	2302      	movs	r3, #2
 80089e4:	73fb      	strb	r3, [r7, #15]
    break;
 80089e6:	e008      	b.n	80089fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80089e8:	2301      	movs	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
    break;
 80089ec:	e005      	b.n	80089fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80089ee:	2302      	movs	r3, #2
 80089f0:	73fb      	strb	r3, [r7, #15]
    break;
 80089f2:	e002      	b.n	80089fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089f4:	2302      	movs	r3, #2
 80089f6:	73fb      	strb	r3, [r7, #15]
    break;
 80089f8:	bf00      	nop
  }
  return usb_status;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008a16:	79fb      	ldrb	r3, [r7, #7]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
 8008a20:	e001      	b.n	8008a26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008a22:	2301      	movs	r3, #1
 8008a24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4803      	ldr	r0, [pc, #12]	; (8008a3c <MX_DriverVbusFS+0x34>)
 8008a2e:	f7f8 fe0d 	bl	800164c <HAL_GPIO_WritePin>
}
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40020800 	.word	0x40020800

08008a40 <malloc>:
 8008a40:	4b02      	ldr	r3, [pc, #8]	; (8008a4c <malloc+0xc>)
 8008a42:	4601      	mov	r1, r0
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	f000 b82b 	b.w	8008aa0 <_malloc_r>
 8008a4a:	bf00      	nop
 8008a4c:	20000084 	.word	0x20000084

08008a50 <free>:
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <free+0xc>)
 8008a52:	4601      	mov	r1, r0
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	f000 ba53 	b.w	8008f00 <_free_r>
 8008a5a:	bf00      	nop
 8008a5c:	20000084 	.word	0x20000084

08008a60 <sbrk_aligned>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	4e0e      	ldr	r6, [pc, #56]	; (8008a9c <sbrk_aligned+0x3c>)
 8008a64:	460c      	mov	r4, r1
 8008a66:	6831      	ldr	r1, [r6, #0]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	b911      	cbnz	r1, 8008a72 <sbrk_aligned+0x12>
 8008a6c:	f000 f9f8 	bl	8008e60 <_sbrk_r>
 8008a70:	6030      	str	r0, [r6, #0]
 8008a72:	4621      	mov	r1, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f000 f9f3 	bl	8008e60 <_sbrk_r>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d00a      	beq.n	8008a94 <sbrk_aligned+0x34>
 8008a7e:	1cc4      	adds	r4, r0, #3
 8008a80:	f024 0403 	bic.w	r4, r4, #3
 8008a84:	42a0      	cmp	r0, r4
 8008a86:	d007      	beq.n	8008a98 <sbrk_aligned+0x38>
 8008a88:	1a21      	subs	r1, r4, r0
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 f9e8 	bl	8008e60 <_sbrk_r>
 8008a90:	3001      	adds	r0, #1
 8008a92:	d101      	bne.n	8008a98 <sbrk_aligned+0x38>
 8008a94:	f04f 34ff 	mov.w	r4, #4294967295
 8008a98:	4620      	mov	r0, r4
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	200009ac 	.word	0x200009ac

08008aa0 <_malloc_r>:
 8008aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	1ccd      	adds	r5, r1, #3
 8008aa6:	f025 0503 	bic.w	r5, r5, #3
 8008aaa:	3508      	adds	r5, #8
 8008aac:	2d0c      	cmp	r5, #12
 8008aae:	bf38      	it	cc
 8008ab0:	250c      	movcc	r5, #12
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	db01      	blt.n	8008abc <_malloc_r+0x1c>
 8008ab8:	42a9      	cmp	r1, r5
 8008aba:	d905      	bls.n	8008ac8 <_malloc_r+0x28>
 8008abc:	230c      	movs	r3, #12
 8008abe:	603b      	str	r3, [r7, #0]
 8008ac0:	2600      	movs	r6, #0
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b9c <_malloc_r+0xfc>
 8008acc:	f000 f868 	bl	8008ba0 <__malloc_lock>
 8008ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad4:	461c      	mov	r4, r3
 8008ad6:	bb5c      	cbnz	r4, 8008b30 <_malloc_r+0x90>
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4638      	mov	r0, r7
 8008adc:	f7ff ffc0 	bl	8008a60 <sbrk_aligned>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	d155      	bne.n	8008b92 <_malloc_r+0xf2>
 8008ae6:	f8d8 4000 	ldr.w	r4, [r8]
 8008aea:	4626      	mov	r6, r4
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	d145      	bne.n	8008b7c <_malloc_r+0xdc>
 8008af0:	2c00      	cmp	r4, #0
 8008af2:	d048      	beq.n	8008b86 <_malloc_r+0xe6>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	4631      	mov	r1, r6
 8008af8:	4638      	mov	r0, r7
 8008afa:	eb04 0903 	add.w	r9, r4, r3
 8008afe:	f000 f9af 	bl	8008e60 <_sbrk_r>
 8008b02:	4581      	cmp	r9, r0
 8008b04:	d13f      	bne.n	8008b86 <_malloc_r+0xe6>
 8008b06:	6821      	ldr	r1, [r4, #0]
 8008b08:	1a6d      	subs	r5, r5, r1
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff ffa7 	bl	8008a60 <sbrk_aligned>
 8008b12:	3001      	adds	r0, #1
 8008b14:	d037      	beq.n	8008b86 <_malloc_r+0xe6>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	442b      	add	r3, r5
 8008b1a:	6023      	str	r3, [r4, #0]
 8008b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d038      	beq.n	8008b96 <_malloc_r+0xf6>
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	42a2      	cmp	r2, r4
 8008b28:	d12b      	bne.n	8008b82 <_malloc_r+0xe2>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	605a      	str	r2, [r3, #4]
 8008b2e:	e00f      	b.n	8008b50 <_malloc_r+0xb0>
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	1b52      	subs	r2, r2, r5
 8008b34:	d41f      	bmi.n	8008b76 <_malloc_r+0xd6>
 8008b36:	2a0b      	cmp	r2, #11
 8008b38:	d917      	bls.n	8008b6a <_malloc_r+0xca>
 8008b3a:	1961      	adds	r1, r4, r5
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	6025      	str	r5, [r4, #0]
 8008b40:	bf18      	it	ne
 8008b42:	6059      	strne	r1, [r3, #4]
 8008b44:	6863      	ldr	r3, [r4, #4]
 8008b46:	bf08      	it	eq
 8008b48:	f8c8 1000 	streq.w	r1, [r8]
 8008b4c:	5162      	str	r2, [r4, r5]
 8008b4e:	604b      	str	r3, [r1, #4]
 8008b50:	4638      	mov	r0, r7
 8008b52:	f104 060b 	add.w	r6, r4, #11
 8008b56:	f000 f829 	bl	8008bac <__malloc_unlock>
 8008b5a:	f026 0607 	bic.w	r6, r6, #7
 8008b5e:	1d23      	adds	r3, r4, #4
 8008b60:	1af2      	subs	r2, r6, r3
 8008b62:	d0ae      	beq.n	8008ac2 <_malloc_r+0x22>
 8008b64:	1b9b      	subs	r3, r3, r6
 8008b66:	50a3      	str	r3, [r4, r2]
 8008b68:	e7ab      	b.n	8008ac2 <_malloc_r+0x22>
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	6862      	ldr	r2, [r4, #4]
 8008b6e:	d1dd      	bne.n	8008b2c <_malloc_r+0x8c>
 8008b70:	f8c8 2000 	str.w	r2, [r8]
 8008b74:	e7ec      	b.n	8008b50 <_malloc_r+0xb0>
 8008b76:	4623      	mov	r3, r4
 8008b78:	6864      	ldr	r4, [r4, #4]
 8008b7a:	e7ac      	b.n	8008ad6 <_malloc_r+0x36>
 8008b7c:	4634      	mov	r4, r6
 8008b7e:	6876      	ldr	r6, [r6, #4]
 8008b80:	e7b4      	b.n	8008aec <_malloc_r+0x4c>
 8008b82:	4613      	mov	r3, r2
 8008b84:	e7cc      	b.n	8008b20 <_malloc_r+0x80>
 8008b86:	230c      	movs	r3, #12
 8008b88:	603b      	str	r3, [r7, #0]
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f000 f80e 	bl	8008bac <__malloc_unlock>
 8008b90:	e797      	b.n	8008ac2 <_malloc_r+0x22>
 8008b92:	6025      	str	r5, [r4, #0]
 8008b94:	e7dc      	b.n	8008b50 <_malloc_r+0xb0>
 8008b96:	605b      	str	r3, [r3, #4]
 8008b98:	deff      	udf	#255	; 0xff
 8008b9a:	bf00      	nop
 8008b9c:	200009a8 	.word	0x200009a8

08008ba0 <__malloc_lock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__malloc_lock+0x8>)
 8008ba2:	f000 b9aa 	b.w	8008efa <__retarget_lock_acquire_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	20000af0 	.word	0x20000af0

08008bac <__malloc_unlock>:
 8008bac:	4801      	ldr	r0, [pc, #4]	; (8008bb4 <__malloc_unlock+0x8>)
 8008bae:	f000 b9a5 	b.w	8008efc <__retarget_lock_release_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	20000af0 	.word	0x20000af0

08008bb8 <std>:
 8008bb8:	2300      	movs	r3, #0
 8008bba:	b510      	push	{r4, lr}
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bc6:	6083      	str	r3, [r0, #8]
 8008bc8:	8181      	strh	r1, [r0, #12]
 8008bca:	6643      	str	r3, [r0, #100]	; 0x64
 8008bcc:	81c2      	strh	r2, [r0, #14]
 8008bce:	6183      	str	r3, [r0, #24]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	2208      	movs	r2, #8
 8008bd4:	305c      	adds	r0, #92	; 0x5c
 8008bd6:	f000 f906 	bl	8008de6 <memset>
 8008bda:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <std+0x58>)
 8008bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8008bde:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <std+0x5c>)
 8008be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008be2:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <std+0x60>)
 8008be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008be6:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <std+0x64>)
 8008be8:	6323      	str	r3, [r4, #48]	; 0x30
 8008bea:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <std+0x68>)
 8008bec:	6224      	str	r4, [r4, #32]
 8008bee:	429c      	cmp	r4, r3
 8008bf0:	d006      	beq.n	8008c00 <std+0x48>
 8008bf2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008bf6:	4294      	cmp	r4, r2
 8008bf8:	d002      	beq.n	8008c00 <std+0x48>
 8008bfa:	33d0      	adds	r3, #208	; 0xd0
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	d105      	bne.n	8008c0c <std+0x54>
 8008c00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c08:	f000 b976 	b.w	8008ef8 <__retarget_lock_init_recursive>
 8008c0c:	bd10      	pop	{r4, pc}
 8008c0e:	bf00      	nop
 8008c10:	08008d61 	.word	0x08008d61
 8008c14:	08008d83 	.word	0x08008d83
 8008c18:	08008dbb 	.word	0x08008dbb
 8008c1c:	08008ddf 	.word	0x08008ddf
 8008c20:	200009b0 	.word	0x200009b0

08008c24 <stdio_exit_handler>:
 8008c24:	4a02      	ldr	r2, [pc, #8]	; (8008c30 <stdio_exit_handler+0xc>)
 8008c26:	4903      	ldr	r1, [pc, #12]	; (8008c34 <stdio_exit_handler+0x10>)
 8008c28:	4803      	ldr	r0, [pc, #12]	; (8008c38 <stdio_exit_handler+0x14>)
 8008c2a:	f000 b869 	b.w	8008d00 <_fwalk_sglue>
 8008c2e:	bf00      	nop
 8008c30:	2000002c 	.word	0x2000002c
 8008c34:	0800964d 	.word	0x0800964d
 8008c38:	20000038 	.word	0x20000038

08008c3c <cleanup_stdio>:
 8008c3c:	6841      	ldr	r1, [r0, #4]
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <cleanup_stdio+0x34>)
 8008c40:	4299      	cmp	r1, r3
 8008c42:	b510      	push	{r4, lr}
 8008c44:	4604      	mov	r4, r0
 8008c46:	d001      	beq.n	8008c4c <cleanup_stdio+0x10>
 8008c48:	f000 fd00 	bl	800964c <_fflush_r>
 8008c4c:	68a1      	ldr	r1, [r4, #8]
 8008c4e:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <cleanup_stdio+0x38>)
 8008c50:	4299      	cmp	r1, r3
 8008c52:	d002      	beq.n	8008c5a <cleanup_stdio+0x1e>
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 fcf9 	bl	800964c <_fflush_r>
 8008c5a:	68e1      	ldr	r1, [r4, #12]
 8008c5c:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <cleanup_stdio+0x3c>)
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	d004      	beq.n	8008c6c <cleanup_stdio+0x30>
 8008c62:	4620      	mov	r0, r4
 8008c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c68:	f000 bcf0 	b.w	800964c <_fflush_r>
 8008c6c:	bd10      	pop	{r4, pc}
 8008c6e:	bf00      	nop
 8008c70:	200009b0 	.word	0x200009b0
 8008c74:	20000a18 	.word	0x20000a18
 8008c78:	20000a80 	.word	0x20000a80

08008c7c <global_stdio_init.part.0>:
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <global_stdio_init.part.0+0x30>)
 8008c80:	4c0b      	ldr	r4, [pc, #44]	; (8008cb0 <global_stdio_init.part.0+0x34>)
 8008c82:	4a0c      	ldr	r2, [pc, #48]	; (8008cb4 <global_stdio_init.part.0+0x38>)
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	4620      	mov	r0, r4
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2104      	movs	r1, #4
 8008c8c:	f7ff ff94 	bl	8008bb8 <std>
 8008c90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008c94:	2201      	movs	r2, #1
 8008c96:	2109      	movs	r1, #9
 8008c98:	f7ff ff8e 	bl	8008bb8 <std>
 8008c9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca6:	2112      	movs	r1, #18
 8008ca8:	f7ff bf86 	b.w	8008bb8 <std>
 8008cac:	20000ae8 	.word	0x20000ae8
 8008cb0:	200009b0 	.word	0x200009b0
 8008cb4:	08008c25 	.word	0x08008c25

08008cb8 <__sfp_lock_acquire>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	; (8008cc0 <__sfp_lock_acquire+0x8>)
 8008cba:	f000 b91e 	b.w	8008efa <__retarget_lock_acquire_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	20000af1 	.word	0x20000af1

08008cc4 <__sfp_lock_release>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__sfp_lock_release+0x8>)
 8008cc6:	f000 b919 	b.w	8008efc <__retarget_lock_release_recursive>
 8008cca:	bf00      	nop
 8008ccc:	20000af1 	.word	0x20000af1

08008cd0 <__sinit>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	f7ff fff0 	bl	8008cb8 <__sfp_lock_acquire>
 8008cd8:	6a23      	ldr	r3, [r4, #32]
 8008cda:	b11b      	cbz	r3, 8008ce4 <__sinit+0x14>
 8008cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ce0:	f7ff bff0 	b.w	8008cc4 <__sfp_lock_release>
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <__sinit+0x28>)
 8008ce6:	6223      	str	r3, [r4, #32]
 8008ce8:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <__sinit+0x2c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1f5      	bne.n	8008cdc <__sinit+0xc>
 8008cf0:	f7ff ffc4 	bl	8008c7c <global_stdio_init.part.0>
 8008cf4:	e7f2      	b.n	8008cdc <__sinit+0xc>
 8008cf6:	bf00      	nop
 8008cf8:	08008c3d 	.word	0x08008c3d
 8008cfc:	20000ae8 	.word	0x20000ae8

08008d00 <_fwalk_sglue>:
 8008d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d04:	4607      	mov	r7, r0
 8008d06:	4688      	mov	r8, r1
 8008d08:	4614      	mov	r4, r2
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d10:	f1b9 0901 	subs.w	r9, r9, #1
 8008d14:	d505      	bpl.n	8008d22 <_fwalk_sglue+0x22>
 8008d16:	6824      	ldr	r4, [r4, #0]
 8008d18:	2c00      	cmp	r4, #0
 8008d1a:	d1f7      	bne.n	8008d0c <_fwalk_sglue+0xc>
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d22:	89ab      	ldrh	r3, [r5, #12]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d907      	bls.n	8008d38 <_fwalk_sglue+0x38>
 8008d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	d003      	beq.n	8008d38 <_fwalk_sglue+0x38>
 8008d30:	4629      	mov	r1, r5
 8008d32:	4638      	mov	r0, r7
 8008d34:	47c0      	blx	r8
 8008d36:	4306      	orrs	r6, r0
 8008d38:	3568      	adds	r5, #104	; 0x68
 8008d3a:	e7e9      	b.n	8008d10 <_fwalk_sglue+0x10>

08008d3c <iprintf>:
 8008d3c:	b40f      	push	{r0, r1, r2, r3}
 8008d3e:	b507      	push	{r0, r1, r2, lr}
 8008d40:	4906      	ldr	r1, [pc, #24]	; (8008d5c <iprintf+0x20>)
 8008d42:	ab04      	add	r3, sp, #16
 8008d44:	6808      	ldr	r0, [r1, #0]
 8008d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d4a:	6881      	ldr	r1, [r0, #8]
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	f000 f94d 	bl	8008fec <_vfiprintf_r>
 8008d52:	b003      	add	sp, #12
 8008d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d58:	b004      	add	sp, #16
 8008d5a:	4770      	bx	lr
 8008d5c:	20000084 	.word	0x20000084

08008d60 <__sread>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	460c      	mov	r4, r1
 8008d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d68:	f000 f868 	bl	8008e3c <_read_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	bfab      	itete	ge
 8008d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d72:	89a3      	ldrhlt	r3, [r4, #12]
 8008d74:	181b      	addge	r3, r3, r0
 8008d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d7a:	bfac      	ite	ge
 8008d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d7e:	81a3      	strhlt	r3, [r4, #12]
 8008d80:	bd10      	pop	{r4, pc}

08008d82 <__swrite>:
 8008d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d86:	461f      	mov	r7, r3
 8008d88:	898b      	ldrh	r3, [r1, #12]
 8008d8a:	05db      	lsls	r3, r3, #23
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	4616      	mov	r6, r2
 8008d92:	d505      	bpl.n	8008da0 <__swrite+0x1e>
 8008d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d98:	2302      	movs	r3, #2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f000 f83c 	bl	8008e18 <_lseek_r>
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008daa:	81a3      	strh	r3, [r4, #12]
 8008dac:	4632      	mov	r2, r6
 8008dae:	463b      	mov	r3, r7
 8008db0:	4628      	mov	r0, r5
 8008db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008db6:	f000 b863 	b.w	8008e80 <_write_r>

08008dba <__sseek>:
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc2:	f000 f829 	bl	8008e18 <_lseek_r>
 8008dc6:	1c43      	adds	r3, r0, #1
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	bf15      	itete	ne
 8008dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dd6:	81a3      	strheq	r3, [r4, #12]
 8008dd8:	bf18      	it	ne
 8008dda:	81a3      	strhne	r3, [r4, #12]
 8008ddc:	bd10      	pop	{r4, pc}

08008dde <__sclose>:
 8008dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de2:	f000 b809 	b.w	8008df8 <_close_r>

08008de6 <memset>:
 8008de6:	4402      	add	r2, r0
 8008de8:	4603      	mov	r3, r0
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d100      	bne.n	8008df0 <memset+0xa>
 8008dee:	4770      	bx	lr
 8008df0:	f803 1b01 	strb.w	r1, [r3], #1
 8008df4:	e7f9      	b.n	8008dea <memset+0x4>
	...

08008df8 <_close_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d06      	ldr	r5, [pc, #24]	; (8008e14 <_close_r+0x1c>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	f7f8 f84f 	bl	8000ea6 <_close>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_close_r+0x1a>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_close_r+0x1a>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	20000aec 	.word	0x20000aec

08008e18 <_lseek_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d07      	ldr	r5, [pc, #28]	; (8008e38 <_lseek_r+0x20>)
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	602a      	str	r2, [r5, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7f8 f864 	bl	8000ef4 <_lseek>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_lseek_r+0x1e>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_lseek_r+0x1e>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	20000aec 	.word	0x20000aec

08008e3c <_read_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d07      	ldr	r5, [pc, #28]	; (8008e5c <_read_r+0x20>)
 8008e40:	4604      	mov	r4, r0
 8008e42:	4608      	mov	r0, r1
 8008e44:	4611      	mov	r1, r2
 8008e46:	2200      	movs	r2, #0
 8008e48:	602a      	str	r2, [r5, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f7f8 f80e 	bl	8000e6c <_read>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_read_r+0x1e>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_read_r+0x1e>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20000aec 	.word	0x20000aec

08008e60 <_sbrk_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d06      	ldr	r5, [pc, #24]	; (8008e7c <_sbrk_r+0x1c>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	f7f8 f850 	bl	8000f10 <_sbrk>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_sbrk_r+0x1a>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_sbrk_r+0x1a>
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	20000aec 	.word	0x20000aec

08008e80 <_write_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4d07      	ldr	r5, [pc, #28]	; (8008ea0 <_write_r+0x20>)
 8008e84:	4604      	mov	r4, r0
 8008e86:	4608      	mov	r0, r1
 8008e88:	4611      	mov	r1, r2
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	602a      	str	r2, [r5, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f7f7 fdfe 	bl	8000a90 <_write>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_write_r+0x1e>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_write_r+0x1e>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000aec 	.word	0x20000aec

08008ea4 <__errno>:
 8008ea4:	4b01      	ldr	r3, [pc, #4]	; (8008eac <__errno+0x8>)
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20000084 	.word	0x20000084

08008eb0 <__libc_init_array>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	4d0d      	ldr	r5, [pc, #52]	; (8008ee8 <__libc_init_array+0x38>)
 8008eb4:	4c0d      	ldr	r4, [pc, #52]	; (8008eec <__libc_init_array+0x3c>)
 8008eb6:	1b64      	subs	r4, r4, r5
 8008eb8:	10a4      	asrs	r4, r4, #2
 8008eba:	2600      	movs	r6, #0
 8008ebc:	42a6      	cmp	r6, r4
 8008ebe:	d109      	bne.n	8008ed4 <__libc_init_array+0x24>
 8008ec0:	4d0b      	ldr	r5, [pc, #44]	; (8008ef0 <__libc_init_array+0x40>)
 8008ec2:	4c0c      	ldr	r4, [pc, #48]	; (8008ef4 <__libc_init_array+0x44>)
 8008ec4:	f000 fd04 	bl	80098d0 <_init>
 8008ec8:	1b64      	subs	r4, r4, r5
 8008eca:	10a4      	asrs	r4, r4, #2
 8008ecc:	2600      	movs	r6, #0
 8008ece:	42a6      	cmp	r6, r4
 8008ed0:	d105      	bne.n	8008ede <__libc_init_array+0x2e>
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed8:	4798      	blx	r3
 8008eda:	3601      	adds	r6, #1
 8008edc:	e7ee      	b.n	8008ebc <__libc_init_array+0xc>
 8008ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee2:	4798      	blx	r3
 8008ee4:	3601      	adds	r6, #1
 8008ee6:	e7f2      	b.n	8008ece <__libc_init_array+0x1e>
 8008ee8:	08009968 	.word	0x08009968
 8008eec:	08009968 	.word	0x08009968
 8008ef0:	08009968 	.word	0x08009968
 8008ef4:	0800996c 	.word	0x0800996c

08008ef8 <__retarget_lock_init_recursive>:
 8008ef8:	4770      	bx	lr

08008efa <__retarget_lock_acquire_recursive>:
 8008efa:	4770      	bx	lr

08008efc <__retarget_lock_release_recursive>:
 8008efc:	4770      	bx	lr
	...

08008f00 <_free_r>:
 8008f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f02:	2900      	cmp	r1, #0
 8008f04:	d044      	beq.n	8008f90 <_free_r+0x90>
 8008f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f0a:	9001      	str	r0, [sp, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f12:	bfb8      	it	lt
 8008f14:	18e4      	addlt	r4, r4, r3
 8008f16:	f7ff fe43 	bl	8008ba0 <__malloc_lock>
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <_free_r+0x94>)
 8008f1c:	9801      	ldr	r0, [sp, #4]
 8008f1e:	6813      	ldr	r3, [r2, #0]
 8008f20:	b933      	cbnz	r3, 8008f30 <_free_r+0x30>
 8008f22:	6063      	str	r3, [r4, #4]
 8008f24:	6014      	str	r4, [r2, #0]
 8008f26:	b003      	add	sp, #12
 8008f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f2c:	f7ff be3e 	b.w	8008bac <__malloc_unlock>
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	d908      	bls.n	8008f46 <_free_r+0x46>
 8008f34:	6825      	ldr	r5, [r4, #0]
 8008f36:	1961      	adds	r1, r4, r5
 8008f38:	428b      	cmp	r3, r1
 8008f3a:	bf01      	itttt	eq
 8008f3c:	6819      	ldreq	r1, [r3, #0]
 8008f3e:	685b      	ldreq	r3, [r3, #4]
 8008f40:	1949      	addeq	r1, r1, r5
 8008f42:	6021      	streq	r1, [r4, #0]
 8008f44:	e7ed      	b.n	8008f22 <_free_r+0x22>
 8008f46:	461a      	mov	r2, r3
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	b10b      	cbz	r3, 8008f50 <_free_r+0x50>
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d9fa      	bls.n	8008f46 <_free_r+0x46>
 8008f50:	6811      	ldr	r1, [r2, #0]
 8008f52:	1855      	adds	r5, r2, r1
 8008f54:	42a5      	cmp	r5, r4
 8008f56:	d10b      	bne.n	8008f70 <_free_r+0x70>
 8008f58:	6824      	ldr	r4, [r4, #0]
 8008f5a:	4421      	add	r1, r4
 8008f5c:	1854      	adds	r4, r2, r1
 8008f5e:	42a3      	cmp	r3, r4
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	d1e0      	bne.n	8008f26 <_free_r+0x26>
 8008f64:	681c      	ldr	r4, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	6053      	str	r3, [r2, #4]
 8008f6a:	440c      	add	r4, r1
 8008f6c:	6014      	str	r4, [r2, #0]
 8008f6e:	e7da      	b.n	8008f26 <_free_r+0x26>
 8008f70:	d902      	bls.n	8008f78 <_free_r+0x78>
 8008f72:	230c      	movs	r3, #12
 8008f74:	6003      	str	r3, [r0, #0]
 8008f76:	e7d6      	b.n	8008f26 <_free_r+0x26>
 8008f78:	6825      	ldr	r5, [r4, #0]
 8008f7a:	1961      	adds	r1, r4, r5
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	bf04      	itt	eq
 8008f80:	6819      	ldreq	r1, [r3, #0]
 8008f82:	685b      	ldreq	r3, [r3, #4]
 8008f84:	6063      	str	r3, [r4, #4]
 8008f86:	bf04      	itt	eq
 8008f88:	1949      	addeq	r1, r1, r5
 8008f8a:	6021      	streq	r1, [r4, #0]
 8008f8c:	6054      	str	r4, [r2, #4]
 8008f8e:	e7ca      	b.n	8008f26 <_free_r+0x26>
 8008f90:	b003      	add	sp, #12
 8008f92:	bd30      	pop	{r4, r5, pc}
 8008f94:	200009a8 	.word	0x200009a8

08008f98 <__sfputc_r>:
 8008f98:	6893      	ldr	r3, [r2, #8]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	b410      	push	{r4}
 8008fa0:	6093      	str	r3, [r2, #8]
 8008fa2:	da08      	bge.n	8008fb6 <__sfputc_r+0x1e>
 8008fa4:	6994      	ldr	r4, [r2, #24]
 8008fa6:	42a3      	cmp	r3, r4
 8008fa8:	db01      	blt.n	8008fae <__sfputc_r+0x16>
 8008faa:	290a      	cmp	r1, #10
 8008fac:	d103      	bne.n	8008fb6 <__sfputc_r+0x1e>
 8008fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb2:	f000 bb73 	b.w	800969c <__swbuf_r>
 8008fb6:	6813      	ldr	r3, [r2, #0]
 8008fb8:	1c58      	adds	r0, r3, #1
 8008fba:	6010      	str	r0, [r2, #0]
 8008fbc:	7019      	strb	r1, [r3, #0]
 8008fbe:	4608      	mov	r0, r1
 8008fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <__sfputs_r>:
 8008fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc8:	4606      	mov	r6, r0
 8008fca:	460f      	mov	r7, r1
 8008fcc:	4614      	mov	r4, r2
 8008fce:	18d5      	adds	r5, r2, r3
 8008fd0:	42ac      	cmp	r4, r5
 8008fd2:	d101      	bne.n	8008fd8 <__sfputs_r+0x12>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e007      	b.n	8008fe8 <__sfputs_r+0x22>
 8008fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fdc:	463a      	mov	r2, r7
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f7ff ffda 	bl	8008f98 <__sfputc_r>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d1f3      	bne.n	8008fd0 <__sfputs_r+0xa>
 8008fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fec <_vfiprintf_r>:
 8008fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	460d      	mov	r5, r1
 8008ff2:	b09d      	sub	sp, #116	; 0x74
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	4698      	mov	r8, r3
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	b118      	cbz	r0, 8009004 <_vfiprintf_r+0x18>
 8008ffc:	6a03      	ldr	r3, [r0, #32]
 8008ffe:	b90b      	cbnz	r3, 8009004 <_vfiprintf_r+0x18>
 8009000:	f7ff fe66 	bl	8008cd0 <__sinit>
 8009004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	d405      	bmi.n	8009016 <_vfiprintf_r+0x2a>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	059a      	lsls	r2, r3, #22
 800900e:	d402      	bmi.n	8009016 <_vfiprintf_r+0x2a>
 8009010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009012:	f7ff ff72 	bl	8008efa <__retarget_lock_acquire_recursive>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	071b      	lsls	r3, r3, #28
 800901a:	d501      	bpl.n	8009020 <_vfiprintf_r+0x34>
 800901c:	692b      	ldr	r3, [r5, #16]
 800901e:	b99b      	cbnz	r3, 8009048 <_vfiprintf_r+0x5c>
 8009020:	4629      	mov	r1, r5
 8009022:	4630      	mov	r0, r6
 8009024:	f000 fb78 	bl	8009718 <__swsetup_r>
 8009028:	b170      	cbz	r0, 8009048 <_vfiprintf_r+0x5c>
 800902a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800902c:	07dc      	lsls	r4, r3, #31
 800902e:	d504      	bpl.n	800903a <_vfiprintf_r+0x4e>
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	b01d      	add	sp, #116	; 0x74
 8009036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	0598      	lsls	r0, r3, #22
 800903e:	d4f7      	bmi.n	8009030 <_vfiprintf_r+0x44>
 8009040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009042:	f7ff ff5b 	bl	8008efc <__retarget_lock_release_recursive>
 8009046:	e7f3      	b.n	8009030 <_vfiprintf_r+0x44>
 8009048:	2300      	movs	r3, #0
 800904a:	9309      	str	r3, [sp, #36]	; 0x24
 800904c:	2320      	movs	r3, #32
 800904e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009052:	f8cd 800c 	str.w	r8, [sp, #12]
 8009056:	2330      	movs	r3, #48	; 0x30
 8009058:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800920c <_vfiprintf_r+0x220>
 800905c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009060:	f04f 0901 	mov.w	r9, #1
 8009064:	4623      	mov	r3, r4
 8009066:	469a      	mov	sl, r3
 8009068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800906c:	b10a      	cbz	r2, 8009072 <_vfiprintf_r+0x86>
 800906e:	2a25      	cmp	r2, #37	; 0x25
 8009070:	d1f9      	bne.n	8009066 <_vfiprintf_r+0x7a>
 8009072:	ebba 0b04 	subs.w	fp, sl, r4
 8009076:	d00b      	beq.n	8009090 <_vfiprintf_r+0xa4>
 8009078:	465b      	mov	r3, fp
 800907a:	4622      	mov	r2, r4
 800907c:	4629      	mov	r1, r5
 800907e:	4630      	mov	r0, r6
 8009080:	f7ff ffa1 	bl	8008fc6 <__sfputs_r>
 8009084:	3001      	adds	r0, #1
 8009086:	f000 80a9 	beq.w	80091dc <_vfiprintf_r+0x1f0>
 800908a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800908c:	445a      	add	r2, fp
 800908e:	9209      	str	r2, [sp, #36]	; 0x24
 8009090:	f89a 3000 	ldrb.w	r3, [sl]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 80a1 	beq.w	80091dc <_vfiprintf_r+0x1f0>
 800909a:	2300      	movs	r3, #0
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a4:	f10a 0a01 	add.w	sl, sl, #1
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	9307      	str	r3, [sp, #28]
 80090ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090b0:	931a      	str	r3, [sp, #104]	; 0x68
 80090b2:	4654      	mov	r4, sl
 80090b4:	2205      	movs	r2, #5
 80090b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ba:	4854      	ldr	r0, [pc, #336]	; (800920c <_vfiprintf_r+0x220>)
 80090bc:	f7f7 f890 	bl	80001e0 <memchr>
 80090c0:	9a04      	ldr	r2, [sp, #16]
 80090c2:	b9d8      	cbnz	r0, 80090fc <_vfiprintf_r+0x110>
 80090c4:	06d1      	lsls	r1, r2, #27
 80090c6:	bf44      	itt	mi
 80090c8:	2320      	movmi	r3, #32
 80090ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ce:	0713      	lsls	r3, r2, #28
 80090d0:	bf44      	itt	mi
 80090d2:	232b      	movmi	r3, #43	; 0x2b
 80090d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d8:	f89a 3000 	ldrb.w	r3, [sl]
 80090dc:	2b2a      	cmp	r3, #42	; 0x2a
 80090de:	d015      	beq.n	800910c <_vfiprintf_r+0x120>
 80090e0:	9a07      	ldr	r2, [sp, #28]
 80090e2:	4654      	mov	r4, sl
 80090e4:	2000      	movs	r0, #0
 80090e6:	f04f 0c0a 	mov.w	ip, #10
 80090ea:	4621      	mov	r1, r4
 80090ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f0:	3b30      	subs	r3, #48	; 0x30
 80090f2:	2b09      	cmp	r3, #9
 80090f4:	d94d      	bls.n	8009192 <_vfiprintf_r+0x1a6>
 80090f6:	b1b0      	cbz	r0, 8009126 <_vfiprintf_r+0x13a>
 80090f8:	9207      	str	r2, [sp, #28]
 80090fa:	e014      	b.n	8009126 <_vfiprintf_r+0x13a>
 80090fc:	eba0 0308 	sub.w	r3, r0, r8
 8009100:	fa09 f303 	lsl.w	r3, r9, r3
 8009104:	4313      	orrs	r3, r2
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	46a2      	mov	sl, r4
 800910a:	e7d2      	b.n	80090b2 <_vfiprintf_r+0xc6>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	1d19      	adds	r1, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	9103      	str	r1, [sp, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfbb      	ittet	lt
 8009118:	425b      	neglt	r3, r3
 800911a:	f042 0202 	orrlt.w	r2, r2, #2
 800911e:	9307      	strge	r3, [sp, #28]
 8009120:	9307      	strlt	r3, [sp, #28]
 8009122:	bfb8      	it	lt
 8009124:	9204      	strlt	r2, [sp, #16]
 8009126:	7823      	ldrb	r3, [r4, #0]
 8009128:	2b2e      	cmp	r3, #46	; 0x2e
 800912a:	d10c      	bne.n	8009146 <_vfiprintf_r+0x15a>
 800912c:	7863      	ldrb	r3, [r4, #1]
 800912e:	2b2a      	cmp	r3, #42	; 0x2a
 8009130:	d134      	bne.n	800919c <_vfiprintf_r+0x1b0>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	1d1a      	adds	r2, r3, #4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	9203      	str	r2, [sp, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	bfb8      	it	lt
 800913e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009142:	3402      	adds	r4, #2
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800921c <_vfiprintf_r+0x230>
 800914a:	7821      	ldrb	r1, [r4, #0]
 800914c:	2203      	movs	r2, #3
 800914e:	4650      	mov	r0, sl
 8009150:	f7f7 f846 	bl	80001e0 <memchr>
 8009154:	b138      	cbz	r0, 8009166 <_vfiprintf_r+0x17a>
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	eba0 000a 	sub.w	r0, r0, sl
 800915c:	2240      	movs	r2, #64	; 0x40
 800915e:	4082      	lsls	r2, r0
 8009160:	4313      	orrs	r3, r2
 8009162:	3401      	adds	r4, #1
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800916a:	4829      	ldr	r0, [pc, #164]	; (8009210 <_vfiprintf_r+0x224>)
 800916c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009170:	2206      	movs	r2, #6
 8009172:	f7f7 f835 	bl	80001e0 <memchr>
 8009176:	2800      	cmp	r0, #0
 8009178:	d03f      	beq.n	80091fa <_vfiprintf_r+0x20e>
 800917a:	4b26      	ldr	r3, [pc, #152]	; (8009214 <_vfiprintf_r+0x228>)
 800917c:	bb1b      	cbnz	r3, 80091c6 <_vfiprintf_r+0x1da>
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	3307      	adds	r3, #7
 8009182:	f023 0307 	bic.w	r3, r3, #7
 8009186:	3308      	adds	r3, #8
 8009188:	9303      	str	r3, [sp, #12]
 800918a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918c:	443b      	add	r3, r7
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	e768      	b.n	8009064 <_vfiprintf_r+0x78>
 8009192:	fb0c 3202 	mla	r2, ip, r2, r3
 8009196:	460c      	mov	r4, r1
 8009198:	2001      	movs	r0, #1
 800919a:	e7a6      	b.n	80090ea <_vfiprintf_r+0xfe>
 800919c:	2300      	movs	r3, #0
 800919e:	3401      	adds	r4, #1
 80091a0:	9305      	str	r3, [sp, #20]
 80091a2:	4619      	mov	r1, r3
 80091a4:	f04f 0c0a 	mov.w	ip, #10
 80091a8:	4620      	mov	r0, r4
 80091aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ae:	3a30      	subs	r2, #48	; 0x30
 80091b0:	2a09      	cmp	r2, #9
 80091b2:	d903      	bls.n	80091bc <_vfiprintf_r+0x1d0>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0c6      	beq.n	8009146 <_vfiprintf_r+0x15a>
 80091b8:	9105      	str	r1, [sp, #20]
 80091ba:	e7c4      	b.n	8009146 <_vfiprintf_r+0x15a>
 80091bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80091c0:	4604      	mov	r4, r0
 80091c2:	2301      	movs	r3, #1
 80091c4:	e7f0      	b.n	80091a8 <_vfiprintf_r+0x1bc>
 80091c6:	ab03      	add	r3, sp, #12
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	462a      	mov	r2, r5
 80091cc:	4b12      	ldr	r3, [pc, #72]	; (8009218 <_vfiprintf_r+0x22c>)
 80091ce:	a904      	add	r1, sp, #16
 80091d0:	4630      	mov	r0, r6
 80091d2:	f3af 8000 	nop.w
 80091d6:	4607      	mov	r7, r0
 80091d8:	1c78      	adds	r0, r7, #1
 80091da:	d1d6      	bne.n	800918a <_vfiprintf_r+0x19e>
 80091dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091de:	07d9      	lsls	r1, r3, #31
 80091e0:	d405      	bmi.n	80091ee <_vfiprintf_r+0x202>
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	059a      	lsls	r2, r3, #22
 80091e6:	d402      	bmi.n	80091ee <_vfiprintf_r+0x202>
 80091e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091ea:	f7ff fe87 	bl	8008efc <__retarget_lock_release_recursive>
 80091ee:	89ab      	ldrh	r3, [r5, #12]
 80091f0:	065b      	lsls	r3, r3, #25
 80091f2:	f53f af1d 	bmi.w	8009030 <_vfiprintf_r+0x44>
 80091f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091f8:	e71c      	b.n	8009034 <_vfiprintf_r+0x48>
 80091fa:	ab03      	add	r3, sp, #12
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	462a      	mov	r2, r5
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <_vfiprintf_r+0x22c>)
 8009202:	a904      	add	r1, sp, #16
 8009204:	4630      	mov	r0, r6
 8009206:	f000 f879 	bl	80092fc <_printf_i>
 800920a:	e7e4      	b.n	80091d6 <_vfiprintf_r+0x1ea>
 800920c:	0800992c 	.word	0x0800992c
 8009210:	08009936 	.word	0x08009936
 8009214:	00000000 	.word	0x00000000
 8009218:	08008fc7 	.word	0x08008fc7
 800921c:	08009932 	.word	0x08009932

08009220 <_printf_common>:
 8009220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009224:	4616      	mov	r6, r2
 8009226:	4699      	mov	r9, r3
 8009228:	688a      	ldr	r2, [r1, #8]
 800922a:	690b      	ldr	r3, [r1, #16]
 800922c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009230:	4293      	cmp	r3, r2
 8009232:	bfb8      	it	lt
 8009234:	4613      	movlt	r3, r2
 8009236:	6033      	str	r3, [r6, #0]
 8009238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800923c:	4607      	mov	r7, r0
 800923e:	460c      	mov	r4, r1
 8009240:	b10a      	cbz	r2, 8009246 <_printf_common+0x26>
 8009242:	3301      	adds	r3, #1
 8009244:	6033      	str	r3, [r6, #0]
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	0699      	lsls	r1, r3, #26
 800924a:	bf42      	ittt	mi
 800924c:	6833      	ldrmi	r3, [r6, #0]
 800924e:	3302      	addmi	r3, #2
 8009250:	6033      	strmi	r3, [r6, #0]
 8009252:	6825      	ldr	r5, [r4, #0]
 8009254:	f015 0506 	ands.w	r5, r5, #6
 8009258:	d106      	bne.n	8009268 <_printf_common+0x48>
 800925a:	f104 0a19 	add.w	sl, r4, #25
 800925e:	68e3      	ldr	r3, [r4, #12]
 8009260:	6832      	ldr	r2, [r6, #0]
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	42ab      	cmp	r3, r5
 8009266:	dc26      	bgt.n	80092b6 <_printf_common+0x96>
 8009268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800926c:	1e13      	subs	r3, r2, #0
 800926e:	6822      	ldr	r2, [r4, #0]
 8009270:	bf18      	it	ne
 8009272:	2301      	movne	r3, #1
 8009274:	0692      	lsls	r2, r2, #26
 8009276:	d42b      	bmi.n	80092d0 <_printf_common+0xb0>
 8009278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800927c:	4649      	mov	r1, r9
 800927e:	4638      	mov	r0, r7
 8009280:	47c0      	blx	r8
 8009282:	3001      	adds	r0, #1
 8009284:	d01e      	beq.n	80092c4 <_printf_common+0xa4>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	6922      	ldr	r2, [r4, #16]
 800928a:	f003 0306 	and.w	r3, r3, #6
 800928e:	2b04      	cmp	r3, #4
 8009290:	bf02      	ittt	eq
 8009292:	68e5      	ldreq	r5, [r4, #12]
 8009294:	6833      	ldreq	r3, [r6, #0]
 8009296:	1aed      	subeq	r5, r5, r3
 8009298:	68a3      	ldr	r3, [r4, #8]
 800929a:	bf0c      	ite	eq
 800929c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092a0:	2500      	movne	r5, #0
 80092a2:	4293      	cmp	r3, r2
 80092a4:	bfc4      	itt	gt
 80092a6:	1a9b      	subgt	r3, r3, r2
 80092a8:	18ed      	addgt	r5, r5, r3
 80092aa:	2600      	movs	r6, #0
 80092ac:	341a      	adds	r4, #26
 80092ae:	42b5      	cmp	r5, r6
 80092b0:	d11a      	bne.n	80092e8 <_printf_common+0xc8>
 80092b2:	2000      	movs	r0, #0
 80092b4:	e008      	b.n	80092c8 <_printf_common+0xa8>
 80092b6:	2301      	movs	r3, #1
 80092b8:	4652      	mov	r2, sl
 80092ba:	4649      	mov	r1, r9
 80092bc:	4638      	mov	r0, r7
 80092be:	47c0      	blx	r8
 80092c0:	3001      	adds	r0, #1
 80092c2:	d103      	bne.n	80092cc <_printf_common+0xac>
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092cc:	3501      	adds	r5, #1
 80092ce:	e7c6      	b.n	800925e <_printf_common+0x3e>
 80092d0:	18e1      	adds	r1, r4, r3
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	2030      	movs	r0, #48	; 0x30
 80092d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092da:	4422      	add	r2, r4
 80092dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092e4:	3302      	adds	r3, #2
 80092e6:	e7c7      	b.n	8009278 <_printf_common+0x58>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4622      	mov	r2, r4
 80092ec:	4649      	mov	r1, r9
 80092ee:	4638      	mov	r0, r7
 80092f0:	47c0      	blx	r8
 80092f2:	3001      	adds	r0, #1
 80092f4:	d0e6      	beq.n	80092c4 <_printf_common+0xa4>
 80092f6:	3601      	adds	r6, #1
 80092f8:	e7d9      	b.n	80092ae <_printf_common+0x8e>
	...

080092fc <_printf_i>:
 80092fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009300:	7e0f      	ldrb	r7, [r1, #24]
 8009302:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009304:	2f78      	cmp	r7, #120	; 0x78
 8009306:	4691      	mov	r9, r2
 8009308:	4680      	mov	r8, r0
 800930a:	460c      	mov	r4, r1
 800930c:	469a      	mov	sl, r3
 800930e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009312:	d807      	bhi.n	8009324 <_printf_i+0x28>
 8009314:	2f62      	cmp	r7, #98	; 0x62
 8009316:	d80a      	bhi.n	800932e <_printf_i+0x32>
 8009318:	2f00      	cmp	r7, #0
 800931a:	f000 80d4 	beq.w	80094c6 <_printf_i+0x1ca>
 800931e:	2f58      	cmp	r7, #88	; 0x58
 8009320:	f000 80c0 	beq.w	80094a4 <_printf_i+0x1a8>
 8009324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800932c:	e03a      	b.n	80093a4 <_printf_i+0xa8>
 800932e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009332:	2b15      	cmp	r3, #21
 8009334:	d8f6      	bhi.n	8009324 <_printf_i+0x28>
 8009336:	a101      	add	r1, pc, #4	; (adr r1, 800933c <_printf_i+0x40>)
 8009338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800933c:	08009395 	.word	0x08009395
 8009340:	080093a9 	.word	0x080093a9
 8009344:	08009325 	.word	0x08009325
 8009348:	08009325 	.word	0x08009325
 800934c:	08009325 	.word	0x08009325
 8009350:	08009325 	.word	0x08009325
 8009354:	080093a9 	.word	0x080093a9
 8009358:	08009325 	.word	0x08009325
 800935c:	08009325 	.word	0x08009325
 8009360:	08009325 	.word	0x08009325
 8009364:	08009325 	.word	0x08009325
 8009368:	080094ad 	.word	0x080094ad
 800936c:	080093d5 	.word	0x080093d5
 8009370:	08009467 	.word	0x08009467
 8009374:	08009325 	.word	0x08009325
 8009378:	08009325 	.word	0x08009325
 800937c:	080094cf 	.word	0x080094cf
 8009380:	08009325 	.word	0x08009325
 8009384:	080093d5 	.word	0x080093d5
 8009388:	08009325 	.word	0x08009325
 800938c:	08009325 	.word	0x08009325
 8009390:	0800946f 	.word	0x0800946f
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	1d1a      	adds	r2, r3, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	602a      	str	r2, [r5, #0]
 800939c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093a4:	2301      	movs	r3, #1
 80093a6:	e09f      	b.n	80094e8 <_printf_i+0x1ec>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	0607      	lsls	r7, r0, #24
 80093ae:	f103 0104 	add.w	r1, r3, #4
 80093b2:	6029      	str	r1, [r5, #0]
 80093b4:	d501      	bpl.n	80093ba <_printf_i+0xbe>
 80093b6:	681e      	ldr	r6, [r3, #0]
 80093b8:	e003      	b.n	80093c2 <_printf_i+0xc6>
 80093ba:	0646      	lsls	r6, r0, #25
 80093bc:	d5fb      	bpl.n	80093b6 <_printf_i+0xba>
 80093be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093c2:	2e00      	cmp	r6, #0
 80093c4:	da03      	bge.n	80093ce <_printf_i+0xd2>
 80093c6:	232d      	movs	r3, #45	; 0x2d
 80093c8:	4276      	negs	r6, r6
 80093ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ce:	485a      	ldr	r0, [pc, #360]	; (8009538 <_printf_i+0x23c>)
 80093d0:	230a      	movs	r3, #10
 80093d2:	e012      	b.n	80093fa <_printf_i+0xfe>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	6820      	ldr	r0, [r4, #0]
 80093d8:	1d19      	adds	r1, r3, #4
 80093da:	6029      	str	r1, [r5, #0]
 80093dc:	0605      	lsls	r5, r0, #24
 80093de:	d501      	bpl.n	80093e4 <_printf_i+0xe8>
 80093e0:	681e      	ldr	r6, [r3, #0]
 80093e2:	e002      	b.n	80093ea <_printf_i+0xee>
 80093e4:	0641      	lsls	r1, r0, #25
 80093e6:	d5fb      	bpl.n	80093e0 <_printf_i+0xe4>
 80093e8:	881e      	ldrh	r6, [r3, #0]
 80093ea:	4853      	ldr	r0, [pc, #332]	; (8009538 <_printf_i+0x23c>)
 80093ec:	2f6f      	cmp	r7, #111	; 0x6f
 80093ee:	bf0c      	ite	eq
 80093f0:	2308      	moveq	r3, #8
 80093f2:	230a      	movne	r3, #10
 80093f4:	2100      	movs	r1, #0
 80093f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093fa:	6865      	ldr	r5, [r4, #4]
 80093fc:	60a5      	str	r5, [r4, #8]
 80093fe:	2d00      	cmp	r5, #0
 8009400:	bfa2      	ittt	ge
 8009402:	6821      	ldrge	r1, [r4, #0]
 8009404:	f021 0104 	bicge.w	r1, r1, #4
 8009408:	6021      	strge	r1, [r4, #0]
 800940a:	b90e      	cbnz	r6, 8009410 <_printf_i+0x114>
 800940c:	2d00      	cmp	r5, #0
 800940e:	d04b      	beq.n	80094a8 <_printf_i+0x1ac>
 8009410:	4615      	mov	r5, r2
 8009412:	fbb6 f1f3 	udiv	r1, r6, r3
 8009416:	fb03 6711 	mls	r7, r3, r1, r6
 800941a:	5dc7      	ldrb	r7, [r0, r7]
 800941c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009420:	4637      	mov	r7, r6
 8009422:	42bb      	cmp	r3, r7
 8009424:	460e      	mov	r6, r1
 8009426:	d9f4      	bls.n	8009412 <_printf_i+0x116>
 8009428:	2b08      	cmp	r3, #8
 800942a:	d10b      	bne.n	8009444 <_printf_i+0x148>
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	07de      	lsls	r6, r3, #31
 8009430:	d508      	bpl.n	8009444 <_printf_i+0x148>
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	6861      	ldr	r1, [r4, #4]
 8009436:	4299      	cmp	r1, r3
 8009438:	bfde      	ittt	le
 800943a:	2330      	movle	r3, #48	; 0x30
 800943c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009440:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009444:	1b52      	subs	r2, r2, r5
 8009446:	6122      	str	r2, [r4, #16]
 8009448:	f8cd a000 	str.w	sl, [sp]
 800944c:	464b      	mov	r3, r9
 800944e:	aa03      	add	r2, sp, #12
 8009450:	4621      	mov	r1, r4
 8009452:	4640      	mov	r0, r8
 8009454:	f7ff fee4 	bl	8009220 <_printf_common>
 8009458:	3001      	adds	r0, #1
 800945a:	d14a      	bne.n	80094f2 <_printf_i+0x1f6>
 800945c:	f04f 30ff 	mov.w	r0, #4294967295
 8009460:	b004      	add	sp, #16
 8009462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	f043 0320 	orr.w	r3, r3, #32
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	4833      	ldr	r0, [pc, #204]	; (800953c <_printf_i+0x240>)
 8009470:	2778      	movs	r7, #120	; 0x78
 8009472:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	6829      	ldr	r1, [r5, #0]
 800947a:	061f      	lsls	r7, r3, #24
 800947c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009480:	d402      	bmi.n	8009488 <_printf_i+0x18c>
 8009482:	065f      	lsls	r7, r3, #25
 8009484:	bf48      	it	mi
 8009486:	b2b6      	uxthmi	r6, r6
 8009488:	07df      	lsls	r7, r3, #31
 800948a:	bf48      	it	mi
 800948c:	f043 0320 	orrmi.w	r3, r3, #32
 8009490:	6029      	str	r1, [r5, #0]
 8009492:	bf48      	it	mi
 8009494:	6023      	strmi	r3, [r4, #0]
 8009496:	b91e      	cbnz	r6, 80094a0 <_printf_i+0x1a4>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	f023 0320 	bic.w	r3, r3, #32
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	2310      	movs	r3, #16
 80094a2:	e7a7      	b.n	80093f4 <_printf_i+0xf8>
 80094a4:	4824      	ldr	r0, [pc, #144]	; (8009538 <_printf_i+0x23c>)
 80094a6:	e7e4      	b.n	8009472 <_printf_i+0x176>
 80094a8:	4615      	mov	r5, r2
 80094aa:	e7bd      	b.n	8009428 <_printf_i+0x12c>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	6826      	ldr	r6, [r4, #0]
 80094b0:	6961      	ldr	r1, [r4, #20]
 80094b2:	1d18      	adds	r0, r3, #4
 80094b4:	6028      	str	r0, [r5, #0]
 80094b6:	0635      	lsls	r5, r6, #24
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	d501      	bpl.n	80094c0 <_printf_i+0x1c4>
 80094bc:	6019      	str	r1, [r3, #0]
 80094be:	e002      	b.n	80094c6 <_printf_i+0x1ca>
 80094c0:	0670      	lsls	r0, r6, #25
 80094c2:	d5fb      	bpl.n	80094bc <_printf_i+0x1c0>
 80094c4:	8019      	strh	r1, [r3, #0]
 80094c6:	2300      	movs	r3, #0
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	4615      	mov	r5, r2
 80094cc:	e7bc      	b.n	8009448 <_printf_i+0x14c>
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	1d1a      	adds	r2, r3, #4
 80094d2:	602a      	str	r2, [r5, #0]
 80094d4:	681d      	ldr	r5, [r3, #0]
 80094d6:	6862      	ldr	r2, [r4, #4]
 80094d8:	2100      	movs	r1, #0
 80094da:	4628      	mov	r0, r5
 80094dc:	f7f6 fe80 	bl	80001e0 <memchr>
 80094e0:	b108      	cbz	r0, 80094e6 <_printf_i+0x1ea>
 80094e2:	1b40      	subs	r0, r0, r5
 80094e4:	6060      	str	r0, [r4, #4]
 80094e6:	6863      	ldr	r3, [r4, #4]
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	2300      	movs	r3, #0
 80094ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094f0:	e7aa      	b.n	8009448 <_printf_i+0x14c>
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	462a      	mov	r2, r5
 80094f6:	4649      	mov	r1, r9
 80094f8:	4640      	mov	r0, r8
 80094fa:	47d0      	blx	sl
 80094fc:	3001      	adds	r0, #1
 80094fe:	d0ad      	beq.n	800945c <_printf_i+0x160>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	079b      	lsls	r3, r3, #30
 8009504:	d413      	bmi.n	800952e <_printf_i+0x232>
 8009506:	68e0      	ldr	r0, [r4, #12]
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	4298      	cmp	r0, r3
 800950c:	bfb8      	it	lt
 800950e:	4618      	movlt	r0, r3
 8009510:	e7a6      	b.n	8009460 <_printf_i+0x164>
 8009512:	2301      	movs	r3, #1
 8009514:	4632      	mov	r2, r6
 8009516:	4649      	mov	r1, r9
 8009518:	4640      	mov	r0, r8
 800951a:	47d0      	blx	sl
 800951c:	3001      	adds	r0, #1
 800951e:	d09d      	beq.n	800945c <_printf_i+0x160>
 8009520:	3501      	adds	r5, #1
 8009522:	68e3      	ldr	r3, [r4, #12]
 8009524:	9903      	ldr	r1, [sp, #12]
 8009526:	1a5b      	subs	r3, r3, r1
 8009528:	42ab      	cmp	r3, r5
 800952a:	dcf2      	bgt.n	8009512 <_printf_i+0x216>
 800952c:	e7eb      	b.n	8009506 <_printf_i+0x20a>
 800952e:	2500      	movs	r5, #0
 8009530:	f104 0619 	add.w	r6, r4, #25
 8009534:	e7f5      	b.n	8009522 <_printf_i+0x226>
 8009536:	bf00      	nop
 8009538:	0800993d 	.word	0x0800993d
 800953c:	0800994e 	.word	0x0800994e

08009540 <__sflush_r>:
 8009540:	898a      	ldrh	r2, [r1, #12]
 8009542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	4605      	mov	r5, r0
 8009548:	0710      	lsls	r0, r2, #28
 800954a:	460c      	mov	r4, r1
 800954c:	d458      	bmi.n	8009600 <__sflush_r+0xc0>
 800954e:	684b      	ldr	r3, [r1, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	dc05      	bgt.n	8009560 <__sflush_r+0x20>
 8009554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009556:	2b00      	cmp	r3, #0
 8009558:	dc02      	bgt.n	8009560 <__sflush_r+0x20>
 800955a:	2000      	movs	r0, #0
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009562:	2e00      	cmp	r6, #0
 8009564:	d0f9      	beq.n	800955a <__sflush_r+0x1a>
 8009566:	2300      	movs	r3, #0
 8009568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800956c:	682f      	ldr	r7, [r5, #0]
 800956e:	6a21      	ldr	r1, [r4, #32]
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	d032      	beq.n	80095da <__sflush_r+0x9a>
 8009574:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	075a      	lsls	r2, r3, #29
 800957a:	d505      	bpl.n	8009588 <__sflush_r+0x48>
 800957c:	6863      	ldr	r3, [r4, #4]
 800957e:	1ac0      	subs	r0, r0, r3
 8009580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009582:	b10b      	cbz	r3, 8009588 <__sflush_r+0x48>
 8009584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009586:	1ac0      	subs	r0, r0, r3
 8009588:	2300      	movs	r3, #0
 800958a:	4602      	mov	r2, r0
 800958c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800958e:	6a21      	ldr	r1, [r4, #32]
 8009590:	4628      	mov	r0, r5
 8009592:	47b0      	blx	r6
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	d106      	bne.n	80095a8 <__sflush_r+0x68>
 800959a:	6829      	ldr	r1, [r5, #0]
 800959c:	291d      	cmp	r1, #29
 800959e:	d82b      	bhi.n	80095f8 <__sflush_r+0xb8>
 80095a0:	4a29      	ldr	r2, [pc, #164]	; (8009648 <__sflush_r+0x108>)
 80095a2:	410a      	asrs	r2, r1
 80095a4:	07d6      	lsls	r6, r2, #31
 80095a6:	d427      	bmi.n	80095f8 <__sflush_r+0xb8>
 80095a8:	2200      	movs	r2, #0
 80095aa:	6062      	str	r2, [r4, #4]
 80095ac:	04d9      	lsls	r1, r3, #19
 80095ae:	6922      	ldr	r2, [r4, #16]
 80095b0:	6022      	str	r2, [r4, #0]
 80095b2:	d504      	bpl.n	80095be <__sflush_r+0x7e>
 80095b4:	1c42      	adds	r2, r0, #1
 80095b6:	d101      	bne.n	80095bc <__sflush_r+0x7c>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	b903      	cbnz	r3, 80095be <__sflush_r+0x7e>
 80095bc:	6560      	str	r0, [r4, #84]	; 0x54
 80095be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c0:	602f      	str	r7, [r5, #0]
 80095c2:	2900      	cmp	r1, #0
 80095c4:	d0c9      	beq.n	800955a <__sflush_r+0x1a>
 80095c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095ca:	4299      	cmp	r1, r3
 80095cc:	d002      	beq.n	80095d4 <__sflush_r+0x94>
 80095ce:	4628      	mov	r0, r5
 80095d0:	f7ff fc96 	bl	8008f00 <_free_r>
 80095d4:	2000      	movs	r0, #0
 80095d6:	6360      	str	r0, [r4, #52]	; 0x34
 80095d8:	e7c0      	b.n	800955c <__sflush_r+0x1c>
 80095da:	2301      	movs	r3, #1
 80095dc:	4628      	mov	r0, r5
 80095de:	47b0      	blx	r6
 80095e0:	1c41      	adds	r1, r0, #1
 80095e2:	d1c8      	bne.n	8009576 <__sflush_r+0x36>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0c5      	beq.n	8009576 <__sflush_r+0x36>
 80095ea:	2b1d      	cmp	r3, #29
 80095ec:	d001      	beq.n	80095f2 <__sflush_r+0xb2>
 80095ee:	2b16      	cmp	r3, #22
 80095f0:	d101      	bne.n	80095f6 <__sflush_r+0xb6>
 80095f2:	602f      	str	r7, [r5, #0]
 80095f4:	e7b1      	b.n	800955a <__sflush_r+0x1a>
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095fc:	81a3      	strh	r3, [r4, #12]
 80095fe:	e7ad      	b.n	800955c <__sflush_r+0x1c>
 8009600:	690f      	ldr	r7, [r1, #16]
 8009602:	2f00      	cmp	r7, #0
 8009604:	d0a9      	beq.n	800955a <__sflush_r+0x1a>
 8009606:	0793      	lsls	r3, r2, #30
 8009608:	680e      	ldr	r6, [r1, #0]
 800960a:	bf08      	it	eq
 800960c:	694b      	ldreq	r3, [r1, #20]
 800960e:	600f      	str	r7, [r1, #0]
 8009610:	bf18      	it	ne
 8009612:	2300      	movne	r3, #0
 8009614:	eba6 0807 	sub.w	r8, r6, r7
 8009618:	608b      	str	r3, [r1, #8]
 800961a:	f1b8 0f00 	cmp.w	r8, #0
 800961e:	dd9c      	ble.n	800955a <__sflush_r+0x1a>
 8009620:	6a21      	ldr	r1, [r4, #32]
 8009622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009624:	4643      	mov	r3, r8
 8009626:	463a      	mov	r2, r7
 8009628:	4628      	mov	r0, r5
 800962a:	47b0      	blx	r6
 800962c:	2800      	cmp	r0, #0
 800962e:	dc06      	bgt.n	800963e <__sflush_r+0xfe>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
 800963c:	e78e      	b.n	800955c <__sflush_r+0x1c>
 800963e:	4407      	add	r7, r0
 8009640:	eba8 0800 	sub.w	r8, r8, r0
 8009644:	e7e9      	b.n	800961a <__sflush_r+0xda>
 8009646:	bf00      	nop
 8009648:	dfbffffe 	.word	0xdfbffffe

0800964c <_fflush_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	690b      	ldr	r3, [r1, #16]
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b913      	cbnz	r3, 800965c <_fflush_r+0x10>
 8009656:	2500      	movs	r5, #0
 8009658:	4628      	mov	r0, r5
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	b118      	cbz	r0, 8009666 <_fflush_r+0x1a>
 800965e:	6a03      	ldr	r3, [r0, #32]
 8009660:	b90b      	cbnz	r3, 8009666 <_fflush_r+0x1a>
 8009662:	f7ff fb35 	bl	8008cd0 <__sinit>
 8009666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0f3      	beq.n	8009656 <_fflush_r+0xa>
 800966e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009670:	07d0      	lsls	r0, r2, #31
 8009672:	d404      	bmi.n	800967e <_fflush_r+0x32>
 8009674:	0599      	lsls	r1, r3, #22
 8009676:	d402      	bmi.n	800967e <_fflush_r+0x32>
 8009678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967a:	f7ff fc3e 	bl	8008efa <__retarget_lock_acquire_recursive>
 800967e:	4628      	mov	r0, r5
 8009680:	4621      	mov	r1, r4
 8009682:	f7ff ff5d 	bl	8009540 <__sflush_r>
 8009686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009688:	07da      	lsls	r2, r3, #31
 800968a:	4605      	mov	r5, r0
 800968c:	d4e4      	bmi.n	8009658 <_fflush_r+0xc>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	059b      	lsls	r3, r3, #22
 8009692:	d4e1      	bmi.n	8009658 <_fflush_r+0xc>
 8009694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009696:	f7ff fc31 	bl	8008efc <__retarget_lock_release_recursive>
 800969a:	e7dd      	b.n	8009658 <_fflush_r+0xc>

0800969c <__swbuf_r>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	460e      	mov	r6, r1
 80096a0:	4614      	mov	r4, r2
 80096a2:	4605      	mov	r5, r0
 80096a4:	b118      	cbz	r0, 80096ae <__swbuf_r+0x12>
 80096a6:	6a03      	ldr	r3, [r0, #32]
 80096a8:	b90b      	cbnz	r3, 80096ae <__swbuf_r+0x12>
 80096aa:	f7ff fb11 	bl	8008cd0 <__sinit>
 80096ae:	69a3      	ldr	r3, [r4, #24]
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	071a      	lsls	r2, r3, #28
 80096b6:	d525      	bpl.n	8009704 <__swbuf_r+0x68>
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	b31b      	cbz	r3, 8009704 <__swbuf_r+0x68>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	6922      	ldr	r2, [r4, #16]
 80096c0:	1a98      	subs	r0, r3, r2
 80096c2:	6963      	ldr	r3, [r4, #20]
 80096c4:	b2f6      	uxtb	r6, r6
 80096c6:	4283      	cmp	r3, r0
 80096c8:	4637      	mov	r7, r6
 80096ca:	dc04      	bgt.n	80096d6 <__swbuf_r+0x3a>
 80096cc:	4621      	mov	r1, r4
 80096ce:	4628      	mov	r0, r5
 80096d0:	f7ff ffbc 	bl	800964c <_fflush_r>
 80096d4:	b9e0      	cbnz	r0, 8009710 <__swbuf_r+0x74>
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	3b01      	subs	r3, #1
 80096da:	60a3      	str	r3, [r4, #8]
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	6022      	str	r2, [r4, #0]
 80096e2:	701e      	strb	r6, [r3, #0]
 80096e4:	6962      	ldr	r2, [r4, #20]
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d004      	beq.n	80096f6 <__swbuf_r+0x5a>
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	07db      	lsls	r3, r3, #31
 80096f0:	d506      	bpl.n	8009700 <__swbuf_r+0x64>
 80096f2:	2e0a      	cmp	r6, #10
 80096f4:	d104      	bne.n	8009700 <__swbuf_r+0x64>
 80096f6:	4621      	mov	r1, r4
 80096f8:	4628      	mov	r0, r5
 80096fa:	f7ff ffa7 	bl	800964c <_fflush_r>
 80096fe:	b938      	cbnz	r0, 8009710 <__swbuf_r+0x74>
 8009700:	4638      	mov	r0, r7
 8009702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009704:	4621      	mov	r1, r4
 8009706:	4628      	mov	r0, r5
 8009708:	f000 f806 	bl	8009718 <__swsetup_r>
 800970c:	2800      	cmp	r0, #0
 800970e:	d0d5      	beq.n	80096bc <__swbuf_r+0x20>
 8009710:	f04f 37ff 	mov.w	r7, #4294967295
 8009714:	e7f4      	b.n	8009700 <__swbuf_r+0x64>
	...

08009718 <__swsetup_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4b2a      	ldr	r3, [pc, #168]	; (80097c4 <__swsetup_r+0xac>)
 800971c:	4605      	mov	r5, r0
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	460c      	mov	r4, r1
 8009722:	b118      	cbz	r0, 800972c <__swsetup_r+0x14>
 8009724:	6a03      	ldr	r3, [r0, #32]
 8009726:	b90b      	cbnz	r3, 800972c <__swsetup_r+0x14>
 8009728:	f7ff fad2 	bl	8008cd0 <__sinit>
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009732:	0718      	lsls	r0, r3, #28
 8009734:	d422      	bmi.n	800977c <__swsetup_r+0x64>
 8009736:	06d9      	lsls	r1, r3, #27
 8009738:	d407      	bmi.n	800974a <__swsetup_r+0x32>
 800973a:	2309      	movs	r3, #9
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	f04f 30ff 	mov.w	r0, #4294967295
 8009748:	e034      	b.n	80097b4 <__swsetup_r+0x9c>
 800974a:	0758      	lsls	r0, r3, #29
 800974c:	d512      	bpl.n	8009774 <__swsetup_r+0x5c>
 800974e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009750:	b141      	cbz	r1, 8009764 <__swsetup_r+0x4c>
 8009752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009756:	4299      	cmp	r1, r3
 8009758:	d002      	beq.n	8009760 <__swsetup_r+0x48>
 800975a:	4628      	mov	r0, r5
 800975c:	f7ff fbd0 	bl	8008f00 <_free_r>
 8009760:	2300      	movs	r3, #0
 8009762:	6363      	str	r3, [r4, #52]	; 0x34
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800976a:	81a3      	strh	r3, [r4, #12]
 800976c:	2300      	movs	r3, #0
 800976e:	6063      	str	r3, [r4, #4]
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	6023      	str	r3, [r4, #0]
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	f043 0308 	orr.w	r3, r3, #8
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	b94b      	cbnz	r3, 8009794 <__swsetup_r+0x7c>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800978a:	d003      	beq.n	8009794 <__swsetup_r+0x7c>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f840 	bl	8009814 <__smakebuf_r>
 8009794:	89a0      	ldrh	r0, [r4, #12]
 8009796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800979a:	f010 0301 	ands.w	r3, r0, #1
 800979e:	d00a      	beq.n	80097b6 <__swsetup_r+0x9e>
 80097a0:	2300      	movs	r3, #0
 80097a2:	60a3      	str	r3, [r4, #8]
 80097a4:	6963      	ldr	r3, [r4, #20]
 80097a6:	425b      	negs	r3, r3
 80097a8:	61a3      	str	r3, [r4, #24]
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	b943      	cbnz	r3, 80097c0 <__swsetup_r+0xa8>
 80097ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b2:	d1c4      	bne.n	800973e <__swsetup_r+0x26>
 80097b4:	bd38      	pop	{r3, r4, r5, pc}
 80097b6:	0781      	lsls	r1, r0, #30
 80097b8:	bf58      	it	pl
 80097ba:	6963      	ldrpl	r3, [r4, #20]
 80097bc:	60a3      	str	r3, [r4, #8]
 80097be:	e7f4      	b.n	80097aa <__swsetup_r+0x92>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e7f7      	b.n	80097b4 <__swsetup_r+0x9c>
 80097c4:	20000084 	.word	0x20000084

080097c8 <__swhatbuf_r>:
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	460c      	mov	r4, r1
 80097cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d0:	2900      	cmp	r1, #0
 80097d2:	b096      	sub	sp, #88	; 0x58
 80097d4:	4615      	mov	r5, r2
 80097d6:	461e      	mov	r6, r3
 80097d8:	da0d      	bge.n	80097f6 <__swhatbuf_r+0x2e>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80097e0:	f04f 0100 	mov.w	r1, #0
 80097e4:	bf0c      	ite	eq
 80097e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097ea:	2340      	movne	r3, #64	; 0x40
 80097ec:	2000      	movs	r0, #0
 80097ee:	6031      	str	r1, [r6, #0]
 80097f0:	602b      	str	r3, [r5, #0]
 80097f2:	b016      	add	sp, #88	; 0x58
 80097f4:	bd70      	pop	{r4, r5, r6, pc}
 80097f6:	466a      	mov	r2, sp
 80097f8:	f000 f848 	bl	800988c <_fstat_r>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	dbec      	blt.n	80097da <__swhatbuf_r+0x12>
 8009800:	9901      	ldr	r1, [sp, #4]
 8009802:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009806:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800980a:	4259      	negs	r1, r3
 800980c:	4159      	adcs	r1, r3
 800980e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009812:	e7eb      	b.n	80097ec <__swhatbuf_r+0x24>

08009814 <__smakebuf_r>:
 8009814:	898b      	ldrh	r3, [r1, #12]
 8009816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009818:	079d      	lsls	r5, r3, #30
 800981a:	4606      	mov	r6, r0
 800981c:	460c      	mov	r4, r1
 800981e:	d507      	bpl.n	8009830 <__smakebuf_r+0x1c>
 8009820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	2301      	movs	r3, #1
 800982a:	6163      	str	r3, [r4, #20]
 800982c:	b002      	add	sp, #8
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	ab01      	add	r3, sp, #4
 8009832:	466a      	mov	r2, sp
 8009834:	f7ff ffc8 	bl	80097c8 <__swhatbuf_r>
 8009838:	9900      	ldr	r1, [sp, #0]
 800983a:	4605      	mov	r5, r0
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff f92f 	bl	8008aa0 <_malloc_r>
 8009842:	b948      	cbnz	r0, 8009858 <__smakebuf_r+0x44>
 8009844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009848:	059a      	lsls	r2, r3, #22
 800984a:	d4ef      	bmi.n	800982c <__smakebuf_r+0x18>
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	f043 0302 	orr.w	r3, r3, #2
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	e7e3      	b.n	8009820 <__smakebuf_r+0xc>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	6020      	str	r0, [r4, #0]
 800985c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	9b00      	ldr	r3, [sp, #0]
 8009864:	6163      	str	r3, [r4, #20]
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	6120      	str	r0, [r4, #16]
 800986a:	b15b      	cbz	r3, 8009884 <__smakebuf_r+0x70>
 800986c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009870:	4630      	mov	r0, r6
 8009872:	f000 f81d 	bl	80098b0 <_isatty_r>
 8009876:	b128      	cbz	r0, 8009884 <__smakebuf_r+0x70>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f023 0303 	bic.w	r3, r3, #3
 800987e:	f043 0301 	orr.w	r3, r3, #1
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	431d      	orrs	r5, r3
 8009888:	81a5      	strh	r5, [r4, #12]
 800988a:	e7cf      	b.n	800982c <__smakebuf_r+0x18>

0800988c <_fstat_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	4d07      	ldr	r5, [pc, #28]	; (80098ac <_fstat_r+0x20>)
 8009890:	2300      	movs	r3, #0
 8009892:	4604      	mov	r4, r0
 8009894:	4608      	mov	r0, r1
 8009896:	4611      	mov	r1, r2
 8009898:	602b      	str	r3, [r5, #0]
 800989a:	f7f7 fb10 	bl	8000ebe <_fstat>
 800989e:	1c43      	adds	r3, r0, #1
 80098a0:	d102      	bne.n	80098a8 <_fstat_r+0x1c>
 80098a2:	682b      	ldr	r3, [r5, #0]
 80098a4:	b103      	cbz	r3, 80098a8 <_fstat_r+0x1c>
 80098a6:	6023      	str	r3, [r4, #0]
 80098a8:	bd38      	pop	{r3, r4, r5, pc}
 80098aa:	bf00      	nop
 80098ac:	20000aec 	.word	0x20000aec

080098b0 <_isatty_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4d06      	ldr	r5, [pc, #24]	; (80098cc <_isatty_r+0x1c>)
 80098b4:	2300      	movs	r3, #0
 80098b6:	4604      	mov	r4, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	602b      	str	r3, [r5, #0]
 80098bc:	f7f7 fb0f 	bl	8000ede <_isatty>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d102      	bne.n	80098ca <_isatty_r+0x1a>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	b103      	cbz	r3, 80098ca <_isatty_r+0x1a>
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	20000aec 	.word	0x20000aec

080098d0 <_init>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr

080098dc <_fini>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	bf00      	nop
 80098e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e2:	bc08      	pop	{r3}
 80098e4:	469e      	mov	lr, r3
 80098e6:	4770      	bx	lr
