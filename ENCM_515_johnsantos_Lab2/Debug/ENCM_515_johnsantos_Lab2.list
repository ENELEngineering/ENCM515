
ENCM_515_johnsantos_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b70  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008d08  08008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d24  08008d24  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d2c  08008d2c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001636c  200000fc  08008e30  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016468  08008e30  00026468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f95  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a9  00000000  00000000  00035104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00038ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4d  00000000  00000000  00039c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194bb  00000000  00000000  0003a975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018559  00000000  00000000  00053e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f8ea  00000000  00000000  0006c389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bcc  00000000  00000000  000fbc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00100840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008cf0 	.word	0x08008cf0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008cf0 	.word	0x08008cf0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fdb1 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f875 	bl	80005cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e2:	f000 f8db 	bl	800069c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f9bb 	bl	8000860 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f8f7 	bl	80006dc <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ee:	f000 f923 	bl	8000738 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f2:	f000 f94f 	bl	8000794 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f6:	f000 f97d 	bl	80007f4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fa:	f007 ffa3 	bl	8008444 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */


  if(chosen_process == 0) {
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <main+0xe8>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d128      	bne.n	8000558 <main+0x84>
	  FloatFilterInit();
 8000506:	f000 fa85 	bl	8000a14 <FloatFilterInit>
	  ITM_Port32(31) = 1;
 800050a:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <main+0xec>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<NUMBER_OF_SAMPLES; i++) {
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e017      	b.n	8000546 <main+0x72>
		  newdata[i] = FloatFilterGet(*data);
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <main+0xf0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	edd3 7a00 	vldr	s15, [r3]
 800051e:	eeb0 0a67 	vmov.f32	s0, s15
 8000522:	f000 faaf 	bl	8000a84 <FloatFilterGet>
 8000526:	eef0 7a40 	vmov.f32	s15, s0
 800052a:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <main+0xf4>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	edc3 7a00 	vstr	s15, [r3]
		  data += 0x00000001;
 8000536:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <main+0xf0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3304      	adds	r3, #4
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <main+0xf0>)
 800053e:	6013      	str	r3, [r2, #0]
	  for (int i=0; i<NUMBER_OF_SAMPLES; i++) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3301      	adds	r3, #1
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f245 6221 	movw	r2, #22049	; 0x5621
 800054c:	4293      	cmp	r3, r2
 800054e:	dde2      	ble.n	8000516 <main+0x42>
	  }
	  ITM_Port32(31) = 2;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <main+0xec>)
 8000552:	2202      	movs	r2, #2
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	e02e      	b.n	80005b6 <main+0xe2>
  } else {
	  FixedFilterInit();
 8000558:	f000 fa78 	bl	8000a4c <FixedFilterInit>
	  ITM_Port32(31) = 1;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <main+0xec>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<NUMBER_OF_SAMPLES; i++) {
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	e01e      	b.n	80005a6 <main+0xd2>
		  newdata[i] = FixedFilterGet(*data);
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <main+0xf0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	edd3 7a00 	vldr	s15, [r3]
 8000570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000574:	ee17 3a90 	vmov	r3, s15
 8000578:	b21b      	sxth	r3, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 facc 	bl	8000b18 <FixedFilterGet>
 8000580:	4603      	mov	r3, r0
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <main+0xf4>)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	edc3 7a00 	vstr	s15, [r3]
		  data += 0x00000001;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <main+0xf0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3304      	adds	r3, #4
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <main+0xf0>)
 800059e:	6013      	str	r3, [r2, #0]
	  for (int i=0; i<NUMBER_OF_SAMPLES; i++) {
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f245 6221 	movw	r2, #22049	; 0x5621
 80005ac:	4293      	cmp	r3, r2
 80005ae:	dddb      	ble.n	8000568 <main+0x94>
	  }
	  ITM_Port32(31) = 2;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <main+0xec>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b6:	f007 ff6b 	bl	8008490 <MX_USB_HOST_Process>
 80005ba:	e7fc      	b.n	80005b6 <main+0xe2>
 80005bc:	20000254 	.word	0x20000254
 80005c0:	e000007c 	.word	0xe000007c
 80005c4:	20000000 	.word	0x20000000
 80005c8:	200002d4 	.word	0x200002d4

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f008 faf8 	bl	8008bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a26      	ldr	r2, [pc, #152]	; (8000694 <SystemClock_Config+0xc8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a20      	ldr	r2, [pc, #128]	; (8000698 <SystemClock_Config+0xcc>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000640:	23c0      	movs	r3, #192	; 0xc0
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000644:	2304      	movs	r3, #4
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f003 ff39 	bl	80044c8 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 fabe 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2103      	movs	r1, #3
 800067c:	4618      	mov	r0, r3
 800067e:	f004 f99b 	bl	80049b8 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000688:	f000 faa8 	bl	8000bdc <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b2:	2301      	movs	r3, #1
 80006b4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006b6:	23c8      	movs	r3, #200	; 0xc8
 80006b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006ba:	2305      	movs	r3, #5
 80006bc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fb83 	bl	8004dd0 <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006d0:	f000 fa84 	bl	8000bdc <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f003 f8f1 	bl	8003900 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fa5a 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000118 	.word	0x20000118
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2S2_Init+0x50>)
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <MX_I2S2_Init+0x54>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_I2S2_Init+0x50>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2S2_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_I2S2_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_I2S2_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_I2S2_Init+0x50>)
 800075e:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <MX_I2S2_Init+0x58>)
 8000760:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2S2_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_I2S2_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2S2_Init+0x50>)
 8000770:	2201      	movs	r2, #1
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2S2_Init+0x50>)
 8000776:	f003 fa07 	bl	8003b88 <HAL_I2S_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 fa2c 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000016c 	.word	0x2000016c
 800078c:	40003800 	.word	0x40003800
 8000790:	00017700 	.word	0x00017700

08000794 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_I2S3_Init+0x54>)
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <MX_I2S3_Init+0x58>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <MX_I2S3_Init+0x5c>)
 80007be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007d4:	f003 f9d8 	bl	8003b88 <HAL_I2S_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007de:	f000 f9fd 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200001b4 	.word	0x200001b4
 80007ec:	40003c00 	.word	0x40003c00
 80007f0:	00017700 	.word	0x00017700

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f004 fc15 	bl	8005074 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f9c4 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200001fc 	.word	0x200001fc
 800085c:	40013000 	.word	0x40013000

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a60      	ldr	r2, [pc, #384]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a59      	ldr	r2, [pc, #356]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a52      	ldr	r2, [pc, #328]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a4b      	ldr	r2, [pc, #300]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a44      	ldr	r2, [pc, #272]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a3d      	ldr	r2, [pc, #244]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <MX_GPIO_Init+0x1a0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2108      	movs	r1, #8
 8000922:	4838      	ldr	r0, [pc, #224]	; (8000a04 <MX_GPIO_Init+0x1a4>)
 8000924:	f000 feb8 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	4836      	ldr	r0, [pc, #216]	; (8000a08 <MX_GPIO_Init+0x1a8>)
 800092e:	f000 feb3 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000932:	2200      	movs	r2, #0
 8000934:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000938:	4834      	ldr	r0, [pc, #208]	; (8000a0c <MX_GPIO_Init+0x1ac>)
 800093a:	f000 fead 	bl	8001698 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800093e:	2304      	movs	r3, #4
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	482c      	ldr	r0, [pc, #176]	; (8000a04 <MX_GPIO_Init+0x1a4>)
 8000952:	f000 fd1d 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000956:	2308      	movs	r3, #8
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x1a4>)
 800096e:	f000 fd0f 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000972:	2332      	movs	r3, #50	; 0x32
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000976:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	481f      	ldr	r0, [pc, #124]	; (8000a04 <MX_GPIO_Init+0x1a4>)
 8000988:	f000 fd02 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4819      	ldr	r0, [pc, #100]	; (8000a08 <MX_GPIO_Init+0x1a8>)
 80009a4:	f000 fcf4 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4814      	ldr	r0, [pc, #80]	; (8000a10 <MX_GPIO_Init+0x1b0>)
 80009be:	f000 fce7 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_GPIO_Init+0x1ac>)
 80009dc:	f000 fcd8 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e0:	2320      	movs	r3, #32
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x1ac>)
 80009f4:	f000 fccc 	bl	8001390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f8:	bf00      	nop
 80009fa:	3730      	adds	r7, #48	; 0x30
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40020000 	.word	0x40020000

08000a14 <FloatFilterInit>:
		ITM_SendChar(*ptr++);
	}
	return len;
}

void FloatFilterInit(void) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
	for (int i=0; i<31; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	e009      	b.n	8000a34 <FloatFilterInit+0x20>
		history[i] = 0.0;
 8000a20:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <FloatFilterInit+0x34>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
	for (int i=0; i<31; i++) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3301      	adds	r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b1e      	cmp	r3, #30
 8000a38:	ddf2      	ble.n	8000a20 <FloatFilterInit+0xc>
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	20000258 	.word	0x20000258

08000a4c <FixedFilterInit>:

void FixedFilterInit(void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
	for (int i=0; i<31; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e009      	b.n	8000a6c <FixedFilterInit+0x20>
		history[i] = 0x0000;
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <FixedFilterInit+0x34>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
	for (int i=0; i<31; i++) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b1e      	cmp	r3, #30
 8000a70:	ddf2      	ble.n	8000a58 <FixedFilterInit+0xc>
	}
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	20000258 	.word	0x20000258

08000a84 <FloatFilterGet>:

/* here is the function that does the filtering */
float32_t FloatFilterGet(float32_t newsample) {
 8000a84:	b480      	push	{r7}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0a01 	vstr	s0, [r7, #4]
	// set the new sample as the head
	history[0] = newsample;
 8000a8e:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <FloatFilterGet+0x8c>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
	float32_t accumulator = 0;
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]

	// set up and do our convolution
	for (int i=0; i<31; i++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	e016      	b.n	8000ace <FloatFilterGet+0x4a>
		accumulator += filter_taps[i] * history[i];
 8000aa0:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <FloatFilterGet+0x90>)
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	ed93 7a00 	vldr	s14, [r3]
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <FloatFilterGet+0x8c>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	edd3 7a00 	vldr	s15, [r3]
 8000ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000abc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac4:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i=0; i<31; i++) {
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	3301      	adds	r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	2b1e      	cmp	r3, #30
 8000ad2:	dde5      	ble.n	8000aa0 <FloatFilterGet+0x1c>
	}

	// shuffle the history along for the next one?
	for (int i=30; i>0; i--) {
 8000ad4:	231e      	movs	r3, #30
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e00d      	b.n	8000af6 <FloatFilterGet+0x72>
		history[i] = history[i-1];
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <FloatFilterGet+0x8c>)
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	490a      	ldr	r1, [pc, #40]	; (8000b10 <FloatFilterGet+0x8c>)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	601a      	str	r2, [r3, #0]
	for (int i=30; i>0; i--) {
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	dcee      	bgt.n	8000ada <FloatFilterGet+0x56>
	}
	return accumulator;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	ee07 3a90 	vmov	s15, r3
}
 8000b02:	eeb0 0a67 	vmov.f32	s0, s15
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20000258 	.word	0x20000258
 8000b14:	20000004 	.word	0x20000004

08000b18 <FixedFilterGet>:

/* here is the function that does the filtering */
int16_t FixedFilterGet(int16_t newsample) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
	// set the new sample as the head
	history[0] = newsample;
 8000b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b26:	ee07 3a90 	vmov	s15, r3
 8000b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b2e:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <FixedFilterGet+0xbc>)
 8000b30:	edc3 7a00 	vstr	s15, [r3]
	int32_t accumulator = 0x00000000;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

	// set up and do our convolution
	for (int i=0; i<31; i++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	e01b      	b.n	8000b76 <FixedFilterGet+0x5e>
		accumulator += ((int32_t)filter_taps[i] * (int32_t)history[i]);
 8000b3e:	4a26      	ldr	r2, [pc, #152]	; (8000bd8 <FixedFilterGet+0xc0>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	edd3 7a00 	vldr	s15, [r3]
 8000b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b4e:	ee17 1a90 	vmov	r1, s15
 8000b52:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <FixedFilterGet+0xbc>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	edd3 7a00 	vldr	s15, [r3]
 8000b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b62:	ee17 3a90 	vmov	r3, s15
 8000b66:	fb01 f303 	mul.w	r3, r1, r3
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	617b      	str	r3, [r7, #20]
	for (int i=0; i<31; i++) {
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	3301      	adds	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	2b1e      	cmp	r3, #30
 8000b7a:	dde0      	ble.n	8000b3e <FixedFilterGet+0x26>
	}

	// shuffle the history along for the next one?
	for (int i=30; i>0; i--) {
 8000b7c:	231e      	movs	r3, #30
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e00d      	b.n	8000b9e <FixedFilterGet+0x86>
		history[i] = history[i-1];
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <FixedFilterGet+0xbc>)
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4911      	ldr	r1, [pc, #68]	; (8000bd4 <FixedFilterGet+0xbc>)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	601a      	str	r2, [r3, #0]
	for (int i=30; i>0; i--) {
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dcee      	bgt.n	8000b82 <FixedFilterGet+0x6a>
	}

	// saturate
	if(accumulator > 0x3FFFFFFF) {
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000baa:	db03      	blt.n	8000bb4 <FixedFilterGet+0x9c>
		accumulator = 0x3FFFFFFF;
 8000bac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	e006      	b.n	8000bc2 <FixedFilterGet+0xaa>
	} else if (accumulator < -0x40000000) {
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000bba:	da02      	bge.n	8000bc2 <FixedFilterGet+0xaa>
		accumulator = -0x40000000;
 8000bbc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bc0:	617b      	str	r3, [r7, #20]
	}

	return (int16_t)(accumulator >> 15);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	13db      	asrs	r3, r3, #15
 8000bc6:	b21b      	sxth	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	371c      	adds	r7, #28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	20000258 	.word	0x20000258
 8000bd8:	20000004 	.word	0x20000004

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c26:	2007      	movs	r0, #7
 8000c28:	f000 fb70 	bl	800130c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <HAL_I2C_MspInit+0x84>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12c      	bne.n	8000cb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7c:	2312      	movs	r3, #18
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <HAL_I2C_MspInit+0x8c>)
 8000c94:	f000 fb7c 	bl	8001390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000ca2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_I2C_MspInit+0x88>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a59      	ldr	r2, [pc, #356]	; (8000e4c <HAL_I2S_MspInit+0x184>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d15b      	bne.n	8000da2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
 8000cee:	4b58      	ldr	r3, [pc, #352]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a57      	ldr	r2, [pc, #348]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b4e      	ldr	r3, [pc, #312]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d4e:	2306      	movs	r3, #6
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	483e      	ldr	r0, [pc, #248]	; (8000e54 <HAL_I2S_MspInit+0x18c>)
 8000d5a:	f000 fb19 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4836      	ldr	r0, [pc, #216]	; (8000e54 <HAL_I2S_MspInit+0x18c>)
 8000d7a:	f000 fb09 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d90:	2305      	movs	r3, #5
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	482f      	ldr	r0, [pc, #188]	; (8000e58 <HAL_I2S_MspInit+0x190>)
 8000d9c:	f000 faf8 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000da0:	e04f      	b.n	8000e42 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <HAL_I2S_MspInit+0x194>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d14a      	bne.n	8000e42 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_I2S_MspInit+0x188>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e00:	2310      	movs	r3, #16
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e10:	2306      	movs	r3, #6
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4811      	ldr	r0, [pc, #68]	; (8000e60 <HAL_I2S_MspInit+0x198>)
 8000e1c:	f000 fab8 	bl	8001390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e20:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e32:	2306      	movs	r3, #6
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_I2S_MspInit+0x18c>)
 8000e3e:	f000 faa7 	bl	8001390 <HAL_GPIO_Init>
}
 8000e42:	bf00      	nop
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40003800 	.word	0x40003800
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40003c00 	.word	0x40003c00
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_SPI_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ebe:	23e0      	movs	r3, #224	; 0xe0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_SPI_MspInit+0x8c>)
 8000eda:	f000 fa59 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f8d0 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <OTG_FS_IRQHandler+0x10>)
 8000f4e:	f000 fe9d 	bl	8001c8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20015f40 	.word	0x20015f40

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f007 fe38 	bl	8008c00 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20020000 	.word	0x20020000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20015b5c 	.word	0x20015b5c
 8000fc4:	20016468 	.word	0x20016468

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff0:	f7ff ffea 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f007 fdf7 	bl	8008c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fa59 	bl	80004d4 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001030:	08008d34 	.word	0x08008d34
  ldr r2, =_sbss
 8001034:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001038:	20016468 	.word	0x20016468

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f94f 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fdb8 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f967 	bl	8001376 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f92f 	bl	8001322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000080 	.word	0x20000080
 80010dc:	20000088 	.word	0x20000088
 80010e0:	20000084 	.word	0x20000084

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000088 	.word	0x20000088
 8001108:	20015b60 	.word	0x20015b60

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20015b60 	.word	0x20015b60

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000088 	.word	0x20000088

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff29 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff3e 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff8e 	bl	8001260 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff31 	bl	80011d0 <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffa2 	bl	80012c8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e159      	b.n	8001660 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8148 	bne.w	800165a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a2 	beq.w	800165a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b57      	ldr	r3, [pc, #348]	; (8001678 <HAL_GPIO_Init+0x2e8>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a56      	ldr	r2, [pc, #344]	; (8001678 <HAL_GPIO_Init+0x2e8>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b54      	ldr	r3, [pc, #336]	; (8001678 <HAL_GPIO_Init+0x2e8>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_GPIO_Init+0x2ec>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a49      	ldr	r2, [pc, #292]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x202>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a48      	ldr	r2, [pc, #288]	; (8001684 <HAL_GPIO_Init+0x2f4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x1fe>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a47      	ldr	r2, [pc, #284]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x1fa>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a46      	ldr	r2, [pc, #280]	; (800168c <HAL_GPIO_Init+0x2fc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x1f6>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a45      	ldr	r2, [pc, #276]	; (8001690 <HAL_GPIO_Init+0x300>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x1f2>
 800157e:	2304      	movs	r3, #4
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001582:	2307      	movs	r3, #7
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x204>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x204>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001592:	2300      	movs	r3, #0
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	; (800167c <HAL_GPIO_Init+0x2ec>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_GPIO_Init+0x304>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d6:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <HAL_GPIO_Init+0x304>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015dc:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <HAL_GPIO_Init+0x304>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001600:	4a24      	ldr	r2, [pc, #144]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162a:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_GPIO_Init+0x304>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	f67f aea2 	bls.w	80013ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40021000 	.word	0x40021000
 8001694:	40013c00 	.word	0x40013c00

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b4:	e003      	b.n	80016be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af02      	add	r7, sp, #8
 80016d0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e059      	b.n	8001790 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f006 ff02 	bl	8008500 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170a:	d102      	bne.n	8001712 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fdaa 	bl	8005270 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7c1a      	ldrb	r2, [r3, #16]
 8001724:	f88d 2000 	strb.w	r2, [sp]
 8001728:	3304      	adds	r3, #4
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	f003 fd2b 	bl	8005186 <USB_CoreInit>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2202      	movs	r2, #2
 800173a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e026      	b.n	8001790 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f003 fda2 	bl	8005292 <USB_SetCurrentMode>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e017      	b.n	8001790 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7c1a      	ldrb	r2, [r3, #16]
 8001768:	f88d 2000 	strb.w	r2, [sp]
 800176c:	3304      	adds	r3, #4
 800176e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001770:	f003 ff44 	bl	80055fc <USB_HostInit>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e004      	b.n	8001790 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af04      	add	r7, sp, #16
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	70fb      	strb	r3, [r7, #3]
 80017aa:	460b      	mov	r3, r1
 80017ac:	70bb      	strb	r3, [r7, #2]
 80017ae:	4613      	mov	r3, r2
 80017b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80017b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80017b4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_HCD_HC_Init+0x2c>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e09d      	b.n	8001900 <HAL_HCD_HC_Init+0x168>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	3319      	adds	r3, #25
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3314      	adds	r3, #20
 80017f0:	787a      	ldrb	r2, [r7, #1]
 80017f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	3315      	adds	r3, #21
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	3326      	adds	r3, #38	; 0x26
 8001818:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800181c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001826:	b2d8      	uxtb	r0, r3
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3316      	adds	r3, #22
 8001836:	4602      	mov	r2, r0
 8001838:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fbc8 	bl	8001fd4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001844:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001848:	2b00      	cmp	r3, #0
 800184a:	da0a      	bge.n	8001862 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3317      	adds	r3, #23
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e009      	b.n	8001876 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3317      	adds	r3, #23
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f004 f80c 	bl	8005898 <USB_GetHostSpeed>
 8001880:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001882:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d10b      	bne.n	80018a2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800188a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_HCD_HC_Init+0x10a>
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d104      	bne.n	80018a2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2bbc      	cmp	r3, #188	; 0xbc
 800189c:	d901      	bls.n	80018a2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800189e:	23bc      	movs	r3, #188	; 0xbc
 80018a0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	3318      	adds	r3, #24
 80018b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80018b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	b298      	uxth	r0, r3
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3328      	adds	r3, #40	; 0x28
 80018cc:	4602      	mov	r2, r0
 80018ce:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	787c      	ldrb	r4, [r7, #1]
 80018da:	78ba      	ldrb	r2, [r7, #2]
 80018dc:	78f9      	ldrb	r1, [r7, #3]
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4623      	mov	r3, r4
 80018ee:	f003 fffb 	bl	80058e8 <USB_HC_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}

08001908 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_HCD_HC_Halt+0x1e>
 8001922:	2302      	movs	r3, #2
 8001924:	e00f      	b.n	8001946 <HAL_HCD_HC_Halt+0x3e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f004 fb41 	bl	8005fbe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4603      	mov	r3, r0
 8001960:	70fb      	strb	r3, [r7, #3]
 8001962:	460b      	mov	r3, r1
 8001964:	70bb      	strb	r3, [r7, #2]
 8001966:	4613      	mov	r3, r2
 8001968:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	3317      	adds	r3, #23
 800197a:	78ba      	ldrb	r2, [r7, #2]
 800197c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	3326      	adds	r3, #38	; 0x26
 800198e:	787a      	ldrb	r2, [r7, #1]
 8001990:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001992:	7c3b      	ldrb	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d114      	bne.n	80019c2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	332a      	adds	r3, #42	; 0x2a
 80019a8:	2203      	movs	r2, #3
 80019aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	3319      	adds	r3, #25
 80019bc:	7f3a      	ldrb	r2, [r7, #28]
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e009      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	332a      	adds	r3, #42	; 0x2a
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019d6:	787b      	ldrb	r3, [r7, #1]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	f200 8102 	bhi.w	8001be2 <HAL_HCD_HC_SubmitRequest+0x292>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	08001bcd 	.word	0x08001bcd
 80019ec:	08001ab9 	.word	0x08001ab9
 80019f0:	08001b43 	.word	0x08001b43
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80019f4:	7c3b      	ldrb	r3, [r7, #16]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	f040 80f5 	bne.w	8001be6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80019fc:	78bb      	ldrb	r3, [r7, #2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d12d      	bne.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a02:	8b3b      	ldrh	r3, [r7, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	333d      	adds	r3, #61	; 0x3d
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	333d      	adds	r3, #61	; 0x3d
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10a      	bne.n	8001a48 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	332a      	adds	r3, #42	; 0x2a
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a46:	e0ce      	b.n	8001be6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	332a      	adds	r3, #42	; 0x2a
 8001a58:	2202      	movs	r2, #2
 8001a5a:	701a      	strb	r2, [r3, #0]
      break;
 8001a5c:	e0c3      	b.n	8001be6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	331a      	adds	r3, #26
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	f040 80b8 	bne.w	8001be6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	333c      	adds	r3, #60	; 0x3c
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	332a      	adds	r3, #42	; 0x2a
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
      break;
 8001aa0:	e0a1      	b.n	8001be6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	332a      	adds	r3, #42	; 0x2a
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	701a      	strb	r2, [r3, #0]
      break;
 8001ab6:	e096      	b.n	8001be6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ab8:	78bb      	ldrb	r3, [r7, #2]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d120      	bne.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	333d      	adds	r3, #61	; 0x3d
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10a      	bne.n	8001aea <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	332a      	adds	r3, #42	; 0x2a
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ae8:	e07e      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	332a      	adds	r3, #42	; 0x2a
 8001afa:	2202      	movs	r2, #2
 8001afc:	701a      	strb	r2, [r3, #0]
      break;
 8001afe:	e073      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	333c      	adds	r3, #60	; 0x3c
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10a      	bne.n	8001b2c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	332a      	adds	r3, #42	; 0x2a
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
      break;
 8001b2a:	e05d      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	332a      	adds	r3, #42	; 0x2a
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	701a      	strb	r2, [r3, #0]
      break;
 8001b40:	e052      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b42:	78bb      	ldrb	r3, [r7, #2]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d120      	bne.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	333d      	adds	r3, #61	; 0x3d
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10a      	bne.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	332a      	adds	r3, #42	; 0x2a
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b72:	e039      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	332a      	adds	r3, #42	; 0x2a
 8001b84:	2202      	movs	r2, #2
 8001b86:	701a      	strb	r2, [r3, #0]
      break;
 8001b88:	e02e      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	333c      	adds	r3, #60	; 0x3c
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10a      	bne.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	332a      	adds	r3, #42	; 0x2a
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
      break;
 8001bb4:	e018      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	332a      	adds	r3, #42	; 0x2a
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
      break;
 8001bca:	e00d      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	332a      	adds	r3, #42	; 0x2a
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
      break;
 8001be0:	e002      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001be2:	bf00      	nop
 8001be4:	e000      	b.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001be6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	332c      	adds	r3, #44	; 0x2c
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	8b39      	ldrh	r1, [r7, #24]
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4403      	add	r3, r0
 8001c0c:	3334      	adds	r3, #52	; 0x34
 8001c0e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	334c      	adds	r3, #76	; 0x4c
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3338      	adds	r3, #56	; 0x38
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	3315      	adds	r3, #21
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	334d      	adds	r3, #77	; 0x4d
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	4613      	mov	r3, r2
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	3310      	adds	r3, #16
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	1d19      	adds	r1, r3, #4
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	799b      	ldrb	r3, [r3, #6]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f003 ff4a 	bl	8005b14 <USB_HC_StartXfer>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop

08001c8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fc6b 	bl	800557e <USB_GetMode>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	f040 80fb 	bne.w	8001ea6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fc2e 	bl	8005516 <USB_ReadInterrupts>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80f1 	beq.w	8001ea4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fc25 	bl	8005516 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cd6:	d104      	bne.n	8001ce2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ce0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fc15 	bl	8005516 <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cf6:	d104      	bne.n	8001d02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fc05 	bl	8005516 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d16:	d104      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fbf5 	bl	8005516 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d103      	bne.n	8001d3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fbe7 	bl	8005516 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d52:	d120      	bne.n	8001d96 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d113      	bne.n	8001d96 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d6e:	2110      	movs	r1, #16
 8001d70:	6938      	ldr	r0, [r7, #16]
 8001d72:	f003 fada 	bl	800532a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d76:	6938      	ldr	r0, [r7, #16]
 8001d78:	f003 fb09 	bl	800538e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7a5b      	ldrb	r3, [r3, #9]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d105      	bne.n	8001d90 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fce4 	bl	8005758 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f006 fc33 	bl	80085fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fbbb 	bl	8005516 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001daa:	d102      	bne.n	8001db2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f001 fd33 	bl	8003818 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fbad 	bl	8005516 <USB_ReadInterrupts>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d106      	bne.n	8001dd4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f006 fbfc 	bl	80085c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 fb9c 	bl	8005516 <USB_ReadInterrupts>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001de8:	d139      	bne.n	8001e5e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 f8d4 	bl	8005f9c <USB_HC_ReadInterrupt>
 8001df4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e025      	b.n	8001e48 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d018      	beq.n	8001e42 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e26:	d106      	bne.n	8001e36 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f905 	bl	800203e <HCD_HC_IN_IRQHandler>
 8001e34:	e005      	b.n	8001e42 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 ff67 	bl	8002d10 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	795b      	ldrb	r3, [r3, #5]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d3d3      	bcc.n	8001dfc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 fb57 	bl	8005516 <USB_ReadInterrupts>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d101      	bne.n	8001e76 <HAL_HCD_IRQHandler+0x1ea>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_HCD_IRQHandler+0x1ec>
 8001e76:	2300      	movs	r3, #0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d014      	beq.n	8001ea6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0210 	bic.w	r2, r2, #16
 8001e8a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f001 fbe4 	bl	800365a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0210 	orr.w	r2, r2, #16
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	e000      	b.n	8001ea6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ea4:	bf00      	nop
    }
  }
}
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_HCD_Start+0x16>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e013      	b.n	8001eea <HAL_HCD_Start+0x3e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fca8 	bl	8005826 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 f9b7 	bl	800524e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_HCD_Stop+0x16>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e00d      	b.n	8001f24 <HAL_HCD_Stop+0x32>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 f972 	bl	80061fe <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 fc4a 	bl	80057d2 <USB_ResetPort>
 8001f3e:	4603      	mov	r3, r0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	334c      	adds	r3, #76	; 0x4c
 8001f64:	781b      	ldrb	r3, [r3, #0]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3338      	adds	r3, #56	; 0x38
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fc8c 	bl	80058c6 <USB_GetCurrentFrame>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 fc67 	bl	8005898 <USB_GetHostSpeed>
 8001fca:	4603      	mov	r3, r0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	331a      	adds	r3, #26
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	331b      	adds	r3, #27
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3325      	adds	r3, #37	; 0x25
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3324      	adds	r3, #36	; 0x24
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fa6d 	bl	800553c <USB_ReadChInterrupts>
 8002062:	4603      	mov	r3, r0
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b04      	cmp	r3, #4
 800206a:	d11a      	bne.n	80020a2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	2304      	movs	r3, #4
 800207c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	334d      	adds	r3, #77	; 0x4d
 800208e:	2207      	movs	r2, #7
 8002090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f003 ff8f 	bl	8005fbe <USB_HC_Halt>
 80020a0:	e09e      	b.n	80021e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fa46 	bl	800553c <USB_ReadChInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ba:	d11b      	bne.n	80020f4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	461a      	mov	r2, r3
 80020ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	334d      	adds	r3, #77	; 0x4d
 80020e0:	2208      	movs	r2, #8
 80020e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 ff66 	bl	8005fbe <USB_HC_Halt>
 80020f2:	e075      	b.n	80021e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 fa1d 	bl	800553c <USB_ReadChInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b08      	cmp	r3, #8
 800210a:	d11a      	bne.n	8002142 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	2308      	movs	r3, #8
 800211c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	334d      	adds	r3, #77	; 0x4d
 800212e:	2206      	movs	r2, #6
 8002130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f003 ff3f 	bl	8005fbe <USB_HC_Halt>
 8002140:	e04e      	b.n	80021e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f003 f9f6 	bl	800553c <USB_ReadChInterrupts>
 8002150:	4603      	mov	r3, r0
 8002152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215a:	d11b      	bne.n	8002194 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	461a      	mov	r2, r3
 800216a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	334d      	adds	r3, #77	; 0x4d
 8002180:	2209      	movs	r2, #9
 8002182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f003 ff16 	bl	8005fbe <USB_HC_Halt>
 8002192:	e025      	b.n	80021e0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f003 f9cd 	bl	800553c <USB_ReadChInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d119      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	461a      	mov	r2, r3
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	334d      	adds	r3, #77	; 0x4d
 80021ce:	2207      	movs	r2, #7
 80021d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 feef 	bl	8005fbe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 f9a7 	bl	800553c <USB_ReadChInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f8:	d112      	bne.n	8002220 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fedb 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	461a      	mov	r2, r3
 8002216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221a:	6093      	str	r3, [r2, #8]
 800221c:	f000 bd75 	b.w	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f003 f987 	bl	800553c <USB_ReadChInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	f040 8128 	bne.w	800248a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	461a      	mov	r2, r3
 8002248:	2320      	movs	r3, #32
 800224a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	331b      	adds	r3, #27
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d119      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	331b      	adds	r3, #27
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	0151      	lsls	r1, r2, #5
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	440a      	add	r2, r1
 800228c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002294:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	799b      	ldrb	r3, [r3, #6]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01b      	beq.n	80022d6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	3330      	adds	r3, #48	; 0x30
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	1ac9      	subs	r1, r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4403      	add	r3, r0
 80022d2:	3338      	adds	r3, #56	; 0x38
 80022d4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	334d      	adds	r3, #77	; 0x4d
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3344      	adds	r3, #68	; 0x44
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	461a      	mov	r2, r3
 800230c:	2301      	movs	r3, #1
 800230e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3326      	adds	r3, #38	; 0x26
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3326      	adds	r3, #38	; 0x26
 8002336:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002338:	2b02      	cmp	r3, #2
 800233a:	d110      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fe3a 	bl	8005fbe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	461a      	mov	r2, r3
 8002358:	2310      	movs	r3, #16
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	e03d      	b.n	80023da <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3326      	adds	r3, #38	; 0x26
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d00a      	beq.n	800238a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3326      	adds	r3, #38	; 0x26
 8002384:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002386:	2b01      	cmp	r3, #1
 8002388:	d127      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	0151      	lsls	r1, r2, #5
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	440a      	add	r2, r1
 80023a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023a8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	334c      	adds	r3, #76	; 0x4c
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	334c      	adds	r3, #76	; 0x4c
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f006 f91f 	bl	8008618 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	799b      	ldrb	r3, [r3, #6]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d13b      	bne.n	800245a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3338      	adds	r3, #56	; 0x38
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4403      	add	r3, r0
 8002402:	3328      	adds	r3, #40	; 0x28
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	440b      	add	r3, r1
 8002408:	1e59      	subs	r1, r3, #1
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4403      	add	r3, r0
 8002418:	3328      	adds	r3, #40	; 0x28
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8470 	beq.w	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	333c      	adds	r3, #60	; 0x3c
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2d8      	uxtb	r0, r3
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	333c      	adds	r3, #60	; 0x3c
 8002452:	4602      	mov	r2, r0
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	f000 bc58 	b.w	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	333c      	adds	r3, #60	; 0x3c
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	f083 0301 	eor.w	r3, r3, #1
 8002472:	b2d8      	uxtb	r0, r3
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	333c      	adds	r3, #60	; 0x3c
 8002482:	4602      	mov	r2, r0
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	f000 bc40 	b.w	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f003 f852 	bl	800553c <USB_ReadChInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d131      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	461a      	mov	r2, r3
 80024b0:	2320      	movs	r3, #32
 80024b2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	331a      	adds	r3, #26
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	f040 841f 	bne.w	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	331b      	adds	r3, #27
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	334d      	adds	r3, #77	; 0x4d
 80024f0:	2203      	movs	r2, #3
 80024f2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fd5e 	bl	8005fbe <USB_HC_Halt>
 8002502:	f000 bc02 	b.w	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f003 f814 	bl	800553c <USB_ReadChInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	f040 8305 	bne.w	8002b2a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	461a      	mov	r2, r3
 800252e:	2302      	movs	r3, #2
 8002530:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	334d      	adds	r3, #77	; 0x4d
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d114      	bne.n	8002572 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	334d      	adds	r3, #77	; 0x4d
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	334c      	adds	r3, #76	; 0x4c
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	e2cc      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	334d      	adds	r3, #77	; 0x4d
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b06      	cmp	r3, #6
 8002586:	d114      	bne.n	80025b2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	334d      	adds	r3, #77	; 0x4d
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	334c      	adds	r3, #76	; 0x4c
 80025ac:	2205      	movs	r2, #5
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	e2ac      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	334d      	adds	r3, #77	; 0x4d
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b07      	cmp	r3, #7
 80025c6:	d00b      	beq.n	80025e0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	334d      	adds	r3, #77	; 0x4d
 80025d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025da:	2b09      	cmp	r3, #9
 80025dc:	f040 80a6 	bne.w	800272c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	334d      	adds	r3, #77	; 0x4d
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	3344      	adds	r3, #68	; 0x44
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1c59      	adds	r1, r3, #1
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4403      	add	r3, r0
 8002614:	3344      	adds	r3, #68	; 0x44
 8002616:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3344      	adds	r3, #68	; 0x44
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d943      	bls.n	80026b6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	3344      	adds	r3, #68	; 0x44
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	331a      	adds	r3, #26
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d123      	bne.n	80026a0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	331b      	adds	r3, #27
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	331c      	adds	r3, #28
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	0151      	lsls	r1, r2, #5
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	440a      	add	r2, r1
 8002696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334c      	adds	r3, #76	; 0x4c
 80026b0:	2204      	movs	r2, #4
 80026b2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026b4:	e229      	b.n	8002b0a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	334c      	adds	r3, #76	; 0x4c
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3326      	adds	r3, #38	; 0x26
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3326      	adds	r3, #38	; 0x26
 80026f0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	f040 8209 	bne.w	8002b0a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800270e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002716:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800272a:	e1ee      	b.n	8002b0a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	; 0x4d
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b05      	cmp	r3, #5
 8002740:	f040 80c8 	bne.w	80028d4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334d      	adds	r3, #77	; 0x4d
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	331b      	adds	r3, #27
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	f040 81ce 	bne.w	8002b0c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3326      	adds	r3, #38	; 0x26
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d16b      	bne.n	800285e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3348      	adds	r3, #72	; 0x48
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	1c59      	adds	r1, r3, #1
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4403      	add	r3, r0
 80027a6:	3348      	adds	r3, #72	; 0x48
 80027a8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	3348      	adds	r3, #72	; 0x48
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d943      	bls.n	8002848 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3348      	adds	r3, #72	; 0x48
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	331b      	adds	r3, #27
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3344      	adds	r3, #68	; 0x44
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d809      	bhi.n	8002812 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	331c      	adds	r3, #28
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	0151      	lsls	r1, r2, #5
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	440a      	add	r2, r1
 8002828:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002830:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	334c      	adds	r3, #76	; 0x4c
 8002842:	2204      	movs	r2, #4
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e014      	b.n	8002872 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334c      	adds	r3, #76	; 0x4c
 8002858:	2202      	movs	r2, #2
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e009      	b.n	8002872 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	334c      	adds	r3, #76	; 0x4c
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3326      	adds	r3, #38	; 0x26
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3326      	adds	r3, #38	; 0x26
 8002898:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800289a:	2b02      	cmp	r3, #2
 800289c:	f040 8136 	bne.w	8002b0c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	461a      	mov	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e11b      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334d      	adds	r3, #77	; 0x4d
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	f040 8081 	bne.w	80029ee <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	334d      	adds	r3, #77	; 0x4d
 80028fc:	2202      	movs	r2, #2
 80028fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	331b      	adds	r3, #27
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 80fa 	bne.w	8002b0c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	334c      	adds	r3, #76	; 0x4c
 8002928:	2202      	movs	r2, #2
 800292a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	0151      	lsls	r1, r2, #5
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	440a      	add	r2, r1
 8002942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	0151      	lsls	r1, r2, #5
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	440a      	add	r2, r1
 8002962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	0151      	lsls	r1, r2, #5
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	440a      	add	r2, r1
 8002982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002986:	f023 0320 	bic.w	r3, r3, #32
 800298a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3326      	adds	r3, #38	; 0x26
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3326      	adds	r3, #38	; 0x26
 80029b2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	f040 80a9 	bne.w	8002b0c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029d0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029d8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e08e      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	334d      	adds	r3, #77	; 0x4d
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d143      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	334d      	adds	r3, #77	; 0x4d
 8002a14:	2202      	movs	r2, #2
 8002a16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	334c      	adds	r3, #76	; 0x4c
 8002a28:	2202      	movs	r2, #2
 8002a2a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3326      	adds	r3, #38	; 0x26
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3326      	adds	r3, #38	; 0x26
 8002a52:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d159      	bne.n	8002b0c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a6e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e03f      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	334d      	adds	r3, #77	; 0x4d
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d126      	bne.n	8002af0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	334d      	adds	r3, #77	; 0x4d
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3344      	adds	r3, #68	; 0x44
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	1c59      	adds	r1, r3, #1
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4403      	add	r3, r0
 8002ad6:	3344      	adds	r3, #68	; 0x44
 8002ad8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	334c      	adds	r3, #76	; 0x4c
 8002aea:	2204      	movs	r2, #4
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e00d      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	; 0x4d
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	f000 8100 	beq.w	8002d08 <HCD_HC_IN_IRQHandler+0xcca>
 8002b08:	e000      	b.n	8002b0c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b0a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	334c      	adds	r3, #76	; 0x4c
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f005 fd78 	bl	8008618 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b28:	e0ef      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 fd02 	bl	800553c <USB_ReadChInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d12f      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2340      	movs	r3, #64	; 0x40
 8002b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	334d      	adds	r3, #77	; 0x4d
 8002b64:	2205      	movs	r2, #5
 8002b66:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	331a      	adds	r3, #26
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3344      	adds	r3, #68	; 0x44
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fa0f 	bl	8005fbe <USB_HC_Halt>
 8002ba0:	e0b3      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 fcc6 	bl	800553c <USB_ReadChInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	f040 80a7 	bne.w	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3326      	adds	r3, #38	; 0x26
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d11b      	bne.n	8002c0a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3344      	adds	r3, #68	; 0x44
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	334d      	adds	r3, #77	; 0x4d
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 f9db 	bl	8005fbe <USB_HC_Halt>
 8002c08:	e03f      	b.n	8002c8a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	3326      	adds	r3, #38	; 0x26
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3326      	adds	r3, #38	; 0x26
 8002c30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d129      	bne.n	8002c8a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3344      	adds	r3, #68	; 0x44
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	799b      	ldrb	r3, [r3, #6]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	331b      	adds	r3, #27
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d110      	bne.n	8002c8a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	334d      	adds	r3, #77	; 0x4d
 8002c78:	2204      	movs	r2, #4
 8002c7a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 f99a 	bl	8005fbe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	331b      	adds	r3, #27
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d129      	bne.n	8002cf4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	331b      	adds	r3, #27
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	0151      	lsls	r1, r2, #5
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	440a      	add	r2, r1
 8002cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	0151      	lsls	r1, r2, #5
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	440a      	add	r2, r1
 8002cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cee:	f043 0320 	orr.w	r3, r3, #32
 8002cf2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	461a      	mov	r2, r3
 8002d02:	2310      	movs	r3, #16
 8002d04:	6093      	str	r3, [r2, #8]
 8002d06:	e000      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002d08:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fc04 	bl	800553c <USB_ReadChInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d11b      	bne.n	8002d76 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	334d      	adds	r3, #77	; 0x4d
 8002d60:	2207      	movs	r2, #7
 8002d62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 f926 	bl	8005fbe <USB_HC_Halt>
 8002d72:	f000 bc6f 	b.w	8003654 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 fbdc 	bl	800553c <USB_ReadChInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	f040 8082 	bne.w	8002e94 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2320      	movs	r3, #32
 8002da0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3319      	adds	r3, #25
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d124      	bne.n	8002e02 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3319      	adds	r3, #25
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334c      	adds	r3, #76	; 0x4c
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334d      	adds	r3, #77	; 0x4d
 8002df0:	2203      	movs	r2, #3
 8002df2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 f8de 	bl	8005fbe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	331a      	adds	r3, #26
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	f040 841d 	bne.w	8003654 <HCD_HC_OUT_IRQHandler+0x944>
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	331b      	adds	r3, #27
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 8411 	bne.w	8003654 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3326      	adds	r3, #38	; 0x26
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d009      	beq.n	8002e5c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	331b      	adds	r3, #27
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	334d      	adds	r3, #77	; 0x4d
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 f8a0 	bl	8005fbe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3344      	adds	r3, #68	; 0x44
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e3df      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f002 fb4d 	bl	800553c <USB_ReadChInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d111      	bne.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 f877 	bl	8005fbe <USB_HC_Halt>
 8002ed0:	e3c0      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fb2e 	bl	800553c <USB_ReadChInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d168      	bne.n	8002fbc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3344      	adds	r3, #68	; 0x44
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fb18 	bl	800553c <USB_ReadChInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d112      	bne.n	8002f3c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3319      	adds	r3, #25
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	461a      	mov	r2, r3
 8002f38:	2340      	movs	r3, #64	; 0x40
 8002f3a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d019      	beq.n	8002f86 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	331b      	adds	r3, #27
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	0151      	lsls	r1, r2, #5
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	440a      	add	r2, r1
 8002f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334d      	adds	r3, #77	; 0x4d
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 f802 	bl	8005fbe <USB_HC_Halt>
 8002fba:	e34b      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 fab9 	bl	800553c <USB_ReadChInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d139      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	334d      	adds	r3, #77	; 0x4d
 8002fe4:	2205      	movs	r2, #5
 8002fe6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	331a      	adds	r3, #26
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3319      	adds	r3, #25
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	3344      	adds	r3, #68	; 0x44
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f002 ffc5 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	6093      	str	r3, [r2, #8]
 8003046:	e305      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f002 fa73 	bl	800553c <USB_ReadChInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d11a      	bne.n	8003096 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	461a      	mov	r2, r3
 800306e:	2308      	movs	r3, #8
 8003070:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334d      	adds	r3, #77	; 0x4d
 8003082:	2206      	movs	r2, #6
 8003084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f002 ff95 	bl	8005fbe <USB_HC_Halt>
 8003094:	e2de      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 fa4c 	bl	800553c <USB_ReadChInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d144      	bne.n	8003138 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	3344      	adds	r3, #68	; 0x44
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	334d      	adds	r3, #77	; 0x4d
 80030d2:	2204      	movs	r2, #4
 80030d4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3319      	adds	r3, #25
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d114      	bne.n	8003116 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3318      	adds	r3, #24
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3319      	adds	r3, #25
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f002 ff4d 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	2310      	movs	r3, #16
 8003134:	6093      	str	r3, [r2, #8]
 8003136:	e28d      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f002 f9fb 	bl	800553c <USB_ReadChInterrupts>
 8003146:	4603      	mov	r3, r0
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	2b80      	cmp	r3, #128	; 0x80
 800314e:	d169      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	799b      	ldrb	r3, [r3, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	334d      	adds	r3, #77	; 0x4d
 8003168:	2207      	movs	r2, #7
 800316a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f002 ff22 	bl	8005fbe <USB_HC_Halt>
 800317a:	e049      	b.n	8003210 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3344      	adds	r3, #68	; 0x44
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4403      	add	r3, r0
 800319c:	3344      	adds	r3, #68	; 0x44
 800319e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3344      	adds	r3, #68	; 0x44
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d922      	bls.n	80031fc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3344      	adds	r3, #68	; 0x44
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334c      	adds	r3, #76	; 0x4c
 80031da:	2204      	movs	r2, #4
 80031dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	334c      	adds	r3, #76	; 0x4c
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f005 fa0f 	bl	8008618 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031fa:	e009      	b.n	8003210 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	334c      	adds	r3, #76	; 0x4c
 800320c:	2202      	movs	r2, #2
 800320e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	461a      	mov	r2, r3
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	6093      	str	r3, [r2, #8]
 8003222:	e217      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f002 f985 	bl	800553c <USB_ReadChInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d11b      	bne.n	8003276 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	334d      	adds	r3, #77	; 0x4d
 800324e:	2209      	movs	r2, #9
 8003250:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f002 feaf 	bl	8005fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	461a      	mov	r2, r3
 800326e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003272:	6093      	str	r3, [r2, #8]
 8003274:	e1ee      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f002 f95c 	bl	800553c <USB_ReadChInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	f040 81df 	bne.w	800364e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	2302      	movs	r3, #2
 80032a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334d      	adds	r3, #77	; 0x4d
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	f040 8093 	bne.w	80033e0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334d      	adds	r3, #77	; 0x4d
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334c      	adds	r3, #76	; 0x4c
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3326      	adds	r3, #38	; 0x26
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d00b      	beq.n	8003310 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3326      	adds	r3, #38	; 0x26
 8003308:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	f040 8190 	bne.w	8003630 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	799b      	ldrb	r3, [r3, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d115      	bne.n	8003344 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	333d      	adds	r3, #61	; 0x3d
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	f083 0301 	eor.w	r3, r3, #1
 8003330:	b2d8      	uxtb	r0, r3
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	333d      	adds	r3, #61	; 0x3d
 8003340:	4602      	mov	r2, r0
 8003342:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	799b      	ldrb	r3, [r3, #6]
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 8171 	bne.w	8003630 <HCD_HC_OUT_IRQHandler+0x920>
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3334      	adds	r3, #52	; 0x34
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8165 	beq.w	8003630 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	3334      	adds	r3, #52	; 0x34
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4403      	add	r3, r0
 8003386:	3328      	adds	r3, #40	; 0x28
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	440b      	add	r3, r1
 800338c:	1e59      	subs	r1, r3, #1
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4403      	add	r3, r0
 800339c:	3328      	adds	r3, #40	; 0x28
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 813f 	beq.w	8003630 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	333d      	adds	r3, #61	; 0x3d
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	f083 0301 	eor.w	r3, r3, #1
 80033ca:	b2d8      	uxtb	r0, r3
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	333d      	adds	r3, #61	; 0x3d
 80033da:	4602      	mov	r2, r0
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e127      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334d      	adds	r3, #77	; 0x4d
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d120      	bne.n	8003438 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	334d      	adds	r3, #77	; 0x4d
 8003406:	2202      	movs	r2, #2
 8003408:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	331b      	adds	r3, #27
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	f040 8107 	bne.w	8003630 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	334c      	adds	r3, #76	; 0x4c
 8003432:	2202      	movs	r2, #2
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e0fb      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	334d      	adds	r3, #77	; 0x4d
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b04      	cmp	r3, #4
 800344c:	d13a      	bne.n	80034c4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	334d      	adds	r3, #77	; 0x4d
 800345e:	2202      	movs	r2, #2
 8003460:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	334c      	adds	r3, #76	; 0x4c
 8003472:	2202      	movs	r2, #2
 8003474:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	331b      	adds	r3, #27
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	f040 80d1 	bne.w	8003630 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	331b      	adds	r3, #27
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	0151      	lsls	r1, r2, #5
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	440a      	add	r2, r1
 80034b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c0:	6053      	str	r3, [r2, #4]
 80034c2:	e0b5      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334d      	adds	r3, #77	; 0x4d
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d114      	bne.n	8003504 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	334d      	adds	r3, #77	; 0x4d
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	334c      	adds	r3, #76	; 0x4c
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	e095      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	334d      	adds	r3, #77	; 0x4d
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b06      	cmp	r3, #6
 8003518:	d114      	bne.n	8003544 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	334d      	adds	r3, #77	; 0x4d
 800352a:	2202      	movs	r2, #2
 800352c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334c      	adds	r3, #76	; 0x4c
 800353e:	2205      	movs	r2, #5
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e075      	b.n	8003630 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	334d      	adds	r3, #77	; 0x4d
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b07      	cmp	r3, #7
 8003558:	d00a      	beq.n	8003570 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	334d      	adds	r3, #77	; 0x4d
 800356a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800356c:	2b09      	cmp	r3, #9
 800356e:	d170      	bne.n	8003652 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334d      	adds	r3, #77	; 0x4d
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3344      	adds	r3, #68	; 0x44
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	3344      	adds	r3, #68	; 0x44
 80035a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3344      	adds	r3, #68	; 0x44
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d914      	bls.n	80035e8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3344      	adds	r3, #68	; 0x44
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	334c      	adds	r3, #76	; 0x4c
 80035e2:	2204      	movs	r2, #4
 80035e4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035e6:	e022      	b.n	800362e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334c      	adds	r3, #76	; 0x4c
 80035f8:	2202      	movs	r2, #2
 80035fa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003612:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800361a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800362e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334c      	adds	r3, #76	; 0x4c
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f004 ffe6 	bl	8008618 <HAL_HCD_HC_NotifyURBChange_Callback>
 800364c:	e002      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003652:	bf00      	nop
  }
}
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08a      	sub	sp, #40	; 0x28
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	0c5b      	lsrs	r3, r3, #17
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800368e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d004      	beq.n	80036a0 <HCD_RXQLVL_IRQHandler+0x46>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b05      	cmp	r3, #5
 800369a:	f000 80b6 	beq.w	800380a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800369e:	e0b7      	b.n	8003810 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80b3 	beq.w	800380e <HCD_RXQLVL_IRQHandler+0x1b4>
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	332c      	adds	r3, #44	; 0x2c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80a7 	beq.w	800380e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	3338      	adds	r3, #56	; 0x38
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	18d1      	adds	r1, r2, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4403      	add	r3, r0
 80036e4:	3334      	adds	r3, #52	; 0x34
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4299      	cmp	r1, r3
 80036ea:	f200 8083 	bhi.w	80037f4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	332c      	adds	r3, #44	; 0x2c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	b292      	uxth	r2, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f001 feac 	bl	8005466 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	332c      	adds	r3, #44	; 0x2c
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	18d1      	adds	r1, r2, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4403      	add	r3, r0
 8003732:	332c      	adds	r3, #44	; 0x2c
 8003734:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	3338      	adds	r3, #56	; 0x38
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	18d1      	adds	r1, r2, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4403      	add	r3, r0
 800375a:	3338      	adds	r3, #56	; 0x38
 800375c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	0cdb      	lsrs	r3, r3, #19
 800376e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003772:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3328      	adds	r3, #40	; 0x28
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4293      	cmp	r3, r2
 800378c:	d13f      	bne.n	800380e <HCD_RXQLVL_IRQHandler+0x1b4>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d03c      	beq.n	800380e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037aa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037b2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	461a      	mov	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	333c      	adds	r3, #60	; 0x3c
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2d8      	uxtb	r0, r3
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	333c      	adds	r3, #60	; 0x3c
 80037ee:	4602      	mov	r2, r0
 80037f0:	701a      	strb	r2, [r3, #0]
      break;
 80037f2:	e00c      	b.n	800380e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	334c      	adds	r3, #76	; 0x4c
 8003804:	2204      	movs	r2, #4
 8003806:	701a      	strb	r2, [r3, #0]
      break;
 8003808:	e001      	b.n	800380e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800380e:	bf00      	nop
  }
}
 8003810:	bf00      	nop
 8003812:	3728      	adds	r7, #40	; 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003844:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d10b      	bne.n	8003868 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d102      	bne.n	8003860 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f004 fec0 	bl	80085e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b08      	cmp	r3, #8
 8003870:	d132      	bne.n	80038d8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f043 0308 	orr.w	r3, r3, #8
 8003878:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d126      	bne.n	80038d2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7a5b      	ldrb	r3, [r3, #9]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d113      	bne.n	80038b4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003896:	d106      	bne.n	80038a6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2102      	movs	r1, #2
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 ff5a 	bl	8005758 <USB_InitFSLSPClkSel>
 80038a4:	e011      	b.n	80038ca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2101      	movs	r1, #1
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 ff53 	bl	8005758 <USB_InitFSLSPClkSel>
 80038b2:	e00a      	b.n	80038ca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	79db      	ldrb	r3, [r3, #7]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d106      	bne.n	80038ca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038c2:	461a      	mov	r2, r3
 80038c4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038c8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f004 feb2 	bl	8008634 <HAL_HCD_PortEnabled_Callback>
 80038d0:	e002      	b.n	80038d8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f004 febc 	bl	8008650 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d103      	bne.n	80038ea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f043 0320 	orr.w	r3, r3, #32
 80038e8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038f0:	461a      	mov	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	6013      	str	r3, [r2, #0]
}
 80038f6:	bf00      	nop
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e12b      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd f986 	bl	8000c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003964:	f001 fa20 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a81      	ldr	r2, [pc, #516]	; (8003b74 <HAL_I2C_Init+0x274>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d807      	bhi.n	8003984 <HAL_I2C_Init+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a80      	ldr	r2, [pc, #512]	; (8003b78 <HAL_I2C_Init+0x278>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e006      	b.n	8003992 <HAL_I2C_Init+0x92>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a7d      	ldr	r2, [pc, #500]	; (8003b7c <HAL_I2C_Init+0x27c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e7      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a78      	ldr	r2, [pc, #480]	; (8003b80 <HAL_I2C_Init+0x280>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <HAL_I2C_Init+0x274>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <HAL_I2C_Init+0xd4>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e009      	b.n	80039e8 <HAL_I2C_Init+0xe8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <HAL_I2C_Init+0x284>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	3301      	adds	r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	495c      	ldr	r1, [pc, #368]	; (8003b74 <HAL_I2C_Init+0x274>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d819      	bhi.n	8003a3c <HAL_I2C_Init+0x13c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e59      	subs	r1, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_I2C_Init+0x138>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e59      	subs	r1, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	e051      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e04f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d111      	bne.n	8003a68 <HAL_I2C_Init+0x168>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e58      	subs	r0, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e012      	b.n	8003a8e <HAL_I2C_Init+0x18e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Init+0x196>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e022      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <HAL_I2C_Init+0x1bc>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e58      	subs	r0, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	440b      	add	r3, r1
 8003aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aba:	e00f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6809      	ldr	r1, [r1, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6911      	ldr	r1, [r2, #16]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	000186a0 	.word	0x000186a0
 8003b78:	001e847f 	.word	0x001e847f
 8003b7c:	003d08ff 	.word	0x003d08ff
 8003b80:	431bde83 	.word	0x431bde83
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e128      	b.n	8003dec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a90      	ldr	r2, [pc, #576]	; (8003df4 <HAL_I2S_Init+0x26c>)
 8003bb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fd f887 	bl	8000cc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bd0:	f023 030f 	bic.w	r3, r3, #15
 8003bd4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d060      	beq.n	8003ca8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bee:	2310      	movs	r3, #16
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e001      	b.n	8003bf8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d802      	bhi.n	8003c06 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c06:	2001      	movs	r0, #1
 8003c08:	f001 f9d2 	bl	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c0c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c16:	d125      	bne.n	8003c64 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	461a      	mov	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	3305      	adds	r3, #5
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	e01f      	b.n	8003c82 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	461a      	mov	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	3305      	adds	r3, #5
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	e00e      	b.n	8003c82 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	461a      	mov	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	3305      	adds	r3, #5
 8003c80:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_I2S_Init+0x270>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	08db      	lsrs	r3, r3, #3
 8003c8c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e003      	b.n	8003cb0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d902      	bls.n	8003cbc <HAL_I2S_Init+0x134>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2bff      	cmp	r3, #255	; 0xff
 8003cba:	d907      	bls.n	8003ccc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	f043 0210 	orr.w	r2, r3, #16
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e08f      	b.n	8003dec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	ea42 0103 	orr.w	r1, r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cea:	f023 030f 	bic.w	r3, r3, #15
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6851      	ldr	r1, [r2, #4]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6892      	ldr	r2, [r2, #8]
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68d2      	ldr	r2, [r2, #12]
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6992      	ldr	r2, [r2, #24]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d161      	bne.n	8003ddc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a38      	ldr	r2, [pc, #224]	; (8003dfc <HAL_I2S_Init+0x274>)
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a37      	ldr	r2, [pc, #220]	; (8003e00 <HAL_I2S_Init+0x278>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_I2S_Init+0x1a4>
 8003d28:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <HAL_I2S_Init+0x27c>)
 8003d2a:	e001      	b.n	8003d30 <HAL_I2S_Init+0x1a8>
 8003d2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	4932      	ldr	r1, [pc, #200]	; (8003e00 <HAL_I2S_Init+0x278>)
 8003d38:	428a      	cmp	r2, r1
 8003d3a:	d101      	bne.n	8003d40 <HAL_I2S_Init+0x1b8>
 8003d3c:	4a31      	ldr	r2, [pc, #196]	; (8003e04 <HAL_I2S_Init+0x27c>)
 8003d3e:	e001      	b.n	8003d44 <HAL_I2S_Init+0x1bc>
 8003d40:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d48:	f023 030f 	bic.w	r3, r3, #15
 8003d4c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <HAL_I2S_Init+0x278>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_I2S_Init+0x1d4>
 8003d58:	4b2a      	ldr	r3, [pc, #168]	; (8003e04 <HAL_I2S_Init+0x27c>)
 8003d5a:	e001      	b.n	8003d60 <HAL_I2S_Init+0x1d8>
 8003d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d60:	2202      	movs	r2, #2
 8003d62:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_I2S_Init+0x278>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2S_Init+0x1ea>
 8003d6e:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <HAL_I2S_Init+0x27c>)
 8003d70:	e001      	b.n	8003d76 <HAL_I2S_Init+0x1ee>
 8003d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d82:	d003      	beq.n	8003d8c <HAL_I2S_Init+0x204>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e001      	b.n	8003d98 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dc4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <HAL_I2S_Init+0x278>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_I2S_Init+0x24c>
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <HAL_I2S_Init+0x27c>)
 8003dd2:	e001      	b.n	8003dd8 <HAL_I2S_Init+0x250>
 8003dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd8:	897a      	ldrh	r2, [r7, #10]
 8003dda:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	08003eff 	.word	0x08003eff
 8003df8:	cccccccd 	.word	0xcccccccd
 8003dfc:	08004015 	.word	0x08004015
 8003e00:	40003800 	.word	0x40003800
 8003e04:	40003400 	.word	0x40003400

08003e08 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c9a      	adds	r2, r3, #2
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10e      	bne.n	8003e98 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e88:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff ffb8 	bl	8003e08 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	b292      	uxth	r2, r2
 8003eb4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10e      	bne.n	8003ef6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ee6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff ff93 	bl	8003e1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d13a      	bne.n	8003f90 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d109      	bne.n	8003f38 <I2S_IRQHandler+0x3a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d102      	bne.n	8003f38 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ffb4 	bl	8003ea0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d126      	bne.n	8003f90 <I2S_IRQHandler+0x92>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d11f      	bne.n	8003f90 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f043 0202 	orr.w	r2, r3, #2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ff50 	bl	8003e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d136      	bne.n	800400a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d109      	bne.n	8003fba <I2S_IRQHandler+0xbc>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb0:	2b80      	cmp	r3, #128	; 0x80
 8003fb2:	d102      	bne.n	8003fba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff45 	bl	8003e44 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d122      	bne.n	800400a <I2S_IRQHandler+0x10c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d11b      	bne.n	800400a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fe0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f043 0204 	orr.w	r2, r3, #4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff13 	bl	8003e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800400a:	bf00      	nop
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a92      	ldr	r2, [pc, #584]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800402e:	4b92      	ldr	r3, [pc, #584]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004030:	e001      	b.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004032:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a8b      	ldr	r2, [pc, #556]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800404c:	4b8a      	ldr	r3, [pc, #552]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800404e:	e001      	b.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004050:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004060:	d004      	beq.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f040 8099 	bne.w	800419e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d107      	bne.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f925 	bl	80042d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d107      	bne.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9c8 	bl	8004430 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d13a      	bne.n	8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d035      	beq.n	8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6e      	ldr	r2, [pc, #440]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040be:	4b6e      	ldr	r3, [pc, #440]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040c0:	e001      	b.n	80040c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4969      	ldr	r1, [pc, #420]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ce:	428b      	cmp	r3, r1
 80040d0:	d101      	bne.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040d2:	4b69      	ldr	r3, [pc, #420]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040d4:	e001      	b.n	80040da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	f043 0202 	orr.w	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff fe88 	bl	8003e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	f040 80c3 	bne.w	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80bd 	beq.w	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004146:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a49      	ldr	r2, [pc, #292]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004152:	4b49      	ldr	r3, [pc, #292]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004154:	e001      	b.n	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4944      	ldr	r1, [pc, #272]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004162:	428b      	cmp	r3, r1
 8004164:	d101      	bne.n	800416a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004168:	e001      	b.n	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800416a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800416e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004172:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	f043 0204 	orr.w	r2, r3, #4
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fe4a 	bl	8003e30 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800419c:	e089      	b.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d107      	bne.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f8be 	bl	8004334 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d107      	bne.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f8fd 	bl	80043cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d12f      	bne.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02a      	beq.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d101      	bne.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004202:	e001      	b.n	8004208 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4919      	ldr	r1, [pc, #100]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004210:	428b      	cmp	r3, r1
 8004212:	d101      	bne.n	8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004216:	e001      	b.n	800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800421c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004220:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	f043 0202 	orr.w	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fdfa 	bl	8003e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b08      	cmp	r3, #8
 8004244:	d136      	bne.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d031      	beq.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a07      	ldr	r2, [pc, #28]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800425c:	e001      	b.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800425e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4902      	ldr	r1, [pc, #8]	; (8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800426a:	428b      	cmp	r3, r1
 800426c:	d106      	bne.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800426e:	4b02      	ldr	r3, [pc, #8]	; (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004270:	e006      	b.n	8004280 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004272:	bf00      	nop
 8004274:	40003800 	.word	0x40003800
 8004278:	40003400 	.word	0x40003400
 800427c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004280:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004284:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004294:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fdc0 	bl	8003e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b0:	e000      	b.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042b2:	bf00      	nop
}
 80042b4:	bf00      	nop
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c99      	adds	r1, r3, #2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6251      	str	r1, [r2, #36]	; 0x24
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d113      	bne.n	800432a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004310:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ffc9 	bl	80042bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c99      	adds	r1, r3, #2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6251      	str	r1, [r2, #36]	; 0x24
 8004346:	8819      	ldrh	r1, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <I2SEx_TxISR_I2SExt+0x90>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <I2SEx_TxISR_I2SExt+0x22>
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004354:	e001      	b.n	800435a <I2SEx_TxISR_I2SExt+0x26>
 8004356:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800435a:	460a      	mov	r2, r1
 800435c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d121      	bne.n	80043ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <I2SEx_TxISR_I2SExt+0x90>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <I2SEx_TxISR_I2SExt+0x50>
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004382:	e001      	b.n	8004388 <I2SEx_TxISR_I2SExt+0x54>
 8004384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	490d      	ldr	r1, [pc, #52]	; (80043c4 <I2SEx_TxISR_I2SExt+0x90>)
 8004390:	428b      	cmp	r3, r1
 8004392:	d101      	bne.n	8004398 <I2SEx_TxISR_I2SExt+0x64>
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004396:	e001      	b.n	800439c <I2SEx_TxISR_I2SExt+0x68>
 8004398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800439c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff81 	bl	80042bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40003800 	.word	0x40003800
 80043c8:	40003400 	.word	0x40003400

080043cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68d8      	ldr	r0, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	1c99      	adds	r1, r3, #2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043e4:	b282      	uxth	r2, r0
 80043e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d113      	bne.n	8004428 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800440e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff ff4a 	bl	80042bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a20      	ldr	r2, [pc, #128]	; (80044c0 <I2SEx_RxISR_I2SExt+0x90>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <I2SEx_RxISR_I2SExt+0x16>
 8004442:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <I2SEx_RxISR_I2SExt+0x94>)
 8004444:	e001      	b.n	800444a <I2SEx_RxISR_I2SExt+0x1a>
 8004446:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800444a:	68d8      	ldr	r0, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	1c99      	adds	r1, r3, #2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004456:	b282      	uxth	r2, r0
 8004458:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d121      	bne.n	80044b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <I2SEx_RxISR_I2SExt+0x90>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <I2SEx_RxISR_I2SExt+0x50>
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <I2SEx_RxISR_I2SExt+0x94>)
 800447e:	e001      	b.n	8004484 <I2SEx_RxISR_I2SExt+0x54>
 8004480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	490d      	ldr	r1, [pc, #52]	; (80044c0 <I2SEx_RxISR_I2SExt+0x90>)
 800448c:	428b      	cmp	r3, r1
 800448e:	d101      	bne.n	8004494 <I2SEx_RxISR_I2SExt+0x64>
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <I2SEx_RxISR_I2SExt+0x94>)
 8004492:	e001      	b.n	8004498 <I2SEx_RxISR_I2SExt+0x68>
 8004494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004498:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800449c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff ff03 	bl	80042bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40003800 	.word	0x40003800
 80044c4:	40003400 	.word	0x40003400

080044c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e267      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d075      	beq.n	80045d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e6:	4b88      	ldr	r3, [pc, #544]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d00c      	beq.n	800450c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f2:	4b85      	ldr	r3, [pc, #532]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d112      	bne.n	8004524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fe:	4b82      	ldr	r3, [pc, #520]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450a:	d10b      	bne.n	8004524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	4b7e      	ldr	r3, [pc, #504]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d05b      	beq.n	80045d0 <HAL_RCC_OscConfig+0x108>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d157      	bne.n	80045d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e242      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452c:	d106      	bne.n	800453c <HAL_RCC_OscConfig+0x74>
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a75      	ldr	r2, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e01d      	b.n	8004578 <HAL_RCC_OscConfig+0xb0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x98>
 8004546:	4b70      	ldr	r3, [pc, #448]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a6f      	ldr	r2, [pc, #444]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6c      	ldr	r2, [pc, #432]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0xb0>
 8004560:	4b69      	ldr	r3, [pc, #420]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a68      	ldr	r2, [pc, #416]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b66      	ldr	r3, [pc, #408]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a65      	ldr	r2, [pc, #404]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fc fdc4 	bl	800110c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004588:	f7fc fdc0 	bl	800110c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e207      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0xc0>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fc fdb0 	bl	800110c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fc fdac 	bl	800110c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1f3      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0xe8>
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d063      	beq.n	80046a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045de:	4b4a      	ldr	r3, [pc, #296]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d11c      	bne.n	8004630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b44      	ldr	r3, [pc, #272]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d116      	bne.n	8004630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_RCC_OscConfig+0x152>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e1c7      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4937      	ldr	r1, [pc, #220]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462e:	e03a      	b.n	80046a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004638:	4b34      	ldr	r3, [pc, #208]	; (800470c <HAL_RCC_OscConfig+0x244>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fc fd65 	bl	800110c <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004646:	f7fc fd61 	bl	800110c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e1a8      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004664:	4b28      	ldr	r3, [pc, #160]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4925      	ldr	r1, [pc, #148]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004674:	4313      	orrs	r3, r2
 8004676:	600b      	str	r3, [r1, #0]
 8004678:	e015      	b.n	80046a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467a:	4b24      	ldr	r3, [pc, #144]	; (800470c <HAL_RCC_OscConfig+0x244>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fc fd44 	bl	800110c <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004688:	f7fc fd40 	bl	800110c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e187      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d036      	beq.n	8004720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCC_OscConfig+0x248>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fc fd24 	bl	800110c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c8:	f7fc fd20 	bl	800110c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e167      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80046dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x200>
 80046e6:	e01b      	b.n	8004720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x248>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ee:	f7fc fd0d 	bl	800110c <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	e00e      	b.n	8004714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fc fd09 	bl	800110c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d907      	bls.n	8004714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e150      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
 8004708:	40023800 	.word	0x40023800
 800470c:	42470000 	.word	0x42470000
 8004710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	4b88      	ldr	r3, [pc, #544]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ea      	bne.n	80046f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8097 	beq.w	800485c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004732:	4b81      	ldr	r3, [pc, #516]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	4b7d      	ldr	r3, [pc, #500]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a7c      	ldr	r2, [pc, #496]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b7a      	ldr	r3, [pc, #488]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	4b77      	ldr	r3, [pc, #476]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d118      	bne.n	800479c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476a:	4b74      	ldr	r3, [pc, #464]	; (800493c <HAL_RCC_OscConfig+0x474>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a73      	ldr	r2, [pc, #460]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004776:	f7fc fcc9 	bl	800110c <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477e:	f7fc fcc5 	bl	800110c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e10c      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0x2ea>
 80047a4:	4b64      	ldr	r3, [pc, #400]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a63      	ldr	r2, [pc, #396]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	e01c      	b.n	80047ec <HAL_RCC_OscConfig+0x324>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x30c>
 80047ba:	4b5f      	ldr	r3, [pc, #380]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047c0:	f043 0304 	orr.w	r3, r3, #4
 80047c4:	6713      	str	r3, [r2, #112]	; 0x70
 80047c6:	4b5c      	ldr	r3, [pc, #368]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a5b      	ldr	r2, [pc, #364]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	e00b      	b.n	80047ec <HAL_RCC_OscConfig+0x324>
 80047d4:	4b58      	ldr	r3, [pc, #352]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a57      	ldr	r2, [pc, #348]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a54      	ldr	r2, [pc, #336]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d015      	beq.n	8004820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fc fc8a 	bl	800110c <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fc fc86 	bl	800110c <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0cb      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ee      	beq.n	80047fc <HAL_RCC_OscConfig+0x334>
 800481e:	e014      	b.n	800484a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004820:	f7fc fc74 	bl	800110c <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fc fc70 	bl	800110c <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0b5      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483e:	4b3e      	ldr	r3, [pc, #248]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ee      	bne.n	8004828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004850:	4b39      	ldr	r3, [pc, #228]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	4a38      	ldr	r2, [pc, #224]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a1 	beq.w	80049a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004866:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b08      	cmp	r3, #8
 8004870:	d05c      	beq.n	800492c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d141      	bne.n	80048fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fc fc44 	bl	800110c <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004888:	f7fc fc40 	bl	800110c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e087      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	4b27      	ldr	r3, [pc, #156]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	019b      	lsls	r3, r3, #6
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	3b01      	subs	r3, #1
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	061b      	lsls	r3, r3, #24
 80048ca:	491b      	ldr	r1, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fc fc19 	bl	800110c <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048de:	f7fc fc15 	bl	800110c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e05c      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x416>
 80048fc:	e054      	b.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fc fc02 	bl	800110c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fc fbfe 	bl	800110c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e045      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x444>
 800492a:	e03d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e038      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
 8004938:	40023800 	.word	0x40023800
 800493c:	40007000 	.word	0x40007000
 8004940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x4ec>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d028      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d121      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d11a      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800497a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800497c:	4293      	cmp	r3, r2
 800497e:	d111      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	3b01      	subs	r3, #1
 800498e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800

080049b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0cc      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049cc:	4b68      	ldr	r3, [pc, #416]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d90c      	bls.n	80049f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b65      	ldr	r3, [pc, #404]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b63      	ldr	r3, [pc, #396]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0b8      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d020      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a0c:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a30:	4b50      	ldr	r3, [pc, #320]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	494d      	ldr	r1, [pc, #308]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d044      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b47      	ldr	r3, [pc, #284]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d119      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e07f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a76:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e06f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a86:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e067      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a96:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4934      	ldr	r1, [pc, #208]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa8:	f7fc fb30 	bl	800110c <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab0:	f7fc fb2c 	bl	800110c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e04f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 020c 	and.w	r2, r3, #12
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d1eb      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d20c      	bcs.n	8004b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aee:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e032      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0c:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4916      	ldr	r1, [pc, #88]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	490e      	ldr	r1, [pc, #56]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b3e:	f000 f821 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	490a      	ldr	r1, [pc, #40]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	5ccb      	ldrb	r3, [r1, r3]
 8004b52:	fa22 f303 	lsr.w	r3, r2, r3
 8004b56:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fc fa90 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023c00 	.word	0x40023c00
 8004b74:	40023800 	.word	0x40023800
 8004b78:	08008d0c 	.word	0x08008d0c
 8004b7c:	20000080 	.word	0x20000080
 8004b80:	20000084 	.word	0x20000084

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b094      	sub	sp, #80	; 0x50
 8004b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b90:	2300      	movs	r3, #0
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	2300      	movs	r3, #0
 8004b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b9c:	4b79      	ldr	r3, [pc, #484]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	f200 80e1 	bhi.w	8004d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8004bb6:	e0db      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb8:	4b73      	ldr	r3, [pc, #460]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bbc:	e0db      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bbe:	4b73      	ldr	r3, [pc, #460]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8004bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bc2:	e0d8      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc4:	4b6f      	ldr	r3, [pc, #444]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bce:	4b6d      	ldr	r3, [pc, #436]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d063      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bda:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	099b      	lsrs	r3, r3, #6
 8004be0:	2200      	movs	r2, #0
 8004be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	0159      	lsls	r1, r3, #5
 8004c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c08:	0150      	lsls	r0, r2, #5
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4621      	mov	r1, r4
 8004c10:	1a51      	subs	r1, r2, r1
 8004c12:	6139      	str	r1, [r7, #16]
 8004c14:	4629      	mov	r1, r5
 8004c16:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c28:	4659      	mov	r1, fp
 8004c2a:	018b      	lsls	r3, r1, #6
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c32:	4651      	mov	r1, sl
 8004c34:	018a      	lsls	r2, r1, #6
 8004c36:	4651      	mov	r1, sl
 8004c38:	ebb2 0801 	subs.w	r8, r2, r1
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c56:	4690      	mov	r8, r2
 8004c58:	4699      	mov	r9, r3
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	eb18 0303 	adds.w	r3, r8, r3
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	462b      	mov	r3, r5
 8004c64:	eb49 0303 	adc.w	r3, r9, r3
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c76:	4629      	mov	r1, r5
 8004c78:	024b      	lsls	r3, r1, #9
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c80:	4621      	mov	r1, r4
 8004c82:	024a      	lsls	r2, r1, #9
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c94:	f7fb faa0 	bl	80001d8 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	e058      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca2:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	4611      	mov	r1, r2
 8004cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	0159      	lsls	r1, r3, #5
 8004cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cce:	0150      	lsls	r0, r2, #5
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cda:	4649      	mov	r1, r9
 8004cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	00eb      	lsls	r3, r5, #3
 8004d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	18e3      	adds	r3, r4, r3
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	464b      	mov	r3, r9
 8004d18:	eb45 0303 	adc.w	r3, r5, r3
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	028b      	lsls	r3, r1, #10
 8004d2e:	4621      	mov	r1, r4
 8004d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d34:	4621      	mov	r1, r4
 8004d36:	028a      	lsls	r2, r1, #10
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3e:	2200      	movs	r2, #0
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	61fa      	str	r2, [r7, #28]
 8004d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d48:	f7fb fa46 	bl	80001d8 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3750      	adds	r7, #80	; 0x50
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800
 8004d88:	00f42400 	.word	0x00f42400
 8004d8c:	007a1200 	.word	0x007a1200

08004d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000080 	.word	0x20000080

08004da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dac:	f7ff fff0 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	0a9b      	lsrs	r3, r3, #10
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4903      	ldr	r1, [pc, #12]	; (8004dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	08008d1c 	.word	0x08008d1c

08004dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d105      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d038      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004df8:	4b68      	ldr	r3, [pc, #416]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dfe:	f7fc f985 	bl	800110c <HAL_GetTick>
 8004e02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e06:	f7fc f981 	bl	800110c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0bd      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	019b      	lsls	r3, r3, #6
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	071b      	lsls	r3, r3, #28
 8004e36:	495a      	ldr	r1, [pc, #360]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e3e:	4b57      	ldr	r3, [pc, #348]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e44:	f7fc f962 	bl	800110c <HAL_GetTick>
 8004e48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e4c:	f7fc f95e 	bl	800110c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e09a      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e5e:	4b50      	ldr	r3, [pc, #320]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8083 	beq.w	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	4b48      	ldr	r3, [pc, #288]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	4a47      	ldr	r2, [pc, #284]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6413      	str	r3, [r2, #64]	; 0x40
 8004e88:	4b45      	ldr	r3, [pc, #276]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a42      	ldr	r2, [pc, #264]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea0:	f7fc f934 	bl	800110c <HAL_GetTick>
 8004ea4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ea8:	f7fc f930 	bl	800110c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e06c      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02f      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d028      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee4:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eee:	4b2e      	ldr	r3, [pc, #184]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef4:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004efa:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d114      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fc f8fe 	bl	800110c <HAL_GetTick>
 8004f10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f12:	e00a      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7fc f8fa 	bl	800110c <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e034      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0ee      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f42:	d10d      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f44:	4b16      	ldr	r3, [pc, #88]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f58:	4911      	ldr	r1, [pc, #68]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
 8004f5e:	e005      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f60:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a0e      	ldr	r2, [pc, #56]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f6a:	6093      	str	r3, [r2, #8]
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f78:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7d1a      	ldrb	r2, [r3, #20]
 8004f8e:	4b07      	ldr	r3, [pc, #28]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f90:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	42470068 	.word	0x42470068
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42470e40 	.word	0x42470e40
 8004fac:	424711e0 	.word	0x424711e0

08004fb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d141      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fce:	4b25      	ldr	r3, [pc, #148]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fe4:	d131      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fe8:	617b      	str	r3, [r7, #20]
          break;
 8004fea:	e031      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff8:	d109      	bne.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ffa:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005018:	4a15      	ldr	r2, [pc, #84]	; (8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503a:	0f1b      	lsrs	r3, r3, #28
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	617b      	str	r3, [r7, #20]
          break;
 8005048:	e002      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
          break;
 800504e:	bf00      	nop
        }
      }
      break;
 8005050:	e000      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8005052:	bf00      	nop
    }
  }
  return frequency;
 8005054:	697b      	ldr	r3, [r7, #20]
}
 8005056:	4618      	mov	r0, r3
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	00bb8000 	.word	0x00bb8000
 800506c:	007a1200 	.word	0x007a1200
 8005070:	00f42400 	.word	0x00f42400

08005074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e07b      	b.n	800517e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d108      	bne.n	80050a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005096:	d009      	beq.n	80050ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	61da      	str	r2, [r3, #28]
 800509e:	e005      	b.n	80050ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fb fecc 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005130:	ea42 0103 	orr.w	r1, r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	f003 0104 	and.w	r1, r3, #4
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f003 0210 	and.w	r2, r3, #16
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800516c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005186:	b084      	sub	sp, #16
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	f107 001c 	add.w	r0, r7, #28
 8005194:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005198:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800519c:	2b01      	cmp	r3, #1
 800519e:	d123      	bne.n	80051e8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f9dc 	bl	800559a <USB_CoreReset>
 80051e2:	4603      	mov	r3, r0
 80051e4:	73fb      	strb	r3, [r7, #15]
 80051e6:	e01b      	b.n	8005220 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f9d0 	bl	800559a <USB_CoreReset>
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
 8005212:	e005      	b.n	8005220 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005220:	7fbb      	ldrb	r3, [r7, #30]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d10b      	bne.n	800523e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f043 0206 	orr.w	r2, r3, #6
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f043 0220 	orr.w	r2, r3, #32
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800524a:	b004      	add	sp, #16
 800524c:	4770      	bx	lr

0800524e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f043 0201 	orr.w	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 0201 	bic.w	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d115      	bne.n	80052e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052c0:	200a      	movs	r0, #10
 80052c2:	f7fb ff2f 	bl	8001124 <HAL_Delay>
      ms += 10U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	330a      	adds	r3, #10
 80052ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f956 	bl	800557e <USB_GetMode>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d01e      	beq.n	8005316 <USB_SetCurrentMode+0x84>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2bc7      	cmp	r3, #199	; 0xc7
 80052dc:	d9f0      	bls.n	80052c0 <USB_SetCurrentMode+0x2e>
 80052de:	e01a      	b.n	8005316 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d115      	bne.n	8005312 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052f2:	200a      	movs	r0, #10
 80052f4:	f7fb ff16 	bl	8001124 <HAL_Delay>
      ms += 10U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	330a      	adds	r3, #10
 80052fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f93d 	bl	800557e <USB_GetMode>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <USB_SetCurrentMode+0x84>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2bc7      	cmp	r3, #199	; 0xc7
 800530e:	d9f0      	bls.n	80052f2 <USB_SetCurrentMode+0x60>
 8005310:	e001      	b.n	8005316 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e005      	b.n	8005322 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2bc8      	cmp	r3, #200	; 0xc8
 800531a:	d101      	bne.n	8005320 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005344:	d901      	bls.n	800534a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e01b      	b.n	8005382 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	daf2      	bge.n	8005338 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	019b      	lsls	r3, r3, #6
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3301      	adds	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800536e:	d901      	bls.n	8005374 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e006      	b.n	8005382 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b20      	cmp	r3, #32
 800537e:	d0f0      	beq.n	8005362 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3301      	adds	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053a6:	d901      	bls.n	80053ac <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e018      	b.n	80053de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	daf2      	bge.n	800539a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2210      	movs	r2, #16
 80053bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053ca:	d901      	bls.n	80053d0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e006      	b.n	80053de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d0f0      	beq.n	80053be <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b089      	sub	sp, #36	; 0x24
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	4611      	mov	r1, r2
 80053f6:	461a      	mov	r2, r3
 80053f8:	460b      	mov	r3, r1
 80053fa:	71fb      	strb	r3, [r7, #7]
 80053fc:	4613      	mov	r3, r2
 80053fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	d123      	bne.n	8005458 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005410:	88bb      	ldrh	r3, [r7, #4]
 8005412:	3303      	adds	r3, #3
 8005414:	089b      	lsrs	r3, r3, #2
 8005416:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	e018      	b.n	8005450 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	031a      	lsls	r2, r3, #12
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4413      	add	r3, r2
 8005426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542a:	461a      	mov	r2, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3301      	adds	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	3301      	adds	r3, #1
 800543c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	3301      	adds	r3, #1
 8005442:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	3301      	adds	r3, #1
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d3e2      	bcc.n	800541e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3724      	adds	r7, #36	; 0x24
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005466:	b480      	push	{r7}
 8005468:	b08b      	sub	sp, #44	; 0x2c
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	4613      	mov	r3, r2
 8005472:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	b29b      	uxth	r3, r3
 8005482:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800548c:	2300      	movs	r3, #0
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	e014      	b.n	80054bc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	601a      	str	r2, [r3, #0]
    pDest++;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	3301      	adds	r3, #1
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	3301      	adds	r3, #1
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	3301      	adds	r3, #1
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	3301      	adds	r3, #1
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	3301      	adds	r3, #1
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	6a3a      	ldr	r2, [r7, #32]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d3e6      	bcc.n	8005492 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054c4:	8bfb      	ldrh	r3, [r7, #30]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01e      	beq.n	8005508 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d4:	461a      	mov	r2, r3
 80054d6:	f107 0310 	add.w	r3, r7, #16
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	701a      	strb	r2, [r3, #0]
      i++;
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	3301      	adds	r3, #1
 80054f4:	623b      	str	r3, [r7, #32]
      pDest++;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	3301      	adds	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054fc:	8bfb      	ldrh	r3, [r7, #30]
 80054fe:	3b01      	subs	r3, #1
 8005500:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005502:	8bfb      	ldrh	r3, [r7, #30]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1ea      	bne.n	80054de <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800550a:	4618      	mov	r0, r3
 800550c:	372c      	adds	r7, #44	; 0x2c
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4013      	ands	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800552e:	68fb      	ldr	r3, [r7, #12]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005570:	68bb      	ldr	r3, [r7, #8]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0301 	and.w	r3, r3, #1
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055b2:	d901      	bls.n	80055b8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e01b      	b.n	80055f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	daf2      	bge.n	80055a6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80055dc:	d901      	bls.n	80055e2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e006      	b.n	80055f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d0f0      	beq.n	80055d0 <USB_CoreReset+0x36>

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055fc:	b084      	sub	sp, #16
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800560a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800561c:	461a      	mov	r2, r3
 800561e:	2300      	movs	r3, #0
 8005620:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d119      	bne.n	8005686 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10a      	bne.n	8005670 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e014      	b.n	800569a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800567e:	f023 0304 	bic.w	r3, r3, #4
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e009      	b.n	800569a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005694:	f023 0304 	bic.w	r3, r3, #4
 8005698:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800569a:	2110      	movs	r1, #16
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fe44 	bl	800532a <USB_FlushTxFifo>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fe6e 	bl	800538e <USB_FlushRxFifo>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	e015      	b.n	80056ee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ce:	461a      	mov	r2, r3
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
 80056d4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3301      	adds	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80056f2:	461a      	mov	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d3e3      	bcc.n	80056c2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f04f 32ff 	mov.w	r2, #4294967295
 8005706:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2280      	movs	r2, #128	; 0x80
 800570c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a0e      	ldr	r2, [pc, #56]	; (800574c <USB_HostInit+0x150>)
 8005712:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0e      	ldr	r2, [pc, #56]	; (8005750 <USB_HostInit+0x154>)
 8005718:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800571c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f043 0210 	orr.w	r2, r3, #16
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	4b07      	ldr	r3, [pc, #28]	; (8005754 <USB_HostInit+0x158>)
 8005736:	4313      	orrs	r3, r2
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005748:	b004      	add	sp, #16
 800574a:	4770      	bx	lr
 800574c:	00600080 	.word	0x00600080
 8005750:	004000e0 	.word	0x004000e0
 8005754:	a3200008 	.word	0xa3200008

08005758 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005790:	4313      	orrs	r3, r2
 8005792:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d107      	bne.n	80057aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a0:	461a      	mov	r2, r3
 80057a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80057a6:	6053      	str	r3, [r2, #4]
 80057a8:	e00c      	b.n	80057c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d107      	bne.n	80057c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b6:	461a      	mov	r2, r3
 80057b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80057bc:	6053      	str	r3, [r2, #4]
 80057be:	e001      	b.n	80057c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057f2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80057fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005800:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005802:	2064      	movs	r0, #100	; 0x64
 8005804:	f7fb fc8e 	bl	8001124 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005814:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005816:	200a      	movs	r0, #10
 8005818:	f7fb fc84 	bl	8001124 <HAL_Delay>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800584a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <USB_DriveVbus+0x44>
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d106      	bne.n	800586a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005868:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005874:	d109      	bne.n	800588a <USB_DriveVbus+0x64>
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005888:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	0c5b      	lsrs	r3, r3, #17
 80058b6:	f003 0303 	and.w	r3, r3, #3
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	b29b      	uxth	r3, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	4608      	mov	r0, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	461a      	mov	r2, r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	70fb      	strb	r3, [r7, #3]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70bb      	strb	r3, [r7, #2]
 80058fe:	4613      	mov	r3, r2
 8005900:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	461a      	mov	r2, r3
 8005918:	f04f 33ff 	mov.w	r3, #4294967295
 800591c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800591e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005922:	2b03      	cmp	r3, #3
 8005924:	d867      	bhi.n	80059f6 <USB_HC_Init+0x10e>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <USB_HC_Init+0x44>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	0800593d 	.word	0x0800593d
 8005930:	080059b9 	.word	0x080059b9
 8005934:	0800593d 	.word	0x0800593d
 8005938:	0800597b 	.word	0x0800597b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	461a      	mov	r2, r3
 800594a:	f240 439d 	movw	r3, #1181	; 0x49d
 800594e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005950:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005954:	2b00      	cmp	r3, #0
 8005956:	da51      	bge.n	80059fc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	78fa      	ldrb	r2, [r7, #3]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	440a      	add	r2, r1
 800596e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005976:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005978:	e040      	b.n	80059fc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4413      	add	r3, r2
 8005982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005986:	461a      	mov	r2, r3
 8005988:	f240 639d 	movw	r3, #1693	; 0x69d
 800598c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800598e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005992:	2b00      	cmp	r3, #0
 8005994:	da34      	bge.n	8005a00 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	78fa      	ldrb	r2, [r7, #3]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80059b6:	e023      	b.n	8005a00 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c4:	461a      	mov	r2, r3
 80059c6:	f240 2325 	movw	r3, #549	; 0x225
 80059ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80059cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da17      	bge.n	8005a04 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ee:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80059f2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80059f4:	e006      	b.n	8005a04 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	77fb      	strb	r3, [r7, #31]
      break;
 80059fa:	e004      	b.n	8005a06 <USB_HC_Init+0x11e>
      break;
 80059fc:	bf00      	nop
 80059fe:	e002      	b.n	8005a06 <USB_HC_Init+0x11e>
      break;
 8005a00:	bf00      	nop
 8005a02:	e000      	b.n	8005a06 <USB_HC_Init+0x11e>
      break;
 8005a04:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	461a      	mov	r2, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a32:	f043 0302 	orr.w	r3, r3, #2
 8005a36:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	2101      	movs	r1, #1
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	6939      	ldr	r1, [r7, #16]
 8005a4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a52:	4313      	orrs	r3, r2
 8005a54:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005a62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	da03      	bge.n	8005a72 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	e001      	b.n	8005a76 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff ff0e 	bl	8005898 <USB_GetHostSpeed>
 8005a7c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d106      	bne.n	8005a94 <USB_HC_Init+0x1ac>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d003      	beq.n	8005a94 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e001      	b.n	8005a98 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005a98:	787b      	ldrb	r3, [r7, #1]
 8005a9a:	059b      	lsls	r3, r3, #22
 8005a9c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005aa0:	78bb      	ldrb	r3, [r7, #2]
 8005aa2:	02db      	lsls	r3, r3, #11
 8005aa4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005aa8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005aae:	049b      	lsls	r3, r3, #18
 8005ab0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ab4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005ab6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005abc:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ad6:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005ad8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d003      	beq.n	8005ae8 <USB_HC_Init+0x200>
 8005ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d10f      	bne.n	8005b08 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b06:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3720      	adds	r7, #32
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop

08005b14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08c      	sub	sp, #48	; 0x30
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b30:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	799b      	ldrb	r3, [r3, #6]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d158      	bne.n	8005bec <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	78db      	ldrb	r3, [r3, #3]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	8a92      	ldrh	r2, [r2, #20]
 8005b4c:	fb03 f202 	mul.w	r2, r3, r2
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	61da      	str	r2, [r3, #28]
 8005b54:	e079      	b.n	8005c4a <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	7c9b      	ldrb	r3, [r3, #18]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d130      	bne.n	8005bc0 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	2bbc      	cmp	r3, #188	; 0xbc
 8005b64:	d918      	bls.n	8005b98 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	8a9b      	ldrh	r3, [r3, #20]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d003      	beq.n	8005b88 <USB_HC_StartXfer+0x74>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d103      	bne.n	8005b90 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	60da      	str	r2, [r3, #12]
 8005b8e:	e05c      	b.n	8005c4a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2201      	movs	r2, #1
 8005b94:	60da      	str	r2, [r3, #12]
 8005b96:	e058      	b.n	8005c4a <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6a1a      	ldr	r2, [r3, #32]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d007      	beq.n	8005bb8 <USB_HC_StartXfer+0xa4>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d003      	beq.n	8005bb8 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	60da      	str	r2, [r3, #12]
 8005bb6:	e048      	b.n	8005c4a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	e044      	b.n	8005c4a <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10d      	bne.n	8005be2 <USB_HC_StartXfer+0xce>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	8a92      	ldrh	r2, [r2, #20]
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d907      	bls.n	8005be2 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005bd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	8a92      	ldrh	r2, [r2, #20]
 8005bd8:	fb03 f202 	mul.w	r2, r3, r2
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	61da      	str	r2, [r3, #28]
 8005be0:	e033      	b.n	8005c4a <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	61da      	str	r2, [r3, #28]
 8005bea:	e02e      	b.n	8005c4a <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d018      	beq.n	8005c26 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	8a92      	ldrh	r2, [r2, #20]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	8a92      	ldrh	r2, [r2, #20]
 8005c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c08:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8005c0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c0c:	8b7b      	ldrh	r3, [r7, #26]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d90b      	bls.n	8005c2a <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005c12:	8b7b      	ldrh	r3, [r7, #26]
 8005c14:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	8a92      	ldrh	r2, [r2, #20]
 8005c1c:	fb03 f202 	mul.w	r2, r3, r2
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	61da      	str	r2, [r3, #28]
 8005c24:	e001      	b.n	8005c2a <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005c26:	2301      	movs	r3, #1
 8005c28:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	78db      	ldrb	r3, [r3, #3]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	8a92      	ldrh	r2, [r2, #20]
 8005c38:	fb03 f202 	mul.w	r2, r3, r2
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	61da      	str	r2, [r3, #28]
 8005c40:	e003      	b.n	8005c4a <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c54:	04d9      	lsls	r1, r3, #19
 8005c56:	4ba4      	ldr	r3, [pc, #656]	; (8005ee8 <USB_HC_StartXfer+0x3d4>)
 8005c58:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c5a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	7d9b      	ldrb	r3, [r3, #22]
 8005c60:	075b      	lsls	r3, r3, #29
 8005c62:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c66:	69f9      	ldr	r1, [r7, #28]
 8005c68:	0148      	lsls	r0, r1, #5
 8005c6a:	6a39      	ldr	r1, [r7, #32]
 8005c6c:	4401      	add	r1, r0
 8005c6e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c72:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c74:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d009      	beq.n	8005c90 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	6999      	ldr	r1, [r3, #24]
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	460a      	mov	r2, r1
 8005c8e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	6a3a      	ldr	r2, [r7, #32]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cc6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	7e7b      	ldrb	r3, [r7, #25]
 8005cd8:	075b      	lsls	r3, r3, #29
 8005cda:	69f9      	ldr	r1, [r7, #28]
 8005cdc:	0148      	lsls	r0, r1, #5
 8005cde:	6a39      	ldr	r1, [r7, #32]
 8005ce0:	4401      	add	r1, r0
 8005ce2:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	799b      	ldrb	r3, [r3, #6]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	f040 80c4 	bne.w	8005e7c <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	7c5b      	ldrb	r3, [r3, #17]
 8005cf8:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	6a3a      	ldr	r2, [r7, #32]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005d10:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	6a3a      	ldr	r2, [r7, #32]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	79db      	ldrb	r3, [r3, #7]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d123      	bne.n	8005d82 <USB_HC_StartXfer+0x26e>
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	78db      	ldrb	r3, [r3, #3]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d11f      	bne.n	8005d82 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	6a3a      	ldr	r2, [r7, #32]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d60:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d80:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	7c9b      	ldrb	r3, [r3, #18]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d003      	beq.n	8005d92 <USB_HC_StartXfer+0x27e>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	7c9b      	ldrb	r3, [r3, #18]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d117      	bne.n	8005dc2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d113      	bne.n	8005dc2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	78db      	ldrb	r3, [r3, #3]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d10f      	bne.n	8005dc2 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc0:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	7c9b      	ldrb	r3, [r3, #18]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d163      	bne.n	8005e92 <USB_HC_StartXfer+0x37e>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	78db      	ldrb	r3, [r3, #3]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d15f      	bne.n	8005e92 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d859      	bhi.n	8005e90 <USB_HC_StartXfer+0x37c>
 8005ddc:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <USB_HC_StartXfer+0x2d0>)
 8005dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de2:	bf00      	nop
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005e17 	.word	0x08005e17
 8005dec:	08005e39 	.word	0x08005e39
 8005df0:	08005e5b 	.word	0x08005e5b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e12:	6053      	str	r3, [r2, #4]
          break;
 8005e14:	e03d      	b.n	8005e92 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	6a3a      	ldr	r2, [r7, #32]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e30:	f043 030e 	orr.w	r3, r3, #14
 8005e34:	6053      	str	r3, [r2, #4]
          break;
 8005e36:	e02c      	b.n	8005e92 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	6a3a      	ldr	r2, [r7, #32]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e56:	6053      	str	r3, [r2, #4]
          break;
 8005e58:	e01b      	b.n	8005e92 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	6a3a      	ldr	r2, [r7, #32]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e78:	6053      	str	r3, [r2, #4]
          break;
 8005e7a:	e00a      	b.n	8005e92 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6053      	str	r3, [r2, #4]
 8005e8e:	e000      	b.n	8005e92 <USB_HC_StartXfer+0x37e>
          break;
 8005e90:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	78db      	ldrb	r3, [r3, #3]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d004      	beq.n	8005ebc <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	e003      	b.n	8005ec4 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eca:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed8:	461a      	mov	r2, r3
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e055      	b.n	8005f94 <USB_HC_StartXfer+0x480>
 8005ee8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	78db      	ldrb	r3, [r3, #3]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d14e      	bne.n	8005f92 <USB_HC_StartXfer+0x47e>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d04a      	beq.n	8005f92 <USB_HC_StartXfer+0x47e>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	79db      	ldrb	r3, [r3, #7]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d146      	bne.n	8005f92 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	7c9b      	ldrb	r3, [r3, #18]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d831      	bhi.n	8005f70 <USB_HC_StartXfer+0x45c>
 8005f0c:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <USB_HC_StartXfer+0x400>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f25 	.word	0x08005f25
 8005f18:	08005f49 	.word	0x08005f49
 8005f1c:	08005f25 	.word	0x08005f25
 8005f20:	08005f49 	.word	0x08005f49
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	3303      	adds	r3, #3
 8005f2a:	089b      	lsrs	r3, r3, #2
 8005f2c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f2e:	8afa      	ldrh	r2, [r7, #22]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d91c      	bls.n	8005f74 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f043 0220 	orr.w	r2, r3, #32
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f46:	e015      	b.n	8005f74 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	3303      	adds	r3, #3
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f52:	8afa      	ldrh	r2, [r7, #22]
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d90a      	bls.n	8005f78 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f6e:	e003      	b.n	8005f78 <USB_HC_StartXfer+0x464>

      default:
        break;
 8005f70:	bf00      	nop
 8005f72:	e002      	b.n	8005f7a <USB_HC_StartXfer+0x466>
        break;
 8005f74:	bf00      	nop
 8005f76:	e000      	b.n	8005f7a <USB_HC_StartXfer+0x466>
        break;
 8005f78:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6999      	ldr	r1, [r3, #24]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	785a      	ldrb	r2, [r3, #1]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2000      	movs	r0, #0
 8005f8a:	9000      	str	r0, [sp, #0]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff fa2c 	bl	80053ea <USB_WritePacket>
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3728      	adds	r7, #40	; 0x28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	b29b      	uxth	r3, r3
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b089      	sub	sp, #36	; 0x24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	0c9b      	lsrs	r3, r3, #18
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	0fdb      	lsrs	r3, r3, #31
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	0fdb      	lsrs	r3, r3, #31
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b20      	cmp	r3, #32
 8006022:	d10d      	bne.n	8006040 <USB_HC_Halt+0x82>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <USB_HC_Halt+0x82>
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d002      	beq.n	800603c <USB_HC_Halt+0x7e>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d101      	bne.n	8006040 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e0d8      	b.n	80061f2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <USB_HC_Halt+0x8e>
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d173      	bne.n	8006134 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800606a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b00      	cmp	r3, #0
 8006076:	d14a      	bne.n	800610e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d133      	bne.n	80060ec <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	440a      	add	r2, r1
 800609a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800609e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060a2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060c2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d0:	d82e      	bhi.n	8006130 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e8:	d0ec      	beq.n	80060c4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060ea:	e081      	b.n	80061f0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	440a      	add	r2, r1
 8006102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006106:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800610a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800610c:	e070      	b.n	80061f0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800612c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800612e:	e05f      	b.n	80061f0 <USB_HC_Halt+0x232>
            break;
 8006130:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006132:	e05d      	b.n	80061f0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	440a      	add	r2, r1
 800614a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800614e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006152:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d133      	bne.n	80061cc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	440a      	add	r2, r1
 800617a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800617e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006182:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	440a      	add	r2, r1
 800619a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800619e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b0:	d81d      	bhi.n	80061ee <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c8:	d0ec      	beq.n	80061a4 <USB_HC_Halt+0x1e6>
 80061ca:	e011      	b.n	80061f0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	e000      	b.n	80061f0 <USB_HC_Halt+0x232>
          break;
 80061ee:	bf00      	nop
    }
  }

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3724      	adds	r7, #36	; 0x24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b088      	sub	sp, #32
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff f82c 	bl	8005270 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006218:	2110      	movs	r1, #16
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff f885 	bl	800532a <USB_FlushTxFifo>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff f8af 	bl	800538e <USB_FlushRxFifo>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800623a:	2300      	movs	r3, #0
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e01f      	b.n	8006280 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006256:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800625e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006266:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	461a      	mov	r2, r3
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	3301      	adds	r3, #1
 800627e:	61bb      	str	r3, [r7, #24]
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b0f      	cmp	r3, #15
 8006284:	d9dc      	bls.n	8006240 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e034      	b.n	80062f6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062a2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062aa:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	461a      	mov	r2, r3
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d2:	d80c      	bhi.n	80062ee <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ea:	d0ec      	beq.n	80062c6 <USB_StopHost+0xc8>
 80062ec:	e000      	b.n	80062f0 <USB_StopHost+0xf2>
        break;
 80062ee:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b0f      	cmp	r3, #15
 80062fa:	d9c7      	bls.n	800628c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006302:	461a      	mov	r2, r3
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f04f 32ff 	mov.w	r2, #4294967295
 8006310:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fe ff9b 	bl	800524e <USB_EnableGlobalInt>

  return ret;
 8006318:	7ffb      	ldrb	r3, [r7, #31]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006322:	b590      	push	{r4, r7, lr}
 8006324:	b089      	sub	sp, #36	; 0x24
 8006326:	af04      	add	r7, sp, #16
 8006328:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800632a:	2301      	movs	r3, #1
 800632c:	2202      	movs	r2, #2
 800632e:	2102      	movs	r1, #2
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc86 	bl	8006c42 <USBH_FindInterface>
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2bff      	cmp	r3, #255	; 0xff
 800633e:	d002      	beq.n	8006346 <USBH_CDC_InterfaceInit+0x24>
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d901      	bls.n	800634a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006346:	2302      	movs	r3, #2
 8006348:	e13d      	b.n	80065c6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fc5b 	bl	8006c0a <USBH_SelectInterface>
 8006354:	4603      	mov	r3, r0
 8006356:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800635e:	2302      	movs	r3, #2
 8006360:	e131      	b.n	80065c6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006368:	2050      	movs	r0, #80	; 0x50
 800636a:	f002 fb75 	bl	8008a58 <malloc>
 800636e:	4603      	mov	r3, r0
 8006370:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006382:	2302      	movs	r3, #2
 8006384:	e11f      	b.n	80065c6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006386:	2250      	movs	r2, #80	; 0x50
 8006388:	2100      	movs	r1, #0
 800638a:	68b8      	ldr	r0, [r7, #8]
 800638c:	f002 fc20 	bl	8008bd0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	211a      	movs	r1, #26
 8006396:	fb01 f303 	mul.w	r3, r1, r3
 800639a:	4413      	add	r3, r2
 800639c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	b25b      	sxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da15      	bge.n	80063d4 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	211a      	movs	r1, #26
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063b8:	781a      	ldrb	r2, [r3, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	211a      	movs	r1, #26
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 ffcf 	bl	800837e <USBH_AllocPipe>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	7819      	ldrb	r1, [r3, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	7858      	ldrb	r0, [r3, #1]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	8952      	ldrh	r2, [r2, #10]
 8006400:	9202      	str	r2, [sp, #8]
 8006402:	2203      	movs	r2, #3
 8006404:	9201      	str	r2, [sp, #4]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4623      	mov	r3, r4
 800640a:	4602      	mov	r2, r0
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 ff87 	bl	8008320 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2200      	movs	r2, #0
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f002 fa96 	bl	800894c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	210a      	movs	r1, #10
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fc0b 	bl	8006c42 <USBH_FindInterface>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2bff      	cmp	r3, #255	; 0xff
 8006434:	d002      	beq.n	800643c <USBH_CDC_InterfaceInit+0x11a>
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d901      	bls.n	8006440 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800643c:	2302      	movs	r3, #2
 800643e:	e0c2      	b.n	80065c6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	211a      	movs	r1, #26
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b25b      	sxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	da16      	bge.n	8006486 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	211a      	movs	r1, #26
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	4413      	add	r3, r2
 8006464:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	211a      	movs	r1, #26
 8006474:	fb01 f303 	mul.w	r3, r1, r3
 8006478:	4413      	add	r3, r2
 800647a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	835a      	strh	r2, [r3, #26]
 8006484:	e015      	b.n	80064b2 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	211a      	movs	r1, #26
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	4413      	add	r3, r2
 8006492:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	211a      	movs	r1, #26
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064ac:	881a      	ldrh	r2, [r3, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	211a      	movs	r1, #26
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da16      	bge.n	80064f8 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	211a      	movs	r1, #26
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	4413      	add	r3, r2
 80064d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	211a      	movs	r1, #26
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064f0:	881a      	ldrh	r2, [r3, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	835a      	strh	r2, [r3, #26]
 80064f6:	e015      	b.n	8006524 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	211a      	movs	r1, #26
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	4413      	add	r3, r2
 8006504:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	211a      	movs	r1, #26
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	4413      	add	r3, r2
 800651a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800651e:	881a      	ldrh	r2, [r3, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	7b9b      	ldrb	r3, [r3, #14]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 ff27 	bl	800837e <USBH_AllocPipe>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	7bdb      	ldrb	r3, [r3, #15]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 ff1d 	bl	800837e <USBH_AllocPipe>
 8006544:	4603      	mov	r3, r0
 8006546:	461a      	mov	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	7b59      	ldrb	r1, [r3, #13]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	7b98      	ldrb	r0, [r3, #14]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	8b12      	ldrh	r2, [r2, #24]
 8006564:	9202      	str	r2, [sp, #8]
 8006566:	2202      	movs	r2, #2
 8006568:	9201      	str	r2, [sp, #4]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	4623      	mov	r3, r4
 800656e:	4602      	mov	r2, r0
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fed5 	bl	8008320 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	7b19      	ldrb	r1, [r3, #12]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	7bd8      	ldrb	r0, [r3, #15]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	8b52      	ldrh	r2, [r2, #26]
 800658e:	9202      	str	r2, [sp, #8]
 8006590:	2202      	movs	r2, #2
 8006592:	9201      	str	r2, [sp, #4]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	4623      	mov	r3, r4
 8006598:	4602      	mov	r2, r0
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 fec0 	bl	8008320 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	7b5b      	ldrb	r3, [r3, #13]
 80065ac:	2200      	movs	r2, #0
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f002 f9cb 	bl	800894c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	7b1b      	ldrb	r3, [r3, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f002 f9c4 	bl	800894c <USBH_LL_SetToggle>

  return USBH_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd90      	pop	{r4, r7, pc}

080065ce <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00e      	beq.n	8006606 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 feb5 	bl	800835e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fee0 	bl	80083c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	7b1b      	ldrb	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00e      	beq.n	800662c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	7b1b      	ldrb	r3, [r3, #12]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fea2 	bl	800835e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	7b1b      	ldrb	r3, [r3, #12]
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fecd 	bl	80083c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	7b5b      	ldrb	r3, [r3, #13]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00e      	beq.n	8006652 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	7b5b      	ldrb	r3, [r3, #13]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fe8f 	bl	800835e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	7b5b      	ldrb	r3, [r3, #13]
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 feba 	bl	80083c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	4618      	mov	r0, r3
 8006668:	f002 f9fe 	bl	8008a68 <free>
    phost->pActiveClass->pData = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3340      	adds	r3, #64	; 0x40
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8b2 	bl	8006802 <GetLineCoding>
 800669e:	4603      	mov	r3, r0
 80066a0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066ae:	2102      	movs	r1, #2
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80066b4:	7afb      	ldrb	r3, [r7, #11]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d877      	bhi.n	80067d4 <USBH_CDC_Process+0x114>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <USBH_CDC_Process+0x2c>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006701 	.word	0x08006701
 80066f0:	08006707 	.word	0x08006707
 80066f4:	08006737 	.word	0x08006737
 80066f8:	080067ab 	.word	0x080067ab
 80066fc:	080067b9 	.word	0x080067b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]
      break;
 8006704:	e06d      	b.n	80067e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f897 	bl	8006840 <SetLineCoding>
 8006712:	4603      	mov	r3, r0
 8006714:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006716:	7bbb      	ldrb	r3, [r7, #14]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006724:	e058      	b.n	80067d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d055      	beq.n	80067d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2204      	movs	r2, #4
 8006730:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006734:	e050      	b.n	80067d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	3340      	adds	r3, #64	; 0x40
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f860 	bl	8006802 <GetLineCoding>
 8006742:	4603      	mov	r3, r0
 8006744:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d126      	bne.n	800679a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675e:	791b      	ldrb	r3, [r3, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d13b      	bne.n	80067dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006770:	429a      	cmp	r2, r3
 8006772:	d133      	bne.n	80067dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006780:	429a      	cmp	r2, r3
 8006782:	d12b      	bne.n	80067dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800678e:	429a      	cmp	r2, r3
 8006790:	d124      	bne.n	80067dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f958 	bl	8006a48 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006798:	e020      	b.n	80067dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d01d      	beq.n	80067dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2204      	movs	r2, #4
 80067a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067a8:	e018      	b.n	80067dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f867 	bl	800687e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f8da 	bl	800696a <CDC_ProcessReception>
      break;
 80067b6:	e014      	b.n	80067e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 f822 	bl	8007804 <USBH_ClrFeature>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80067d2:	e005      	b.n	80067e0 <USBH_CDC_Process+0x120>

    default:
      break;
 80067d4:	bf00      	nop
 80067d6:	e004      	b.n	80067e2 <USBH_CDC_Process+0x122>
      break;
 80067d8:	bf00      	nop
 80067da:	e002      	b.n	80067e2 <USBH_CDC_Process+0x122>
      break;
 80067dc:	bf00      	nop
 80067de:	e000      	b.n	80067e2 <USBH_CDC_Process+0x122>
      break;
 80067e0:	bf00      	nop

  }

  return status;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	22a1      	movs	r2, #161	; 0xa1
 8006810:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2221      	movs	r2, #33	; 0x21
 8006816:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2207      	movs	r2, #7
 8006828:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2207      	movs	r2, #7
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fb23 	bl	8007e7c <USBH_CtlReq>
 8006836:	4603      	mov	r3, r0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2221      	movs	r2, #33	; 0x21
 800684e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2207      	movs	r2, #7
 8006866:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2207      	movs	r2, #7
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 fb04 	bl	8007e7c <USBH_CtlReq>
 8006874:	4603      	mov	r3, r0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af02      	add	r7, sp, #8
 8006884:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006890:	2300      	movs	r3, #0
 8006892:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800689a:	2b01      	cmp	r3, #1
 800689c:	d002      	beq.n	80068a4 <CDC_ProcessTransmission+0x26>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d023      	beq.n	80068ea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80068a2:	e05e      	b.n	8006962 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	8b12      	ldrh	r2, [r2, #24]
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d90b      	bls.n	80068c8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	69d9      	ldr	r1, [r3, #28]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8b1a      	ldrh	r2, [r3, #24]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	7b5b      	ldrb	r3, [r3, #13]
 80068bc:	2001      	movs	r0, #1
 80068be:	9000      	str	r0, [sp, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fcea 	bl	800829a <USBH_BulkSendData>
 80068c6:	e00b      	b.n	80068e0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	7b5b      	ldrb	r3, [r3, #13]
 80068d6:	2001      	movs	r0, #1
 80068d8:	9000      	str	r0, [sp, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fcdd 	bl	800829a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068e8:	e03b      	b.n	8006962 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	7b5b      	ldrb	r3, [r3, #13]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f002 f801 	bl	80088f8 <USBH_LL_GetURBState>
 80068f6:	4603      	mov	r3, r0
 80068f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d128      	bne.n	8006952 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	8b12      	ldrh	r2, [r2, #24]
 8006908:	4293      	cmp	r3, r2
 800690a:	d90e      	bls.n	800692a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	8b12      	ldrh	r2, [r2, #24]
 8006914:	1a9a      	subs	r2, r3, r2
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	8b12      	ldrh	r2, [r2, #24]
 8006922:	441a      	add	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	61da      	str	r2, [r3, #28]
 8006928:	e002      	b.n	8006930 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006940:	e00e      	b.n	8006960 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f868 	bl	8006a20 <USBH_CDC_TransmitCallback>
      break;
 8006950:	e006      	b.n	8006960 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006952:	7afb      	ldrb	r3, [r7, #11]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d103      	bne.n	8006960 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006960:	bf00      	nop
  }
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800697c:	2300      	movs	r3, #0
 800697e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006986:	2b03      	cmp	r3, #3
 8006988:	d002      	beq.n	8006990 <CDC_ProcessReception+0x26>
 800698a:	2b04      	cmp	r3, #4
 800698c:	d00e      	beq.n	80069ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800698e:	e043      	b.n	8006a18 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	6a19      	ldr	r1, [r3, #32]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	8b5a      	ldrh	r2, [r3, #26]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	7b1b      	ldrb	r3, [r3, #12]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fca1 	bl	80082e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2204      	movs	r2, #4
 80069a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069aa:	e035      	b.n	8006a18 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	7b1b      	ldrb	r3, [r3, #12]
 80069b0:	4619      	mov	r1, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 ffa0 	bl	80088f8 <USBH_LL_GetURBState>
 80069b8:	4603      	mov	r3, r0
 80069ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069bc:	7cfb      	ldrb	r3, [r7, #19]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d129      	bne.n	8006a16 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	7b1b      	ldrb	r3, [r3, #12]
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 ff03 	bl	80087d4 <USBH_LL_GetLastXferSize>
 80069ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d016      	beq.n	8006a08 <CDC_ProcessReception+0x9e>
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	8b5b      	ldrh	r3, [r3, #26]
 80069de:	461a      	mov	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d910      	bls.n	8006a08 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1ad2      	subs	r2, r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6a1a      	ldr	r2, [r3, #32]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	441a      	add	r2, r3
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2203      	movs	r2, #3
 8006a02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a06:	e006      	b.n	8006a16 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f80f 	bl	8006a34 <USBH_CDC_ReceiveCallback>
      break;
 8006a16:	bf00      	nop
  }
}
 8006a18:	bf00      	nop
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a70:	2302      	movs	r3, #2
 8006a72:	e029      	b.n	8006ac8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	79fa      	ldrb	r2, [r7, #7]
 8006a78:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f81f 	bl	8006ad0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f001 fdd3 	bl	800866c <USBH_LL_Init>

  return USBH_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e009      	b.n	8006af6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	33e0      	adds	r3, #224	; 0xe0
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	2200      	movs	r2, #0
 8006aee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b0f      	cmp	r3, #15
 8006afa:	d9f2      	bls.n	8006ae2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	e009      	b.n	8006b16 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b1c:	d3f1      	bcc.n	8006b02 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2240      	movs	r2, #64	; 0x40
 8006b42:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	331c      	adds	r3, #28
 8006b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f002 f82b 	bl	8008bd0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f002 f822 	bl	8008bd0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f203 3326 	addw	r3, r3, #806	; 0x326
 8006b92:	2212      	movs	r2, #18
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f002 f81a 	bl	8008bd0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ba2:	223e      	movs	r2, #62	; 0x3e
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 f812 	bl	8008bd0 <memset>

  return USBH_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10e      	bne.n	8006bf2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bda:	1c59      	adds	r1, r3, #1
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	33de      	adds	r3, #222	; 0xde
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
 8006bf0:	e004      	b.n	8006bfc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	73fb      	strb	r3, [r7, #15]
 8006bf6:	e001      	b.n	8006bfc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d204      	bcs.n	8006c30 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c2e:	e001      	b.n	8006c34 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c30:	2302      	movs	r3, #2
 8006c32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b087      	sub	sp, #28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4603      	mov	r3, r0
 8006c52:	70fb      	strb	r3, [r7, #3]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70bb      	strb	r3, [r7, #2]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c6a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c6c:	e025      	b.n	8006cba <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	221a      	movs	r2, #26
 8006c72:	fb02 f303 	mul.w	r3, r2, r3
 8006c76:	3308      	adds	r3, #8
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	795b      	ldrb	r3, [r3, #5]
 8006c84:	78fa      	ldrb	r2, [r7, #3]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d002      	beq.n	8006c90 <USBH_FindInterface+0x4e>
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	2bff      	cmp	r3, #255	; 0xff
 8006c8e:	d111      	bne.n	8006cb4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c94:	78ba      	ldrb	r2, [r7, #2]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d002      	beq.n	8006ca0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c9a:	78bb      	ldrb	r3, [r7, #2]
 8006c9c:	2bff      	cmp	r3, #255	; 0xff
 8006c9e:	d109      	bne.n	8006cb4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ca4:	787a      	ldrb	r2, [r7, #1]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d002      	beq.n	8006cb0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006caa:	787b      	ldrb	r3, [r7, #1]
 8006cac:	2bff      	cmp	r3, #255	; 0xff
 8006cae:	d101      	bne.n	8006cb4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	e006      	b.n	8006cc2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d9d6      	bls.n	8006c6e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006cc0:	23ff      	movs	r3, #255	; 0xff
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fd04 	bl	80086e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006cdc:	2101      	movs	r1, #1
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 fe1d 	bl	800891e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af04      	add	r7, sp, #16
 8006cf6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d102      	bne.n	8006d12 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2203      	movs	r2, #3
 8006d10:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b0b      	cmp	r3, #11
 8006d1a:	f200 81be 	bhi.w	800709a <USBH_Process+0x3aa>
 8006d1e:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <USBH_Process+0x34>)
 8006d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d24:	08006d55 	.word	0x08006d55
 8006d28:	08006d87 	.word	0x08006d87
 8006d2c:	08006def 	.word	0x08006def
 8006d30:	08007035 	.word	0x08007035
 8006d34:	0800709b 	.word	0x0800709b
 8006d38:	08006e93 	.word	0x08006e93
 8006d3c:	08006fdb 	.word	0x08006fdb
 8006d40:	08006ec9 	.word	0x08006ec9
 8006d44:	08006ee9 	.word	0x08006ee9
 8006d48:	08006f09 	.word	0x08006f09
 8006d4c:	08006f4d 	.word	0x08006f4d
 8006d50:	0800701d 	.word	0x0800701d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 819e 	beq.w	800709e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d68:	20c8      	movs	r0, #200	; 0xc8
 8006d6a:	f001 fe22 	bl	80089b2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fd15 	bl	800879e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d84:	e18b      	b.n	800709e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d107      	bne.n	8006da0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d9e:	e18d      	b.n	80070bc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006daa:	d914      	bls.n	8006dd6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006db2:	3301      	adds	r3, #1
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d903      	bls.n	8006dce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	220d      	movs	r2, #13
 8006dca:	701a      	strb	r2, [r3, #0]
      break;
 8006dcc:	e176      	b.n	80070bc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]
      break;
 8006dd4:	e172      	b.n	80070bc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ddc:	f103 020a 	add.w	r2, r3, #10
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006de6:	200a      	movs	r0, #10
 8006de8:	f001 fde3 	bl	80089b2 <USBH_Delay>
      break;
 8006dec:	e166      	b.n	80070bc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dfe:	2104      	movs	r1, #4
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e04:	2064      	movs	r0, #100	; 0x64
 8006e06:	f001 fdd4 	bl	80089b2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fca0 	bl	8008750 <USBH_LL_GetSpeed>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2205      	movs	r2, #5
 8006e1e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e20:	2100      	movs	r1, #0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 faab 	bl	800837e <USBH_AllocPipe>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 faa3 	bl	800837e <USBH_AllocPipe>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	7919      	ldrb	r1, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e54:	b292      	uxth	r2, r2
 8006e56:	9202      	str	r2, [sp, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	9201      	str	r2, [sp, #4]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2280      	movs	r2, #128	; 0x80
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fa5c 	bl	8008320 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	7959      	ldrb	r1, [r3, #5]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e7c:	b292      	uxth	r2, r2
 8006e7e:	9202      	str	r2, [sp, #8]
 8006e80:	2200      	movs	r2, #0
 8006e82:	9201      	str	r2, [sp, #4]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	4603      	mov	r3, r0
 8006e88:	2200      	movs	r2, #0
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fa48 	bl	8008320 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e90:	e114      	b.n	80070bc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f918 	bl	80070c8 <USBH_HandleEnum>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f040 80fe 	bne.w	80070a2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d103      	bne.n	8006ec0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ebe:	e0f0      	b.n	80070a2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	701a      	strb	r2, [r3, #0]
      break;
 8006ec6:	e0ec      	b.n	80070a2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80e9 	beq.w	80070a6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eda:	2101      	movs	r1, #1
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2208      	movs	r2, #8
 8006ee4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006ee6:	e0de      	b.n	80070a6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fc3f 	bl	8007776 <USBH_SetCfg>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 80d5 	bne.w	80070aa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2209      	movs	r2, #9
 8006f04:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f06:	e0d0      	b.n	80070aa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d016      	beq.n	8006f44 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006f16:	2101      	movs	r1, #1
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fc4f 	bl	80077bc <USBH_SetFeature>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d103      	bne.n	8006f32 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	220a      	movs	r2, #10
 8006f2e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f30:	e0bd      	b.n	80070ae <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	f040 80b9 	bne.w	80070ae <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	220a      	movs	r2, #10
 8006f40:	701a      	strb	r2, [r3, #0]
      break;
 8006f42:	e0b4      	b.n	80070ae <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	220a      	movs	r2, #10
 8006f48:	701a      	strb	r2, [r3, #0]
      break;
 8006f4a:	e0b0      	b.n	80070ae <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80ad 	beq.w	80070b2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]
 8006f64:	e016      	b.n	8006f94 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f66:	7bfa      	ldrb	r2, [r7, #15]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	32de      	adds	r2, #222	; 0xde
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	791a      	ldrb	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d108      	bne.n	8006f8e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f7c:	7bfa      	ldrb	r2, [r7, #15]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32de      	adds	r2, #222	; 0xde
 8006f82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006f8c:	e005      	b.n	8006f9a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	3301      	adds	r3, #1
 8006f92:	73fb      	strb	r3, [r7, #15]
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0e5      	beq.n	8006f66 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d016      	beq.n	8006fd2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	4798      	blx	r3
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2206      	movs	r2, #6
 8006fba:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fc2:	2103      	movs	r1, #3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fc8:	e073      	b.n	80070b2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	220d      	movs	r2, #13
 8006fce:	701a      	strb	r2, [r3, #0]
      break;
 8006fd0:	e06f      	b.n	80070b2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	220d      	movs	r2, #13
 8006fd6:	701a      	strb	r2, [r3, #0]
      break;
 8006fd8:	e06b      	b.n	80070b2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d017      	beq.n	8007014 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	4798      	blx	r3
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	220b      	movs	r2, #11
 8007000:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007002:	e058      	b.n	80070b6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d154      	bne.n	80070b6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	220d      	movs	r2, #13
 8007010:	701a      	strb	r2, [r3, #0]
      break;
 8007012:	e050      	b.n	80070b6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	220d      	movs	r2, #13
 8007018:	701a      	strb	r2, [r3, #0]
      break;
 800701a:	e04c      	b.n	80070b6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d049      	beq.n	80070ba <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3
      }
      break;
 8007032:	e042      	b.n	80070ba <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fd47 	bl	8006ad0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d009      	beq.n	8007060 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007070:	2105      	movs	r1, #5
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d107      	bne.n	8007092 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff fe1f 	bl	8006cce <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007090:	e014      	b.n	80070bc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fb26 	bl	80086e4 <USBH_LL_Start>
      break;
 8007098:	e010      	b.n	80070bc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800709a:	bf00      	nop
 800709c:	e00e      	b.n	80070bc <USBH_Process+0x3cc>
      break;
 800709e:	bf00      	nop
 80070a0:	e00c      	b.n	80070bc <USBH_Process+0x3cc>
      break;
 80070a2:	bf00      	nop
 80070a4:	e00a      	b.n	80070bc <USBH_Process+0x3cc>
    break;
 80070a6:	bf00      	nop
 80070a8:	e008      	b.n	80070bc <USBH_Process+0x3cc>
      break;
 80070aa:	bf00      	nop
 80070ac:	e006      	b.n	80070bc <USBH_Process+0x3cc>
      break;
 80070ae:	bf00      	nop
 80070b0:	e004      	b.n	80070bc <USBH_Process+0x3cc>
      break;
 80070b2:	bf00      	nop
 80070b4:	e002      	b.n	80070bc <USBH_Process+0x3cc>
      break;
 80070b6:	bf00      	nop
 80070b8:	e000      	b.n	80070bc <USBH_Process+0x3cc>
      break;
 80070ba:	bf00      	nop
  }
  return USBH_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop

080070c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80070d4:	2301      	movs	r3, #1
 80070d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b07      	cmp	r3, #7
 80070de:	f200 81c1 	bhi.w	8007464 <USBH_HandleEnum+0x39c>
 80070e2:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <USBH_HandleEnum+0x20>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	08007109 	.word	0x08007109
 80070ec:	080071c7 	.word	0x080071c7
 80070f0:	08007231 	.word	0x08007231
 80070f4:	080072bf 	.word	0x080072bf
 80070f8:	08007329 	.word	0x08007329
 80070fc:	08007399 	.word	0x08007399
 8007100:	080073df 	.word	0x080073df
 8007104:	08007425 	.word	0x08007425
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007108:	2108      	movs	r1, #8
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa50 	bl	80075b0 <USBH_Get_DevDesc>
 8007110:	4603      	mov	r3, r0
 8007112:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d130      	bne.n	800717c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7919      	ldrb	r1, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800713e:	b292      	uxth	r2, r2
 8007140:	9202      	str	r2, [sp, #8]
 8007142:	2200      	movs	r2, #0
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4603      	mov	r3, r0
 800714a:	2280      	movs	r2, #128	; 0x80
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 f8e7 	bl	8008320 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7959      	ldrb	r1, [r3, #5]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007166:	b292      	uxth	r2, r2
 8007168:	9202      	str	r2, [sp, #8]
 800716a:	2200      	movs	r2, #0
 800716c:	9201      	str	r2, [sp, #4]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	4603      	mov	r3, r0
 8007172:	2200      	movs	r2, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 f8d3 	bl	8008320 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800717a:	e175      	b.n	8007468 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b03      	cmp	r3, #3
 8007180:	f040 8172 	bne.w	8007468 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800718a:	3301      	adds	r3, #1
 800718c:	b2da      	uxtb	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800719a:	2b03      	cmp	r3, #3
 800719c:	d903      	bls.n	80071a6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	220d      	movs	r2, #13
 80071a2:	701a      	strb	r2, [r3, #0]
      break;
 80071a4:	e160      	b.n	8007468 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	795b      	ldrb	r3, [r3, #5]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f907 	bl	80083c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	791b      	ldrb	r3, [r3, #4]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f901 	bl	80083c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
      break;
 80071c4:	e150      	b.n	8007468 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80071c6:	2112      	movs	r1, #18
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9f1 	bl	80075b0 <USBH_Get_DevDesc>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071de:	e145      	b.n	800746c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	f040 8142 	bne.w	800746c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ee:	3301      	adds	r3, #1
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d903      	bls.n	800720a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	220d      	movs	r2, #13
 8007206:	701a      	strb	r2, [r3, #0]
      break;
 8007208:	e130      	b.n	800746c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	795b      	ldrb	r3, [r3, #5]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 f8d5 	bl	80083c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	791b      	ldrb	r3, [r3, #4]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 f8cf 	bl	80083c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
      break;
 800722e:	e11d      	b.n	800746c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007230:	2101      	movs	r1, #1
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa7b 	bl	800772e <USBH_SetAddress>
 8007238:	4603      	mov	r3, r0
 800723a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d132      	bne.n	80072a8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007242:	2002      	movs	r0, #2
 8007244:	f001 fbb5 	bl	80089b2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2203      	movs	r2, #3
 8007254:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7919      	ldrb	r1, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800726a:	b292      	uxth	r2, r2
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	9201      	str	r2, [sp, #4]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4603      	mov	r3, r0
 8007276:	2280      	movs	r2, #128	; 0x80
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f851 	bl	8008320 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7959      	ldrb	r1, [r3, #5]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007292:	b292      	uxth	r2, r2
 8007294:	9202      	str	r2, [sp, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	9201      	str	r2, [sp, #4]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4603      	mov	r3, r0
 800729e:	2200      	movs	r2, #0
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f83d 	bl	8008320 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072a6:	e0e3      	b.n	8007470 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	f040 80e0 	bne.w	8007470 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	220d      	movs	r2, #13
 80072b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	705a      	strb	r2, [r3, #1]
      break;
 80072bc:	e0d8      	b.n	8007470 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80072be:	2109      	movs	r1, #9
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f9a1 	bl	8007608 <USBH_Get_CfgDesc>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d103      	bne.n	80072d8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2204      	movs	r2, #4
 80072d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072d6:	e0cd      	b.n	8007474 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	f040 80ca 	bne.w	8007474 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072e6:	3301      	adds	r3, #1
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d903      	bls.n	8007302 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	220d      	movs	r2, #13
 80072fe:	701a      	strb	r2, [r3, #0]
      break;
 8007300:	e0b8      	b.n	8007474 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	795b      	ldrb	r3, [r3, #5]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f859 	bl	80083c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	791b      	ldrb	r3, [r3, #4]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 f853 	bl	80083c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
      break;
 8007326:	e0a5      	b.n	8007474 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f969 	bl	8007608 <USBH_Get_CfgDesc>
 8007336:	4603      	mov	r3, r0
 8007338:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2205      	movs	r2, #5
 8007344:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007346:	e097      	b.n	8007478 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b03      	cmp	r3, #3
 800734c:	f040 8094 	bne.w	8007478 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007356:	3301      	adds	r3, #1
 8007358:	b2da      	uxtb	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007366:	2b03      	cmp	r3, #3
 8007368:	d903      	bls.n	8007372 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	220d      	movs	r2, #13
 800736e:	701a      	strb	r2, [r3, #0]
      break;
 8007370:	e082      	b.n	8007478 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	795b      	ldrb	r3, [r3, #5]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 f821 	bl	80083c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	791b      	ldrb	r3, [r3, #4]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f81b 	bl	80083c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
      break;
 8007396:	e06f      	b.n	8007478 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d019      	beq.n	80073d6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073ae:	23ff      	movs	r3, #255	; 0xff
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f953 	bl	800765c <USBH_Get_StringDesc>
 80073b6:	4603      	mov	r3, r0
 80073b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d103      	bne.n	80073c8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2206      	movs	r2, #6
 80073c4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073c6:	e059      	b.n	800747c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d156      	bne.n	800747c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2206      	movs	r2, #6
 80073d2:	705a      	strb	r2, [r3, #1]
      break;
 80073d4:	e052      	b.n	800747c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2206      	movs	r2, #6
 80073da:	705a      	strb	r2, [r3, #1]
      break;
 80073dc:	e04e      	b.n	800747c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d019      	beq.n	800741c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073f4:	23ff      	movs	r3, #255	; 0xff
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f930 	bl	800765c <USBH_Get_StringDesc>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d103      	bne.n	800740e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2207      	movs	r2, #7
 800740a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800740c:	e038      	b.n	8007480 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b03      	cmp	r3, #3
 8007412:	d135      	bne.n	8007480 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2207      	movs	r2, #7
 8007418:	705a      	strb	r2, [r3, #1]
      break;
 800741a:	e031      	b.n	8007480 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2207      	movs	r2, #7
 8007420:	705a      	strb	r2, [r3, #1]
      break;
 8007422:	e02d      	b.n	8007480 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800742a:	2b00      	cmp	r3, #0
 800742c:	d017      	beq.n	800745e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800743a:	23ff      	movs	r3, #255	; 0xff
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f90d 	bl	800765c <USBH_Get_StringDesc>
 8007442:	4603      	mov	r3, r0
 8007444:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007450:	e018      	b.n	8007484 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d115      	bne.n	8007484 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
      break;
 800745c:	e012      	b.n	8007484 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
      break;
 8007462:	e00f      	b.n	8007484 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007464:	bf00      	nop
 8007466:	e00e      	b.n	8007486 <USBH_HandleEnum+0x3be>
      break;
 8007468:	bf00      	nop
 800746a:	e00c      	b.n	8007486 <USBH_HandleEnum+0x3be>
      break;
 800746c:	bf00      	nop
 800746e:	e00a      	b.n	8007486 <USBH_HandleEnum+0x3be>
      break;
 8007470:	bf00      	nop
 8007472:	e008      	b.n	8007486 <USBH_HandleEnum+0x3be>
      break;
 8007474:	bf00      	nop
 8007476:	e006      	b.n	8007486 <USBH_HandleEnum+0x3be>
      break;
 8007478:	bf00      	nop
 800747a:	e004      	b.n	8007486 <USBH_HandleEnum+0x3be>
      break;
 800747c:	bf00      	nop
 800747e:	e002      	b.n	8007486 <USBH_HandleEnum+0x3be>
      break;
 8007480:	bf00      	nop
 8007482:	e000      	b.n	8007486 <USBH_HandleEnum+0x3be>
      break;
 8007484:	bf00      	nop
  }
  return Status;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f804 	bl	80074d2 <USBH_HandleSof>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b0b      	cmp	r3, #11
 80074e2:	d10a      	bne.n	80074fa <USBH_HandleSof+0x28>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
  }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007512:	bf00      	nop
}
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800752e:	bf00      	nop
}
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 f8c6 	bl	800871a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	791b      	ldrb	r3, [r3, #4]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 ff13 	bl	80083c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	795b      	ldrb	r3, [r3, #5]
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 ff0d 	bl	80083c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c2:	d901      	bls.n	80075c8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e01b      	b.n	8007600 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80075ce:	887b      	ldrh	r3, [r7, #2]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075d8:	2100      	movs	r1, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f872 	bl	80076c4 <USBH_GetDescriptor>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075f0:	887a      	ldrh	r2, [r7, #2]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f929 	bl	800784c <USBH_ParseDevDesc>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af02      	add	r7, sp, #8
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	331c      	adds	r3, #28
 8007618:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800761a:	887b      	ldrh	r3, [r7, #2]
 800761c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007620:	d901      	bls.n	8007626 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007622:	2303      	movs	r3, #3
 8007624:	e016      	b.n	8007654 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007626:	887b      	ldrh	r3, [r7, #2]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007630:	2100      	movs	r1, #0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f846 	bl	80076c4 <USBH_GetDescriptor>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d107      	bne.n	8007652 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007642:	887b      	ldrh	r3, [r7, #2]
 8007644:	461a      	mov	r2, r3
 8007646:	68b9      	ldr	r1, [r7, #8]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f9b3 	bl	80079b4 <USBH_ParseCfgDesc>
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	461a      	mov	r2, r3
 8007668:	460b      	mov	r3, r1
 800766a:	72fb      	strb	r3, [r7, #11]
 800766c:	4613      	mov	r3, r2
 800766e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007670:	893b      	ldrh	r3, [r7, #8]
 8007672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007676:	d802      	bhi.n	800767e <USBH_Get_StringDesc+0x22>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800767e:	2303      	movs	r3, #3
 8007680:	e01c      	b.n	80076bc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800768a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007692:	893b      	ldrh	r3, [r7, #8]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	460b      	mov	r3, r1
 8007698:	2100      	movs	r1, #0
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 f812 	bl	80076c4 <USBH_GetDescriptor>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d107      	bne.n	80076ba <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076b0:	893a      	ldrh	r2, [r7, #8]
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fb93 	bl	8007de0 <USBH_ParseStringDesc>
  }

  return status;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	72fb      	strb	r3, [r7, #11]
 80076d2:	4613      	mov	r3, r2
 80076d4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	789b      	ldrb	r3, [r3, #2]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d11c      	bne.n	8007718 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2206      	movs	r2, #6
 80076ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	893a      	ldrh	r2, [r7, #8]
 80076f4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80076f6:	893b      	ldrh	r3, [r7, #8]
 80076f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007700:	d104      	bne.n	800770c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f240 4209 	movw	r2, #1033	; 0x409
 8007708:	829a      	strh	r2, [r3, #20]
 800770a:	e002      	b.n	8007712 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8b3a      	ldrh	r2, [r7, #24]
 8007716:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007718:	8b3b      	ldrh	r3, [r7, #24]
 800771a:	461a      	mov	r2, r3
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fbac 	bl	8007e7c <USBH_CtlReq>
 8007724:	4603      	mov	r3, r0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	789b      	ldrb	r3, [r3, #2]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10f      	bne.n	8007762 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2205      	movs	r2, #5
 800774c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	b29a      	uxth	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fb88 	bl	8007e7c <USBH_CtlReq>
 800776c:	4603      	mov	r3, r0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	789b      	ldrb	r3, [r3, #2]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d10e      	bne.n	80077a8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2209      	movs	r2, #9
 8007794:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	887a      	ldrh	r2, [r7, #2]
 800779a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077a8:	2200      	movs	r2, #0
 80077aa:	2100      	movs	r1, #0
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fb65 	bl	8007e7c <USBH_CtlReq>
 80077b2:	4603      	mov	r3, r0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	789b      	ldrb	r3, [r3, #2]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d10f      	bne.n	80077f0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2203      	movs	r2, #3
 80077da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077f0:	2200      	movs	r2, #0
 80077f2:	2100      	movs	r1, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb41 	bl	8007e7c <USBH_CtlReq>
 80077fa:	4603      	mov	r3, r0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	789b      	ldrb	r3, [r3, #2]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d10f      	bne.n	8007838 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	b29a      	uxth	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007838:	2200      	movs	r2, #0
 800783a:	2100      	movs	r1, #0
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fb1d 	bl	8007e7c <USBH_CtlReq>
 8007842:	4603      	mov	r3, r0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007860:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800786c:	2302      	movs	r3, #2
 800786e:	e098      	b.n	80079a2 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	781a      	ldrb	r2, [r3, #0]
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	785a      	ldrb	r2, [r3, #1]
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	3302      	adds	r3, #2
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	b29a      	uxth	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	3303      	adds	r3, #3
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	b29b      	uxth	r3, r3
 8007894:	4313      	orrs	r3, r2
 8007896:	b29a      	uxth	r2, r3
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	791a      	ldrb	r2, [r3, #4]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	795a      	ldrb	r2, [r3, #5]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	799a      	ldrb	r2, [r3, #6]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	79da      	ldrb	r2, [r3, #7]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d004      	beq.n	80078d0 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d11b      	bne.n	8007908 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	79db      	ldrb	r3, [r3, #7]
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	dc0f      	bgt.n	80078f8 <USBH_ParseDevDesc+0xac>
 80078d8:	2b08      	cmp	r3, #8
 80078da:	db0f      	blt.n	80078fc <USBH_ParseDevDesc+0xb0>
 80078dc:	3b08      	subs	r3, #8
 80078de:	4a34      	ldr	r2, [pc, #208]	; (80079b0 <USBH_ParseDevDesc+0x164>)
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf14      	ite	ne
 80078ec:	2301      	movne	r3, #1
 80078ee:	2300      	moveq	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <USBH_ParseDevDesc+0xb8>
 80078f6:	e001      	b.n	80078fc <USBH_ParseDevDesc+0xb0>
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d003      	beq.n	8007904 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2208      	movs	r2, #8
 8007900:	71da      	strb	r2, [r3, #7]
        break;
 8007902:	e000      	b.n	8007906 <USBH_ParseDevDesc+0xba>
        break;
 8007904:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007906:	e00e      	b.n	8007926 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800790e:	2b02      	cmp	r3, #2
 8007910:	d107      	bne.n	8007922 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	79db      	ldrb	r3, [r3, #7]
 8007916:	2b08      	cmp	r3, #8
 8007918:	d005      	beq.n	8007926 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2208      	movs	r2, #8
 800791e:	71da      	strb	r2, [r3, #7]
 8007920:	e001      	b.n	8007926 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007922:	2303      	movs	r3, #3
 8007924:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	2b08      	cmp	r3, #8
 800792a:	d939      	bls.n	80079a0 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3308      	adds	r3, #8
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b29a      	uxth	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3309      	adds	r3, #9
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	b29b      	uxth	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b29a      	uxth	r2, r3
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	330a      	adds	r3, #10
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	b29a      	uxth	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	330b      	adds	r3, #11
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	b29b      	uxth	r3, r3
 800795c:	4313      	orrs	r3, r2
 800795e:	b29a      	uxth	r2, r3
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	330c      	adds	r3, #12
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	330d      	adds	r3, #13
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	b29b      	uxth	r3, r3
 8007978:	4313      	orrs	r3, r2
 800797a:	b29a      	uxth	r2, r3
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	7b9a      	ldrb	r2, [r3, #14]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	7bda      	ldrb	r2, [r3, #15]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	7c1a      	ldrb	r2, [r3, #16]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	7c5a      	ldrb	r2, [r3, #17]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	01000101 	.word	0x01000101

080079b4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08c      	sub	sp, #48	; 0x30
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079c8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80079e2:	2302      	movs	r3, #2
 80079e4:	e0db      	b.n	8007b9e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	781a      	ldrb	r2, [r3, #0]
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	785a      	ldrb	r2, [r3, #1]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	3302      	adds	r3, #2
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	3303      	adds	r3, #3
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	021b      	lsls	r3, r3, #8
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a16:	bf28      	it	cs
 8007a18:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	791a      	ldrb	r2, [r3, #4]
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	795a      	ldrb	r2, [r3, #5]
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	799a      	ldrb	r2, [r3, #6]
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	79da      	ldrb	r2, [r3, #7]
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	7a1a      	ldrb	r2, [r3, #8]
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b09      	cmp	r3, #9
 8007a50:	d002      	beq.n	8007a58 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	2209      	movs	r2, #9
 8007a56:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	2b09      	cmp	r3, #9
 8007a5c:	f240 809d 	bls.w	8007b9a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a60:	2309      	movs	r3, #9
 8007a62:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a68:	e081      	b.n	8007b6e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a6a:	f107 0316 	add.w	r3, r7, #22
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a72:	f000 f9e8 	bl	8007e46 <USBH_GetNextDesc>
 8007a76:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d176      	bne.n	8007b6e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b09      	cmp	r3, #9
 8007a86:	d002      	beq.n	8007a8e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	2209      	movs	r2, #9
 8007a8c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a92:	221a      	movs	r2, #26
 8007a94:	fb02 f303 	mul.w	r3, r2, r3
 8007a98:	3308      	adds	r3, #8
 8007a9a:	6a3a      	ldr	r2, [r7, #32]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aa4:	69f8      	ldr	r0, [r7, #28]
 8007aa6:	f000 f87e 	bl	8007ba6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ab4:	e043      	b.n	8007b3e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ab6:	f107 0316 	add.w	r3, r7, #22
 8007aba:	4619      	mov	r1, r3
 8007abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007abe:	f000 f9c2 	bl	8007e46 <USBH_GetNextDesc>
 8007ac2:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	d138      	bne.n	8007b3e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	795b      	ldrb	r3, [r3, #5]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d113      	bne.n	8007afc <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d003      	beq.n	8007ae4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	799b      	ldrb	r3, [r3, #6]
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d10b      	bne.n	8007afc <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	79db      	ldrb	r3, [r3, #7]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <USBH_ParseCfgDesc+0x150>
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d007      	beq.n	8007b04 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	2209      	movs	r2, #9
 8007af8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007afa:	e003      	b.n	8007b04 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	2207      	movs	r2, #7
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e000      	b.n	8007b06 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b04:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b0e:	3201      	adds	r2, #1
 8007b10:	00d2      	lsls	r2, r2, #3
 8007b12:	211a      	movs	r1, #26
 8007b14:	fb01 f303 	mul.w	r3, r1, r3
 8007b18:	4413      	add	r3, r2
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	6a3a      	ldr	r2, [r7, #32]
 8007b1e:	4413      	add	r3, r2
 8007b20:	3304      	adds	r3, #4
 8007b22:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b26:	69b9      	ldr	r1, [r7, #24]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f870 	bl	8007c0e <USBH_ParseEPDesc>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b38:	3301      	adds	r3, #1
 8007b3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	791b      	ldrb	r3, [r3, #4]
 8007b42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d204      	bcs.n	8007b54 <USBH_ParseCfgDesc+0x1a0>
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	885a      	ldrh	r2, [r3, #2]
 8007b4e:	8afb      	ldrh	r3, [r7, #22]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d8b0      	bhi.n	8007ab6 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	791b      	ldrb	r3, [r3, #4]
 8007b58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d201      	bcs.n	8007b64 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e01c      	b.n	8007b9e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8007b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b68:	3301      	adds	r3, #1
 8007b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d805      	bhi.n	8007b82 <USBH_ParseCfgDesc+0x1ce>
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	885a      	ldrh	r2, [r3, #2]
 8007b7a:	8afb      	ldrh	r3, [r7, #22]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	f63f af74 	bhi.w	8007a6a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	791b      	ldrb	r3, [r3, #4]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	bf28      	it	cs
 8007b8a:	2302      	movcs	r3, #2
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d201      	bcs.n	8007b9a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e001      	b.n	8007b9e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8007b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3730      	adds	r7, #48	; 0x30
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	785a      	ldrb	r2, [r3, #1]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	789a      	ldrb	r2, [r3, #2]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	78da      	ldrb	r2, [r3, #3]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	bf28      	it	cs
 8007bda:	2302      	movcs	r3, #2
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	795a      	ldrb	r2, [r3, #5]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	799a      	ldrb	r2, [r3, #6]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	79da      	ldrb	r2, [r3, #7]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	7a1a      	ldrb	r2, [r3, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	721a      	strb	r2, [r3, #8]
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b087      	sub	sp, #28
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	781a      	ldrb	r2, [r3, #0]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	785a      	ldrb	r2, [r3, #1]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	789a      	ldrb	r2, [r3, #2]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	78da      	ldrb	r2, [r3, #3]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3304      	adds	r3, #4
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3305      	adds	r3, #5
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	021b      	lsls	r3, r3, #8
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	4313      	orrs	r3, r2
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	799a      	ldrb	r2, [r3, #6]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	889b      	ldrh	r3, [r3, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d009      	beq.n	8007c7e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c72:	d804      	bhi.n	8007c7e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7c:	d901      	bls.n	8007c82 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d136      	bne.n	8007cfa <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	78db      	ldrb	r3, [r3, #3]
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d108      	bne.n	8007caa <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	889b      	ldrh	r3, [r3, #4]
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca0:	f240 8097 	bls.w	8007dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	75fb      	strb	r3, [r7, #23]
 8007ca8:	e093      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	78db      	ldrb	r3, [r3, #3]
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d107      	bne.n	8007cc6 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	889b      	ldrh	r3, [r3, #4]
 8007cba:	2b40      	cmp	r3, #64	; 0x40
 8007cbc:	f240 8089 	bls.w	8007dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	75fb      	strb	r3, [r7, #23]
 8007cc4:	e085      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	78db      	ldrb	r3, [r3, #3]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d005      	beq.n	8007cde <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	78db      	ldrb	r3, [r3, #3]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d10a      	bne.n	8007cf4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	799b      	ldrb	r3, [r3, #6]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <USBH_ParseEPDesc+0xe0>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	799b      	ldrb	r3, [r3, #6]
 8007cea:	2b10      	cmp	r3, #16
 8007cec:	d970      	bls.n	8007dd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cf2:	e06d      	b.n	8007dd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	75fb      	strb	r3, [r7, #23]
 8007cf8:	e06b      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d13c      	bne.n	8007d7e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	78db      	ldrb	r3, [r3, #3]
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d005      	beq.n	8007d1c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	78db      	ldrb	r3, [r3, #3]
 8007d14:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d106      	bne.n	8007d2a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	889b      	ldrh	r3, [r3, #4]
 8007d20:	2b40      	cmp	r3, #64	; 0x40
 8007d22:	d956      	bls.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007d24:	2303      	movs	r3, #3
 8007d26:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007d28:	e053      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d10e      	bne.n	8007d54 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	799b      	ldrb	r3, [r3, #6]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d007      	beq.n	8007d4e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d803      	bhi.n	8007d4e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d941      	bls.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	75fb      	strb	r3, [r7, #23]
 8007d52:	e03e      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	78db      	ldrb	r3, [r3, #3]
 8007d58:	f003 0303 	and.w	r3, r3, #3
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d10b      	bne.n	8007d78 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	799b      	ldrb	r3, [r3, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <USBH_ParseEPDesc+0x164>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	889b      	ldrh	r3, [r3, #4]
 8007d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d70:	d32f      	bcc.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007d72:	2303      	movs	r3, #3
 8007d74:	75fb      	strb	r3, [r7, #23]
 8007d76:	e02c      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	75fb      	strb	r3, [r7, #23]
 8007d7c:	e029      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d120      	bne.n	8007dca <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	78db      	ldrb	r3, [r3, #3]
 8007d8c:	f003 0303 	and.w	r3, r3, #3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d106      	bne.n	8007da2 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	889b      	ldrh	r3, [r3, #4]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d01a      	beq.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	75fb      	strb	r3, [r7, #23]
 8007da0:	e017      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	78db      	ldrb	r3, [r3, #3]
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d10a      	bne.n	8007dc4 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	799b      	ldrb	r3, [r3, #6]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <USBH_ParseEPDesc+0x1b0>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	889b      	ldrh	r3, [r3, #4]
 8007dba:	2b08      	cmp	r3, #8
 8007dbc:	d909      	bls.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	75fb      	strb	r3, [r7, #23]
 8007dc2:	e006      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	75fb      	strb	r3, [r7, #23]
 8007dc8:	e003      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	75fb      	strb	r3, [r7, #23]
 8007dce:	e000      	b.n	8007dd2 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007dd0:	bf00      	nop
  }

  return status;
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	371c      	adds	r7, #28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	4613      	mov	r3, r2
 8007dec:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d120      	bne.n	8007e3a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	1e9a      	subs	r2, r3, #2
 8007dfe:	88fb      	ldrh	r3, [r7, #6]
 8007e00:	4293      	cmp	r3, r2
 8007e02:	bf28      	it	cs
 8007e04:	4613      	movcs	r3, r2
 8007e06:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3302      	adds	r3, #2
 8007e0c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007e0e:	2300      	movs	r3, #0
 8007e10:	82fb      	strh	r3, [r7, #22]
 8007e12:	e00b      	b.n	8007e2c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007e14:	8afb      	ldrh	r3, [r7, #22]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007e26:	8afb      	ldrh	r3, [r7, #22]
 8007e28:	3302      	adds	r3, #2
 8007e2a:	82fb      	strh	r3, [r7, #22]
 8007e2c:	8afa      	ldrh	r2, [r7, #22]
 8007e2e:	8abb      	ldrh	r3, [r7, #20]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d3ef      	bcc.n	8007e14 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	371c      	adds	r7, #28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	881a      	ldrh	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	789b      	ldrb	r3, [r3, #2]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d002      	beq.n	8007e9c <USBH_CtlReq+0x20>
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d00f      	beq.n	8007eba <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e9a:	e027      	b.n	8007eec <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb8:	e018      	b.n	8007eec <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f81c 	bl	8007ef8 <USBH_HandleControl>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <USBH_CtlReq+0x54>
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d106      	bne.n	8007ede <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	761a      	strb	r2, [r3, #24]
      break;
 8007edc:	e005      	b.n	8007eea <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d102      	bne.n	8007eea <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	709a      	strb	r2, [r3, #2]
      break;
 8007eea:	bf00      	nop
  }
  return status;
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f00:	2301      	movs	r3, #1
 8007f02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7e1b      	ldrb	r3, [r3, #24]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	2b0a      	cmp	r3, #10
 8007f10:	f200 8156 	bhi.w	80081c0 <USBH_HandleControl+0x2c8>
 8007f14:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <USBH_HandleControl+0x24>)
 8007f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1a:	bf00      	nop
 8007f1c:	08007f49 	.word	0x08007f49
 8007f20:	08007f63 	.word	0x08007f63
 8007f24:	08007fcd 	.word	0x08007fcd
 8007f28:	08007ff3 	.word	0x08007ff3
 8007f2c:	0800802b 	.word	0x0800802b
 8007f30:	08008055 	.word	0x08008055
 8007f34:	080080a7 	.word	0x080080a7
 8007f38:	080080c9 	.word	0x080080c9
 8007f3c:	08008105 	.word	0x08008105
 8007f40:	0800812b 	.word	0x0800812b
 8007f44:	08008169 	.word	0x08008169
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f103 0110 	add.w	r1, r3, #16
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	795b      	ldrb	r3, [r3, #5]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f943 	bl	80081e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	761a      	strb	r2, [r3, #24]
      break;
 8007f60:	e139      	b.n	80081d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	795b      	ldrb	r3, [r3, #5]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fcc5 	bl	80088f8 <USBH_LL_GetURBState>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d11e      	bne.n	8007fb6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	7c1b      	ldrb	r3, [r3, #16]
 8007f7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	8adb      	ldrh	r3, [r3, #22]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f8a:	7b7b      	ldrb	r3, [r7, #13]
 8007f8c:	2b80      	cmp	r3, #128	; 0x80
 8007f8e:	d103      	bne.n	8007f98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2203      	movs	r2, #3
 8007f94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f96:	e115      	b.n	80081c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	761a      	strb	r2, [r3, #24]
      break;
 8007f9e:	e111      	b.n	80081c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007fa0:	7b7b      	ldrb	r3, [r7, #13]
 8007fa2:	2b80      	cmp	r3, #128	; 0x80
 8007fa4:	d103      	bne.n	8007fae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2209      	movs	r2, #9
 8007faa:	761a      	strb	r2, [r3, #24]
      break;
 8007fac:	e10a      	b.n	80081c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2207      	movs	r2, #7
 8007fb2:	761a      	strb	r2, [r3, #24]
      break;
 8007fb4:	e106      	b.n	80081c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d003      	beq.n	8007fc4 <USBH_HandleControl+0xcc>
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	f040 8100 	bne.w	80081c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	220b      	movs	r2, #11
 8007fc8:	761a      	strb	r2, [r3, #24]
      break;
 8007fca:	e0fb      	b.n	80081c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6899      	ldr	r1, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	899a      	ldrh	r2, [r3, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	791b      	ldrb	r3, [r3, #4]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f93a 	bl	800825e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2204      	movs	r2, #4
 8007fee:	761a      	strb	r2, [r3, #24]
      break;
 8007ff0:	e0f1      	b.n	80081d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fc7d 	bl	80088f8 <USBH_LL_GetURBState>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d102      	bne.n	800800e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2209      	movs	r2, #9
 800800c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b05      	cmp	r3, #5
 8008012:	d102      	bne.n	800801a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008014:	2303      	movs	r3, #3
 8008016:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008018:	e0d6      	b.n	80081c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b04      	cmp	r3, #4
 800801e:	f040 80d3 	bne.w	80081c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	220b      	movs	r2, #11
 8008026:	761a      	strb	r2, [r3, #24]
      break;
 8008028:	e0ce      	b.n	80081c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6899      	ldr	r1, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	899a      	ldrh	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	795b      	ldrb	r3, [r3, #5]
 8008036:	2001      	movs	r0, #1
 8008038:	9000      	str	r0, [sp, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f8ea 	bl	8008214 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008046:	b29a      	uxth	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2206      	movs	r2, #6
 8008050:	761a      	strb	r2, [r3, #24]
      break;
 8008052:	e0c0      	b.n	80081d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	795b      	ldrb	r3, [r3, #5]
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fc4c 	bl	80088f8 <USBH_LL_GetURBState>
 8008060:	4603      	mov	r3, r0
 8008062:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d103      	bne.n	8008072 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2207      	movs	r2, #7
 800806e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008070:	e0ac      	b.n	80081cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b05      	cmp	r3, #5
 8008076:	d105      	bne.n	8008084 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	220c      	movs	r2, #12
 800807c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800807e:	2303      	movs	r3, #3
 8008080:	73fb      	strb	r3, [r7, #15]
      break;
 8008082:	e0a3      	b.n	80081cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b02      	cmp	r3, #2
 8008088:	d103      	bne.n	8008092 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2205      	movs	r2, #5
 800808e:	761a      	strb	r2, [r3, #24]
      break;
 8008090:	e09c      	b.n	80081cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	2b04      	cmp	r3, #4
 8008096:	f040 8099 	bne.w	80081cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	220b      	movs	r2, #11
 800809e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80080a0:	2302      	movs	r3, #2
 80080a2:	73fb      	strb	r3, [r7, #15]
      break;
 80080a4:	e092      	b.n	80081cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	791b      	ldrb	r3, [r3, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	2100      	movs	r1, #0
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f8d5 	bl	800825e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2208      	movs	r2, #8
 80080c4:	761a      	strb	r2, [r3, #24]

      break;
 80080c6:	e086      	b.n	80081d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	791b      	ldrb	r3, [r3, #4]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fc12 	bl	80088f8 <USBH_LL_GetURBState>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d105      	bne.n	80080ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	220d      	movs	r2, #13
 80080e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080e8:	e072      	b.n	80081d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d103      	bne.n	80080f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	220b      	movs	r2, #11
 80080f4:	761a      	strb	r2, [r3, #24]
      break;
 80080f6:	e06b      	b.n	80081d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d168      	bne.n	80081d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80080fe:	2303      	movs	r3, #3
 8008100:	73fb      	strb	r3, [r7, #15]
      break;
 8008102:	e065      	b.n	80081d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	795b      	ldrb	r3, [r3, #5]
 8008108:	2201      	movs	r2, #1
 800810a:	9200      	str	r2, [sp, #0]
 800810c:	2200      	movs	r2, #0
 800810e:	2100      	movs	r1, #0
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f87f 	bl	8008214 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	220a      	movs	r2, #10
 8008126:	761a      	strb	r2, [r3, #24]
      break;
 8008128:	e055      	b.n	80081d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	795b      	ldrb	r3, [r3, #5]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fbe1 	bl	80088f8 <USBH_LL_GetURBState>
 8008136:	4603      	mov	r3, r0
 8008138:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d105      	bne.n	800814c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	220d      	movs	r2, #13
 8008148:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800814a:	e043      	b.n	80081d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d103      	bne.n	800815a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2209      	movs	r2, #9
 8008156:	761a      	strb	r2, [r3, #24]
      break;
 8008158:	e03c      	b.n	80081d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b04      	cmp	r3, #4
 800815e:	d139      	bne.n	80081d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	220b      	movs	r2, #11
 8008164:	761a      	strb	r2, [r3, #24]
      break;
 8008166:	e035      	b.n	80081d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7e5b      	ldrb	r3, [r3, #25]
 800816c:	3301      	adds	r3, #1
 800816e:	b2da      	uxtb	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	765a      	strb	r2, [r3, #25]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7e5b      	ldrb	r3, [r3, #25]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d806      	bhi.n	800818a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008188:	e025      	b.n	80081d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008190:	2106      	movs	r1, #6
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	795b      	ldrb	r3, [r3, #5]
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f90c 	bl	80083c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	791b      	ldrb	r3, [r3, #4]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f906 	bl	80083c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081ba:	2302      	movs	r3, #2
 80081bc:	73fb      	strb	r3, [r7, #15]
      break;
 80081be:	e00a      	b.n	80081d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80081c0:	bf00      	nop
 80081c2:	e008      	b.n	80081d6 <USBH_HandleControl+0x2de>
      break;
 80081c4:	bf00      	nop
 80081c6:	e006      	b.n	80081d6 <USBH_HandleControl+0x2de>
      break;
 80081c8:	bf00      	nop
 80081ca:	e004      	b.n	80081d6 <USBH_HandleControl+0x2de>
      break;
 80081cc:	bf00      	nop
 80081ce:	e002      	b.n	80081d6 <USBH_HandleControl+0x2de>
      break;
 80081d0:	bf00      	nop
 80081d2:	e000      	b.n	80081d6 <USBH_HandleControl+0x2de>
      break;
 80081d4:	bf00      	nop
  }

  return status;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af04      	add	r7, sp, #16
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4613      	mov	r3, r2
 80081ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081ee:	79f9      	ldrb	r1, [r7, #7]
 80081f0:	2300      	movs	r3, #0
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	2308      	movs	r3, #8
 80081f6:	9302      	str	r3, [sp, #8]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	2300      	movs	r3, #0
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	2300      	movs	r3, #0
 8008202:	2200      	movs	r2, #0
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fb46 	bl	8008896 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af04      	add	r7, sp, #16
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4611      	mov	r1, r2
 8008220:	461a      	mov	r2, r3
 8008222:	460b      	mov	r3, r1
 8008224:	80fb      	strh	r3, [r7, #6]
 8008226:	4613      	mov	r3, r2
 8008228:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008238:	7979      	ldrb	r1, [r7, #5]
 800823a:	7e3b      	ldrb	r3, [r7, #24]
 800823c:	9303      	str	r3, [sp, #12]
 800823e:	88fb      	ldrh	r3, [r7, #6]
 8008240:	9302      	str	r3, [sp, #8]
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	2301      	movs	r3, #1
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	2300      	movs	r3, #0
 800824c:	2200      	movs	r2, #0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fb21 	bl	8008896 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b088      	sub	sp, #32
 8008262:	af04      	add	r7, sp, #16
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	4611      	mov	r1, r2
 800826a:	461a      	mov	r2, r3
 800826c:	460b      	mov	r3, r1
 800826e:	80fb      	strh	r3, [r7, #6]
 8008270:	4613      	mov	r3, r2
 8008272:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008274:	7979      	ldrb	r1, [r7, #5]
 8008276:	2300      	movs	r3, #0
 8008278:	9303      	str	r3, [sp, #12]
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	2301      	movs	r3, #1
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2300      	movs	r3, #0
 8008288:	2201      	movs	r2, #1
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 fb03 	bl	8008896 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008290:	2300      	movs	r3, #0

}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b088      	sub	sp, #32
 800829e:	af04      	add	r7, sp, #16
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	4611      	mov	r1, r2
 80082a6:	461a      	mov	r2, r3
 80082a8:	460b      	mov	r3, r1
 80082aa:	80fb      	strh	r3, [r7, #6]
 80082ac:	4613      	mov	r3, r2
 80082ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082be:	7979      	ldrb	r1, [r7, #5]
 80082c0:	7e3b      	ldrb	r3, [r7, #24]
 80082c2:	9303      	str	r3, [sp, #12]
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	9302      	str	r3, [sp, #8]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	9301      	str	r3, [sp, #4]
 80082cc:	2301      	movs	r3, #1
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	2302      	movs	r3, #2
 80082d2:	2200      	movs	r2, #0
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 fade 	bl	8008896 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af04      	add	r7, sp, #16
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	4611      	mov	r1, r2
 80082f0:	461a      	mov	r2, r3
 80082f2:	460b      	mov	r3, r1
 80082f4:	80fb      	strh	r3, [r7, #6]
 80082f6:	4613      	mov	r3, r2
 80082f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082fa:	7979      	ldrb	r1, [r7, #5]
 80082fc:	2300      	movs	r3, #0
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	2301      	movs	r3, #1
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2302      	movs	r3, #2
 800830e:	2201      	movs	r2, #1
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fac0 	bl	8008896 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af04      	add	r7, sp, #16
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	4608      	mov	r0, r1
 800832a:	4611      	mov	r1, r2
 800832c:	461a      	mov	r2, r3
 800832e:	4603      	mov	r3, r0
 8008330:	70fb      	strb	r3, [r7, #3]
 8008332:	460b      	mov	r3, r1
 8008334:	70bb      	strb	r3, [r7, #2]
 8008336:	4613      	mov	r3, r2
 8008338:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800833a:	7878      	ldrb	r0, [r7, #1]
 800833c:	78ba      	ldrb	r2, [r7, #2]
 800833e:	78f9      	ldrb	r1, [r7, #3]
 8008340:	8b3b      	ldrh	r3, [r7, #24]
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	7d3b      	ldrb	r3, [r7, #20]
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	7c3b      	ldrb	r3, [r7, #16]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	4603      	mov	r3, r0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa53 	bl	80087fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa72 	bl	8008858 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f836 	bl	80083fc <USBH_GetFreePipe>
 8008390:	4603      	mov	r3, r0
 8008392:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008394:	89fb      	ldrh	r3, [r7, #14]
 8008396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800839a:	4293      	cmp	r3, r2
 800839c:	d00a      	beq.n	80083b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	89fb      	ldrh	r3, [r7, #14]
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	33e0      	adds	r3, #224	; 0xe0
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	440b      	add	r3, r1
 80083b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083b4:	89fb      	ldrh	r3, [r7, #14]
 80083b6:	b2db      	uxtb	r3, r3
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	2b0f      	cmp	r3, #15
 80083d0:	d80d      	bhi.n	80083ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	33e0      	adds	r3, #224	; 0xe0
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	33e0      	adds	r3, #224	; 0xe0
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
 800840c:	e00f      	b.n	800842e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	33e0      	adds	r3, #224	; 0xe0
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	b29b      	uxth	r3, r3
 8008426:	e007      	b.n	8008438 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	3301      	adds	r3, #1
 800842c:	73fb      	strb	r3, [r7, #15]
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	2b0f      	cmp	r3, #15
 8008432:	d9ec      	bls.n	800840e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008434:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008448:	2201      	movs	r2, #1
 800844a:	490e      	ldr	r1, [pc, #56]	; (8008484 <MX_USB_HOST_Init+0x40>)
 800844c:	480e      	ldr	r0, [pc, #56]	; (8008488 <MX_USB_HOST_Init+0x44>)
 800844e:	f7fe fb05 	bl	8006a5c <USBH_Init>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008458:	f7f8 fbc0 	bl	8000bdc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800845c:	490b      	ldr	r1, [pc, #44]	; (800848c <MX_USB_HOST_Init+0x48>)
 800845e:	480a      	ldr	r0, [pc, #40]	; (8008488 <MX_USB_HOST_Init+0x44>)
 8008460:	f7fe fba9 	bl	8006bb6 <USBH_RegisterClass>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800846a:	f7f8 fbb7 	bl	8000bdc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800846e:	4806      	ldr	r0, [pc, #24]	; (8008488 <MX_USB_HOST_Init+0x44>)
 8008470:	f7fe fc2d 	bl	8006cce <USBH_Start>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800847a:	f7f8 fbaf 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800847e:	bf00      	nop
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	080084a5 	.word	0x080084a5
 8008488:	20015b64 	.word	0x20015b64
 800848c:	2000008c 	.word	0x2000008c

08008490 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008494:	4802      	ldr	r0, [pc, #8]	; (80084a0 <MX_USB_HOST_Process+0x10>)
 8008496:	f7fe fc2b 	bl	8006cf0 <USBH_Process>
}
 800849a:	bf00      	nop
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20015b64 	.word	0x20015b64

080084a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d819      	bhi.n	80084ec <USBH_UserProcess+0x48>
 80084b8:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <USBH_UserProcess+0x1c>)
 80084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084be:	bf00      	nop
 80084c0:	080084ed 	.word	0x080084ed
 80084c4:	080084dd 	.word	0x080084dd
 80084c8:	080084ed 	.word	0x080084ed
 80084cc:	080084e5 	.word	0x080084e5
 80084d0:	080084d5 	.word	0x080084d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80084d4:	4b09      	ldr	r3, [pc, #36]	; (80084fc <USBH_UserProcess+0x58>)
 80084d6:	2203      	movs	r2, #3
 80084d8:	701a      	strb	r2, [r3, #0]
  break;
 80084da:	e008      	b.n	80084ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80084dc:	4b07      	ldr	r3, [pc, #28]	; (80084fc <USBH_UserProcess+0x58>)
 80084de:	2202      	movs	r2, #2
 80084e0:	701a      	strb	r2, [r3, #0]
  break;
 80084e2:	e004      	b.n	80084ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80084e4:	4b05      	ldr	r3, [pc, #20]	; (80084fc <USBH_UserProcess+0x58>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	701a      	strb	r2, [r3, #0]
  break;
 80084ea:	e000      	b.n	80084ee <USBH_UserProcess+0x4a>

  default:
  break;
 80084ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20015f3c 	.word	0x20015f3c

08008500 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08a      	sub	sp, #40	; 0x28
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008508:	f107 0314 	add.w	r3, r7, #20
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	605a      	str	r2, [r3, #4]
 8008512:	609a      	str	r2, [r3, #8]
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008520:	d147      	bne.n	80085b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	4b25      	ldr	r3, [pc, #148]	; (80085bc <HAL_HCD_MspInit+0xbc>)
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	4a24      	ldr	r2, [pc, #144]	; (80085bc <HAL_HCD_MspInit+0xbc>)
 800852c:	f043 0301 	orr.w	r3, r3, #1
 8008530:	6313      	str	r3, [r2, #48]	; 0x30
 8008532:	4b22      	ldr	r3, [pc, #136]	; (80085bc <HAL_HCD_MspInit+0xbc>)
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800853e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008544:	2300      	movs	r3, #0
 8008546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008548:	2300      	movs	r3, #0
 800854a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800854c:	f107 0314 	add.w	r3, r7, #20
 8008550:	4619      	mov	r1, r3
 8008552:	481b      	ldr	r0, [pc, #108]	; (80085c0 <HAL_HCD_MspInit+0xc0>)
 8008554:	f7f8 ff1c 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008558:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800855c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800855e:	2302      	movs	r3, #2
 8008560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008562:	2300      	movs	r3, #0
 8008564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008566:	2303      	movs	r3, #3
 8008568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800856a:	230a      	movs	r3, #10
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800856e:	f107 0314 	add.w	r3, r7, #20
 8008572:	4619      	mov	r1, r3
 8008574:	4812      	ldr	r0, [pc, #72]	; (80085c0 <HAL_HCD_MspInit+0xc0>)
 8008576:	f7f8 ff0b 	bl	8001390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800857a:	4b10      	ldr	r3, [pc, #64]	; (80085bc <HAL_HCD_MspInit+0xbc>)
 800857c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857e:	4a0f      	ldr	r2, [pc, #60]	; (80085bc <HAL_HCD_MspInit+0xbc>)
 8008580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008584:	6353      	str	r3, [r2, #52]	; 0x34
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <HAL_HCD_MspInit+0xbc>)
 800858c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858e:	4a0b      	ldr	r2, [pc, #44]	; (80085bc <HAL_HCD_MspInit+0xbc>)
 8008590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008594:	6453      	str	r3, [r2, #68]	; 0x44
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <HAL_HCD_MspInit+0xbc>)
 8008598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085a2:	2200      	movs	r2, #0
 80085a4:	2100      	movs	r1, #0
 80085a6:	2043      	movs	r0, #67	; 0x43
 80085a8:	f7f8 febb 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085ac:	2043      	movs	r0, #67	; 0x43
 80085ae:	f7f8 fed4 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085b2:	bf00      	nop
 80085b4:	3728      	adds	r7, #40	; 0x28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	40023800 	.word	0x40023800
 80085c0:	40020000 	.word	0x40020000

080085c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe ff6b 	bl	80074ae <USBH_LL_IncTimer>
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe ffa3 	bl	800753a <USBH_LL_Connect>
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe ffac 	bl	8007568 <USBH_LL_Disconnect>
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
 8008624:	4613      	mov	r3, r2
 8008626:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe ff5d 	bl	8007502 <USBH_LL_PortEnabled>
}
 8008648:	bf00      	nop
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe ff5d 	bl	800751e <USBH_LL_PortDisabled>
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800867a:	2b01      	cmp	r3, #1
 800867c:	d12a      	bne.n	80086d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800867e:	4a18      	ldr	r2, [pc, #96]	; (80086e0 <USBH_LL_Init+0x74>)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a15      	ldr	r2, [pc, #84]	; (80086e0 <USBH_LL_Init+0x74>)
 800868a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800868e:	4b14      	ldr	r3, [pc, #80]	; (80086e0 <USBH_LL_Init+0x74>)
 8008690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008694:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008696:	4b12      	ldr	r3, [pc, #72]	; (80086e0 <USBH_LL_Init+0x74>)
 8008698:	2208      	movs	r2, #8
 800869a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800869c:	4b10      	ldr	r3, [pc, #64]	; (80086e0 <USBH_LL_Init+0x74>)
 800869e:	2201      	movs	r2, #1
 80086a0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086a2:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <USBH_LL_Init+0x74>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80086a8:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <USBH_LL_Init+0x74>)
 80086aa:	2202      	movs	r2, #2
 80086ac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086ae:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <USBH_LL_Init+0x74>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80086b4:	480a      	ldr	r0, [pc, #40]	; (80086e0 <USBH_LL_Init+0x74>)
 80086b6:	f7f9 f808 	bl	80016ca <HAL_HCD_Init>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80086c0:	f7f8 fa8c 	bl	8000bdc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80086c4:	4806      	ldr	r0, [pc, #24]	; (80086e0 <USBH_LL_Init+0x74>)
 80086c6:	f7f9 fc69 	bl	8001f9c <HAL_HCD_GetCurrentFrame>
 80086ca:	4603      	mov	r3, r0
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fe fede 	bl	8007490 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20015f40 	.word	0x20015f40

080086e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7f9 fbd6 	bl	8001eac <HAL_HCD_Start>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f95e 	bl	80089c8 <USBH_Get_USB_Status>
 800870c:	4603      	mov	r3, r0
 800870e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008710:	7bbb      	ldrb	r3, [r7, #14]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008730:	4618      	mov	r0, r3
 8008732:	f7f9 fbde 	bl	8001ef2 <HAL_HCD_Stop>
 8008736:	4603      	mov	r3, r0
 8008738:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f943 	bl	80089c8 <USBH_Get_USB_Status>
 8008742:	4603      	mov	r3, r0
 8008744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008746:	7bbb      	ldrb	r3, [r7, #14]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008758:	2301      	movs	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008762:	4618      	mov	r0, r3
 8008764:	f7f9 fc28 	bl	8001fb8 <HAL_HCD_GetCurrentSpeed>
 8008768:	4603      	mov	r3, r0
 800876a:	2b02      	cmp	r3, #2
 800876c:	d00c      	beq.n	8008788 <USBH_LL_GetSpeed+0x38>
 800876e:	2b02      	cmp	r3, #2
 8008770:	d80d      	bhi.n	800878e <USBH_LL_GetSpeed+0x3e>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <USBH_LL_GetSpeed+0x2c>
 8008776:	2b01      	cmp	r3, #1
 8008778:	d003      	beq.n	8008782 <USBH_LL_GetSpeed+0x32>
 800877a:	e008      	b.n	800878e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
    break;
 8008780:	e008      	b.n	8008794 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008782:	2301      	movs	r3, #1
 8008784:	73fb      	strb	r3, [r7, #15]
    break;
 8008786:	e005      	b.n	8008794 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008788:	2302      	movs	r3, #2
 800878a:	73fb      	strb	r3, [r7, #15]
    break;
 800878c:	e002      	b.n	8008794 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800878e:	2301      	movs	r3, #1
 8008790:	73fb      	strb	r3, [r7, #15]
    break;
 8008792:	bf00      	nop
  }
  return  speed;
 8008794:	7bfb      	ldrb	r3, [r7, #15]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f9 fbb9 	bl	8001f2c <HAL_HCD_ResetPort>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f901 	bl	80089c8 <USBH_Get_USB_Status>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f9 fbc1 	bl	8001f72 <HAL_HCD_HC_GetXferCount>
 80087f0:	4603      	mov	r3, r0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087fa:	b590      	push	{r4, r7, lr}
 80087fc:	b089      	sub	sp, #36	; 0x24
 80087fe:	af04      	add	r7, sp, #16
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	4608      	mov	r0, r1
 8008804:	4611      	mov	r1, r2
 8008806:	461a      	mov	r2, r3
 8008808:	4603      	mov	r3, r0
 800880a:	70fb      	strb	r3, [r7, #3]
 800880c:	460b      	mov	r3, r1
 800880e:	70bb      	strb	r3, [r7, #2]
 8008810:	4613      	mov	r3, r2
 8008812:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008822:	787c      	ldrb	r4, [r7, #1]
 8008824:	78ba      	ldrb	r2, [r7, #2]
 8008826:	78f9      	ldrb	r1, [r7, #3]
 8008828:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800882a:	9302      	str	r3, [sp, #8]
 800882c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	4623      	mov	r3, r4
 800883a:	f7f8 ffad 	bl	8001798 <HAL_HCD_HC_Init>
 800883e:	4603      	mov	r3, r0
 8008840:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 f8bf 	bl	80089c8 <USBH_Get_USB_Status>
 800884a:	4603      	mov	r3, r0
 800884c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	bd90      	pop	{r4, r7, pc}

08008858 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f7f9 f846 	bl	8001908 <HAL_HCD_HC_Halt>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f8a0 	bl	80089c8 <USBH_Get_USB_Status>
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888c:	7bbb      	ldrb	r3, [r7, #14]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008896:	b590      	push	{r4, r7, lr}
 8008898:	b089      	sub	sp, #36	; 0x24
 800889a:	af04      	add	r7, sp, #16
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	4608      	mov	r0, r1
 80088a0:	4611      	mov	r1, r2
 80088a2:	461a      	mov	r2, r3
 80088a4:	4603      	mov	r3, r0
 80088a6:	70fb      	strb	r3, [r7, #3]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70bb      	strb	r3, [r7, #2]
 80088ac:	4613      	mov	r3, r2
 80088ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088be:	787c      	ldrb	r4, [r7, #1]
 80088c0:	78ba      	ldrb	r2, [r7, #2]
 80088c2:	78f9      	ldrb	r1, [r7, #3]
 80088c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088cc:	9302      	str	r3, [sp, #8]
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	4623      	mov	r3, r4
 80088da:	f7f9 f839 	bl	8001950 <HAL_HCD_HC_SubmitRequest>
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 f86f 	bl	80089c8 <USBH_Get_USB_Status>
 80088ea:	4603      	mov	r3, r0
 80088ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd90      	pop	{r4, r7, pc}

080088f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f7f9 fb1a 	bl	8001f48 <HAL_HCD_HC_GetURBState>
 8008914:	4603      	mov	r3, r0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008930:	2b01      	cmp	r3, #1
 8008932:	d103      	bne.n	800893c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f872 	bl	8008a20 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800893c:	20c8      	movs	r0, #200	; 0xc8
 800893e:	f7f8 fbf1 	bl	8001124 <HAL_Delay>
  return USBH_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
 8008958:	4613      	mov	r3, r2
 800895a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008962:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	4613      	mov	r3, r2
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	1a9b      	subs	r3, r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	440b      	add	r3, r1
 8008972:	3317      	adds	r3, #23
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	68f9      	ldr	r1, [r7, #12]
 800897e:	4613      	mov	r3, r2
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	1a9b      	subs	r3, r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	333c      	adds	r3, #60	; 0x3c
 800898a:	78ba      	ldrb	r2, [r7, #2]
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e009      	b.n	80089a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	68f9      	ldr	r1, [r7, #12]
 8008994:	4613      	mov	r3, r2
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	1a9b      	subs	r3, r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	333d      	adds	r3, #61	; 0x3d
 80089a0:	78ba      	ldrb	r2, [r7, #2]
 80089a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7f8 fbb2 	bl	8001124 <HAL_Delay>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d817      	bhi.n	8008a0c <USBH_Get_USB_Status+0x44>
 80089dc:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <USBH_Get_USB_Status+0x1c>)
 80089de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e2:	bf00      	nop
 80089e4:	080089f5 	.word	0x080089f5
 80089e8:	080089fb 	.word	0x080089fb
 80089ec:	08008a01 	.word	0x08008a01
 80089f0:	08008a07 	.word	0x08008a07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
    break;
 80089f8:	e00b      	b.n	8008a12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80089fa:	2302      	movs	r3, #2
 80089fc:	73fb      	strb	r3, [r7, #15]
    break;
 80089fe:	e008      	b.n	8008a12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a00:	2301      	movs	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]
    break;
 8008a04:	e005      	b.n	8008a12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a06:	2302      	movs	r3, #2
 8008a08:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0a:	e002      	b.n	8008a12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a10:	bf00      	nop
  }
  return usb_status;
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]
 8008a38:	e001      	b.n	8008a3e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	461a      	mov	r2, r3
 8008a42:	2101      	movs	r1, #1
 8008a44:	4803      	ldr	r0, [pc, #12]	; (8008a54 <MX_DriverVbusFS+0x34>)
 8008a46:	f7f8 fe27 	bl	8001698 <HAL_GPIO_WritePin>
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	40020800 	.word	0x40020800

08008a58 <malloc>:
 8008a58:	4b02      	ldr	r3, [pc, #8]	; (8008a64 <malloc+0xc>)
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	6818      	ldr	r0, [r3, #0]
 8008a5e:	f000 b82b 	b.w	8008ab8 <_malloc_r>
 8008a62:	bf00      	nop
 8008a64:	200000f8 	.word	0x200000f8

08008a68 <free>:
 8008a68:	4b02      	ldr	r3, [pc, #8]	; (8008a74 <free+0xc>)
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	f000 b8f3 	b.w	8008c58 <_free_r>
 8008a72:	bf00      	nop
 8008a74:	200000f8 	.word	0x200000f8

08008a78 <sbrk_aligned>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	4e0e      	ldr	r6, [pc, #56]	; (8008ab4 <sbrk_aligned+0x3c>)
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	6831      	ldr	r1, [r6, #0]
 8008a80:	4605      	mov	r5, r0
 8008a82:	b911      	cbnz	r1, 8008a8a <sbrk_aligned+0x12>
 8008a84:	f000 f8ac 	bl	8008be0 <_sbrk_r>
 8008a88:	6030      	str	r0, [r6, #0]
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 f8a7 	bl	8008be0 <_sbrk_r>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d00a      	beq.n	8008aac <sbrk_aligned+0x34>
 8008a96:	1cc4      	adds	r4, r0, #3
 8008a98:	f024 0403 	bic.w	r4, r4, #3
 8008a9c:	42a0      	cmp	r0, r4
 8008a9e:	d007      	beq.n	8008ab0 <sbrk_aligned+0x38>
 8008aa0:	1a21      	subs	r1, r4, r0
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 f89c 	bl	8008be0 <_sbrk_r>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d101      	bne.n	8008ab0 <sbrk_aligned+0x38>
 8008aac:	f04f 34ff 	mov.w	r4, #4294967295
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	20016324 	.word	0x20016324

08008ab8 <_malloc_r>:
 8008ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008abc:	1ccd      	adds	r5, r1, #3
 8008abe:	f025 0503 	bic.w	r5, r5, #3
 8008ac2:	3508      	adds	r5, #8
 8008ac4:	2d0c      	cmp	r5, #12
 8008ac6:	bf38      	it	cc
 8008ac8:	250c      	movcc	r5, #12
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	4607      	mov	r7, r0
 8008ace:	db01      	blt.n	8008ad4 <_malloc_r+0x1c>
 8008ad0:	42a9      	cmp	r1, r5
 8008ad2:	d905      	bls.n	8008ae0 <_malloc_r+0x28>
 8008ad4:	230c      	movs	r3, #12
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	2600      	movs	r6, #0
 8008ada:	4630      	mov	r0, r6
 8008adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008bb4 <_malloc_r+0xfc>
 8008ae4:	f000 f868 	bl	8008bb8 <__malloc_lock>
 8008ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8008aec:	461c      	mov	r4, r3
 8008aee:	bb5c      	cbnz	r4, 8008b48 <_malloc_r+0x90>
 8008af0:	4629      	mov	r1, r5
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff ffc0 	bl	8008a78 <sbrk_aligned>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	4604      	mov	r4, r0
 8008afc:	d155      	bne.n	8008baa <_malloc_r+0xf2>
 8008afe:	f8d8 4000 	ldr.w	r4, [r8]
 8008b02:	4626      	mov	r6, r4
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	d145      	bne.n	8008b94 <_malloc_r+0xdc>
 8008b08:	2c00      	cmp	r4, #0
 8008b0a:	d048      	beq.n	8008b9e <_malloc_r+0xe6>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4638      	mov	r0, r7
 8008b12:	eb04 0903 	add.w	r9, r4, r3
 8008b16:	f000 f863 	bl	8008be0 <_sbrk_r>
 8008b1a:	4581      	cmp	r9, r0
 8008b1c:	d13f      	bne.n	8008b9e <_malloc_r+0xe6>
 8008b1e:	6821      	ldr	r1, [r4, #0]
 8008b20:	1a6d      	subs	r5, r5, r1
 8008b22:	4629      	mov	r1, r5
 8008b24:	4638      	mov	r0, r7
 8008b26:	f7ff ffa7 	bl	8008a78 <sbrk_aligned>
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d037      	beq.n	8008b9e <_malloc_r+0xe6>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	442b      	add	r3, r5
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	f8d8 3000 	ldr.w	r3, [r8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d038      	beq.n	8008bae <_malloc_r+0xf6>
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	42a2      	cmp	r2, r4
 8008b40:	d12b      	bne.n	8008b9a <_malloc_r+0xe2>
 8008b42:	2200      	movs	r2, #0
 8008b44:	605a      	str	r2, [r3, #4]
 8008b46:	e00f      	b.n	8008b68 <_malloc_r+0xb0>
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	1b52      	subs	r2, r2, r5
 8008b4c:	d41f      	bmi.n	8008b8e <_malloc_r+0xd6>
 8008b4e:	2a0b      	cmp	r2, #11
 8008b50:	d917      	bls.n	8008b82 <_malloc_r+0xca>
 8008b52:	1961      	adds	r1, r4, r5
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	6025      	str	r5, [r4, #0]
 8008b58:	bf18      	it	ne
 8008b5a:	6059      	strne	r1, [r3, #4]
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	bf08      	it	eq
 8008b60:	f8c8 1000 	streq.w	r1, [r8]
 8008b64:	5162      	str	r2, [r4, r5]
 8008b66:	604b      	str	r3, [r1, #4]
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f104 060b 	add.w	r6, r4, #11
 8008b6e:	f000 f829 	bl	8008bc4 <__malloc_unlock>
 8008b72:	f026 0607 	bic.w	r6, r6, #7
 8008b76:	1d23      	adds	r3, r4, #4
 8008b78:	1af2      	subs	r2, r6, r3
 8008b7a:	d0ae      	beq.n	8008ada <_malloc_r+0x22>
 8008b7c:	1b9b      	subs	r3, r3, r6
 8008b7e:	50a3      	str	r3, [r4, r2]
 8008b80:	e7ab      	b.n	8008ada <_malloc_r+0x22>
 8008b82:	42a3      	cmp	r3, r4
 8008b84:	6862      	ldr	r2, [r4, #4]
 8008b86:	d1dd      	bne.n	8008b44 <_malloc_r+0x8c>
 8008b88:	f8c8 2000 	str.w	r2, [r8]
 8008b8c:	e7ec      	b.n	8008b68 <_malloc_r+0xb0>
 8008b8e:	4623      	mov	r3, r4
 8008b90:	6864      	ldr	r4, [r4, #4]
 8008b92:	e7ac      	b.n	8008aee <_malloc_r+0x36>
 8008b94:	4634      	mov	r4, r6
 8008b96:	6876      	ldr	r6, [r6, #4]
 8008b98:	e7b4      	b.n	8008b04 <_malloc_r+0x4c>
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	e7cc      	b.n	8008b38 <_malloc_r+0x80>
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	f000 f80e 	bl	8008bc4 <__malloc_unlock>
 8008ba8:	e797      	b.n	8008ada <_malloc_r+0x22>
 8008baa:	6025      	str	r5, [r4, #0]
 8008bac:	e7dc      	b.n	8008b68 <_malloc_r+0xb0>
 8008bae:	605b      	str	r3, [r3, #4]
 8008bb0:	deff      	udf	#255	; 0xff
 8008bb2:	bf00      	nop
 8008bb4:	20016320 	.word	0x20016320

08008bb8 <__malloc_lock>:
 8008bb8:	4801      	ldr	r0, [pc, #4]	; (8008bc0 <__malloc_lock+0x8>)
 8008bba:	f000 b84b 	b.w	8008c54 <__retarget_lock_acquire_recursive>
 8008bbe:	bf00      	nop
 8008bc0:	20016464 	.word	0x20016464

08008bc4 <__malloc_unlock>:
 8008bc4:	4801      	ldr	r0, [pc, #4]	; (8008bcc <__malloc_unlock+0x8>)
 8008bc6:	f000 b846 	b.w	8008c56 <__retarget_lock_release_recursive>
 8008bca:	bf00      	nop
 8008bcc:	20016464 	.word	0x20016464

08008bd0 <memset>:
 8008bd0:	4402      	add	r2, r0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d100      	bne.n	8008bda <memset+0xa>
 8008bd8:	4770      	bx	lr
 8008bda:	f803 1b01 	strb.w	r1, [r3], #1
 8008bde:	e7f9      	b.n	8008bd4 <memset+0x4>

08008be0 <_sbrk_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d06      	ldr	r5, [pc, #24]	; (8008bfc <_sbrk_r+0x1c>)
 8008be4:	2300      	movs	r3, #0
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	f7f8 f9b6 	bl	8000f5c <_sbrk>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_sbrk_r+0x1a>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_sbrk_r+0x1a>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	20016460 	.word	0x20016460

08008c00 <__errno>:
 8008c00:	4b01      	ldr	r3, [pc, #4]	; (8008c08 <__errno+0x8>)
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	200000f8 	.word	0x200000f8

08008c0c <__libc_init_array>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	4d0d      	ldr	r5, [pc, #52]	; (8008c44 <__libc_init_array+0x38>)
 8008c10:	4c0d      	ldr	r4, [pc, #52]	; (8008c48 <__libc_init_array+0x3c>)
 8008c12:	1b64      	subs	r4, r4, r5
 8008c14:	10a4      	asrs	r4, r4, #2
 8008c16:	2600      	movs	r6, #0
 8008c18:	42a6      	cmp	r6, r4
 8008c1a:	d109      	bne.n	8008c30 <__libc_init_array+0x24>
 8008c1c:	4d0b      	ldr	r5, [pc, #44]	; (8008c4c <__libc_init_array+0x40>)
 8008c1e:	4c0c      	ldr	r4, [pc, #48]	; (8008c50 <__libc_init_array+0x44>)
 8008c20:	f000 f866 	bl	8008cf0 <_init>
 8008c24:	1b64      	subs	r4, r4, r5
 8008c26:	10a4      	asrs	r4, r4, #2
 8008c28:	2600      	movs	r6, #0
 8008c2a:	42a6      	cmp	r6, r4
 8008c2c:	d105      	bne.n	8008c3a <__libc_init_array+0x2e>
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
 8008c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c34:	4798      	blx	r3
 8008c36:	3601      	adds	r6, #1
 8008c38:	e7ee      	b.n	8008c18 <__libc_init_array+0xc>
 8008c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3e:	4798      	blx	r3
 8008c40:	3601      	adds	r6, #1
 8008c42:	e7f2      	b.n	8008c2a <__libc_init_array+0x1e>
 8008c44:	08008d2c 	.word	0x08008d2c
 8008c48:	08008d2c 	.word	0x08008d2c
 8008c4c:	08008d2c 	.word	0x08008d2c
 8008c50:	08008d30 	.word	0x08008d30

08008c54 <__retarget_lock_acquire_recursive>:
 8008c54:	4770      	bx	lr

08008c56 <__retarget_lock_release_recursive>:
 8008c56:	4770      	bx	lr

08008c58 <_free_r>:
 8008c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c5a:	2900      	cmp	r1, #0
 8008c5c:	d044      	beq.n	8008ce8 <_free_r+0x90>
 8008c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c62:	9001      	str	r0, [sp, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f1a1 0404 	sub.w	r4, r1, #4
 8008c6a:	bfb8      	it	lt
 8008c6c:	18e4      	addlt	r4, r4, r3
 8008c6e:	f7ff ffa3 	bl	8008bb8 <__malloc_lock>
 8008c72:	4a1e      	ldr	r2, [pc, #120]	; (8008cec <_free_r+0x94>)
 8008c74:	9801      	ldr	r0, [sp, #4]
 8008c76:	6813      	ldr	r3, [r2, #0]
 8008c78:	b933      	cbnz	r3, 8008c88 <_free_r+0x30>
 8008c7a:	6063      	str	r3, [r4, #4]
 8008c7c:	6014      	str	r4, [r2, #0]
 8008c7e:	b003      	add	sp, #12
 8008c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c84:	f7ff bf9e 	b.w	8008bc4 <__malloc_unlock>
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	d908      	bls.n	8008c9e <_free_r+0x46>
 8008c8c:	6825      	ldr	r5, [r4, #0]
 8008c8e:	1961      	adds	r1, r4, r5
 8008c90:	428b      	cmp	r3, r1
 8008c92:	bf01      	itttt	eq
 8008c94:	6819      	ldreq	r1, [r3, #0]
 8008c96:	685b      	ldreq	r3, [r3, #4]
 8008c98:	1949      	addeq	r1, r1, r5
 8008c9a:	6021      	streq	r1, [r4, #0]
 8008c9c:	e7ed      	b.n	8008c7a <_free_r+0x22>
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	b10b      	cbz	r3, 8008ca8 <_free_r+0x50>
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	d9fa      	bls.n	8008c9e <_free_r+0x46>
 8008ca8:	6811      	ldr	r1, [r2, #0]
 8008caa:	1855      	adds	r5, r2, r1
 8008cac:	42a5      	cmp	r5, r4
 8008cae:	d10b      	bne.n	8008cc8 <_free_r+0x70>
 8008cb0:	6824      	ldr	r4, [r4, #0]
 8008cb2:	4421      	add	r1, r4
 8008cb4:	1854      	adds	r4, r2, r1
 8008cb6:	42a3      	cmp	r3, r4
 8008cb8:	6011      	str	r1, [r2, #0]
 8008cba:	d1e0      	bne.n	8008c7e <_free_r+0x26>
 8008cbc:	681c      	ldr	r4, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	6053      	str	r3, [r2, #4]
 8008cc2:	440c      	add	r4, r1
 8008cc4:	6014      	str	r4, [r2, #0]
 8008cc6:	e7da      	b.n	8008c7e <_free_r+0x26>
 8008cc8:	d902      	bls.n	8008cd0 <_free_r+0x78>
 8008cca:	230c      	movs	r3, #12
 8008ccc:	6003      	str	r3, [r0, #0]
 8008cce:	e7d6      	b.n	8008c7e <_free_r+0x26>
 8008cd0:	6825      	ldr	r5, [r4, #0]
 8008cd2:	1961      	adds	r1, r4, r5
 8008cd4:	428b      	cmp	r3, r1
 8008cd6:	bf04      	itt	eq
 8008cd8:	6819      	ldreq	r1, [r3, #0]
 8008cda:	685b      	ldreq	r3, [r3, #4]
 8008cdc:	6063      	str	r3, [r4, #4]
 8008cde:	bf04      	itt	eq
 8008ce0:	1949      	addeq	r1, r1, r5
 8008ce2:	6021      	streq	r1, [r4, #0]
 8008ce4:	6054      	str	r4, [r2, #4]
 8008ce6:	e7ca      	b.n	8008c7e <_free_r+0x26>
 8008ce8:	b003      	add	sp, #12
 8008cea:	bd30      	pop	{r4, r5, pc}
 8008cec:	20016320 	.word	0x20016320

08008cf0 <_init>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	bf00      	nop
 8008cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf6:	bc08      	pop	{r3}
 8008cf8:	469e      	mov	lr, r3
 8008cfa:	4770      	bx	lr

08008cfc <_fini>:
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfe:	bf00      	nop
 8008d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d02:	bc08      	pop	{r3}
 8008d04:	469e      	mov	lr, r3
 8008d06:	4770      	bx	lr
