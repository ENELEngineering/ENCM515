
lab2_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000582c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  080059d0  080059d0  000159d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d5c  08005d5c  000203a4  2**0
                  CONTENTS
  4 .ARM          00000008  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d64  08005d64  000203a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  08005d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  200003a4  08006110  000203a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08006110  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbae  00000000  00000000  00020417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002288  00000000  00000000  0002dfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00030250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3d  00000000  00000000  00030fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033ed  00000000  00000000  000319ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f842  00000000  00000000  00034dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aa75  00000000  00000000  0004461c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000471c  00000000  00000000  000df094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e37b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a4 	.word	0x200003a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059b4 	.word	0x080059b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003a8 	.word	0x200003a8
 80001dc:	080059b4 	.word	0x080059b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ebc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d013      	beq.n	8000ef4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ecc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ed0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ed4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000edc:	e000      	b.n	8000ee0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ede:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000f08:	f000 fbe2 	bl	80016d0 <HAL_Init>

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f001 ff95 	bl	8002e3c <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f001 ff92 	bl	8002e3c <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f001 ff8f 	bl	8002e3c <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f001 ff8c 	bl	8002e3c <BSP_LED_Init>

  /* Configure the system clock to 100 MHz */
  SystemClock_Config();
 8000f24:	f000 f8a4 	bl	8001070 <SystemClock_Config>

  /* Configure GPIO so that we can probe PB2 with an Oscilloscope */
  GPIOA_Init();
 8000f28:	f000 f97e 	bl	8001228 <GPIOA_Init>

  /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f002 f816 	bl	8002f60 <BSP_PB_Init>

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8000f34:	4b41      	ldr	r3, [pc, #260]	; (800103c <main+0x138>)
 8000f36:	4a42      	ldr	r2, [pc, #264]	; (8001040 <main+0x13c>)
 8000f38:	601a      	str	r2, [r3, #0]

  /* Initialize TIM3 peripheral to toggle with a frequency of ~ 8 kHz
   * System clock is 100 MHz and TIM3 is counting at the rate of the system clock
   * so 100 M / 8 k is 12500
   */
  TimHandle.Init.Period = 12499;
 8000f3a:	4b40      	ldr	r3, [pc, #256]	; (800103c <main+0x138>)
 8000f3c:	f243 02d3 	movw	r2, #12499	; 0x30d3
 8000f40:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 0;
 8000f42:	4b3e      	ldr	r3, [pc, #248]	; (800103c <main+0x138>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8000f48:	4b3c      	ldr	r3, [pc, #240]	; (800103c <main+0x138>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <main+0x138>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <main+0x138>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000f5a:	4838      	ldr	r0, [pc, #224]	; (800103c <main+0x138>)
 8000f5c:	f001 fcf8 	bl	8002950 <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <main+0x66>
  {
	  /* Initialization Error */
	  Error_Handler();
 8000f66:	f000 f959 	bl	800121c <Error_Handler>
  }

  ITM_Port32(30) = 0;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	; (8001044 <main+0x140>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000f70:	4832      	ldr	r0, [pc, #200]	; (800103c <main+0x138>)
 8000f72:	f001 fd3d 	bl	80029f0 <HAL_TIM_Base_Start_IT>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <main+0x7c>
  {
	  /* Starting Error */
	  Error_Handler();
 8000f7c:	f000 f94e 	bl	800121c <Error_Handler>
			  sample_count = 0;
		  }
#endif

#ifndef FUNCTIONAL_TEST
	if (new_sample_flag == 1) {
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <main+0x144>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d146      	bne.n	8001016 <main+0x112>
#endif
		ITM_Port32(31) = 1;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <main+0x148>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
		filteredSampleL = ProcessSample3(newSampleL,history_l); // "L"
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <main+0x14c>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	492f      	ldr	r1, [pc, #188]	; (8001054 <main+0x150>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f974 	bl	8001284 <ProcessSample3>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <main+0x154>)
 8000fa2:	801a      	strh	r2, [r3, #0]
		ITM_Port32(31) = 1;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <main+0x148>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
		new_sample_flag = 0;
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <main+0x144>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
		if (i < NUMBER_OF_TAPS-1) {
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <main+0x158>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2bda      	cmp	r3, #218	; 0xda
 8000fb6:	dc08      	bgt.n	8000fca <main+0xc6>
			filteredSampleL = 0;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <main+0x154>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	801a      	strh	r2, [r3, #0]
			i++;
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <main+0x158>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a25      	ldr	r2, [pc, #148]	; (800105c <main+0x158>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e025      	b.n	8001016 <main+0x112>
		} else {
			if (bufchoice == 0) {
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <main+0x15c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10e      	bne.n	8000ff0 <main+0xec>
				filteredOutBufferA[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL; // copy the filtered output to both channels
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <main+0x154>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <main+0x154>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <main+0x160>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	440a      	add	r2, r1
 8000fe8:	491f      	ldr	r1, [pc, #124]	; (8001068 <main+0x164>)
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fee:	e00d      	b.n	800100c <main+0x108>
			} else {
				filteredOutBufferB[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <main+0x154>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	041a      	lsls	r2, r3, #16
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <main+0x154>)
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <main+0x160>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	440a      	add	r2, r1
 8001006:	4919      	ldr	r1, [pc, #100]	; (800106c <main+0x168>)
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			k++;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <main+0x160>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <main+0x160>)
 8001014:	6013      	str	r3, [r2, #0]
	}
#endif

	// once a buffer is full, we can swap to fill up the other buffer
	// this is probably not going to be used in Lab2
	if (k == BUFFER_SIZE) {
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <main+0x160>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b20      	cmp	r3, #32
 800101c:	d1b0      	bne.n	8000f80 <main+0x7c>
		k = 0;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <main+0x160>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
		bufchoice = bufchoice == 0 ? 1 : 0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <main+0x15c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf0c      	ite	eq
 800102c:	2301      	moveq	r3, #1
 800102e:	2300      	movne	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <main+0x15c>)
 8001036:	601a      	str	r2, [r3, #0]
	if (new_sample_flag == 1) {
 8001038:	e7a2      	b.n	8000f80 <main+0x7c>
 800103a:	bf00      	nop
 800103c:	200003c4 	.word	0x200003c4
 8001040:	40000400 	.word	0x40000400
 8001044:	e0000078 	.word	0xe0000078
 8001048:	200005cc 	.word	0x200005cc
 800104c:	e000007c 	.word	0xe000007c
 8001050:	200005d4 	.word	0x200005d4
 8001054:	2000040c 	.word	0x2000040c
 8001058:	200005d8 	.word	0x200005d8
 800105c:	200006e0 	.word	0x200006e0
 8001060:	200006dc 	.word	0x200006dc
 8001064:	200006e4 	.word	0x200006e4
 8001068:	200005dc 	.word	0x200005dc
 800106c:	2000065c 	.word	0x2000065c

08001070 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <SystemClock_Config+0xac>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a27      	ldr	r2, [pc, #156]	; (800111c <SystemClock_Config+0xac>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <SystemClock_Config+0xac>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <SystemClock_Config+0xb0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <SystemClock_Config+0xb0>)
 800109c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <SystemClock_Config+0xb0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80010b6:	2310      	movs	r3, #16
 80010b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010c2:	2310      	movs	r3, #16
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80010c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d0:	2307      	movs	r3, #7
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 ffd5 	bl	8002088 <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80010e4:	f000 f89a 	bl	800121c <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80010e8:	230f      	movs	r3, #15
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001102:	2103      	movs	r1, #3
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fa37 	bl	8002578 <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001110:	f000 f884 	bl	800121c <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	3750      	adds	r7, #80	; 0x50
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  if (KEY_BUTTON_PIN == GPIO_Pin)
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d109      	bne.n	8001148 <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8001134:	bf00      	nop
 8001136:	2000      	movs	r0, #0
 8001138:	f001 ff68 	bl	800300c <BSP_PB_GetState>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f9      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8001142:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
  }
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200003c0 	.word	0x200003c0

08001154 <HAL_TIM_PeriodElapsedCallback>:
}

// This timer callback should trigger every 1/8000 Hz, and it emulates
// the idea of receiving a new sample peridiocally
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
//  BSP_LED_Toggle(LED4);
//  HAL_GPIO_TogglePin(SCOPE_CHECK_GPIO_Port, SCOPE_CHECK_Pin);

	// If we "miss" processing a sample, the new_sample_flag will still be
	// high on the trigger of the interrupt
	if (new_sample_flag == 1) {
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x16>
		ITM_Port32(30) = 10;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001166:	220a      	movs	r2, #10
 8001168:	601a      	str	r2, [r3, #0]
	}

	// Otherwise, go to the raw audio in memory and "retrieve" a new sample every timer period
	// set the new_sample_flag high
#ifndef FUNCTIONAL_TEST
	if (sample_count < 64000) {
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001172:	da24      	bge.n	80011be <HAL_TIM_PeriodElapsedCallback+0x6a>
		newSampleL = (int16_t)raw_audio[sample_count];
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001186:	801a      	strh	r2, [r3, #0]
		newSampleR = (int16_t)(raw_audio[sample_count] >> 16);
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	141b      	asrs	r3, r3, #16
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800119c:	801a      	strh	r2, [r3, #0]
		sample_count++;
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011a6:	6013      	str	r3, [r2, #0]

		if (sample_count >= 64000) sample_count = 0;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80011b0:	db02      	blt.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x64>
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
		new_sample_flag = 1;
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
  }
#endif
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200005cc 	.word	0x200005cc
 80011d0:	e0000078 	.word	0xe0000078
 80011d4:	200005d0 	.word	0x200005d0
 80011d8:	20000000 	.word	0x20000000
 80011dc:	200005d4 	.word	0x200005d4
 80011e0:	200005d6 	.word	0x200005d6

080011e4 <_write>:

int _write(int file, char* ptr, int len) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e009      	b.n	800120a <_write+0x26>
		ITM_SendChar(*ptr++);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	60ba      	str	r2, [r7, #8]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe58 	bl	8000eb4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	dbf1      	blt.n	80011f6 <_write+0x12>
	}
	return len;
 8001212:	687b      	ldr	r3, [r7, #4]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 8001220:	2002      	movs	r0, #2
 8001222:	f001 fe83 	bl	8002f2c <BSP_LED_On>
  while(1)
 8001226:	e7fe      	b.n	8001226 <Error_Handler+0xa>

08001228 <GPIOA_Init>:
  {
  }
}

static void GPIOA_Init(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <GPIOA_Init+0x54>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <GPIOA_Init+0x54>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	6313      	str	r3, [r2, #48]	; 0x30
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <GPIOA_Init+0x54>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin : SCOPE_CHECK_Pin */
	  GPIO_InitStruct.Pin = SCOPE_CHECK_Pin;
 8001258:	2302      	movs	r3, #2
 800125a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(SCOPE_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <GPIOA_Init+0x58>)
 800126e:	f000 fd3d 	bl	8001cec <HAL_GPIO_Init>

}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40020400 	.word	0x40020400

08001284 <ProcessSample3>:
	int16_t temp = (int16_t)(accumulator >> 15);

	return temp;
}

static int16_t ProcessSample3(int16_t newsample, int16_t* history) {
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	80fb      	strh	r3, [r7, #6]

	// set the new sample as the head
	history[0] = newsample;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	88fa      	ldrh	r2, [r7, #6]
 8001294:	801a      	strh	r2, [r3, #0]

	// set up and do our convolution
	int tap = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
	int32_t accumulator = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
	for (tap = 0; tap < NUMBER_OF_TAPS; tap+=2) {
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e022      	b.n	80012ea <ProcessSample3+0x66>
		__asm volatile ("SMLAD %0, %1, %2, %3"
				: "=r" (accumulator)
				: "r" ((int32_t)(filter_coeffs[tap]<<16) + (uint16_t)filter_coeffs[tap+1]),
 80012a4:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <ProcessSample3+0xe0>)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	3201      	adds	r2, #1
 80012b2:	492c      	ldr	r1, [pc, #176]	; (8001364 <ProcessSample3+0xe0>)
 80012b4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80012b8:	b292      	uxth	r2, r2
 80012ba:	4413      	add	r3, r2
				  "r" ((int32_t)(history[tap]<<16) + (uint16_t)history[tap+1]),
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	0052      	lsls	r2, r2, #1
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	440a      	add	r2, r1
 80012c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012c8:	0412      	lsls	r2, r2, #16
 80012ca:	6979      	ldr	r1, [r7, #20]
 80012cc:	3101      	adds	r1, #1
 80012ce:	0049      	lsls	r1, r1, #1
 80012d0:	6838      	ldr	r0, [r7, #0]
 80012d2:	4401      	add	r1, r0
 80012d4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80012d8:	b289      	uxth	r1, r1
 80012da:	440a      	add	r2, r1
		__asm volatile ("SMLAD %0, %1, %2, %3"
 80012dc:	6939      	ldr	r1, [r7, #16]
 80012de:	fb23 1302 	smlad	r3, r3, r2, r1
 80012e2:	613b      	str	r3, [r7, #16]
	for (tap = 0; tap < NUMBER_OF_TAPS; tap+=2) {
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3302      	adds	r3, #2
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2bdb      	cmp	r3, #219	; 0xdb
 80012ee:	ddd9      	ble.n	80012a4 <ProcessSample3+0x20>
				  "r" (accumulator) );
	}

	// shuffle things along for the next one?
	for(tap = NUMBER_OF_TAPS-2; tap > -1; tap--) {
 80012f0:	23da      	movs	r3, #218	; 0xda
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e00e      	b.n	8001314 <ProcessSample3+0x90>
		history[tap+1] = history[tap];
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	441a      	add	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	440b      	add	r3, r1
 8001308:	f9b2 2000 	ldrsh.w	r2, [r2]
 800130c:	801a      	strh	r2, [r3, #0]
	for(tap = NUMBER_OF_TAPS-2; tap > -1; tap--) {
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3b01      	subs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	daed      	bge.n	80012f6 <ProcessSample3+0x72>
	}

	if (accumulator > 0x3FFFFFFF) {
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001320:	db08      	blt.n	8001334 <ProcessSample3+0xb0>
		accumulator = 0x3FFFFFFF;
 8001322:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001326:	613b      	str	r3, [r7, #16]
		overflow_count++;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <ProcessSample3+0xe4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <ProcessSample3+0xe4>)
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e00b      	b.n	800134c <ProcessSample3+0xc8>
	} else if (accumulator < -0x40000000) {
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800133a:	da07      	bge.n	800134c <ProcessSample3+0xc8>
		accumulator = -0x40000000;
 800133c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001340:	613b      	str	r3, [r7, #16]
		underflow_count++;
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <ProcessSample3+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a08      	ldr	r2, [pc, #32]	; (800136c <ProcessSample3+0xe8>)
 800134a:	6013      	str	r3, [r2, #0]
	}

	int16_t temp = (int16_t)(accumulator >> 15);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	13db      	asrs	r3, r3, #15
 8001350:	81fb      	strh	r3, [r7, #14]

	return temp;
 8001352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001356:	4618      	mov	r0, r3
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000004 	.word	0x20000004
 8001368:	200005c4 	.word	0x200005c4
 800136c:	200005c8 	.word	0x200005c8

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_MspInit+0x4c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ae:	2007      	movs	r0, #7
 80013b0:	f000 fad0 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_TIM_Base_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_TIM_Base_MspInit+0x3c>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_TIM_Base_MspInit+0x3c>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_TIM_Base_MspInit+0x3c>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2104      	movs	r1, #4
 80013e8:	201d      	movs	r0, #29
 80013ea:	f000 fabe 	bl	800196a <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80013ee:	201d      	movs	r0, #29
 80013f0:	f000 fad7 	bl	80019a2 <HAL_NVIC_EnableIRQ>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800

08001400 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001454:	f000 f98e 	bl	8001774 <HAL_IncTick>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8001460:	2001      	movs	r0, #1
 8001462:	f000 fdf9 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}

0800146a <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 800146e:	2010      	movs	r0, #16
 8001470:	f000 fdf2 	bl	8002058 <HAL_GPIO_EXTI_IRQHandler>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <DMA1_Stream7_IRQHandler+0x14>)
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	4618      	mov	r0, r3
 8001482:	f000 faa9 	bl	80019d8 <HAL_DMA_IRQHandler>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200006f0 	.word	0x200006f0

08001490 <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles I2S IT Stream interrupt request.
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <DMA1_Stream3_IRQHandler+0x14>)
 8001496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fa9d 	bl	80019d8 <HAL_DMA_IRQHandler>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000738 	.word	0x20000738

080014a8 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <TIM3_IRQHandler+0x10>)
 80014ae:	f001 fb01 	bl	8002ab4 <HAL_TIM_IRQHandler>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200003c4 	.word	0x200003c4

080014bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	return 1;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_kill>:

int _kill(int pid, int sig)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014d6:	f002 fb6d 	bl	8003bb4 <__errno>
 80014da:	4603      	mov	r3, r0
 80014dc:	2216      	movs	r2, #22
 80014de:	601a      	str	r2, [r3, #0]
	return -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_exit>:

void _exit (int status)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ffe7 	bl	80014cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80014fe:	e7fe      	b.n	80014fe <_exit+0x12>

08001500 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00a      	b.n	8001528 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001512:	f3af 8000 	nop.w
 8001516:	4601      	mov	r1, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf0      	blt.n	8001512 <_read+0x12>
	}

return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_close>:
	}
	return len;
}

int _close(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001562:	605a      	str	r2, [r3, #4]
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_isatty>:

int _isatty(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f002 faee 	bl	8003bb4 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20020000 	.word	0x20020000
 8001604:	00000400 	.word	0x00000400
 8001608:	200006e8 	.word	0x200006e8
 800160c:	200008d0 	.word	0x200008d0

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <SystemInit+0x60>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a15      	ldr	r2, [pc, #84]	; (8001670 <SystemInit+0x60>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <SystemInit+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <SystemInit+0x64>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <SystemInit+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <SystemInit+0x64>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <SystemInit+0x64>)
 800163c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <SystemInit+0x64>)
 8001648:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <SystemInit+0x68>)
 800164a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <SystemInit+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <SystemInit+0x64>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <SystemInit+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SystemInit+0x60>)
 8001660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001664:	609a      	str	r2, [r3, #8]
#endif
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	40023800 	.word	0x40023800
 8001678:	24003010 	.word	0x24003010

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001682:	490e      	ldr	r1, [pc, #56]	; (80016bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001698:	4c0b      	ldr	r4, [pc, #44]	; (80016c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016a6:	f7ff ffb3 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f002 fa89 	bl	8003bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fc29 	bl	8000f04 <main>
  bx  lr    
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 80016c0:	08005d6c 	.word	0x08005d6c
  ldr r2, =_sbss
 80016c4:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 80016c8:	200008cc 	.word	0x200008cc

080016cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <HAL_Init+0x40>)
 80016da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_Init+0x40>)
 80016e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_Init+0x40>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f92b 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f808 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fe34 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f943 	bl	80019be <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f000 f90b 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200001bc 	.word	0x200001bc
 800176c:	200001c4 	.word	0x200001c4
 8001770:	200001c0 	.word	0x200001c0

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200001c4 	.word	0x200001c4
 8001798:	200006ec 	.word	0x200006ec

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200006ec 	.word	0x200006ec

080017b4 <__NVIC_SetPriorityGrouping>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <__NVIC_EnableIRQ+0x38>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <SysTick_Config>:
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff8e 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff29 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff3e 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff8e 	bl	80018a8 <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5d 	bl	8001854 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff31 	bl	8001818 <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa2 	bl	8001910 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019e4:	4b8e      	ldr	r3, [pc, #568]	; (8001c20 <HAL_DMA_IRQHandler+0x248>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a8e      	ldr	r2, [pc, #568]	; (8001c24 <HAL_DMA_IRQHandler+0x24c>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0a9b      	lsrs	r3, r3, #10
 80019f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2208      	movs	r2, #8
 8001a04:	409a      	lsls	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01a      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d013      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0204 	bic.w	r2, r2, #4
 8001a2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	2208      	movs	r2, #8
 8001a32:	409a      	lsls	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	2201      	movs	r2, #1
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d012      	beq.n	8001a7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00b      	beq.n	8001a7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2201      	movs	r2, #1
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	f043 0202 	orr.w	r2, r3, #2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	2204      	movs	r2, #4
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d012      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00b      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa8:	f043 0204 	orr.w	r2, r3, #4
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d043      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d03c      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d018      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d024      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
 8001b06:	e01f      	b.n	8001b48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01b      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
 8001b18:	e016      	b.n	8001b48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0208 	bic.w	r2, r2, #8
 8001b36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 808f 	beq.w	8001c78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8087 	beq.w	8001c78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2220      	movs	r2, #32
 8001b70:	409a      	lsls	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d136      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0216 	bic.w	r2, r2, #22
 8001b90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ba0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <HAL_DMA_IRQHandler+0x1da>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0208 	bic.w	r2, r2, #8
 8001bc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	223f      	movs	r2, #63	; 0x3f
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d07e      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
        }
        return;
 8001bee:	e079      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01d      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10d      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d031      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	4798      	blx	r3
 8001c1c:	e02c      	b.n	8001c78 <HAL_DMA_IRQHandler+0x2a0>
 8001c1e:	bf00      	nop
 8001c20:	200001bc 	.word	0x200001bc
 8001c24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d023      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
 8001c38:	e01e      	b.n	8001c78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10f      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0210 	bic.w	r2, r2, #16
 8001c56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d032      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d022      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2205      	movs	r2, #5
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d307      	bcc.n	8001cc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f2      	bne.n	8001ca4 <HAL_DMA_IRQHandler+0x2cc>
 8001cbe:	e000      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001cc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
 8001ce2:	e000      	b.n	8001ce6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ce4:	bf00      	nop
    }
  }
}
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e159      	b.n	8001fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 8148 	bne.w	8001fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d005      	beq.n	8001d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d130      	bne.n	8001da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 0201 	and.w	r2, r3, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d017      	beq.n	8001ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d123      	bne.n	8001e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	69b9      	ldr	r1, [r7, #24]
 8001e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0203 	and.w	r2, r3, #3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a2 	beq.w	8001fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a56      	ldr	r2, [pc, #344]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8e:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <HAL_GPIO_Init+0x2ec>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a49      	ldr	r2, [pc, #292]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d019      	beq.n	8001eee <HAL_GPIO_Init+0x202>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a48      	ldr	r2, [pc, #288]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x1fe>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <HAL_GPIO_Init+0x2f8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x1fa>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a46      	ldr	r2, [pc, #280]	; (8001fe8 <HAL_GPIO_Init+0x2fc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x1f6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a45      	ldr	r2, [pc, #276]	; (8001fec <HAL_GPIO_Init+0x300>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x1f2>
 8001eda:	2304      	movs	r3, #4
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001ede:	2307      	movs	r3, #7
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x2ec>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f32:	4a2f      	ldr	r2, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5c:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a1a      	ldr	r2, [pc, #104]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	f67f aea2 	bls.w	8001d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e001      	b.n	8002016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f854 	bl	8001124 <HAL_GPIO_EXTI_Callback>
  }
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40013c00 	.word	0x40013c00

08002088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e267      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d075      	beq.n	8002192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020a6:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d00c      	beq.n	80020cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b2:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d112      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020be:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d05b      	beq.n	8002190 <HAL_RCC_OscConfig+0x108>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d157      	bne.n	8002190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e242      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x74>
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xb0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x98>
 8002106:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6f      	ldr	r2, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xb0>
 8002120:	4b69      	ldr	r3, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fb2c 	bl	800179c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fb28 	bl	800179c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e207      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xc0>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fb18 	bl	800179c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fb14 	bl	800179c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1f3      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0xe8>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x152>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1c7      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4937      	ldr	r1, [pc, #220]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_OscConfig+0x244>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7ff facd 	bl	800179c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fac9 	bl	800179c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1a8      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4925      	ldr	r1, [pc, #148]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x244>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff faac 	bl	800179c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002248:	f7ff faa8 	bl	800179c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e187      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d036      	beq.n	80022e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCC_OscConfig+0x248>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7ff fa8c 	bl	800179c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff fa88 	bl	800179c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e167      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x200>
 80022a6:	e01b      	b.n	80022e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_RCC_OscConfig+0x248>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fa75 	bl	800179c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	e00e      	b.n	80022d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b6:	f7ff fa71 	bl	800179c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d907      	bls.n	80022d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e150      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470000 	.word	0x42470000
 80022d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b88      	ldr	r3, [pc, #544]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80022d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ea      	bne.n	80022b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8097 	beq.w	800241c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b7d      	ldr	r3, [pc, #500]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a7c      	ldr	r2, [pc, #496]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b7a      	ldr	r3, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b77      	ldr	r3, [pc, #476]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232a:	4b74      	ldr	r3, [pc, #464]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a73      	ldr	r2, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7ff fa31 	bl	800179c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7ff fa2d 	bl	800179c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e10c      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x2ea>
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a63      	ldr	r2, [pc, #396]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x324>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b05      	cmp	r3, #5
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x30c>
 800237a:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	4a5b      	ldr	r2, [pc, #364]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6713      	str	r3, [r2, #112]	; 0x70
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0x324>
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a54      	ldr	r2, [pc, #336]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff f9f2 	bl	800179c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7ff f9ee 	bl	800179c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0cb      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0ee      	beq.n	80023bc <HAL_RCC_OscConfig+0x334>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7ff f9dc 	bl	800179c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7ff f9d8 	bl	800179c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0b5      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ee      	bne.n	80023e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002410:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a1 	beq.w	8002568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002426:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b08      	cmp	r3, #8
 8002430:	d05c      	beq.n	80024ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d141      	bne.n	80024be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff f9ac 	bl	800179c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7ff f9a8 	bl	800179c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e087      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	3b01      	subs	r3, #1
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	491b      	ldr	r1, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7ff f981 	bl	800179c <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249e:	f7ff f97d 	bl	800179c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e05c      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x416>
 80024bc:	e054      	b.n	8002568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff f96a 	bl	800179c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024cc:	f7ff f966 	bl	800179c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e045      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x444>
 80024ea:	e03d      	b.n	8002568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e038      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000
 8002500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x4ec>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d028      	beq.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d121      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d11a      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800253c:	4293      	cmp	r3, r2
 800253e:	d111      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0cc      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d90c      	bls.n	80025b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b8      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025cc:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	494d      	ldr	r1, [pc, #308]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d044      	beq.n	8002698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d119      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d003      	beq.n	8002636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002632:	2b03      	cmp	r3, #3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e067      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 0203 	bic.w	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4934      	ldr	r1, [pc, #208]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002668:	f7ff f898 	bl	800179c <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7ff f894 	bl	800179c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e04f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 020c 	and.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	429a      	cmp	r2, r3
 8002696:	d1eb      	bne.n	8002670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d20c      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e032      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4916      	ldr	r1, [pc, #88]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	490e      	ldr	r1, [pc, #56]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026fe:	f000 f821 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8002702:	4602      	mov	r2, r0
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	5ccb      	ldrb	r3, [r1, r3]
 8002712:	fa22 f303 	lsr.w	r3, r2, r3
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fff8 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023c00 	.word	0x40023c00
 8002734:	40023800 	.word	0x40023800
 8002738:	080059d0 	.word	0x080059d0
 800273c:	200001bc 	.word	0x200001bc
 8002740:	200001c0 	.word	0x200001c0

08002744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002748:	b094      	sub	sp, #80	; 0x50
 800274a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	647b      	str	r3, [r7, #68]	; 0x44
 8002750:	2300      	movs	r3, #0
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002754:	2300      	movs	r3, #0
 8002756:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800275c:	4b79      	ldr	r3, [pc, #484]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d00d      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x40>
 8002768:	2b08      	cmp	r3, #8
 800276a:	f200 80e1 	bhi.w	8002930 <HAL_RCC_GetSysClockFreq+0x1ec>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x34>
 8002772:	2b04      	cmp	r3, #4
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x3a>
 8002776:	e0db      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_GetSysClockFreq+0x204>)
 800277a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800277c:	e0db      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_GetSysClockFreq+0x208>)
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002782:	e0d8      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	2200      	movs	r2, #0
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
 80027ae:	2300      	movs	r3, #0
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
 80027b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027b6:	4622      	mov	r2, r4
 80027b8:	462b      	mov	r3, r5
 80027ba:	f04f 0000 	mov.w	r0, #0
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	0159      	lsls	r1, r3, #5
 80027c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c8:	0150      	lsls	r0, r2, #5
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4621      	mov	r1, r4
 80027d0:	1a51      	subs	r1, r2, r1
 80027d2:	6139      	str	r1, [r7, #16]
 80027d4:	4629      	mov	r1, r5
 80027d6:	eb63 0301 	sbc.w	r3, r3, r1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e8:	4659      	mov	r1, fp
 80027ea:	018b      	lsls	r3, r1, #6
 80027ec:	4651      	mov	r1, sl
 80027ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f2:	4651      	mov	r1, sl
 80027f4:	018a      	lsls	r2, r1, #6
 80027f6:	4651      	mov	r1, sl
 80027f8:	ebb2 0801 	subs.w	r8, r2, r1
 80027fc:	4659      	mov	r1, fp
 80027fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002816:	4690      	mov	r8, r2
 8002818:	4699      	mov	r9, r3
 800281a:	4623      	mov	r3, r4
 800281c:	eb18 0303 	adds.w	r3, r8, r3
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	462b      	mov	r3, r5
 8002824:	eb49 0303 	adc.w	r3, r9, r3
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002836:	4629      	mov	r1, r5
 8002838:	024b      	lsls	r3, r1, #9
 800283a:	4621      	mov	r1, r4
 800283c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002840:	4621      	mov	r1, r4
 8002842:	024a      	lsls	r2, r1, #9
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
 800284e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002854:	f7fe f9b0 	bl	8000bb8 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002860:	e058      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	2200      	movs	r2, #0
 800286a:	4618      	mov	r0, r3
 800286c:	4611      	mov	r1, r2
 800286e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002872:	623b      	str	r3, [r7, #32]
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800287c:	4642      	mov	r2, r8
 800287e:	464b      	mov	r3, r9
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	0159      	lsls	r1, r3, #5
 800288a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288e:	0150      	lsls	r0, r2, #5
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4641      	mov	r1, r8
 8002896:	ebb2 0a01 	subs.w	sl, r2, r1
 800289a:	4649      	mov	r1, r9
 800289c:	eb63 0b01 	sbc.w	fp, r3, r1
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b4:	ebb2 040a 	subs.w	r4, r2, sl
 80028b8:	eb63 050b 	sbc.w	r5, r3, fp
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	00eb      	lsls	r3, r5, #3
 80028c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ca:	00e2      	lsls	r2, r4, #3
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4643      	mov	r3, r8
 80028d2:	18e3      	adds	r3, r4, r3
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	464b      	mov	r3, r9
 80028d8:	eb45 0303 	adc.w	r3, r5, r3
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ea:	4629      	mov	r1, r5
 80028ec:	028b      	lsls	r3, r1, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f4:	4621      	mov	r1, r4
 80028f6:	028a      	lsls	r2, r1, #10
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fe:	2200      	movs	r2, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	61fa      	str	r2, [r7, #28]
 8002904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002908:	f7fe f956 	bl	8000bb8 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002924:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292e:	e002      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetSysClockFreq+0x204>)
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002938:	4618      	mov	r0, r3
 800293a:	3750      	adds	r7, #80	; 0x50
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200

08002950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e041      	b.n	80029e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fd22 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f000 f9c0 	bl	8002d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e044      	b.n	8002a92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d018      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x6c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d013      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x6c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x6c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x6c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <HAL_TIM_Base_Start_IT+0xbc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x6c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d010      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	e007      	b.n	8002a90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40014000 	.word	0x40014000

08002ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0202 	mvn.w	r2, #2
 8002ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8ee 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8e0 	bl	8002cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8f1 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0204 	mvn.w	r2, #4
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8c4 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8b6 	bl	8002cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f8c7 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d122      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0208 	mvn.w	r2, #8
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f89a 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f88c 	bl	8002cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f89d 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d122      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d11b      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0210 	mvn.w	r2, #16
 8002bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2208      	movs	r2, #8
 8002be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f870 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002bf8:	e005      	b.n	8002c06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f862 	bl	8002cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f873 	bl	8002cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0201 	mvn.w	r2, #1
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fa8e 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b80      	cmp	r3, #128	; 0x80
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d107      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8e2 	bl	8002e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d10e      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f838 	bl	8002d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0220 	mvn.w	r2, #32
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8ac 	bl	8002e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <TIM_Base_SetConfig+0xe4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00f      	beq.n	8002d4c <TIM_Base_SetConfig+0x38>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d32:	d00b      	beq.n	8002d4c <TIM_Base_SetConfig+0x38>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <TIM_Base_SetConfig+0xe8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d007      	beq.n	8002d4c <TIM_Base_SetConfig+0x38>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a30      	ldr	r2, [pc, #192]	; (8002e00 <TIM_Base_SetConfig+0xec>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <TIM_Base_SetConfig+0x38>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <TIM_Base_SetConfig+0xf0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d108      	bne.n	8002d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <TIM_Base_SetConfig+0xe4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01b      	beq.n	8002d9e <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d017      	beq.n	8002d9e <TIM_Base_SetConfig+0x8a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a22      	ldr	r2, [pc, #136]	; (8002dfc <TIM_Base_SetConfig+0xe8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <TIM_Base_SetConfig+0x8a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a21      	ldr	r2, [pc, #132]	; (8002e00 <TIM_Base_SetConfig+0xec>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00f      	beq.n	8002d9e <TIM_Base_SetConfig+0x8a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <TIM_Base_SetConfig+0xf0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00b      	beq.n	8002d9e <TIM_Base_SetConfig+0x8a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <TIM_Base_SetConfig+0xf4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <TIM_Base_SetConfig+0x8a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <TIM_Base_SetConfig+0xf8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <TIM_Base_SetConfig+0x8a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <TIM_Base_SetConfig+0xfc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d108      	bne.n	8002db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <TIM_Base_SetConfig+0xe4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	615a      	str	r2, [r3, #20]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40014400 	.word	0x40014400
 8002e10:	40014800 	.word	0x40014800

08002e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10e      	bne.n	8002e6a <BSP_LED_Init+0x2e>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	e034      	b.n	8002ed4 <BSP_LED_Init+0x98>
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10e      	bne.n	8002e8e <BSP_LED_Init+0x52>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	e022      	b.n	8002ed4 <BSP_LED_Init+0x98>
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d10e      	bne.n	8002eb2 <BSP_LED_Init+0x76>
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4a20      	ldr	r2, [pc, #128]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002e9e:	f043 0308 	orr.w	r3, r3, #8
 8002ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	e010      	b.n	8002ed4 <BSP_LED_Init+0x98>
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d10d      	bne.n	8002ed4 <BSP_LED_Init+0x98>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002ec2:	f043 0308 	orr.w	r3, r3, #8
 8002ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <BSP_LED_Init+0xe4>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <BSP_LED_Init+0xe8>)
 8002ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <BSP_LED_Init+0xec>)
 8002eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef2:	f107 021c 	add.w	r2, r7, #28
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe fef7 	bl	8001cec <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <BSP_LED_Init+0xec>)
 8002f02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <BSP_LED_Init+0xe8>)
 8002f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4619      	mov	r1, r3
 8002f12:	f7ff f887 	bl	8002024 <HAL_GPIO_WritePin>
}
 8002f16:	bf00      	nop
 8002f18:	3730      	adds	r7, #48	; 0x30
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	080059e0 	.word	0x080059e0
 8002f28:	200001c8 	.word	0x200001c8

08002f2c <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <BSP_LED_On+0x2c>)
 8002f3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <BSP_LED_On+0x30>)
 8002f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f46:	2201      	movs	r2, #1
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7ff f86b 	bl	8002024 <HAL_GPIO_WritePin>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200001c8 	.word	0x200001c8
 8002f5c:	080059e0 	.word	0x080059e0

08002f60 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	460a      	mov	r2, r1
 8002f6a:	71fb      	strb	r3, [r7, #7]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <BSP_PB_Init+0x32>
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b22      	ldr	r3, [pc, #136]	; (8003004 <BSP_PB_Init+0xa4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a21      	ldr	r2, [pc, #132]	; (8003004 <BSP_PB_Init+0xa4>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <BSP_PB_Init+0xa4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002f92:	79bb      	ldrb	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d111      	bne.n	8002fbc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002f98:	2301      	movs	r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <BSP_PB_Init+0xa8>)
 8002fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb0:	f107 020c 	add.w	r2, r7, #12
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fe98 	bl	8001cec <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002fbc:	79bb      	ldrb	r3, [r7, #6]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d11c      	bne.n	8002ffc <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8002fca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <BSP_PB_Init+0xa8>)
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	f107 020c 	add.w	r2, r7, #12
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fe84 	bl	8001cec <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002fe4:	2306      	movs	r3, #6
 8002fe6:	b25b      	sxtb	r3, r3
 8002fe8:	2200      	movs	r2, #0
 8002fea:	210f      	movs	r1, #15
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe fcbc 	bl	800196a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002ff2:	2306      	movs	r3, #6
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fcd3 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	200001d8 	.word	0x200001d8

0800300c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	4a06      	ldr	r2, [pc, #24]	; (8003034 <BSP_PB_GetState+0x28>)
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	2201      	movs	r2, #1
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe ffe6 	bl	8001ff4 <HAL_GPIO_ReadPin>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200001d8 	.word	0x200001d8

08003038 <__cvt>:
 8003038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800303c:	ec55 4b10 	vmov	r4, r5, d0
 8003040:	2d00      	cmp	r5, #0
 8003042:	460e      	mov	r6, r1
 8003044:	4619      	mov	r1, r3
 8003046:	462b      	mov	r3, r5
 8003048:	bfbb      	ittet	lt
 800304a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800304e:	461d      	movlt	r5, r3
 8003050:	2300      	movge	r3, #0
 8003052:	232d      	movlt	r3, #45	; 0x2d
 8003054:	700b      	strb	r3, [r1, #0]
 8003056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003058:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800305c:	4691      	mov	r9, r2
 800305e:	f023 0820 	bic.w	r8, r3, #32
 8003062:	bfbc      	itt	lt
 8003064:	4622      	movlt	r2, r4
 8003066:	4614      	movlt	r4, r2
 8003068:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800306c:	d005      	beq.n	800307a <__cvt+0x42>
 800306e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003072:	d100      	bne.n	8003076 <__cvt+0x3e>
 8003074:	3601      	adds	r6, #1
 8003076:	2102      	movs	r1, #2
 8003078:	e000      	b.n	800307c <__cvt+0x44>
 800307a:	2103      	movs	r1, #3
 800307c:	ab03      	add	r3, sp, #12
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	ab02      	add	r3, sp, #8
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	ec45 4b10 	vmov	d0, r4, r5
 8003088:	4653      	mov	r3, sl
 800308a:	4632      	mov	r2, r6
 800308c:	f000 fe58 	bl	8003d40 <_dtoa_r>
 8003090:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003094:	4607      	mov	r7, r0
 8003096:	d102      	bne.n	800309e <__cvt+0x66>
 8003098:	f019 0f01 	tst.w	r9, #1
 800309c:	d022      	beq.n	80030e4 <__cvt+0xac>
 800309e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030a2:	eb07 0906 	add.w	r9, r7, r6
 80030a6:	d110      	bne.n	80030ca <__cvt+0x92>
 80030a8:	783b      	ldrb	r3, [r7, #0]
 80030aa:	2b30      	cmp	r3, #48	; 0x30
 80030ac:	d10a      	bne.n	80030c4 <__cvt+0x8c>
 80030ae:	2200      	movs	r2, #0
 80030b0:	2300      	movs	r3, #0
 80030b2:	4620      	mov	r0, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	f7fd fd0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80030ba:	b918      	cbnz	r0, 80030c4 <__cvt+0x8c>
 80030bc:	f1c6 0601 	rsb	r6, r6, #1
 80030c0:	f8ca 6000 	str.w	r6, [sl]
 80030c4:	f8da 3000 	ldr.w	r3, [sl]
 80030c8:	4499      	add	r9, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	2300      	movs	r3, #0
 80030ce:	4620      	mov	r0, r4
 80030d0:	4629      	mov	r1, r5
 80030d2:	f7fd fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 80030d6:	b108      	cbz	r0, 80030dc <__cvt+0xa4>
 80030d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80030dc:	2230      	movs	r2, #48	; 0x30
 80030de:	9b03      	ldr	r3, [sp, #12]
 80030e0:	454b      	cmp	r3, r9
 80030e2:	d307      	bcc.n	80030f4 <__cvt+0xbc>
 80030e4:	9b03      	ldr	r3, [sp, #12]
 80030e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030e8:	1bdb      	subs	r3, r3, r7
 80030ea:	4638      	mov	r0, r7
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	b004      	add	sp, #16
 80030f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f4:	1c59      	adds	r1, r3, #1
 80030f6:	9103      	str	r1, [sp, #12]
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e7f0      	b.n	80030de <__cvt+0xa6>

080030fc <__exponent>:
 80030fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030fe:	4603      	mov	r3, r0
 8003100:	2900      	cmp	r1, #0
 8003102:	bfb8      	it	lt
 8003104:	4249      	neglt	r1, r1
 8003106:	f803 2b02 	strb.w	r2, [r3], #2
 800310a:	bfb4      	ite	lt
 800310c:	222d      	movlt	r2, #45	; 0x2d
 800310e:	222b      	movge	r2, #43	; 0x2b
 8003110:	2909      	cmp	r1, #9
 8003112:	7042      	strb	r2, [r0, #1]
 8003114:	dd2a      	ble.n	800316c <__exponent+0x70>
 8003116:	f10d 0207 	add.w	r2, sp, #7
 800311a:	4617      	mov	r7, r2
 800311c:	260a      	movs	r6, #10
 800311e:	4694      	mov	ip, r2
 8003120:	fb91 f5f6 	sdiv	r5, r1, r6
 8003124:	fb06 1415 	mls	r4, r6, r5, r1
 8003128:	3430      	adds	r4, #48	; 0x30
 800312a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800312e:	460c      	mov	r4, r1
 8003130:	2c63      	cmp	r4, #99	; 0x63
 8003132:	f102 32ff 	add.w	r2, r2, #4294967295
 8003136:	4629      	mov	r1, r5
 8003138:	dcf1      	bgt.n	800311e <__exponent+0x22>
 800313a:	3130      	adds	r1, #48	; 0x30
 800313c:	f1ac 0402 	sub.w	r4, ip, #2
 8003140:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003144:	1c41      	adds	r1, r0, #1
 8003146:	4622      	mov	r2, r4
 8003148:	42ba      	cmp	r2, r7
 800314a:	d30a      	bcc.n	8003162 <__exponent+0x66>
 800314c:	f10d 0209 	add.w	r2, sp, #9
 8003150:	eba2 020c 	sub.w	r2, r2, ip
 8003154:	42bc      	cmp	r4, r7
 8003156:	bf88      	it	hi
 8003158:	2200      	movhi	r2, #0
 800315a:	4413      	add	r3, r2
 800315c:	1a18      	subs	r0, r3, r0
 800315e:	b003      	add	sp, #12
 8003160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003162:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003166:	f801 5f01 	strb.w	r5, [r1, #1]!
 800316a:	e7ed      	b.n	8003148 <__exponent+0x4c>
 800316c:	2330      	movs	r3, #48	; 0x30
 800316e:	3130      	adds	r1, #48	; 0x30
 8003170:	7083      	strb	r3, [r0, #2]
 8003172:	70c1      	strb	r1, [r0, #3]
 8003174:	1d03      	adds	r3, r0, #4
 8003176:	e7f1      	b.n	800315c <__exponent+0x60>

08003178 <_printf_float>:
 8003178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317c:	ed2d 8b02 	vpush	{d8}
 8003180:	b08d      	sub	sp, #52	; 0x34
 8003182:	460c      	mov	r4, r1
 8003184:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003188:	4616      	mov	r6, r2
 800318a:	461f      	mov	r7, r3
 800318c:	4605      	mov	r5, r0
 800318e:	f000 fcc7 	bl	8003b20 <_localeconv_r>
 8003192:	f8d0 a000 	ldr.w	sl, [r0]
 8003196:	4650      	mov	r0, sl
 8003198:	f7fd f872 	bl	8000280 <strlen>
 800319c:	2300      	movs	r3, #0
 800319e:	930a      	str	r3, [sp, #40]	; 0x28
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	9305      	str	r3, [sp, #20]
 80031a4:	f8d8 3000 	ldr.w	r3, [r8]
 80031a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80031ac:	3307      	adds	r3, #7
 80031ae:	f023 0307 	bic.w	r3, r3, #7
 80031b2:	f103 0208 	add.w	r2, r3, #8
 80031b6:	f8c8 2000 	str.w	r2, [r8]
 80031ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80031be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80031c2:	9307      	str	r3, [sp, #28]
 80031c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80031c8:	ee08 0a10 	vmov	s16, r0
 80031cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80031d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031d4:	4b9e      	ldr	r3, [pc, #632]	; (8003450 <_printf_float+0x2d8>)
 80031d6:	f04f 32ff 	mov.w	r2, #4294967295
 80031da:	f7fd fcaf 	bl	8000b3c <__aeabi_dcmpun>
 80031de:	bb88      	cbnz	r0, 8003244 <_printf_float+0xcc>
 80031e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031e4:	4b9a      	ldr	r3, [pc, #616]	; (8003450 <_printf_float+0x2d8>)
 80031e6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ea:	f7fd fc89 	bl	8000b00 <__aeabi_dcmple>
 80031ee:	bb48      	cbnz	r0, 8003244 <_printf_float+0xcc>
 80031f0:	2200      	movs	r2, #0
 80031f2:	2300      	movs	r3, #0
 80031f4:	4640      	mov	r0, r8
 80031f6:	4649      	mov	r1, r9
 80031f8:	f7fd fc78 	bl	8000aec <__aeabi_dcmplt>
 80031fc:	b110      	cbz	r0, 8003204 <_printf_float+0x8c>
 80031fe:	232d      	movs	r3, #45	; 0x2d
 8003200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003204:	4a93      	ldr	r2, [pc, #588]	; (8003454 <_printf_float+0x2dc>)
 8003206:	4b94      	ldr	r3, [pc, #592]	; (8003458 <_printf_float+0x2e0>)
 8003208:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800320c:	bf94      	ite	ls
 800320e:	4690      	movls	r8, r2
 8003210:	4698      	movhi	r8, r3
 8003212:	2303      	movs	r3, #3
 8003214:	6123      	str	r3, [r4, #16]
 8003216:	9b05      	ldr	r3, [sp, #20]
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	f04f 0900 	mov.w	r9, #0
 8003222:	9700      	str	r7, [sp, #0]
 8003224:	4633      	mov	r3, r6
 8003226:	aa0b      	add	r2, sp, #44	; 0x2c
 8003228:	4621      	mov	r1, r4
 800322a:	4628      	mov	r0, r5
 800322c:	f000 f9da 	bl	80035e4 <_printf_common>
 8003230:	3001      	adds	r0, #1
 8003232:	f040 8090 	bne.w	8003356 <_printf_float+0x1de>
 8003236:	f04f 30ff 	mov.w	r0, #4294967295
 800323a:	b00d      	add	sp, #52	; 0x34
 800323c:	ecbd 8b02 	vpop	{d8}
 8003240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	4640      	mov	r0, r8
 800324a:	4649      	mov	r1, r9
 800324c:	f7fd fc76 	bl	8000b3c <__aeabi_dcmpun>
 8003250:	b140      	cbz	r0, 8003264 <_printf_float+0xec>
 8003252:	464b      	mov	r3, r9
 8003254:	2b00      	cmp	r3, #0
 8003256:	bfbc      	itt	lt
 8003258:	232d      	movlt	r3, #45	; 0x2d
 800325a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800325e:	4a7f      	ldr	r2, [pc, #508]	; (800345c <_printf_float+0x2e4>)
 8003260:	4b7f      	ldr	r3, [pc, #508]	; (8003460 <_printf_float+0x2e8>)
 8003262:	e7d1      	b.n	8003208 <_printf_float+0x90>
 8003264:	6863      	ldr	r3, [r4, #4]
 8003266:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800326a:	9206      	str	r2, [sp, #24]
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	d13f      	bne.n	80032f0 <_printf_float+0x178>
 8003270:	2306      	movs	r3, #6
 8003272:	6063      	str	r3, [r4, #4]
 8003274:	9b05      	ldr	r3, [sp, #20]
 8003276:	6861      	ldr	r1, [r4, #4]
 8003278:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800327c:	2300      	movs	r3, #0
 800327e:	9303      	str	r3, [sp, #12]
 8003280:	ab0a      	add	r3, sp, #40	; 0x28
 8003282:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003286:	ab09      	add	r3, sp, #36	; 0x24
 8003288:	ec49 8b10 	vmov	d0, r8, r9
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6022      	str	r2, [r4, #0]
 8003290:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003294:	4628      	mov	r0, r5
 8003296:	f7ff fecf 	bl	8003038 <__cvt>
 800329a:	9b06      	ldr	r3, [sp, #24]
 800329c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800329e:	2b47      	cmp	r3, #71	; 0x47
 80032a0:	4680      	mov	r8, r0
 80032a2:	d108      	bne.n	80032b6 <_printf_float+0x13e>
 80032a4:	1cc8      	adds	r0, r1, #3
 80032a6:	db02      	blt.n	80032ae <_printf_float+0x136>
 80032a8:	6863      	ldr	r3, [r4, #4]
 80032aa:	4299      	cmp	r1, r3
 80032ac:	dd41      	ble.n	8003332 <_printf_float+0x1ba>
 80032ae:	f1ab 0302 	sub.w	r3, fp, #2
 80032b2:	fa5f fb83 	uxtb.w	fp, r3
 80032b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80032ba:	d820      	bhi.n	80032fe <_printf_float+0x186>
 80032bc:	3901      	subs	r1, #1
 80032be:	465a      	mov	r2, fp
 80032c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032c4:	9109      	str	r1, [sp, #36]	; 0x24
 80032c6:	f7ff ff19 	bl	80030fc <__exponent>
 80032ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032cc:	1813      	adds	r3, r2, r0
 80032ce:	2a01      	cmp	r2, #1
 80032d0:	4681      	mov	r9, r0
 80032d2:	6123      	str	r3, [r4, #16]
 80032d4:	dc02      	bgt.n	80032dc <_printf_float+0x164>
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	07d2      	lsls	r2, r2, #31
 80032da:	d501      	bpl.n	80032e0 <_printf_float+0x168>
 80032dc:	3301      	adds	r3, #1
 80032de:	6123      	str	r3, [r4, #16]
 80032e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d09c      	beq.n	8003222 <_printf_float+0xaa>
 80032e8:	232d      	movs	r3, #45	; 0x2d
 80032ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ee:	e798      	b.n	8003222 <_printf_float+0xaa>
 80032f0:	9a06      	ldr	r2, [sp, #24]
 80032f2:	2a47      	cmp	r2, #71	; 0x47
 80032f4:	d1be      	bne.n	8003274 <_printf_float+0xfc>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1bc      	bne.n	8003274 <_printf_float+0xfc>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e7b9      	b.n	8003272 <_printf_float+0xfa>
 80032fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003302:	d118      	bne.n	8003336 <_printf_float+0x1be>
 8003304:	2900      	cmp	r1, #0
 8003306:	6863      	ldr	r3, [r4, #4]
 8003308:	dd0b      	ble.n	8003322 <_printf_float+0x1aa>
 800330a:	6121      	str	r1, [r4, #16]
 800330c:	b913      	cbnz	r3, 8003314 <_printf_float+0x19c>
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	07d0      	lsls	r0, r2, #31
 8003312:	d502      	bpl.n	800331a <_printf_float+0x1a2>
 8003314:	3301      	adds	r3, #1
 8003316:	440b      	add	r3, r1
 8003318:	6123      	str	r3, [r4, #16]
 800331a:	65a1      	str	r1, [r4, #88]	; 0x58
 800331c:	f04f 0900 	mov.w	r9, #0
 8003320:	e7de      	b.n	80032e0 <_printf_float+0x168>
 8003322:	b913      	cbnz	r3, 800332a <_printf_float+0x1b2>
 8003324:	6822      	ldr	r2, [r4, #0]
 8003326:	07d2      	lsls	r2, r2, #31
 8003328:	d501      	bpl.n	800332e <_printf_float+0x1b6>
 800332a:	3302      	adds	r3, #2
 800332c:	e7f4      	b.n	8003318 <_printf_float+0x1a0>
 800332e:	2301      	movs	r3, #1
 8003330:	e7f2      	b.n	8003318 <_printf_float+0x1a0>
 8003332:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003338:	4299      	cmp	r1, r3
 800333a:	db05      	blt.n	8003348 <_printf_float+0x1d0>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	6121      	str	r1, [r4, #16]
 8003340:	07d8      	lsls	r0, r3, #31
 8003342:	d5ea      	bpl.n	800331a <_printf_float+0x1a2>
 8003344:	1c4b      	adds	r3, r1, #1
 8003346:	e7e7      	b.n	8003318 <_printf_float+0x1a0>
 8003348:	2900      	cmp	r1, #0
 800334a:	bfd4      	ite	le
 800334c:	f1c1 0202 	rsble	r2, r1, #2
 8003350:	2201      	movgt	r2, #1
 8003352:	4413      	add	r3, r2
 8003354:	e7e0      	b.n	8003318 <_printf_float+0x1a0>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	055a      	lsls	r2, r3, #21
 800335a:	d407      	bmi.n	800336c <_printf_float+0x1f4>
 800335c:	6923      	ldr	r3, [r4, #16]
 800335e:	4642      	mov	r2, r8
 8003360:	4631      	mov	r1, r6
 8003362:	4628      	mov	r0, r5
 8003364:	47b8      	blx	r7
 8003366:	3001      	adds	r0, #1
 8003368:	d12c      	bne.n	80033c4 <_printf_float+0x24c>
 800336a:	e764      	b.n	8003236 <_printf_float+0xbe>
 800336c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003370:	f240 80e0 	bls.w	8003534 <_printf_float+0x3bc>
 8003374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003378:	2200      	movs	r2, #0
 800337a:	2300      	movs	r3, #0
 800337c:	f7fd fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 8003380:	2800      	cmp	r0, #0
 8003382:	d034      	beq.n	80033ee <_printf_float+0x276>
 8003384:	4a37      	ldr	r2, [pc, #220]	; (8003464 <_printf_float+0x2ec>)
 8003386:	2301      	movs	r3, #1
 8003388:	4631      	mov	r1, r6
 800338a:	4628      	mov	r0, r5
 800338c:	47b8      	blx	r7
 800338e:	3001      	adds	r0, #1
 8003390:	f43f af51 	beq.w	8003236 <_printf_float+0xbe>
 8003394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003398:	429a      	cmp	r2, r3
 800339a:	db02      	blt.n	80033a2 <_printf_float+0x22a>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	07d8      	lsls	r0, r3, #31
 80033a0:	d510      	bpl.n	80033c4 <_printf_float+0x24c>
 80033a2:	ee18 3a10 	vmov	r3, s16
 80033a6:	4652      	mov	r2, sl
 80033a8:	4631      	mov	r1, r6
 80033aa:	4628      	mov	r0, r5
 80033ac:	47b8      	blx	r7
 80033ae:	3001      	adds	r0, #1
 80033b0:	f43f af41 	beq.w	8003236 <_printf_float+0xbe>
 80033b4:	f04f 0800 	mov.w	r8, #0
 80033b8:	f104 091a 	add.w	r9, r4, #26
 80033bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033be:	3b01      	subs	r3, #1
 80033c0:	4543      	cmp	r3, r8
 80033c2:	dc09      	bgt.n	80033d8 <_printf_float+0x260>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	079b      	lsls	r3, r3, #30
 80033c8:	f100 8107 	bmi.w	80035da <_printf_float+0x462>
 80033cc:	68e0      	ldr	r0, [r4, #12]
 80033ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033d0:	4298      	cmp	r0, r3
 80033d2:	bfb8      	it	lt
 80033d4:	4618      	movlt	r0, r3
 80033d6:	e730      	b.n	800323a <_printf_float+0xc2>
 80033d8:	2301      	movs	r3, #1
 80033da:	464a      	mov	r2, r9
 80033dc:	4631      	mov	r1, r6
 80033de:	4628      	mov	r0, r5
 80033e0:	47b8      	blx	r7
 80033e2:	3001      	adds	r0, #1
 80033e4:	f43f af27 	beq.w	8003236 <_printf_float+0xbe>
 80033e8:	f108 0801 	add.w	r8, r8, #1
 80033ec:	e7e6      	b.n	80033bc <_printf_float+0x244>
 80033ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	dc39      	bgt.n	8003468 <_printf_float+0x2f0>
 80033f4:	4a1b      	ldr	r2, [pc, #108]	; (8003464 <_printf_float+0x2ec>)
 80033f6:	2301      	movs	r3, #1
 80033f8:	4631      	mov	r1, r6
 80033fa:	4628      	mov	r0, r5
 80033fc:	47b8      	blx	r7
 80033fe:	3001      	adds	r0, #1
 8003400:	f43f af19 	beq.w	8003236 <_printf_float+0xbe>
 8003404:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003408:	4313      	orrs	r3, r2
 800340a:	d102      	bne.n	8003412 <_printf_float+0x29a>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	07d9      	lsls	r1, r3, #31
 8003410:	d5d8      	bpl.n	80033c4 <_printf_float+0x24c>
 8003412:	ee18 3a10 	vmov	r3, s16
 8003416:	4652      	mov	r2, sl
 8003418:	4631      	mov	r1, r6
 800341a:	4628      	mov	r0, r5
 800341c:	47b8      	blx	r7
 800341e:	3001      	adds	r0, #1
 8003420:	f43f af09 	beq.w	8003236 <_printf_float+0xbe>
 8003424:	f04f 0900 	mov.w	r9, #0
 8003428:	f104 0a1a 	add.w	sl, r4, #26
 800342c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800342e:	425b      	negs	r3, r3
 8003430:	454b      	cmp	r3, r9
 8003432:	dc01      	bgt.n	8003438 <_printf_float+0x2c0>
 8003434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003436:	e792      	b.n	800335e <_printf_float+0x1e6>
 8003438:	2301      	movs	r3, #1
 800343a:	4652      	mov	r2, sl
 800343c:	4631      	mov	r1, r6
 800343e:	4628      	mov	r0, r5
 8003440:	47b8      	blx	r7
 8003442:	3001      	adds	r0, #1
 8003444:	f43f aef7 	beq.w	8003236 <_printf_float+0xbe>
 8003448:	f109 0901 	add.w	r9, r9, #1
 800344c:	e7ee      	b.n	800342c <_printf_float+0x2b4>
 800344e:	bf00      	nop
 8003450:	7fefffff 	.word	0x7fefffff
 8003454:	080059e8 	.word	0x080059e8
 8003458:	080059ec 	.word	0x080059ec
 800345c:	080059f0 	.word	0x080059f0
 8003460:	080059f4 	.word	0x080059f4
 8003464:	080059f8 	.word	0x080059f8
 8003468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800346a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800346c:	429a      	cmp	r2, r3
 800346e:	bfa8      	it	ge
 8003470:	461a      	movge	r2, r3
 8003472:	2a00      	cmp	r2, #0
 8003474:	4691      	mov	r9, r2
 8003476:	dc37      	bgt.n	80034e8 <_printf_float+0x370>
 8003478:	f04f 0b00 	mov.w	fp, #0
 800347c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003480:	f104 021a 	add.w	r2, r4, #26
 8003484:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003486:	9305      	str	r3, [sp, #20]
 8003488:	eba3 0309 	sub.w	r3, r3, r9
 800348c:	455b      	cmp	r3, fp
 800348e:	dc33      	bgt.n	80034f8 <_printf_float+0x380>
 8003490:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003494:	429a      	cmp	r2, r3
 8003496:	db3b      	blt.n	8003510 <_printf_float+0x398>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	07da      	lsls	r2, r3, #31
 800349c:	d438      	bmi.n	8003510 <_printf_float+0x398>
 800349e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80034a2:	eba2 0903 	sub.w	r9, r2, r3
 80034a6:	9b05      	ldr	r3, [sp, #20]
 80034a8:	1ad2      	subs	r2, r2, r3
 80034aa:	4591      	cmp	r9, r2
 80034ac:	bfa8      	it	ge
 80034ae:	4691      	movge	r9, r2
 80034b0:	f1b9 0f00 	cmp.w	r9, #0
 80034b4:	dc35      	bgt.n	8003522 <_printf_float+0x3aa>
 80034b6:	f04f 0800 	mov.w	r8, #0
 80034ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034be:	f104 0a1a 	add.w	sl, r4, #26
 80034c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	eba3 0309 	sub.w	r3, r3, r9
 80034cc:	4543      	cmp	r3, r8
 80034ce:	f77f af79 	ble.w	80033c4 <_printf_float+0x24c>
 80034d2:	2301      	movs	r3, #1
 80034d4:	4652      	mov	r2, sl
 80034d6:	4631      	mov	r1, r6
 80034d8:	4628      	mov	r0, r5
 80034da:	47b8      	blx	r7
 80034dc:	3001      	adds	r0, #1
 80034de:	f43f aeaa 	beq.w	8003236 <_printf_float+0xbe>
 80034e2:	f108 0801 	add.w	r8, r8, #1
 80034e6:	e7ec      	b.n	80034c2 <_printf_float+0x34a>
 80034e8:	4613      	mov	r3, r2
 80034ea:	4631      	mov	r1, r6
 80034ec:	4642      	mov	r2, r8
 80034ee:	4628      	mov	r0, r5
 80034f0:	47b8      	blx	r7
 80034f2:	3001      	adds	r0, #1
 80034f4:	d1c0      	bne.n	8003478 <_printf_float+0x300>
 80034f6:	e69e      	b.n	8003236 <_printf_float+0xbe>
 80034f8:	2301      	movs	r3, #1
 80034fa:	4631      	mov	r1, r6
 80034fc:	4628      	mov	r0, r5
 80034fe:	9205      	str	r2, [sp, #20]
 8003500:	47b8      	blx	r7
 8003502:	3001      	adds	r0, #1
 8003504:	f43f ae97 	beq.w	8003236 <_printf_float+0xbe>
 8003508:	9a05      	ldr	r2, [sp, #20]
 800350a:	f10b 0b01 	add.w	fp, fp, #1
 800350e:	e7b9      	b.n	8003484 <_printf_float+0x30c>
 8003510:	ee18 3a10 	vmov	r3, s16
 8003514:	4652      	mov	r2, sl
 8003516:	4631      	mov	r1, r6
 8003518:	4628      	mov	r0, r5
 800351a:	47b8      	blx	r7
 800351c:	3001      	adds	r0, #1
 800351e:	d1be      	bne.n	800349e <_printf_float+0x326>
 8003520:	e689      	b.n	8003236 <_printf_float+0xbe>
 8003522:	9a05      	ldr	r2, [sp, #20]
 8003524:	464b      	mov	r3, r9
 8003526:	4442      	add	r2, r8
 8003528:	4631      	mov	r1, r6
 800352a:	4628      	mov	r0, r5
 800352c:	47b8      	blx	r7
 800352e:	3001      	adds	r0, #1
 8003530:	d1c1      	bne.n	80034b6 <_printf_float+0x33e>
 8003532:	e680      	b.n	8003236 <_printf_float+0xbe>
 8003534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003536:	2a01      	cmp	r2, #1
 8003538:	dc01      	bgt.n	800353e <_printf_float+0x3c6>
 800353a:	07db      	lsls	r3, r3, #31
 800353c:	d53a      	bpl.n	80035b4 <_printf_float+0x43c>
 800353e:	2301      	movs	r3, #1
 8003540:	4642      	mov	r2, r8
 8003542:	4631      	mov	r1, r6
 8003544:	4628      	mov	r0, r5
 8003546:	47b8      	blx	r7
 8003548:	3001      	adds	r0, #1
 800354a:	f43f ae74 	beq.w	8003236 <_printf_float+0xbe>
 800354e:	ee18 3a10 	vmov	r3, s16
 8003552:	4652      	mov	r2, sl
 8003554:	4631      	mov	r1, r6
 8003556:	4628      	mov	r0, r5
 8003558:	47b8      	blx	r7
 800355a:	3001      	adds	r0, #1
 800355c:	f43f ae6b 	beq.w	8003236 <_printf_float+0xbe>
 8003560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003564:	2200      	movs	r2, #0
 8003566:	2300      	movs	r3, #0
 8003568:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800356c:	f7fd fab4 	bl	8000ad8 <__aeabi_dcmpeq>
 8003570:	b9d8      	cbnz	r0, 80035aa <_printf_float+0x432>
 8003572:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003576:	f108 0201 	add.w	r2, r8, #1
 800357a:	4631      	mov	r1, r6
 800357c:	4628      	mov	r0, r5
 800357e:	47b8      	blx	r7
 8003580:	3001      	adds	r0, #1
 8003582:	d10e      	bne.n	80035a2 <_printf_float+0x42a>
 8003584:	e657      	b.n	8003236 <_printf_float+0xbe>
 8003586:	2301      	movs	r3, #1
 8003588:	4652      	mov	r2, sl
 800358a:	4631      	mov	r1, r6
 800358c:	4628      	mov	r0, r5
 800358e:	47b8      	blx	r7
 8003590:	3001      	adds	r0, #1
 8003592:	f43f ae50 	beq.w	8003236 <_printf_float+0xbe>
 8003596:	f108 0801 	add.w	r8, r8, #1
 800359a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	4543      	cmp	r3, r8
 80035a0:	dcf1      	bgt.n	8003586 <_printf_float+0x40e>
 80035a2:	464b      	mov	r3, r9
 80035a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035a8:	e6da      	b.n	8003360 <_printf_float+0x1e8>
 80035aa:	f04f 0800 	mov.w	r8, #0
 80035ae:	f104 0a1a 	add.w	sl, r4, #26
 80035b2:	e7f2      	b.n	800359a <_printf_float+0x422>
 80035b4:	2301      	movs	r3, #1
 80035b6:	4642      	mov	r2, r8
 80035b8:	e7df      	b.n	800357a <_printf_float+0x402>
 80035ba:	2301      	movs	r3, #1
 80035bc:	464a      	mov	r2, r9
 80035be:	4631      	mov	r1, r6
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b8      	blx	r7
 80035c4:	3001      	adds	r0, #1
 80035c6:	f43f ae36 	beq.w	8003236 <_printf_float+0xbe>
 80035ca:	f108 0801 	add.w	r8, r8, #1
 80035ce:	68e3      	ldr	r3, [r4, #12]
 80035d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035d2:	1a5b      	subs	r3, r3, r1
 80035d4:	4543      	cmp	r3, r8
 80035d6:	dcf0      	bgt.n	80035ba <_printf_float+0x442>
 80035d8:	e6f8      	b.n	80033cc <_printf_float+0x254>
 80035da:	f04f 0800 	mov.w	r8, #0
 80035de:	f104 0919 	add.w	r9, r4, #25
 80035e2:	e7f4      	b.n	80035ce <_printf_float+0x456>

080035e4 <_printf_common>:
 80035e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e8:	4616      	mov	r6, r2
 80035ea:	4699      	mov	r9, r3
 80035ec:	688a      	ldr	r2, [r1, #8]
 80035ee:	690b      	ldr	r3, [r1, #16]
 80035f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	bfb8      	it	lt
 80035f8:	4613      	movlt	r3, r2
 80035fa:	6033      	str	r3, [r6, #0]
 80035fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003600:	4607      	mov	r7, r0
 8003602:	460c      	mov	r4, r1
 8003604:	b10a      	cbz	r2, 800360a <_printf_common+0x26>
 8003606:	3301      	adds	r3, #1
 8003608:	6033      	str	r3, [r6, #0]
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	0699      	lsls	r1, r3, #26
 800360e:	bf42      	ittt	mi
 8003610:	6833      	ldrmi	r3, [r6, #0]
 8003612:	3302      	addmi	r3, #2
 8003614:	6033      	strmi	r3, [r6, #0]
 8003616:	6825      	ldr	r5, [r4, #0]
 8003618:	f015 0506 	ands.w	r5, r5, #6
 800361c:	d106      	bne.n	800362c <_printf_common+0x48>
 800361e:	f104 0a19 	add.w	sl, r4, #25
 8003622:	68e3      	ldr	r3, [r4, #12]
 8003624:	6832      	ldr	r2, [r6, #0]
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	42ab      	cmp	r3, r5
 800362a:	dc26      	bgt.n	800367a <_printf_common+0x96>
 800362c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003630:	1e13      	subs	r3, r2, #0
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	bf18      	it	ne
 8003636:	2301      	movne	r3, #1
 8003638:	0692      	lsls	r2, r2, #26
 800363a:	d42b      	bmi.n	8003694 <_printf_common+0xb0>
 800363c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003640:	4649      	mov	r1, r9
 8003642:	4638      	mov	r0, r7
 8003644:	47c0      	blx	r8
 8003646:	3001      	adds	r0, #1
 8003648:	d01e      	beq.n	8003688 <_printf_common+0xa4>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	6922      	ldr	r2, [r4, #16]
 800364e:	f003 0306 	and.w	r3, r3, #6
 8003652:	2b04      	cmp	r3, #4
 8003654:	bf02      	ittt	eq
 8003656:	68e5      	ldreq	r5, [r4, #12]
 8003658:	6833      	ldreq	r3, [r6, #0]
 800365a:	1aed      	subeq	r5, r5, r3
 800365c:	68a3      	ldr	r3, [r4, #8]
 800365e:	bf0c      	ite	eq
 8003660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003664:	2500      	movne	r5, #0
 8003666:	4293      	cmp	r3, r2
 8003668:	bfc4      	itt	gt
 800366a:	1a9b      	subgt	r3, r3, r2
 800366c:	18ed      	addgt	r5, r5, r3
 800366e:	2600      	movs	r6, #0
 8003670:	341a      	adds	r4, #26
 8003672:	42b5      	cmp	r5, r6
 8003674:	d11a      	bne.n	80036ac <_printf_common+0xc8>
 8003676:	2000      	movs	r0, #0
 8003678:	e008      	b.n	800368c <_printf_common+0xa8>
 800367a:	2301      	movs	r3, #1
 800367c:	4652      	mov	r2, sl
 800367e:	4649      	mov	r1, r9
 8003680:	4638      	mov	r0, r7
 8003682:	47c0      	blx	r8
 8003684:	3001      	adds	r0, #1
 8003686:	d103      	bne.n	8003690 <_printf_common+0xac>
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003690:	3501      	adds	r5, #1
 8003692:	e7c6      	b.n	8003622 <_printf_common+0x3e>
 8003694:	18e1      	adds	r1, r4, r3
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	2030      	movs	r0, #48	; 0x30
 800369a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800369e:	4422      	add	r2, r4
 80036a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036a8:	3302      	adds	r3, #2
 80036aa:	e7c7      	b.n	800363c <_printf_common+0x58>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4622      	mov	r2, r4
 80036b0:	4649      	mov	r1, r9
 80036b2:	4638      	mov	r0, r7
 80036b4:	47c0      	blx	r8
 80036b6:	3001      	adds	r0, #1
 80036b8:	d0e6      	beq.n	8003688 <_printf_common+0xa4>
 80036ba:	3601      	adds	r6, #1
 80036bc:	e7d9      	b.n	8003672 <_printf_common+0x8e>
	...

080036c0 <_printf_i>:
 80036c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	7e0f      	ldrb	r7, [r1, #24]
 80036c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036c8:	2f78      	cmp	r7, #120	; 0x78
 80036ca:	4691      	mov	r9, r2
 80036cc:	4680      	mov	r8, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	469a      	mov	sl, r3
 80036d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036d6:	d807      	bhi.n	80036e8 <_printf_i+0x28>
 80036d8:	2f62      	cmp	r7, #98	; 0x62
 80036da:	d80a      	bhi.n	80036f2 <_printf_i+0x32>
 80036dc:	2f00      	cmp	r7, #0
 80036de:	f000 80d4 	beq.w	800388a <_printf_i+0x1ca>
 80036e2:	2f58      	cmp	r7, #88	; 0x58
 80036e4:	f000 80c0 	beq.w	8003868 <_printf_i+0x1a8>
 80036e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036f0:	e03a      	b.n	8003768 <_printf_i+0xa8>
 80036f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036f6:	2b15      	cmp	r3, #21
 80036f8:	d8f6      	bhi.n	80036e8 <_printf_i+0x28>
 80036fa:	a101      	add	r1, pc, #4	; (adr r1, 8003700 <_printf_i+0x40>)
 80036fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003700:	08003759 	.word	0x08003759
 8003704:	0800376d 	.word	0x0800376d
 8003708:	080036e9 	.word	0x080036e9
 800370c:	080036e9 	.word	0x080036e9
 8003710:	080036e9 	.word	0x080036e9
 8003714:	080036e9 	.word	0x080036e9
 8003718:	0800376d 	.word	0x0800376d
 800371c:	080036e9 	.word	0x080036e9
 8003720:	080036e9 	.word	0x080036e9
 8003724:	080036e9 	.word	0x080036e9
 8003728:	080036e9 	.word	0x080036e9
 800372c:	08003871 	.word	0x08003871
 8003730:	08003799 	.word	0x08003799
 8003734:	0800382b 	.word	0x0800382b
 8003738:	080036e9 	.word	0x080036e9
 800373c:	080036e9 	.word	0x080036e9
 8003740:	08003893 	.word	0x08003893
 8003744:	080036e9 	.word	0x080036e9
 8003748:	08003799 	.word	0x08003799
 800374c:	080036e9 	.word	0x080036e9
 8003750:	080036e9 	.word	0x080036e9
 8003754:	08003833 	.word	0x08003833
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	602a      	str	r2, [r5, #0]
 8003760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003768:	2301      	movs	r3, #1
 800376a:	e09f      	b.n	80038ac <_printf_i+0x1ec>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	682b      	ldr	r3, [r5, #0]
 8003770:	0607      	lsls	r7, r0, #24
 8003772:	f103 0104 	add.w	r1, r3, #4
 8003776:	6029      	str	r1, [r5, #0]
 8003778:	d501      	bpl.n	800377e <_printf_i+0xbe>
 800377a:	681e      	ldr	r6, [r3, #0]
 800377c:	e003      	b.n	8003786 <_printf_i+0xc6>
 800377e:	0646      	lsls	r6, r0, #25
 8003780:	d5fb      	bpl.n	800377a <_printf_i+0xba>
 8003782:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003786:	2e00      	cmp	r6, #0
 8003788:	da03      	bge.n	8003792 <_printf_i+0xd2>
 800378a:	232d      	movs	r3, #45	; 0x2d
 800378c:	4276      	negs	r6, r6
 800378e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003792:	485a      	ldr	r0, [pc, #360]	; (80038fc <_printf_i+0x23c>)
 8003794:	230a      	movs	r3, #10
 8003796:	e012      	b.n	80037be <_printf_i+0xfe>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	6820      	ldr	r0, [r4, #0]
 800379c:	1d19      	adds	r1, r3, #4
 800379e:	6029      	str	r1, [r5, #0]
 80037a0:	0605      	lsls	r5, r0, #24
 80037a2:	d501      	bpl.n	80037a8 <_printf_i+0xe8>
 80037a4:	681e      	ldr	r6, [r3, #0]
 80037a6:	e002      	b.n	80037ae <_printf_i+0xee>
 80037a8:	0641      	lsls	r1, r0, #25
 80037aa:	d5fb      	bpl.n	80037a4 <_printf_i+0xe4>
 80037ac:	881e      	ldrh	r6, [r3, #0]
 80037ae:	4853      	ldr	r0, [pc, #332]	; (80038fc <_printf_i+0x23c>)
 80037b0:	2f6f      	cmp	r7, #111	; 0x6f
 80037b2:	bf0c      	ite	eq
 80037b4:	2308      	moveq	r3, #8
 80037b6:	230a      	movne	r3, #10
 80037b8:	2100      	movs	r1, #0
 80037ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037be:	6865      	ldr	r5, [r4, #4]
 80037c0:	60a5      	str	r5, [r4, #8]
 80037c2:	2d00      	cmp	r5, #0
 80037c4:	bfa2      	ittt	ge
 80037c6:	6821      	ldrge	r1, [r4, #0]
 80037c8:	f021 0104 	bicge.w	r1, r1, #4
 80037cc:	6021      	strge	r1, [r4, #0]
 80037ce:	b90e      	cbnz	r6, 80037d4 <_printf_i+0x114>
 80037d0:	2d00      	cmp	r5, #0
 80037d2:	d04b      	beq.n	800386c <_printf_i+0x1ac>
 80037d4:	4615      	mov	r5, r2
 80037d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80037da:	fb03 6711 	mls	r7, r3, r1, r6
 80037de:	5dc7      	ldrb	r7, [r0, r7]
 80037e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037e4:	4637      	mov	r7, r6
 80037e6:	42bb      	cmp	r3, r7
 80037e8:	460e      	mov	r6, r1
 80037ea:	d9f4      	bls.n	80037d6 <_printf_i+0x116>
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d10b      	bne.n	8003808 <_printf_i+0x148>
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	07de      	lsls	r6, r3, #31
 80037f4:	d508      	bpl.n	8003808 <_printf_i+0x148>
 80037f6:	6923      	ldr	r3, [r4, #16]
 80037f8:	6861      	ldr	r1, [r4, #4]
 80037fa:	4299      	cmp	r1, r3
 80037fc:	bfde      	ittt	le
 80037fe:	2330      	movle	r3, #48	; 0x30
 8003800:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003804:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003808:	1b52      	subs	r2, r2, r5
 800380a:	6122      	str	r2, [r4, #16]
 800380c:	f8cd a000 	str.w	sl, [sp]
 8003810:	464b      	mov	r3, r9
 8003812:	aa03      	add	r2, sp, #12
 8003814:	4621      	mov	r1, r4
 8003816:	4640      	mov	r0, r8
 8003818:	f7ff fee4 	bl	80035e4 <_printf_common>
 800381c:	3001      	adds	r0, #1
 800381e:	d14a      	bne.n	80038b6 <_printf_i+0x1f6>
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	b004      	add	sp, #16
 8003826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	f043 0320 	orr.w	r3, r3, #32
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	4833      	ldr	r0, [pc, #204]	; (8003900 <_printf_i+0x240>)
 8003834:	2778      	movs	r7, #120	; 0x78
 8003836:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	6829      	ldr	r1, [r5, #0]
 800383e:	061f      	lsls	r7, r3, #24
 8003840:	f851 6b04 	ldr.w	r6, [r1], #4
 8003844:	d402      	bmi.n	800384c <_printf_i+0x18c>
 8003846:	065f      	lsls	r7, r3, #25
 8003848:	bf48      	it	mi
 800384a:	b2b6      	uxthmi	r6, r6
 800384c:	07df      	lsls	r7, r3, #31
 800384e:	bf48      	it	mi
 8003850:	f043 0320 	orrmi.w	r3, r3, #32
 8003854:	6029      	str	r1, [r5, #0]
 8003856:	bf48      	it	mi
 8003858:	6023      	strmi	r3, [r4, #0]
 800385a:	b91e      	cbnz	r6, 8003864 <_printf_i+0x1a4>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	f023 0320 	bic.w	r3, r3, #32
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	2310      	movs	r3, #16
 8003866:	e7a7      	b.n	80037b8 <_printf_i+0xf8>
 8003868:	4824      	ldr	r0, [pc, #144]	; (80038fc <_printf_i+0x23c>)
 800386a:	e7e4      	b.n	8003836 <_printf_i+0x176>
 800386c:	4615      	mov	r5, r2
 800386e:	e7bd      	b.n	80037ec <_printf_i+0x12c>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	6826      	ldr	r6, [r4, #0]
 8003874:	6961      	ldr	r1, [r4, #20]
 8003876:	1d18      	adds	r0, r3, #4
 8003878:	6028      	str	r0, [r5, #0]
 800387a:	0635      	lsls	r5, r6, #24
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	d501      	bpl.n	8003884 <_printf_i+0x1c4>
 8003880:	6019      	str	r1, [r3, #0]
 8003882:	e002      	b.n	800388a <_printf_i+0x1ca>
 8003884:	0670      	lsls	r0, r6, #25
 8003886:	d5fb      	bpl.n	8003880 <_printf_i+0x1c0>
 8003888:	8019      	strh	r1, [r3, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	6123      	str	r3, [r4, #16]
 800388e:	4615      	mov	r5, r2
 8003890:	e7bc      	b.n	800380c <_printf_i+0x14c>
 8003892:	682b      	ldr	r3, [r5, #0]
 8003894:	1d1a      	adds	r2, r3, #4
 8003896:	602a      	str	r2, [r5, #0]
 8003898:	681d      	ldr	r5, [r3, #0]
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	2100      	movs	r1, #0
 800389e:	4628      	mov	r0, r5
 80038a0:	f7fc fc9e 	bl	80001e0 <memchr>
 80038a4:	b108      	cbz	r0, 80038aa <_printf_i+0x1ea>
 80038a6:	1b40      	subs	r0, r0, r5
 80038a8:	6060      	str	r0, [r4, #4]
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	2300      	movs	r3, #0
 80038b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b4:	e7aa      	b.n	800380c <_printf_i+0x14c>
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	462a      	mov	r2, r5
 80038ba:	4649      	mov	r1, r9
 80038bc:	4640      	mov	r0, r8
 80038be:	47d0      	blx	sl
 80038c0:	3001      	adds	r0, #1
 80038c2:	d0ad      	beq.n	8003820 <_printf_i+0x160>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	079b      	lsls	r3, r3, #30
 80038c8:	d413      	bmi.n	80038f2 <_printf_i+0x232>
 80038ca:	68e0      	ldr	r0, [r4, #12]
 80038cc:	9b03      	ldr	r3, [sp, #12]
 80038ce:	4298      	cmp	r0, r3
 80038d0:	bfb8      	it	lt
 80038d2:	4618      	movlt	r0, r3
 80038d4:	e7a6      	b.n	8003824 <_printf_i+0x164>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4632      	mov	r2, r6
 80038da:	4649      	mov	r1, r9
 80038dc:	4640      	mov	r0, r8
 80038de:	47d0      	blx	sl
 80038e0:	3001      	adds	r0, #1
 80038e2:	d09d      	beq.n	8003820 <_printf_i+0x160>
 80038e4:	3501      	adds	r5, #1
 80038e6:	68e3      	ldr	r3, [r4, #12]
 80038e8:	9903      	ldr	r1, [sp, #12]
 80038ea:	1a5b      	subs	r3, r3, r1
 80038ec:	42ab      	cmp	r3, r5
 80038ee:	dcf2      	bgt.n	80038d6 <_printf_i+0x216>
 80038f0:	e7eb      	b.n	80038ca <_printf_i+0x20a>
 80038f2:	2500      	movs	r5, #0
 80038f4:	f104 0619 	add.w	r6, r4, #25
 80038f8:	e7f5      	b.n	80038e6 <_printf_i+0x226>
 80038fa:	bf00      	nop
 80038fc:	080059fa 	.word	0x080059fa
 8003900:	08005a0b 	.word	0x08005a0b

08003904 <std>:
 8003904:	2300      	movs	r3, #0
 8003906:	b510      	push	{r4, lr}
 8003908:	4604      	mov	r4, r0
 800390a:	e9c0 3300 	strd	r3, r3, [r0]
 800390e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003912:	6083      	str	r3, [r0, #8]
 8003914:	8181      	strh	r1, [r0, #12]
 8003916:	6643      	str	r3, [r0, #100]	; 0x64
 8003918:	81c2      	strh	r2, [r0, #14]
 800391a:	6183      	str	r3, [r0, #24]
 800391c:	4619      	mov	r1, r3
 800391e:	2208      	movs	r2, #8
 8003920:	305c      	adds	r0, #92	; 0x5c
 8003922:	f000 f8f4 	bl	8003b0e <memset>
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <std+0x58>)
 8003928:	6263      	str	r3, [r4, #36]	; 0x24
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <std+0x5c>)
 800392c:	62a3      	str	r3, [r4, #40]	; 0x28
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <std+0x60>)
 8003930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <std+0x64>)
 8003934:	6323      	str	r3, [r4, #48]	; 0x30
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <std+0x68>)
 8003938:	6224      	str	r4, [r4, #32]
 800393a:	429c      	cmp	r4, r3
 800393c:	d006      	beq.n	800394c <std+0x48>
 800393e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003942:	4294      	cmp	r4, r2
 8003944:	d002      	beq.n	800394c <std+0x48>
 8003946:	33d0      	adds	r3, #208	; 0xd0
 8003948:	429c      	cmp	r4, r3
 800394a:	d105      	bne.n	8003958 <std+0x54>
 800394c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003954:	f000 b958 	b.w	8003c08 <__retarget_lock_init_recursive>
 8003958:	bd10      	pop	{r4, pc}
 800395a:	bf00      	nop
 800395c:	08003a89 	.word	0x08003a89
 8003960:	08003aab 	.word	0x08003aab
 8003964:	08003ae3 	.word	0x08003ae3
 8003968:	08003b07 	.word	0x08003b07
 800396c:	20000780 	.word	0x20000780

08003970 <stdio_exit_handler>:
 8003970:	4a02      	ldr	r2, [pc, #8]	; (800397c <stdio_exit_handler+0xc>)
 8003972:	4903      	ldr	r1, [pc, #12]	; (8003980 <stdio_exit_handler+0x10>)
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <stdio_exit_handler+0x14>)
 8003976:	f000 b869 	b.w	8003a4c <_fwalk_sglue>
 800397a:	bf00      	nop
 800397c:	200001dc 	.word	0x200001dc
 8003980:	08005329 	.word	0x08005329
 8003984:	200001e8 	.word	0x200001e8

08003988 <cleanup_stdio>:
 8003988:	6841      	ldr	r1, [r0, #4]
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <cleanup_stdio+0x34>)
 800398c:	4299      	cmp	r1, r3
 800398e:	b510      	push	{r4, lr}
 8003990:	4604      	mov	r4, r0
 8003992:	d001      	beq.n	8003998 <cleanup_stdio+0x10>
 8003994:	f001 fcc8 	bl	8005328 <_fflush_r>
 8003998:	68a1      	ldr	r1, [r4, #8]
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <cleanup_stdio+0x38>)
 800399c:	4299      	cmp	r1, r3
 800399e:	d002      	beq.n	80039a6 <cleanup_stdio+0x1e>
 80039a0:	4620      	mov	r0, r4
 80039a2:	f001 fcc1 	bl	8005328 <_fflush_r>
 80039a6:	68e1      	ldr	r1, [r4, #12]
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <cleanup_stdio+0x3c>)
 80039aa:	4299      	cmp	r1, r3
 80039ac:	d004      	beq.n	80039b8 <cleanup_stdio+0x30>
 80039ae:	4620      	mov	r0, r4
 80039b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b4:	f001 bcb8 	b.w	8005328 <_fflush_r>
 80039b8:	bd10      	pop	{r4, pc}
 80039ba:	bf00      	nop
 80039bc:	20000780 	.word	0x20000780
 80039c0:	200007e8 	.word	0x200007e8
 80039c4:	20000850 	.word	0x20000850

080039c8 <global_stdio_init.part.0>:
 80039c8:	b510      	push	{r4, lr}
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <global_stdio_init.part.0+0x30>)
 80039cc:	4c0b      	ldr	r4, [pc, #44]	; (80039fc <global_stdio_init.part.0+0x34>)
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <global_stdio_init.part.0+0x38>)
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	4620      	mov	r0, r4
 80039d4:	2200      	movs	r2, #0
 80039d6:	2104      	movs	r1, #4
 80039d8:	f7ff ff94 	bl	8003904 <std>
 80039dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80039e0:	2201      	movs	r2, #1
 80039e2:	2109      	movs	r1, #9
 80039e4:	f7ff ff8e 	bl	8003904 <std>
 80039e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80039ec:	2202      	movs	r2, #2
 80039ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f2:	2112      	movs	r1, #18
 80039f4:	f7ff bf86 	b.w	8003904 <std>
 80039f8:	200008b8 	.word	0x200008b8
 80039fc:	20000780 	.word	0x20000780
 8003a00:	08003971 	.word	0x08003971

08003a04 <__sfp_lock_acquire>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__sfp_lock_acquire+0x8>)
 8003a06:	f000 b900 	b.w	8003c0a <__retarget_lock_acquire_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	200008c1 	.word	0x200008c1

08003a10 <__sfp_lock_release>:
 8003a10:	4801      	ldr	r0, [pc, #4]	; (8003a18 <__sfp_lock_release+0x8>)
 8003a12:	f000 b8fb 	b.w	8003c0c <__retarget_lock_release_recursive>
 8003a16:	bf00      	nop
 8003a18:	200008c1 	.word	0x200008c1

08003a1c <__sinit>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	4604      	mov	r4, r0
 8003a20:	f7ff fff0 	bl	8003a04 <__sfp_lock_acquire>
 8003a24:	6a23      	ldr	r3, [r4, #32]
 8003a26:	b11b      	cbz	r3, 8003a30 <__sinit+0x14>
 8003a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a2c:	f7ff bff0 	b.w	8003a10 <__sfp_lock_release>
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <__sinit+0x28>)
 8003a32:	6223      	str	r3, [r4, #32]
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <__sinit+0x2c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f5      	bne.n	8003a28 <__sinit+0xc>
 8003a3c:	f7ff ffc4 	bl	80039c8 <global_stdio_init.part.0>
 8003a40:	e7f2      	b.n	8003a28 <__sinit+0xc>
 8003a42:	bf00      	nop
 8003a44:	08003989 	.word	0x08003989
 8003a48:	200008b8 	.word	0x200008b8

08003a4c <_fwalk_sglue>:
 8003a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a50:	4607      	mov	r7, r0
 8003a52:	4688      	mov	r8, r1
 8003a54:	4614      	mov	r4, r2
 8003a56:	2600      	movs	r6, #0
 8003a58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a5c:	f1b9 0901 	subs.w	r9, r9, #1
 8003a60:	d505      	bpl.n	8003a6e <_fwalk_sglue+0x22>
 8003a62:	6824      	ldr	r4, [r4, #0]
 8003a64:	2c00      	cmp	r4, #0
 8003a66:	d1f7      	bne.n	8003a58 <_fwalk_sglue+0xc>
 8003a68:	4630      	mov	r0, r6
 8003a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a6e:	89ab      	ldrh	r3, [r5, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d907      	bls.n	8003a84 <_fwalk_sglue+0x38>
 8003a74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	d003      	beq.n	8003a84 <_fwalk_sglue+0x38>
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4638      	mov	r0, r7
 8003a80:	47c0      	blx	r8
 8003a82:	4306      	orrs	r6, r0
 8003a84:	3568      	adds	r5, #104	; 0x68
 8003a86:	e7e9      	b.n	8003a5c <_fwalk_sglue+0x10>

08003a88 <__sread>:
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a90:	f000 f86c 	bl	8003b6c <_read_r>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	bfab      	itete	ge
 8003a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a9c:	181b      	addge	r3, r3, r0
 8003a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003aa2:	bfac      	ite	ge
 8003aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aa6:	81a3      	strhlt	r3, [r4, #12]
 8003aa8:	bd10      	pop	{r4, pc}

08003aaa <__swrite>:
 8003aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aae:	461f      	mov	r7, r3
 8003ab0:	898b      	ldrh	r3, [r1, #12]
 8003ab2:	05db      	lsls	r3, r3, #23
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4616      	mov	r6, r2
 8003aba:	d505      	bpl.n	8003ac8 <__swrite+0x1e>
 8003abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f000 f840 	bl	8003b48 <_lseek_r>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	4628      	mov	r0, r5
 8003ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	f000 b857 	b.w	8003b90 <_write_r>

08003ae2 <__sseek>:
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aea:	f000 f82d 	bl	8003b48 <_lseek_r>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	bf15      	itete	ne
 8003af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003afe:	81a3      	strheq	r3, [r4, #12]
 8003b00:	bf18      	it	ne
 8003b02:	81a3      	strhne	r3, [r4, #12]
 8003b04:	bd10      	pop	{r4, pc}

08003b06 <__sclose>:
 8003b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0a:	f000 b80d 	b.w	8003b28 <_close_r>

08003b0e <memset>:
 8003b0e:	4402      	add	r2, r0
 8003b10:	4603      	mov	r3, r0
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d100      	bne.n	8003b18 <memset+0xa>
 8003b16:	4770      	bx	lr
 8003b18:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1c:	e7f9      	b.n	8003b12 <memset+0x4>
	...

08003b20 <_localeconv_r>:
 8003b20:	4800      	ldr	r0, [pc, #0]	; (8003b24 <_localeconv_r+0x4>)
 8003b22:	4770      	bx	lr
 8003b24:	20000328 	.word	0x20000328

08003b28 <_close_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4d06      	ldr	r5, [pc, #24]	; (8003b44 <_close_r+0x1c>)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	f7fd fd01 	bl	800153a <_close>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_close_r+0x1a>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_close_r+0x1a>
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	200008bc 	.word	0x200008bc

08003b48 <_lseek_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4d07      	ldr	r5, [pc, #28]	; (8003b68 <_lseek_r+0x20>)
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	4608      	mov	r0, r1
 8003b50:	4611      	mov	r1, r2
 8003b52:	2200      	movs	r2, #0
 8003b54:	602a      	str	r2, [r5, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f7fd fd16 	bl	8001588 <_lseek>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_lseek_r+0x1e>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_lseek_r+0x1e>
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	200008bc 	.word	0x200008bc

08003b6c <_read_r>:
 8003b6c:	b538      	push	{r3, r4, r5, lr}
 8003b6e:	4d07      	ldr	r5, [pc, #28]	; (8003b8c <_read_r+0x20>)
 8003b70:	4604      	mov	r4, r0
 8003b72:	4608      	mov	r0, r1
 8003b74:	4611      	mov	r1, r2
 8003b76:	2200      	movs	r2, #0
 8003b78:	602a      	str	r2, [r5, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f7fd fcc0 	bl	8001500 <_read>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_read_r+0x1e>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_read_r+0x1e>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	200008bc 	.word	0x200008bc

08003b90 <_write_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4d07      	ldr	r5, [pc, #28]	; (8003bb0 <_write_r+0x20>)
 8003b94:	4604      	mov	r4, r0
 8003b96:	4608      	mov	r0, r1
 8003b98:	4611      	mov	r1, r2
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	602a      	str	r2, [r5, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f7fd fb20 	bl	80011e4 <_write>
 8003ba4:	1c43      	adds	r3, r0, #1
 8003ba6:	d102      	bne.n	8003bae <_write_r+0x1e>
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	b103      	cbz	r3, 8003bae <_write_r+0x1e>
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	200008bc 	.word	0x200008bc

08003bb4 <__errno>:
 8003bb4:	4b01      	ldr	r3, [pc, #4]	; (8003bbc <__errno+0x8>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000234 	.word	0x20000234

08003bc0 <__libc_init_array>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	4d0d      	ldr	r5, [pc, #52]	; (8003bf8 <__libc_init_array+0x38>)
 8003bc4:	4c0d      	ldr	r4, [pc, #52]	; (8003bfc <__libc_init_array+0x3c>)
 8003bc6:	1b64      	subs	r4, r4, r5
 8003bc8:	10a4      	asrs	r4, r4, #2
 8003bca:	2600      	movs	r6, #0
 8003bcc:	42a6      	cmp	r6, r4
 8003bce:	d109      	bne.n	8003be4 <__libc_init_array+0x24>
 8003bd0:	4d0b      	ldr	r5, [pc, #44]	; (8003c00 <__libc_init_array+0x40>)
 8003bd2:	4c0c      	ldr	r4, [pc, #48]	; (8003c04 <__libc_init_array+0x44>)
 8003bd4:	f001 feee 	bl	80059b4 <_init>
 8003bd8:	1b64      	subs	r4, r4, r5
 8003bda:	10a4      	asrs	r4, r4, #2
 8003bdc:	2600      	movs	r6, #0
 8003bde:	42a6      	cmp	r6, r4
 8003be0:	d105      	bne.n	8003bee <__libc_init_array+0x2e>
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
 8003be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be8:	4798      	blx	r3
 8003bea:	3601      	adds	r6, #1
 8003bec:	e7ee      	b.n	8003bcc <__libc_init_array+0xc>
 8003bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf2:	4798      	blx	r3
 8003bf4:	3601      	adds	r6, #1
 8003bf6:	e7f2      	b.n	8003bde <__libc_init_array+0x1e>
 8003bf8:	08005d64 	.word	0x08005d64
 8003bfc:	08005d64 	.word	0x08005d64
 8003c00:	08005d64 	.word	0x08005d64
 8003c04:	08005d68 	.word	0x08005d68

08003c08 <__retarget_lock_init_recursive>:
 8003c08:	4770      	bx	lr

08003c0a <__retarget_lock_acquire_recursive>:
 8003c0a:	4770      	bx	lr

08003c0c <__retarget_lock_release_recursive>:
 8003c0c:	4770      	bx	lr

08003c0e <memcpy>:
 8003c0e:	440a      	add	r2, r1
 8003c10:	4291      	cmp	r1, r2
 8003c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c16:	d100      	bne.n	8003c1a <memcpy+0xc>
 8003c18:	4770      	bx	lr
 8003c1a:	b510      	push	{r4, lr}
 8003c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c24:	4291      	cmp	r1, r2
 8003c26:	d1f9      	bne.n	8003c1c <memcpy+0xe>
 8003c28:	bd10      	pop	{r4, pc}

08003c2a <quorem>:
 8003c2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2e:	6903      	ldr	r3, [r0, #16]
 8003c30:	690c      	ldr	r4, [r1, #16]
 8003c32:	42a3      	cmp	r3, r4
 8003c34:	4607      	mov	r7, r0
 8003c36:	db7e      	blt.n	8003d36 <quorem+0x10c>
 8003c38:	3c01      	subs	r4, #1
 8003c3a:	f101 0814 	add.w	r8, r1, #20
 8003c3e:	f100 0514 	add.w	r5, r0, #20
 8003c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c50:	3301      	adds	r3, #1
 8003c52:	429a      	cmp	r2, r3
 8003c54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003c58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c60:	d331      	bcc.n	8003cc6 <quorem+0x9c>
 8003c62:	f04f 0e00 	mov.w	lr, #0
 8003c66:	4640      	mov	r0, r8
 8003c68:	46ac      	mov	ip, r5
 8003c6a:	46f2      	mov	sl, lr
 8003c6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c70:	b293      	uxth	r3, r2
 8003c72:	fb06 e303 	mla	r3, r6, r3, lr
 8003c76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c7a:	0c1a      	lsrs	r2, r3, #16
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	ebaa 0303 	sub.w	r3, sl, r3
 8003c82:	f8dc a000 	ldr.w	sl, [ip]
 8003c86:	fa13 f38a 	uxtah	r3, r3, sl
 8003c8a:	fb06 220e 	mla	r2, r6, lr, r2
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	9b00      	ldr	r3, [sp, #0]
 8003c92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c96:	b292      	uxth	r2, r2
 8003c98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ca0:	f8bd 3000 	ldrh.w	r3, [sp]
 8003ca4:	4581      	cmp	r9, r0
 8003ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003caa:	f84c 3b04 	str.w	r3, [ip], #4
 8003cae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003cb2:	d2db      	bcs.n	8003c6c <quorem+0x42>
 8003cb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8003cb8:	b92b      	cbnz	r3, 8003cc6 <quorem+0x9c>
 8003cba:	9b01      	ldr	r3, [sp, #4]
 8003cbc:	3b04      	subs	r3, #4
 8003cbe:	429d      	cmp	r5, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	d32c      	bcc.n	8003d1e <quorem+0xf4>
 8003cc4:	613c      	str	r4, [r7, #16]
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	f001 f9a8 	bl	800501c <__mcmp>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	db22      	blt.n	8003d16 <quorem+0xec>
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8003cda:	f8d1 c000 	ldr.w	ip, [r1]
 8003cde:	b293      	uxth	r3, r2
 8003ce0:	1ac3      	subs	r3, r0, r3
 8003ce2:	0c12      	lsrs	r2, r2, #16
 8003ce4:	fa13 f38c 	uxtah	r3, r3, ip
 8003ce8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cf6:	45c1      	cmp	r9, r8
 8003cf8:	f841 3b04 	str.w	r3, [r1], #4
 8003cfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d00:	d2e9      	bcs.n	8003cd6 <quorem+0xac>
 8003d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d0a:	b922      	cbnz	r2, 8003d16 <quorem+0xec>
 8003d0c:	3b04      	subs	r3, #4
 8003d0e:	429d      	cmp	r5, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	d30a      	bcc.n	8003d2a <quorem+0x100>
 8003d14:	613c      	str	r4, [r7, #16]
 8003d16:	4630      	mov	r0, r6
 8003d18:	b003      	add	sp, #12
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	3b04      	subs	r3, #4
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	d1ce      	bne.n	8003cc4 <quorem+0x9a>
 8003d26:	3c01      	subs	r4, #1
 8003d28:	e7c9      	b.n	8003cbe <quorem+0x94>
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	2a00      	cmp	r2, #0
 8003d30:	d1f0      	bne.n	8003d14 <quorem+0xea>
 8003d32:	3c01      	subs	r4, #1
 8003d34:	e7eb      	b.n	8003d0e <quorem+0xe4>
 8003d36:	2000      	movs	r0, #0
 8003d38:	e7ee      	b.n	8003d18 <quorem+0xee>
 8003d3a:	0000      	movs	r0, r0
 8003d3c:	0000      	movs	r0, r0
	...

08003d40 <_dtoa_r>:
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	ed2d 8b04 	vpush	{d8-d9}
 8003d48:	69c5      	ldr	r5, [r0, #28]
 8003d4a:	b093      	sub	sp, #76	; 0x4c
 8003d4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003d50:	ec57 6b10 	vmov	r6, r7, d0
 8003d54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003d58:	9107      	str	r1, [sp, #28]
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	920a      	str	r2, [sp, #40]	; 0x28
 8003d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8003d60:	b975      	cbnz	r5, 8003d80 <_dtoa_r+0x40>
 8003d62:	2010      	movs	r0, #16
 8003d64:	f000 fe2a 	bl	80049bc <malloc>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	61e0      	str	r0, [r4, #28]
 8003d6c:	b920      	cbnz	r0, 8003d78 <_dtoa_r+0x38>
 8003d6e:	4bae      	ldr	r3, [pc, #696]	; (8004028 <_dtoa_r+0x2e8>)
 8003d70:	21ef      	movs	r1, #239	; 0xef
 8003d72:	48ae      	ldr	r0, [pc, #696]	; (800402c <_dtoa_r+0x2ec>)
 8003d74:	f001 fb10 	bl	8005398 <__assert_func>
 8003d78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d7c:	6005      	str	r5, [r0, #0]
 8003d7e:	60c5      	str	r5, [r0, #12]
 8003d80:	69e3      	ldr	r3, [r4, #28]
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	b151      	cbz	r1, 8003d9c <_dtoa_r+0x5c>
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	604a      	str	r2, [r1, #4]
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4093      	lsls	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]
 8003d90:	4620      	mov	r0, r4
 8003d92:	f000 ff07 	bl	8004ba4 <_Bfree>
 8003d96:	69e3      	ldr	r3, [r4, #28]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	1e3b      	subs	r3, r7, #0
 8003d9e:	bfbb      	ittet	lt
 8003da0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003da4:	9303      	strlt	r3, [sp, #12]
 8003da6:	2300      	movge	r3, #0
 8003da8:	2201      	movlt	r2, #1
 8003daa:	bfac      	ite	ge
 8003dac:	f8c8 3000 	strge.w	r3, [r8]
 8003db0:	f8c8 2000 	strlt.w	r2, [r8]
 8003db4:	4b9e      	ldr	r3, [pc, #632]	; (8004030 <_dtoa_r+0x2f0>)
 8003db6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003dba:	ea33 0308 	bics.w	r3, r3, r8
 8003dbe:	d11b      	bne.n	8003df8 <_dtoa_r+0xb8>
 8003dc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003dc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003dcc:	4333      	orrs	r3, r6
 8003dce:	f000 8593 	beq.w	80048f8 <_dtoa_r+0xbb8>
 8003dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dd4:	b963      	cbnz	r3, 8003df0 <_dtoa_r+0xb0>
 8003dd6:	4b97      	ldr	r3, [pc, #604]	; (8004034 <_dtoa_r+0x2f4>)
 8003dd8:	e027      	b.n	8003e2a <_dtoa_r+0xea>
 8003dda:	4b97      	ldr	r3, [pc, #604]	; (8004038 <_dtoa_r+0x2f8>)
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	3308      	adds	r3, #8
 8003de0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	9800      	ldr	r0, [sp, #0]
 8003de6:	b013      	add	sp, #76	; 0x4c
 8003de8:	ecbd 8b04 	vpop	{d8-d9}
 8003dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df0:	4b90      	ldr	r3, [pc, #576]	; (8004034 <_dtoa_r+0x2f4>)
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	3303      	adds	r3, #3
 8003df6:	e7f3      	b.n	8003de0 <_dtoa_r+0xa0>
 8003df8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	ec51 0b17 	vmov	r0, r1, d7
 8003e02:	eeb0 8a47 	vmov.f32	s16, s14
 8003e06:	eef0 8a67 	vmov.f32	s17, s15
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f7fc fe64 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e10:	4681      	mov	r9, r0
 8003e12:	b160      	cbz	r0, 8003e2e <_dtoa_r+0xee>
 8003e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e16:	2301      	movs	r3, #1
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8568 	beq.w	80048f2 <_dtoa_r+0xbb2>
 8003e22:	4b86      	ldr	r3, [pc, #536]	; (800403c <_dtoa_r+0x2fc>)
 8003e24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	e7da      	b.n	8003de4 <_dtoa_r+0xa4>
 8003e2e:	aa10      	add	r2, sp, #64	; 0x40
 8003e30:	a911      	add	r1, sp, #68	; 0x44
 8003e32:	4620      	mov	r0, r4
 8003e34:	eeb0 0a48 	vmov.f32	s0, s16
 8003e38:	eef0 0a68 	vmov.f32	s1, s17
 8003e3c:	f001 f994 	bl	8005168 <__d2b>
 8003e40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003e44:	4682      	mov	sl, r0
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	d07f      	beq.n	8003f4a <_dtoa_r+0x20a>
 8003e4a:	ee18 3a90 	vmov	r3, s17
 8003e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003e56:	ec51 0b18 	vmov	r0, r1, d8
 8003e5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003e5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003e62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003e66:	4619      	mov	r1, r3
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4b75      	ldr	r3, [pc, #468]	; (8004040 <_dtoa_r+0x300>)
 8003e6c:	f7fc fa14 	bl	8000298 <__aeabi_dsub>
 8003e70:	a367      	add	r3, pc, #412	; (adr r3, 8004010 <_dtoa_r+0x2d0>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f7fc fbc7 	bl	8000608 <__aeabi_dmul>
 8003e7a:	a367      	add	r3, pc, #412	; (adr r3, 8004018 <_dtoa_r+0x2d8>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f7fc fa0c 	bl	800029c <__adddf3>
 8003e84:	4606      	mov	r6, r0
 8003e86:	4628      	mov	r0, r5
 8003e88:	460f      	mov	r7, r1
 8003e8a:	f7fc fb53 	bl	8000534 <__aeabi_i2d>
 8003e8e:	a364      	add	r3, pc, #400	; (adr r3, 8004020 <_dtoa_r+0x2e0>)
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f7fc fbb8 	bl	8000608 <__aeabi_dmul>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	f7fc f9fc 	bl	800029c <__adddf3>
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460f      	mov	r7, r1
 8003ea8:	f7fc fe5e 	bl	8000b68 <__aeabi_d2iz>
 8003eac:	2200      	movs	r2, #0
 8003eae:	4683      	mov	fp, r0
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	f7fc fe19 	bl	8000aec <__aeabi_dcmplt>
 8003eba:	b148      	cbz	r0, 8003ed0 <_dtoa_r+0x190>
 8003ebc:	4658      	mov	r0, fp
 8003ebe:	f7fc fb39 	bl	8000534 <__aeabi_i2d>
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	f7fc fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 8003eca:	b908      	cbnz	r0, 8003ed0 <_dtoa_r+0x190>
 8003ecc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ed0:	f1bb 0f16 	cmp.w	fp, #22
 8003ed4:	d857      	bhi.n	8003f86 <_dtoa_r+0x246>
 8003ed6:	4b5b      	ldr	r3, [pc, #364]	; (8004044 <_dtoa_r+0x304>)
 8003ed8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	ec51 0b18 	vmov	r0, r1, d8
 8003ee4:	f7fc fe02 	bl	8000aec <__aeabi_dcmplt>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d04e      	beq.n	8003f8a <_dtoa_r+0x24a>
 8003eec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8003ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ef6:	1b5b      	subs	r3, r3, r5
 8003ef8:	1e5a      	subs	r2, r3, #1
 8003efa:	bf45      	ittet	mi
 8003efc:	f1c3 0301 	rsbmi	r3, r3, #1
 8003f00:	9305      	strmi	r3, [sp, #20]
 8003f02:	2300      	movpl	r3, #0
 8003f04:	2300      	movmi	r3, #0
 8003f06:	9206      	str	r2, [sp, #24]
 8003f08:	bf54      	ite	pl
 8003f0a:	9305      	strpl	r3, [sp, #20]
 8003f0c:	9306      	strmi	r3, [sp, #24]
 8003f0e:	f1bb 0f00 	cmp.w	fp, #0
 8003f12:	db3c      	blt.n	8003f8e <_dtoa_r+0x24e>
 8003f14:	9b06      	ldr	r3, [sp, #24]
 8003f16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003f1a:	445b      	add	r3, fp
 8003f1c:	9306      	str	r3, [sp, #24]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9308      	str	r3, [sp, #32]
 8003f22:	9b07      	ldr	r3, [sp, #28]
 8003f24:	2b09      	cmp	r3, #9
 8003f26:	d868      	bhi.n	8003ffa <_dtoa_r+0x2ba>
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	bfc4      	itt	gt
 8003f2c:	3b04      	subgt	r3, #4
 8003f2e:	9307      	strgt	r3, [sp, #28]
 8003f30:	9b07      	ldr	r3, [sp, #28]
 8003f32:	f1a3 0302 	sub.w	r3, r3, #2
 8003f36:	bfcc      	ite	gt
 8003f38:	2500      	movgt	r5, #0
 8003f3a:	2501      	movle	r5, #1
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	f200 8085 	bhi.w	800404c <_dtoa_r+0x30c>
 8003f42:	e8df f003 	tbb	[pc, r3]
 8003f46:	3b2e      	.short	0x3b2e
 8003f48:	5839      	.short	0x5839
 8003f4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003f4e:	441d      	add	r5, r3
 8003f50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	bfc1      	itttt	gt
 8003f58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003f5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003f60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003f64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003f68:	bfd6      	itet	le
 8003f6a:	f1c3 0320 	rsble	r3, r3, #32
 8003f6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003f72:	fa06 f003 	lslle.w	r0, r6, r3
 8003f76:	f7fc facd 	bl	8000514 <__aeabi_ui2d>
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003f80:	3d01      	subs	r5, #1
 8003f82:	920e      	str	r2, [sp, #56]	; 0x38
 8003f84:	e76f      	b.n	8003e66 <_dtoa_r+0x126>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e7b3      	b.n	8003ef2 <_dtoa_r+0x1b2>
 8003f8a:	900c      	str	r0, [sp, #48]	; 0x30
 8003f8c:	e7b2      	b.n	8003ef4 <_dtoa_r+0x1b4>
 8003f8e:	9b05      	ldr	r3, [sp, #20]
 8003f90:	eba3 030b 	sub.w	r3, r3, fp
 8003f94:	9305      	str	r3, [sp, #20]
 8003f96:	f1cb 0300 	rsb	r3, fp, #0
 8003f9a:	9308      	str	r3, [sp, #32]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fa0:	e7bf      	b.n	8003f22 <_dtoa_r+0x1e2>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	dc52      	bgt.n	8004052 <_dtoa_r+0x312>
 8003fac:	2301      	movs	r3, #1
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	9304      	str	r3, [sp, #16]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	920a      	str	r2, [sp, #40]	; 0x28
 8003fb6:	e00b      	b.n	8003fd0 <_dtoa_r+0x290>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e7f3      	b.n	8003fa4 <_dtoa_r+0x264>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc2:	445b      	add	r3, fp
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	9304      	str	r3, [sp, #16]
 8003fcc:	bfb8      	it	lt
 8003fce:	2301      	movlt	r3, #1
 8003fd0:	69e0      	ldr	r0, [r4, #28]
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	f102 0614 	add.w	r6, r2, #20
 8003fda:	429e      	cmp	r6, r3
 8003fdc:	d93d      	bls.n	800405a <_dtoa_r+0x31a>
 8003fde:	6041      	str	r1, [r0, #4]
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f000 fd9f 	bl	8004b24 <_Balloc>
 8003fe6:	9000      	str	r0, [sp, #0]
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d139      	bne.n	8004060 <_dtoa_r+0x320>
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <_dtoa_r+0x308>)
 8003fee:	4602      	mov	r2, r0
 8003ff0:	f240 11af 	movw	r1, #431	; 0x1af
 8003ff4:	e6bd      	b.n	8003d72 <_dtoa_r+0x32>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e7e1      	b.n	8003fbe <_dtoa_r+0x27e>
 8003ffa:	2501      	movs	r5, #1
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9307      	str	r3, [sp, #28]
 8004000:	9509      	str	r5, [sp, #36]	; 0x24
 8004002:	f04f 33ff 	mov.w	r3, #4294967295
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	2200      	movs	r2, #0
 800400c:	2312      	movs	r3, #18
 800400e:	e7d1      	b.n	8003fb4 <_dtoa_r+0x274>
 8004010:	636f4361 	.word	0x636f4361
 8004014:	3fd287a7 	.word	0x3fd287a7
 8004018:	8b60c8b3 	.word	0x8b60c8b3
 800401c:	3fc68a28 	.word	0x3fc68a28
 8004020:	509f79fb 	.word	0x509f79fb
 8004024:	3fd34413 	.word	0x3fd34413
 8004028:	08005a29 	.word	0x08005a29
 800402c:	08005a40 	.word	0x08005a40
 8004030:	7ff00000 	.word	0x7ff00000
 8004034:	08005a25 	.word	0x08005a25
 8004038:	08005a1c 	.word	0x08005a1c
 800403c:	080059f9 	.word	0x080059f9
 8004040:	3ff80000 	.word	0x3ff80000
 8004044:	08005b30 	.word	0x08005b30
 8004048:	08005a98 	.word	0x08005a98
 800404c:	2301      	movs	r3, #1
 800404e:	9309      	str	r3, [sp, #36]	; 0x24
 8004050:	e7d7      	b.n	8004002 <_dtoa_r+0x2c2>
 8004052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	9304      	str	r3, [sp, #16]
 8004058:	e7ba      	b.n	8003fd0 <_dtoa_r+0x290>
 800405a:	3101      	adds	r1, #1
 800405c:	0052      	lsls	r2, r2, #1
 800405e:	e7ba      	b.n	8003fd6 <_dtoa_r+0x296>
 8004060:	69e3      	ldr	r3, [r4, #28]
 8004062:	9a00      	ldr	r2, [sp, #0]
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	9b04      	ldr	r3, [sp, #16]
 8004068:	2b0e      	cmp	r3, #14
 800406a:	f200 80a8 	bhi.w	80041be <_dtoa_r+0x47e>
 800406e:	2d00      	cmp	r5, #0
 8004070:	f000 80a5 	beq.w	80041be <_dtoa_r+0x47e>
 8004074:	f1bb 0f00 	cmp.w	fp, #0
 8004078:	dd38      	ble.n	80040ec <_dtoa_r+0x3ac>
 800407a:	4bc0      	ldr	r3, [pc, #768]	; (800437c <_dtoa_r+0x63c>)
 800407c:	f00b 020f 	and.w	r2, fp, #15
 8004080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004084:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004088:	e9d3 6700 	ldrd	r6, r7, [r3]
 800408c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004090:	d019      	beq.n	80040c6 <_dtoa_r+0x386>
 8004092:	4bbb      	ldr	r3, [pc, #748]	; (8004380 <_dtoa_r+0x640>)
 8004094:	ec51 0b18 	vmov	r0, r1, d8
 8004098:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800409c:	f7fc fbde 	bl	800085c <__aeabi_ddiv>
 80040a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040a4:	f008 080f 	and.w	r8, r8, #15
 80040a8:	2503      	movs	r5, #3
 80040aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004380 <_dtoa_r+0x640>
 80040ae:	f1b8 0f00 	cmp.w	r8, #0
 80040b2:	d10a      	bne.n	80040ca <_dtoa_r+0x38a>
 80040b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040b8:	4632      	mov	r2, r6
 80040ba:	463b      	mov	r3, r7
 80040bc:	f7fc fbce 	bl	800085c <__aeabi_ddiv>
 80040c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040c4:	e02b      	b.n	800411e <_dtoa_r+0x3de>
 80040c6:	2502      	movs	r5, #2
 80040c8:	e7ef      	b.n	80040aa <_dtoa_r+0x36a>
 80040ca:	f018 0f01 	tst.w	r8, #1
 80040ce:	d008      	beq.n	80040e2 <_dtoa_r+0x3a2>
 80040d0:	4630      	mov	r0, r6
 80040d2:	4639      	mov	r1, r7
 80040d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80040d8:	f7fc fa96 	bl	8000608 <__aeabi_dmul>
 80040dc:	3501      	adds	r5, #1
 80040de:	4606      	mov	r6, r0
 80040e0:	460f      	mov	r7, r1
 80040e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80040e6:	f109 0908 	add.w	r9, r9, #8
 80040ea:	e7e0      	b.n	80040ae <_dtoa_r+0x36e>
 80040ec:	f000 809f 	beq.w	800422e <_dtoa_r+0x4ee>
 80040f0:	f1cb 0600 	rsb	r6, fp, #0
 80040f4:	4ba1      	ldr	r3, [pc, #644]	; (800437c <_dtoa_r+0x63c>)
 80040f6:	4fa2      	ldr	r7, [pc, #648]	; (8004380 <_dtoa_r+0x640>)
 80040f8:	f006 020f 	and.w	r2, r6, #15
 80040fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	ec51 0b18 	vmov	r0, r1, d8
 8004108:	f7fc fa7e 	bl	8000608 <__aeabi_dmul>
 800410c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004110:	1136      	asrs	r6, r6, #4
 8004112:	2300      	movs	r3, #0
 8004114:	2502      	movs	r5, #2
 8004116:	2e00      	cmp	r6, #0
 8004118:	d17e      	bne.n	8004218 <_dtoa_r+0x4d8>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1d0      	bne.n	80040c0 <_dtoa_r+0x380>
 800411e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004120:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8084 	beq.w	8004232 <_dtoa_r+0x4f2>
 800412a:	4b96      	ldr	r3, [pc, #600]	; (8004384 <_dtoa_r+0x644>)
 800412c:	2200      	movs	r2, #0
 800412e:	4640      	mov	r0, r8
 8004130:	4649      	mov	r1, r9
 8004132:	f7fc fcdb 	bl	8000aec <__aeabi_dcmplt>
 8004136:	2800      	cmp	r0, #0
 8004138:	d07b      	beq.n	8004232 <_dtoa_r+0x4f2>
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d078      	beq.n	8004232 <_dtoa_r+0x4f2>
 8004140:	9b01      	ldr	r3, [sp, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	dd39      	ble.n	80041ba <_dtoa_r+0x47a>
 8004146:	4b90      	ldr	r3, [pc, #576]	; (8004388 <_dtoa_r+0x648>)
 8004148:	2200      	movs	r2, #0
 800414a:	4640      	mov	r0, r8
 800414c:	4649      	mov	r1, r9
 800414e:	f7fc fa5b 	bl	8000608 <__aeabi_dmul>
 8004152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004156:	9e01      	ldr	r6, [sp, #4]
 8004158:	f10b 37ff 	add.w	r7, fp, #4294967295
 800415c:	3501      	adds	r5, #1
 800415e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004162:	4628      	mov	r0, r5
 8004164:	f7fc f9e6 	bl	8000534 <__aeabi_i2d>
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	f7fc fa4c 	bl	8000608 <__aeabi_dmul>
 8004170:	4b86      	ldr	r3, [pc, #536]	; (800438c <_dtoa_r+0x64c>)
 8004172:	2200      	movs	r2, #0
 8004174:	f7fc f892 	bl	800029c <__adddf3>
 8004178:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800417c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004180:	9303      	str	r3, [sp, #12]
 8004182:	2e00      	cmp	r6, #0
 8004184:	d158      	bne.n	8004238 <_dtoa_r+0x4f8>
 8004186:	4b82      	ldr	r3, [pc, #520]	; (8004390 <_dtoa_r+0x650>)
 8004188:	2200      	movs	r2, #0
 800418a:	4640      	mov	r0, r8
 800418c:	4649      	mov	r1, r9
 800418e:	f7fc f883 	bl	8000298 <__aeabi_dsub>
 8004192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004196:	4680      	mov	r8, r0
 8004198:	4689      	mov	r9, r1
 800419a:	f7fc fcc5 	bl	8000b28 <__aeabi_dcmpgt>
 800419e:	2800      	cmp	r0, #0
 80041a0:	f040 8296 	bne.w	80046d0 <_dtoa_r+0x990>
 80041a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80041a8:	4640      	mov	r0, r8
 80041aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041ae:	4649      	mov	r1, r9
 80041b0:	f7fc fc9c 	bl	8000aec <__aeabi_dcmplt>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	f040 8289 	bne.w	80046cc <_dtoa_r+0x98c>
 80041ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80041be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f2c0 814e 	blt.w	8004462 <_dtoa_r+0x722>
 80041c6:	f1bb 0f0e 	cmp.w	fp, #14
 80041ca:	f300 814a 	bgt.w	8004462 <_dtoa_r+0x722>
 80041ce:	4b6b      	ldr	r3, [pc, #428]	; (800437c <_dtoa_r+0x63c>)
 80041d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80041d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f280 80dc 	bge.w	8004398 <_dtoa_r+0x658>
 80041e0:	9b04      	ldr	r3, [sp, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f300 80d8 	bgt.w	8004398 <_dtoa_r+0x658>
 80041e8:	f040 826f 	bne.w	80046ca <_dtoa_r+0x98a>
 80041ec:	4b68      	ldr	r3, [pc, #416]	; (8004390 <_dtoa_r+0x650>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	4640      	mov	r0, r8
 80041f2:	4649      	mov	r1, r9
 80041f4:	f7fc fa08 	bl	8000608 <__aeabi_dmul>
 80041f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041fc:	f7fc fc8a 	bl	8000b14 <__aeabi_dcmpge>
 8004200:	9e04      	ldr	r6, [sp, #16]
 8004202:	4637      	mov	r7, r6
 8004204:	2800      	cmp	r0, #0
 8004206:	f040 8245 	bne.w	8004694 <_dtoa_r+0x954>
 800420a:	9d00      	ldr	r5, [sp, #0]
 800420c:	2331      	movs	r3, #49	; 0x31
 800420e:	f805 3b01 	strb.w	r3, [r5], #1
 8004212:	f10b 0b01 	add.w	fp, fp, #1
 8004216:	e241      	b.n	800469c <_dtoa_r+0x95c>
 8004218:	07f2      	lsls	r2, r6, #31
 800421a:	d505      	bpl.n	8004228 <_dtoa_r+0x4e8>
 800421c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004220:	f7fc f9f2 	bl	8000608 <__aeabi_dmul>
 8004224:	3501      	adds	r5, #1
 8004226:	2301      	movs	r3, #1
 8004228:	1076      	asrs	r6, r6, #1
 800422a:	3708      	adds	r7, #8
 800422c:	e773      	b.n	8004116 <_dtoa_r+0x3d6>
 800422e:	2502      	movs	r5, #2
 8004230:	e775      	b.n	800411e <_dtoa_r+0x3de>
 8004232:	9e04      	ldr	r6, [sp, #16]
 8004234:	465f      	mov	r7, fp
 8004236:	e792      	b.n	800415e <_dtoa_r+0x41e>
 8004238:	9900      	ldr	r1, [sp, #0]
 800423a:	4b50      	ldr	r3, [pc, #320]	; (800437c <_dtoa_r+0x63c>)
 800423c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004240:	4431      	add	r1, r6
 8004242:	9102      	str	r1, [sp, #8]
 8004244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004246:	eeb0 9a47 	vmov.f32	s18, s14
 800424a:	eef0 9a67 	vmov.f32	s19, s15
 800424e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004252:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004256:	2900      	cmp	r1, #0
 8004258:	d044      	beq.n	80042e4 <_dtoa_r+0x5a4>
 800425a:	494e      	ldr	r1, [pc, #312]	; (8004394 <_dtoa_r+0x654>)
 800425c:	2000      	movs	r0, #0
 800425e:	f7fc fafd 	bl	800085c <__aeabi_ddiv>
 8004262:	ec53 2b19 	vmov	r2, r3, d9
 8004266:	f7fc f817 	bl	8000298 <__aeabi_dsub>
 800426a:	9d00      	ldr	r5, [sp, #0]
 800426c:	ec41 0b19 	vmov	d9, r0, r1
 8004270:	4649      	mov	r1, r9
 8004272:	4640      	mov	r0, r8
 8004274:	f7fc fc78 	bl	8000b68 <__aeabi_d2iz>
 8004278:	4606      	mov	r6, r0
 800427a:	f7fc f95b 	bl	8000534 <__aeabi_i2d>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	f7fc f807 	bl	8000298 <__aeabi_dsub>
 800428a:	3630      	adds	r6, #48	; 0x30
 800428c:	f805 6b01 	strb.w	r6, [r5], #1
 8004290:	ec53 2b19 	vmov	r2, r3, d9
 8004294:	4680      	mov	r8, r0
 8004296:	4689      	mov	r9, r1
 8004298:	f7fc fc28 	bl	8000aec <__aeabi_dcmplt>
 800429c:	2800      	cmp	r0, #0
 800429e:	d164      	bne.n	800436a <_dtoa_r+0x62a>
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	4937      	ldr	r1, [pc, #220]	; (8004384 <_dtoa_r+0x644>)
 80042a6:	2000      	movs	r0, #0
 80042a8:	f7fb fff6 	bl	8000298 <__aeabi_dsub>
 80042ac:	ec53 2b19 	vmov	r2, r3, d9
 80042b0:	f7fc fc1c 	bl	8000aec <__aeabi_dcmplt>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	f040 80b6 	bne.w	8004426 <_dtoa_r+0x6e6>
 80042ba:	9b02      	ldr	r3, [sp, #8]
 80042bc:	429d      	cmp	r5, r3
 80042be:	f43f af7c 	beq.w	80041ba <_dtoa_r+0x47a>
 80042c2:	4b31      	ldr	r3, [pc, #196]	; (8004388 <_dtoa_r+0x648>)
 80042c4:	ec51 0b19 	vmov	r0, r1, d9
 80042c8:	2200      	movs	r2, #0
 80042ca:	f7fc f99d 	bl	8000608 <__aeabi_dmul>
 80042ce:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <_dtoa_r+0x648>)
 80042d0:	ec41 0b19 	vmov	d9, r0, r1
 80042d4:	2200      	movs	r2, #0
 80042d6:	4640      	mov	r0, r8
 80042d8:	4649      	mov	r1, r9
 80042da:	f7fc f995 	bl	8000608 <__aeabi_dmul>
 80042de:	4680      	mov	r8, r0
 80042e0:	4689      	mov	r9, r1
 80042e2:	e7c5      	b.n	8004270 <_dtoa_r+0x530>
 80042e4:	ec51 0b17 	vmov	r0, r1, d7
 80042e8:	f7fc f98e 	bl	8000608 <__aeabi_dmul>
 80042ec:	9b02      	ldr	r3, [sp, #8]
 80042ee:	9d00      	ldr	r5, [sp, #0]
 80042f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80042f2:	ec41 0b19 	vmov	d9, r0, r1
 80042f6:	4649      	mov	r1, r9
 80042f8:	4640      	mov	r0, r8
 80042fa:	f7fc fc35 	bl	8000b68 <__aeabi_d2iz>
 80042fe:	4606      	mov	r6, r0
 8004300:	f7fc f918 	bl	8000534 <__aeabi_i2d>
 8004304:	3630      	adds	r6, #48	; 0x30
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4640      	mov	r0, r8
 800430c:	4649      	mov	r1, r9
 800430e:	f7fb ffc3 	bl	8000298 <__aeabi_dsub>
 8004312:	f805 6b01 	strb.w	r6, [r5], #1
 8004316:	9b02      	ldr	r3, [sp, #8]
 8004318:	429d      	cmp	r5, r3
 800431a:	4680      	mov	r8, r0
 800431c:	4689      	mov	r9, r1
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	d124      	bne.n	800436e <_dtoa_r+0x62e>
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <_dtoa_r+0x654>)
 8004326:	ec51 0b19 	vmov	r0, r1, d9
 800432a:	f7fb ffb7 	bl	800029c <__adddf3>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4640      	mov	r0, r8
 8004334:	4649      	mov	r1, r9
 8004336:	f7fc fbf7 	bl	8000b28 <__aeabi_dcmpgt>
 800433a:	2800      	cmp	r0, #0
 800433c:	d173      	bne.n	8004426 <_dtoa_r+0x6e6>
 800433e:	ec53 2b19 	vmov	r2, r3, d9
 8004342:	4914      	ldr	r1, [pc, #80]	; (8004394 <_dtoa_r+0x654>)
 8004344:	2000      	movs	r0, #0
 8004346:	f7fb ffa7 	bl	8000298 <__aeabi_dsub>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4640      	mov	r0, r8
 8004350:	4649      	mov	r1, r9
 8004352:	f7fc fbcb 	bl	8000aec <__aeabi_dcmplt>
 8004356:	2800      	cmp	r0, #0
 8004358:	f43f af2f 	beq.w	80041ba <_dtoa_r+0x47a>
 800435c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800435e:	1e6b      	subs	r3, r5, #1
 8004360:	930f      	str	r3, [sp, #60]	; 0x3c
 8004362:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004366:	2b30      	cmp	r3, #48	; 0x30
 8004368:	d0f8      	beq.n	800435c <_dtoa_r+0x61c>
 800436a:	46bb      	mov	fp, r7
 800436c:	e04a      	b.n	8004404 <_dtoa_r+0x6c4>
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <_dtoa_r+0x648>)
 8004370:	f7fc f94a 	bl	8000608 <__aeabi_dmul>
 8004374:	4680      	mov	r8, r0
 8004376:	4689      	mov	r9, r1
 8004378:	e7bd      	b.n	80042f6 <_dtoa_r+0x5b6>
 800437a:	bf00      	nop
 800437c:	08005b30 	.word	0x08005b30
 8004380:	08005b08 	.word	0x08005b08
 8004384:	3ff00000 	.word	0x3ff00000
 8004388:	40240000 	.word	0x40240000
 800438c:	401c0000 	.word	0x401c0000
 8004390:	40140000 	.word	0x40140000
 8004394:	3fe00000 	.word	0x3fe00000
 8004398:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800439c:	9d00      	ldr	r5, [sp, #0]
 800439e:	4642      	mov	r2, r8
 80043a0:	464b      	mov	r3, r9
 80043a2:	4630      	mov	r0, r6
 80043a4:	4639      	mov	r1, r7
 80043a6:	f7fc fa59 	bl	800085c <__aeabi_ddiv>
 80043aa:	f7fc fbdd 	bl	8000b68 <__aeabi_d2iz>
 80043ae:	9001      	str	r0, [sp, #4]
 80043b0:	f7fc f8c0 	bl	8000534 <__aeabi_i2d>
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	f7fc f926 	bl	8000608 <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4630      	mov	r0, r6
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fb ff68 	bl	8000298 <__aeabi_dsub>
 80043c8:	9e01      	ldr	r6, [sp, #4]
 80043ca:	9f04      	ldr	r7, [sp, #16]
 80043cc:	3630      	adds	r6, #48	; 0x30
 80043ce:	f805 6b01 	strb.w	r6, [r5], #1
 80043d2:	9e00      	ldr	r6, [sp, #0]
 80043d4:	1bae      	subs	r6, r5, r6
 80043d6:	42b7      	cmp	r7, r6
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	d134      	bne.n	8004448 <_dtoa_r+0x708>
 80043de:	f7fb ff5d 	bl	800029c <__adddf3>
 80043e2:	4642      	mov	r2, r8
 80043e4:	464b      	mov	r3, r9
 80043e6:	4606      	mov	r6, r0
 80043e8:	460f      	mov	r7, r1
 80043ea:	f7fc fb9d 	bl	8000b28 <__aeabi_dcmpgt>
 80043ee:	b9c8      	cbnz	r0, 8004424 <_dtoa_r+0x6e4>
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	4630      	mov	r0, r6
 80043f6:	4639      	mov	r1, r7
 80043f8:	f7fc fb6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80043fc:	b110      	cbz	r0, 8004404 <_dtoa_r+0x6c4>
 80043fe:	9b01      	ldr	r3, [sp, #4]
 8004400:	07db      	lsls	r3, r3, #31
 8004402:	d40f      	bmi.n	8004424 <_dtoa_r+0x6e4>
 8004404:	4651      	mov	r1, sl
 8004406:	4620      	mov	r0, r4
 8004408:	f000 fbcc 	bl	8004ba4 <_Bfree>
 800440c:	2300      	movs	r3, #0
 800440e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004410:	702b      	strb	r3, [r5, #0]
 8004412:	f10b 0301 	add.w	r3, fp, #1
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800441a:	2b00      	cmp	r3, #0
 800441c:	f43f ace2 	beq.w	8003de4 <_dtoa_r+0xa4>
 8004420:	601d      	str	r5, [r3, #0]
 8004422:	e4df      	b.n	8003de4 <_dtoa_r+0xa4>
 8004424:	465f      	mov	r7, fp
 8004426:	462b      	mov	r3, r5
 8004428:	461d      	mov	r5, r3
 800442a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800442e:	2a39      	cmp	r2, #57	; 0x39
 8004430:	d106      	bne.n	8004440 <_dtoa_r+0x700>
 8004432:	9a00      	ldr	r2, [sp, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d1f7      	bne.n	8004428 <_dtoa_r+0x6e8>
 8004438:	9900      	ldr	r1, [sp, #0]
 800443a:	2230      	movs	r2, #48	; 0x30
 800443c:	3701      	adds	r7, #1
 800443e:	700a      	strb	r2, [r1, #0]
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	3201      	adds	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e790      	b.n	800436a <_dtoa_r+0x62a>
 8004448:	4ba3      	ldr	r3, [pc, #652]	; (80046d8 <_dtoa_r+0x998>)
 800444a:	2200      	movs	r2, #0
 800444c:	f7fc f8dc 	bl	8000608 <__aeabi_dmul>
 8004450:	2200      	movs	r2, #0
 8004452:	2300      	movs	r3, #0
 8004454:	4606      	mov	r6, r0
 8004456:	460f      	mov	r7, r1
 8004458:	f7fc fb3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800445c:	2800      	cmp	r0, #0
 800445e:	d09e      	beq.n	800439e <_dtoa_r+0x65e>
 8004460:	e7d0      	b.n	8004404 <_dtoa_r+0x6c4>
 8004462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004464:	2a00      	cmp	r2, #0
 8004466:	f000 80ca 	beq.w	80045fe <_dtoa_r+0x8be>
 800446a:	9a07      	ldr	r2, [sp, #28]
 800446c:	2a01      	cmp	r2, #1
 800446e:	f300 80ad 	bgt.w	80045cc <_dtoa_r+0x88c>
 8004472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004474:	2a00      	cmp	r2, #0
 8004476:	f000 80a5 	beq.w	80045c4 <_dtoa_r+0x884>
 800447a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800447e:	9e08      	ldr	r6, [sp, #32]
 8004480:	9d05      	ldr	r5, [sp, #20]
 8004482:	9a05      	ldr	r2, [sp, #20]
 8004484:	441a      	add	r2, r3
 8004486:	9205      	str	r2, [sp, #20]
 8004488:	9a06      	ldr	r2, [sp, #24]
 800448a:	2101      	movs	r1, #1
 800448c:	441a      	add	r2, r3
 800448e:	4620      	mov	r0, r4
 8004490:	9206      	str	r2, [sp, #24]
 8004492:	f000 fc3d 	bl	8004d10 <__i2b>
 8004496:	4607      	mov	r7, r0
 8004498:	b165      	cbz	r5, 80044b4 <_dtoa_r+0x774>
 800449a:	9b06      	ldr	r3, [sp, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	dd09      	ble.n	80044b4 <_dtoa_r+0x774>
 80044a0:	42ab      	cmp	r3, r5
 80044a2:	9a05      	ldr	r2, [sp, #20]
 80044a4:	bfa8      	it	ge
 80044a6:	462b      	movge	r3, r5
 80044a8:	1ad2      	subs	r2, r2, r3
 80044aa:	9205      	str	r2, [sp, #20]
 80044ac:	9a06      	ldr	r2, [sp, #24]
 80044ae:	1aed      	subs	r5, r5, r3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	9306      	str	r3, [sp, #24]
 80044b4:	9b08      	ldr	r3, [sp, #32]
 80044b6:	b1f3      	cbz	r3, 80044f6 <_dtoa_r+0x7b6>
 80044b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80a3 	beq.w	8004606 <_dtoa_r+0x8c6>
 80044c0:	2e00      	cmp	r6, #0
 80044c2:	dd10      	ble.n	80044e6 <_dtoa_r+0x7a6>
 80044c4:	4639      	mov	r1, r7
 80044c6:	4632      	mov	r2, r6
 80044c8:	4620      	mov	r0, r4
 80044ca:	f000 fce1 	bl	8004e90 <__pow5mult>
 80044ce:	4652      	mov	r2, sl
 80044d0:	4601      	mov	r1, r0
 80044d2:	4607      	mov	r7, r0
 80044d4:	4620      	mov	r0, r4
 80044d6:	f000 fc31 	bl	8004d3c <__multiply>
 80044da:	4651      	mov	r1, sl
 80044dc:	4680      	mov	r8, r0
 80044de:	4620      	mov	r0, r4
 80044e0:	f000 fb60 	bl	8004ba4 <_Bfree>
 80044e4:	46c2      	mov	sl, r8
 80044e6:	9b08      	ldr	r3, [sp, #32]
 80044e8:	1b9a      	subs	r2, r3, r6
 80044ea:	d004      	beq.n	80044f6 <_dtoa_r+0x7b6>
 80044ec:	4651      	mov	r1, sl
 80044ee:	4620      	mov	r0, r4
 80044f0:	f000 fcce 	bl	8004e90 <__pow5mult>
 80044f4:	4682      	mov	sl, r0
 80044f6:	2101      	movs	r1, #1
 80044f8:	4620      	mov	r0, r4
 80044fa:	f000 fc09 	bl	8004d10 <__i2b>
 80044fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	4606      	mov	r6, r0
 8004504:	f340 8081 	ble.w	800460a <_dtoa_r+0x8ca>
 8004508:	461a      	mov	r2, r3
 800450a:	4601      	mov	r1, r0
 800450c:	4620      	mov	r0, r4
 800450e:	f000 fcbf 	bl	8004e90 <__pow5mult>
 8004512:	9b07      	ldr	r3, [sp, #28]
 8004514:	2b01      	cmp	r3, #1
 8004516:	4606      	mov	r6, r0
 8004518:	dd7a      	ble.n	8004610 <_dtoa_r+0x8d0>
 800451a:	f04f 0800 	mov.w	r8, #0
 800451e:	6933      	ldr	r3, [r6, #16]
 8004520:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004524:	6918      	ldr	r0, [r3, #16]
 8004526:	f000 fba5 	bl	8004c74 <__hi0bits>
 800452a:	f1c0 0020 	rsb	r0, r0, #32
 800452e:	9b06      	ldr	r3, [sp, #24]
 8004530:	4418      	add	r0, r3
 8004532:	f010 001f 	ands.w	r0, r0, #31
 8004536:	f000 8094 	beq.w	8004662 <_dtoa_r+0x922>
 800453a:	f1c0 0320 	rsb	r3, r0, #32
 800453e:	2b04      	cmp	r3, #4
 8004540:	f340 8085 	ble.w	800464e <_dtoa_r+0x90e>
 8004544:	9b05      	ldr	r3, [sp, #20]
 8004546:	f1c0 001c 	rsb	r0, r0, #28
 800454a:	4403      	add	r3, r0
 800454c:	9305      	str	r3, [sp, #20]
 800454e:	9b06      	ldr	r3, [sp, #24]
 8004550:	4403      	add	r3, r0
 8004552:	4405      	add	r5, r0
 8004554:	9306      	str	r3, [sp, #24]
 8004556:	9b05      	ldr	r3, [sp, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	dd05      	ble.n	8004568 <_dtoa_r+0x828>
 800455c:	4651      	mov	r1, sl
 800455e:	461a      	mov	r2, r3
 8004560:	4620      	mov	r0, r4
 8004562:	f000 fcef 	bl	8004f44 <__lshift>
 8004566:	4682      	mov	sl, r0
 8004568:	9b06      	ldr	r3, [sp, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dd05      	ble.n	800457a <_dtoa_r+0x83a>
 800456e:	4631      	mov	r1, r6
 8004570:	461a      	mov	r2, r3
 8004572:	4620      	mov	r0, r4
 8004574:	f000 fce6 	bl	8004f44 <__lshift>
 8004578:	4606      	mov	r6, r0
 800457a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d072      	beq.n	8004666 <_dtoa_r+0x926>
 8004580:	4631      	mov	r1, r6
 8004582:	4650      	mov	r0, sl
 8004584:	f000 fd4a 	bl	800501c <__mcmp>
 8004588:	2800      	cmp	r0, #0
 800458a:	da6c      	bge.n	8004666 <_dtoa_r+0x926>
 800458c:	2300      	movs	r3, #0
 800458e:	4651      	mov	r1, sl
 8004590:	220a      	movs	r2, #10
 8004592:	4620      	mov	r0, r4
 8004594:	f000 fb28 	bl	8004be8 <__multadd>
 8004598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800459e:	4682      	mov	sl, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 81b0 	beq.w	8004906 <_dtoa_r+0xbc6>
 80045a6:	2300      	movs	r3, #0
 80045a8:	4639      	mov	r1, r7
 80045aa:	220a      	movs	r2, #10
 80045ac:	4620      	mov	r0, r4
 80045ae:	f000 fb1b 	bl	8004be8 <__multadd>
 80045b2:	9b01      	ldr	r3, [sp, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	4607      	mov	r7, r0
 80045b8:	f300 8096 	bgt.w	80046e8 <_dtoa_r+0x9a8>
 80045bc:	9b07      	ldr	r3, [sp, #28]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	dc59      	bgt.n	8004676 <_dtoa_r+0x936>
 80045c2:	e091      	b.n	80046e8 <_dtoa_r+0x9a8>
 80045c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80045ca:	e758      	b.n	800447e <_dtoa_r+0x73e>
 80045cc:	9b04      	ldr	r3, [sp, #16]
 80045ce:	1e5e      	subs	r6, r3, #1
 80045d0:	9b08      	ldr	r3, [sp, #32]
 80045d2:	42b3      	cmp	r3, r6
 80045d4:	bfbf      	itttt	lt
 80045d6:	9b08      	ldrlt	r3, [sp, #32]
 80045d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80045da:	9608      	strlt	r6, [sp, #32]
 80045dc:	1af3      	sublt	r3, r6, r3
 80045de:	bfb4      	ite	lt
 80045e0:	18d2      	addlt	r2, r2, r3
 80045e2:	1b9e      	subge	r6, r3, r6
 80045e4:	9b04      	ldr	r3, [sp, #16]
 80045e6:	bfbc      	itt	lt
 80045e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80045ea:	2600      	movlt	r6, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bfb7      	itett	lt
 80045f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80045f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80045f8:	1a9d      	sublt	r5, r3, r2
 80045fa:	2300      	movlt	r3, #0
 80045fc:	e741      	b.n	8004482 <_dtoa_r+0x742>
 80045fe:	9e08      	ldr	r6, [sp, #32]
 8004600:	9d05      	ldr	r5, [sp, #20]
 8004602:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004604:	e748      	b.n	8004498 <_dtoa_r+0x758>
 8004606:	9a08      	ldr	r2, [sp, #32]
 8004608:	e770      	b.n	80044ec <_dtoa_r+0x7ac>
 800460a:	9b07      	ldr	r3, [sp, #28]
 800460c:	2b01      	cmp	r3, #1
 800460e:	dc19      	bgt.n	8004644 <_dtoa_r+0x904>
 8004610:	9b02      	ldr	r3, [sp, #8]
 8004612:	b9bb      	cbnz	r3, 8004644 <_dtoa_r+0x904>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800461a:	b99b      	cbnz	r3, 8004644 <_dtoa_r+0x904>
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004622:	0d1b      	lsrs	r3, r3, #20
 8004624:	051b      	lsls	r3, r3, #20
 8004626:	b183      	cbz	r3, 800464a <_dtoa_r+0x90a>
 8004628:	9b05      	ldr	r3, [sp, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	9305      	str	r3, [sp, #20]
 800462e:	9b06      	ldr	r3, [sp, #24]
 8004630:	3301      	adds	r3, #1
 8004632:	9306      	str	r3, [sp, #24]
 8004634:	f04f 0801 	mov.w	r8, #1
 8004638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800463a:	2b00      	cmp	r3, #0
 800463c:	f47f af6f 	bne.w	800451e <_dtoa_r+0x7de>
 8004640:	2001      	movs	r0, #1
 8004642:	e774      	b.n	800452e <_dtoa_r+0x7ee>
 8004644:	f04f 0800 	mov.w	r8, #0
 8004648:	e7f6      	b.n	8004638 <_dtoa_r+0x8f8>
 800464a:	4698      	mov	r8, r3
 800464c:	e7f4      	b.n	8004638 <_dtoa_r+0x8f8>
 800464e:	d082      	beq.n	8004556 <_dtoa_r+0x816>
 8004650:	9a05      	ldr	r2, [sp, #20]
 8004652:	331c      	adds	r3, #28
 8004654:	441a      	add	r2, r3
 8004656:	9205      	str	r2, [sp, #20]
 8004658:	9a06      	ldr	r2, [sp, #24]
 800465a:	441a      	add	r2, r3
 800465c:	441d      	add	r5, r3
 800465e:	9206      	str	r2, [sp, #24]
 8004660:	e779      	b.n	8004556 <_dtoa_r+0x816>
 8004662:	4603      	mov	r3, r0
 8004664:	e7f4      	b.n	8004650 <_dtoa_r+0x910>
 8004666:	9b04      	ldr	r3, [sp, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	dc37      	bgt.n	80046dc <_dtoa_r+0x99c>
 800466c:	9b07      	ldr	r3, [sp, #28]
 800466e:	2b02      	cmp	r3, #2
 8004670:	dd34      	ble.n	80046dc <_dtoa_r+0x99c>
 8004672:	9b04      	ldr	r3, [sp, #16]
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	9b01      	ldr	r3, [sp, #4]
 8004678:	b963      	cbnz	r3, 8004694 <_dtoa_r+0x954>
 800467a:	4631      	mov	r1, r6
 800467c:	2205      	movs	r2, #5
 800467e:	4620      	mov	r0, r4
 8004680:	f000 fab2 	bl	8004be8 <__multadd>
 8004684:	4601      	mov	r1, r0
 8004686:	4606      	mov	r6, r0
 8004688:	4650      	mov	r0, sl
 800468a:	f000 fcc7 	bl	800501c <__mcmp>
 800468e:	2800      	cmp	r0, #0
 8004690:	f73f adbb 	bgt.w	800420a <_dtoa_r+0x4ca>
 8004694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004696:	9d00      	ldr	r5, [sp, #0]
 8004698:	ea6f 0b03 	mvn.w	fp, r3
 800469c:	f04f 0800 	mov.w	r8, #0
 80046a0:	4631      	mov	r1, r6
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 fa7e 	bl	8004ba4 <_Bfree>
 80046a8:	2f00      	cmp	r7, #0
 80046aa:	f43f aeab 	beq.w	8004404 <_dtoa_r+0x6c4>
 80046ae:	f1b8 0f00 	cmp.w	r8, #0
 80046b2:	d005      	beq.n	80046c0 <_dtoa_r+0x980>
 80046b4:	45b8      	cmp	r8, r7
 80046b6:	d003      	beq.n	80046c0 <_dtoa_r+0x980>
 80046b8:	4641      	mov	r1, r8
 80046ba:	4620      	mov	r0, r4
 80046bc:	f000 fa72 	bl	8004ba4 <_Bfree>
 80046c0:	4639      	mov	r1, r7
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 fa6e 	bl	8004ba4 <_Bfree>
 80046c8:	e69c      	b.n	8004404 <_dtoa_r+0x6c4>
 80046ca:	2600      	movs	r6, #0
 80046cc:	4637      	mov	r7, r6
 80046ce:	e7e1      	b.n	8004694 <_dtoa_r+0x954>
 80046d0:	46bb      	mov	fp, r7
 80046d2:	4637      	mov	r7, r6
 80046d4:	e599      	b.n	800420a <_dtoa_r+0x4ca>
 80046d6:	bf00      	nop
 80046d8:	40240000 	.word	0x40240000
 80046dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80c8 	beq.w	8004874 <_dtoa_r+0xb34>
 80046e4:	9b04      	ldr	r3, [sp, #16]
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	dd05      	ble.n	80046f8 <_dtoa_r+0x9b8>
 80046ec:	4639      	mov	r1, r7
 80046ee:	462a      	mov	r2, r5
 80046f0:	4620      	mov	r0, r4
 80046f2:	f000 fc27 	bl	8004f44 <__lshift>
 80046f6:	4607      	mov	r7, r0
 80046f8:	f1b8 0f00 	cmp.w	r8, #0
 80046fc:	d05b      	beq.n	80047b6 <_dtoa_r+0xa76>
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4620      	mov	r0, r4
 8004702:	f000 fa0f 	bl	8004b24 <_Balloc>
 8004706:	4605      	mov	r5, r0
 8004708:	b928      	cbnz	r0, 8004716 <_dtoa_r+0x9d6>
 800470a:	4b83      	ldr	r3, [pc, #524]	; (8004918 <_dtoa_r+0xbd8>)
 800470c:	4602      	mov	r2, r0
 800470e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004712:	f7ff bb2e 	b.w	8003d72 <_dtoa_r+0x32>
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	3202      	adds	r2, #2
 800471a:	0092      	lsls	r2, r2, #2
 800471c:	f107 010c 	add.w	r1, r7, #12
 8004720:	300c      	adds	r0, #12
 8004722:	f7ff fa74 	bl	8003c0e <memcpy>
 8004726:	2201      	movs	r2, #1
 8004728:	4629      	mov	r1, r5
 800472a:	4620      	mov	r0, r4
 800472c:	f000 fc0a 	bl	8004f44 <__lshift>
 8004730:	9b00      	ldr	r3, [sp, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	9304      	str	r3, [sp, #16]
 8004736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800473a:	4413      	add	r3, r2
 800473c:	9308      	str	r3, [sp, #32]
 800473e:	9b02      	ldr	r3, [sp, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	46b8      	mov	r8, r7
 8004746:	9306      	str	r3, [sp, #24]
 8004748:	4607      	mov	r7, r0
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	4631      	mov	r1, r6
 800474e:	3b01      	subs	r3, #1
 8004750:	4650      	mov	r0, sl
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	f7ff fa69 	bl	8003c2a <quorem>
 8004758:	4641      	mov	r1, r8
 800475a:	9002      	str	r0, [sp, #8]
 800475c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004760:	4650      	mov	r0, sl
 8004762:	f000 fc5b 	bl	800501c <__mcmp>
 8004766:	463a      	mov	r2, r7
 8004768:	9005      	str	r0, [sp, #20]
 800476a:	4631      	mov	r1, r6
 800476c:	4620      	mov	r0, r4
 800476e:	f000 fc71 	bl	8005054 <__mdiff>
 8004772:	68c2      	ldr	r2, [r0, #12]
 8004774:	4605      	mov	r5, r0
 8004776:	bb02      	cbnz	r2, 80047ba <_dtoa_r+0xa7a>
 8004778:	4601      	mov	r1, r0
 800477a:	4650      	mov	r0, sl
 800477c:	f000 fc4e 	bl	800501c <__mcmp>
 8004780:	4602      	mov	r2, r0
 8004782:	4629      	mov	r1, r5
 8004784:	4620      	mov	r0, r4
 8004786:	9209      	str	r2, [sp, #36]	; 0x24
 8004788:	f000 fa0c 	bl	8004ba4 <_Bfree>
 800478c:	9b07      	ldr	r3, [sp, #28]
 800478e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004790:	9d04      	ldr	r5, [sp, #16]
 8004792:	ea43 0102 	orr.w	r1, r3, r2
 8004796:	9b06      	ldr	r3, [sp, #24]
 8004798:	4319      	orrs	r1, r3
 800479a:	d110      	bne.n	80047be <_dtoa_r+0xa7e>
 800479c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80047a0:	d029      	beq.n	80047f6 <_dtoa_r+0xab6>
 80047a2:	9b05      	ldr	r3, [sp, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dd02      	ble.n	80047ae <_dtoa_r+0xa6e>
 80047a8:	9b02      	ldr	r3, [sp, #8]
 80047aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	f883 9000 	strb.w	r9, [r3]
 80047b4:	e774      	b.n	80046a0 <_dtoa_r+0x960>
 80047b6:	4638      	mov	r0, r7
 80047b8:	e7ba      	b.n	8004730 <_dtoa_r+0x9f0>
 80047ba:	2201      	movs	r2, #1
 80047bc:	e7e1      	b.n	8004782 <_dtoa_r+0xa42>
 80047be:	9b05      	ldr	r3, [sp, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db04      	blt.n	80047ce <_dtoa_r+0xa8e>
 80047c4:	9907      	ldr	r1, [sp, #28]
 80047c6:	430b      	orrs	r3, r1
 80047c8:	9906      	ldr	r1, [sp, #24]
 80047ca:	430b      	orrs	r3, r1
 80047cc:	d120      	bne.n	8004810 <_dtoa_r+0xad0>
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	dded      	ble.n	80047ae <_dtoa_r+0xa6e>
 80047d2:	4651      	mov	r1, sl
 80047d4:	2201      	movs	r2, #1
 80047d6:	4620      	mov	r0, r4
 80047d8:	f000 fbb4 	bl	8004f44 <__lshift>
 80047dc:	4631      	mov	r1, r6
 80047de:	4682      	mov	sl, r0
 80047e0:	f000 fc1c 	bl	800501c <__mcmp>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	dc03      	bgt.n	80047f0 <_dtoa_r+0xab0>
 80047e8:	d1e1      	bne.n	80047ae <_dtoa_r+0xa6e>
 80047ea:	f019 0f01 	tst.w	r9, #1
 80047ee:	d0de      	beq.n	80047ae <_dtoa_r+0xa6e>
 80047f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80047f4:	d1d8      	bne.n	80047a8 <_dtoa_r+0xa68>
 80047f6:	9a01      	ldr	r2, [sp, #4]
 80047f8:	2339      	movs	r3, #57	; 0x39
 80047fa:	7013      	strb	r3, [r2, #0]
 80047fc:	462b      	mov	r3, r5
 80047fe:	461d      	mov	r5, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004806:	2a39      	cmp	r2, #57	; 0x39
 8004808:	d06c      	beq.n	80048e4 <_dtoa_r+0xba4>
 800480a:	3201      	adds	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e747      	b.n	80046a0 <_dtoa_r+0x960>
 8004810:	2a00      	cmp	r2, #0
 8004812:	dd07      	ble.n	8004824 <_dtoa_r+0xae4>
 8004814:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004818:	d0ed      	beq.n	80047f6 <_dtoa_r+0xab6>
 800481a:	9a01      	ldr	r2, [sp, #4]
 800481c:	f109 0301 	add.w	r3, r9, #1
 8004820:	7013      	strb	r3, [r2, #0]
 8004822:	e73d      	b.n	80046a0 <_dtoa_r+0x960>
 8004824:	9b04      	ldr	r3, [sp, #16]
 8004826:	9a08      	ldr	r2, [sp, #32]
 8004828:	f803 9c01 	strb.w	r9, [r3, #-1]
 800482c:	4293      	cmp	r3, r2
 800482e:	d043      	beq.n	80048b8 <_dtoa_r+0xb78>
 8004830:	4651      	mov	r1, sl
 8004832:	2300      	movs	r3, #0
 8004834:	220a      	movs	r2, #10
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f9d6 	bl	8004be8 <__multadd>
 800483c:	45b8      	cmp	r8, r7
 800483e:	4682      	mov	sl, r0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	f04f 020a 	mov.w	r2, #10
 8004848:	4641      	mov	r1, r8
 800484a:	4620      	mov	r0, r4
 800484c:	d107      	bne.n	800485e <_dtoa_r+0xb1e>
 800484e:	f000 f9cb 	bl	8004be8 <__multadd>
 8004852:	4680      	mov	r8, r0
 8004854:	4607      	mov	r7, r0
 8004856:	9b04      	ldr	r3, [sp, #16]
 8004858:	3301      	adds	r3, #1
 800485a:	9304      	str	r3, [sp, #16]
 800485c:	e775      	b.n	800474a <_dtoa_r+0xa0a>
 800485e:	f000 f9c3 	bl	8004be8 <__multadd>
 8004862:	4639      	mov	r1, r7
 8004864:	4680      	mov	r8, r0
 8004866:	2300      	movs	r3, #0
 8004868:	220a      	movs	r2, #10
 800486a:	4620      	mov	r0, r4
 800486c:	f000 f9bc 	bl	8004be8 <__multadd>
 8004870:	4607      	mov	r7, r0
 8004872:	e7f0      	b.n	8004856 <_dtoa_r+0xb16>
 8004874:	9b04      	ldr	r3, [sp, #16]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	9d00      	ldr	r5, [sp, #0]
 800487a:	4631      	mov	r1, r6
 800487c:	4650      	mov	r0, sl
 800487e:	f7ff f9d4 	bl	8003c2a <quorem>
 8004882:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004886:	9b00      	ldr	r3, [sp, #0]
 8004888:	f805 9b01 	strb.w	r9, [r5], #1
 800488c:	1aea      	subs	r2, r5, r3
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	4293      	cmp	r3, r2
 8004892:	dd07      	ble.n	80048a4 <_dtoa_r+0xb64>
 8004894:	4651      	mov	r1, sl
 8004896:	2300      	movs	r3, #0
 8004898:	220a      	movs	r2, #10
 800489a:	4620      	mov	r0, r4
 800489c:	f000 f9a4 	bl	8004be8 <__multadd>
 80048a0:	4682      	mov	sl, r0
 80048a2:	e7ea      	b.n	800487a <_dtoa_r+0xb3a>
 80048a4:	9b01      	ldr	r3, [sp, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfc8      	it	gt
 80048aa:	461d      	movgt	r5, r3
 80048ac:	9b00      	ldr	r3, [sp, #0]
 80048ae:	bfd8      	it	le
 80048b0:	2501      	movle	r5, #1
 80048b2:	441d      	add	r5, r3
 80048b4:	f04f 0800 	mov.w	r8, #0
 80048b8:	4651      	mov	r1, sl
 80048ba:	2201      	movs	r2, #1
 80048bc:	4620      	mov	r0, r4
 80048be:	f000 fb41 	bl	8004f44 <__lshift>
 80048c2:	4631      	mov	r1, r6
 80048c4:	4682      	mov	sl, r0
 80048c6:	f000 fba9 	bl	800501c <__mcmp>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	dc96      	bgt.n	80047fc <_dtoa_r+0xabc>
 80048ce:	d102      	bne.n	80048d6 <_dtoa_r+0xb96>
 80048d0:	f019 0f01 	tst.w	r9, #1
 80048d4:	d192      	bne.n	80047fc <_dtoa_r+0xabc>
 80048d6:	462b      	mov	r3, r5
 80048d8:	461d      	mov	r5, r3
 80048da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048de:	2a30      	cmp	r2, #48	; 0x30
 80048e0:	d0fa      	beq.n	80048d8 <_dtoa_r+0xb98>
 80048e2:	e6dd      	b.n	80046a0 <_dtoa_r+0x960>
 80048e4:	9a00      	ldr	r2, [sp, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d189      	bne.n	80047fe <_dtoa_r+0xabe>
 80048ea:	f10b 0b01 	add.w	fp, fp, #1
 80048ee:	2331      	movs	r3, #49	; 0x31
 80048f0:	e796      	b.n	8004820 <_dtoa_r+0xae0>
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <_dtoa_r+0xbdc>)
 80048f4:	f7ff ba99 	b.w	8003e2a <_dtoa_r+0xea>
 80048f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f47f aa6d 	bne.w	8003dda <_dtoa_r+0x9a>
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <_dtoa_r+0xbe0>)
 8004902:	f7ff ba92 	b.w	8003e2a <_dtoa_r+0xea>
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	dcb5      	bgt.n	8004878 <_dtoa_r+0xb38>
 800490c:	9b07      	ldr	r3, [sp, #28]
 800490e:	2b02      	cmp	r3, #2
 8004910:	f73f aeb1 	bgt.w	8004676 <_dtoa_r+0x936>
 8004914:	e7b0      	b.n	8004878 <_dtoa_r+0xb38>
 8004916:	bf00      	nop
 8004918:	08005a98 	.word	0x08005a98
 800491c:	080059f8 	.word	0x080059f8
 8004920:	08005a1c 	.word	0x08005a1c

08004924 <_free_r>:
 8004924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004926:	2900      	cmp	r1, #0
 8004928:	d044      	beq.n	80049b4 <_free_r+0x90>
 800492a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800492e:	9001      	str	r0, [sp, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f1a1 0404 	sub.w	r4, r1, #4
 8004936:	bfb8      	it	lt
 8004938:	18e4      	addlt	r4, r4, r3
 800493a:	f000 f8e7 	bl	8004b0c <__malloc_lock>
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <_free_r+0x94>)
 8004940:	9801      	ldr	r0, [sp, #4]
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	b933      	cbnz	r3, 8004954 <_free_r+0x30>
 8004946:	6063      	str	r3, [r4, #4]
 8004948:	6014      	str	r4, [r2, #0]
 800494a:	b003      	add	sp, #12
 800494c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004950:	f000 b8e2 	b.w	8004b18 <__malloc_unlock>
 8004954:	42a3      	cmp	r3, r4
 8004956:	d908      	bls.n	800496a <_free_r+0x46>
 8004958:	6825      	ldr	r5, [r4, #0]
 800495a:	1961      	adds	r1, r4, r5
 800495c:	428b      	cmp	r3, r1
 800495e:	bf01      	itttt	eq
 8004960:	6819      	ldreq	r1, [r3, #0]
 8004962:	685b      	ldreq	r3, [r3, #4]
 8004964:	1949      	addeq	r1, r1, r5
 8004966:	6021      	streq	r1, [r4, #0]
 8004968:	e7ed      	b.n	8004946 <_free_r+0x22>
 800496a:	461a      	mov	r2, r3
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b10b      	cbz	r3, 8004974 <_free_r+0x50>
 8004970:	42a3      	cmp	r3, r4
 8004972:	d9fa      	bls.n	800496a <_free_r+0x46>
 8004974:	6811      	ldr	r1, [r2, #0]
 8004976:	1855      	adds	r5, r2, r1
 8004978:	42a5      	cmp	r5, r4
 800497a:	d10b      	bne.n	8004994 <_free_r+0x70>
 800497c:	6824      	ldr	r4, [r4, #0]
 800497e:	4421      	add	r1, r4
 8004980:	1854      	adds	r4, r2, r1
 8004982:	42a3      	cmp	r3, r4
 8004984:	6011      	str	r1, [r2, #0]
 8004986:	d1e0      	bne.n	800494a <_free_r+0x26>
 8004988:	681c      	ldr	r4, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	6053      	str	r3, [r2, #4]
 800498e:	440c      	add	r4, r1
 8004990:	6014      	str	r4, [r2, #0]
 8004992:	e7da      	b.n	800494a <_free_r+0x26>
 8004994:	d902      	bls.n	800499c <_free_r+0x78>
 8004996:	230c      	movs	r3, #12
 8004998:	6003      	str	r3, [r0, #0]
 800499a:	e7d6      	b.n	800494a <_free_r+0x26>
 800499c:	6825      	ldr	r5, [r4, #0]
 800499e:	1961      	adds	r1, r4, r5
 80049a0:	428b      	cmp	r3, r1
 80049a2:	bf04      	itt	eq
 80049a4:	6819      	ldreq	r1, [r3, #0]
 80049a6:	685b      	ldreq	r3, [r3, #4]
 80049a8:	6063      	str	r3, [r4, #4]
 80049aa:	bf04      	itt	eq
 80049ac:	1949      	addeq	r1, r1, r5
 80049ae:	6021      	streq	r1, [r4, #0]
 80049b0:	6054      	str	r4, [r2, #4]
 80049b2:	e7ca      	b.n	800494a <_free_r+0x26>
 80049b4:	b003      	add	sp, #12
 80049b6:	bd30      	pop	{r4, r5, pc}
 80049b8:	200008c4 	.word	0x200008c4

080049bc <malloc>:
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <malloc+0xc>)
 80049be:	4601      	mov	r1, r0
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	f000 b823 	b.w	8004a0c <_malloc_r>
 80049c6:	bf00      	nop
 80049c8:	20000234 	.word	0x20000234

080049cc <sbrk_aligned>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	4e0e      	ldr	r6, [pc, #56]	; (8004a08 <sbrk_aligned+0x3c>)
 80049d0:	460c      	mov	r4, r1
 80049d2:	6831      	ldr	r1, [r6, #0]
 80049d4:	4605      	mov	r5, r0
 80049d6:	b911      	cbnz	r1, 80049de <sbrk_aligned+0x12>
 80049d8:	f000 fcce 	bl	8005378 <_sbrk_r>
 80049dc:	6030      	str	r0, [r6, #0]
 80049de:	4621      	mov	r1, r4
 80049e0:	4628      	mov	r0, r5
 80049e2:	f000 fcc9 	bl	8005378 <_sbrk_r>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	d00a      	beq.n	8004a00 <sbrk_aligned+0x34>
 80049ea:	1cc4      	adds	r4, r0, #3
 80049ec:	f024 0403 	bic.w	r4, r4, #3
 80049f0:	42a0      	cmp	r0, r4
 80049f2:	d007      	beq.n	8004a04 <sbrk_aligned+0x38>
 80049f4:	1a21      	subs	r1, r4, r0
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 fcbe 	bl	8005378 <_sbrk_r>
 80049fc:	3001      	adds	r0, #1
 80049fe:	d101      	bne.n	8004a04 <sbrk_aligned+0x38>
 8004a00:	f04f 34ff 	mov.w	r4, #4294967295
 8004a04:	4620      	mov	r0, r4
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	200008c8 	.word	0x200008c8

08004a0c <_malloc_r>:
 8004a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a10:	1ccd      	adds	r5, r1, #3
 8004a12:	f025 0503 	bic.w	r5, r5, #3
 8004a16:	3508      	adds	r5, #8
 8004a18:	2d0c      	cmp	r5, #12
 8004a1a:	bf38      	it	cc
 8004a1c:	250c      	movcc	r5, #12
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	4607      	mov	r7, r0
 8004a22:	db01      	blt.n	8004a28 <_malloc_r+0x1c>
 8004a24:	42a9      	cmp	r1, r5
 8004a26:	d905      	bls.n	8004a34 <_malloc_r+0x28>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	2600      	movs	r6, #0
 8004a2e:	4630      	mov	r0, r6
 8004a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b08 <_malloc_r+0xfc>
 8004a38:	f000 f868 	bl	8004b0c <__malloc_lock>
 8004a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a40:	461c      	mov	r4, r3
 8004a42:	bb5c      	cbnz	r4, 8004a9c <_malloc_r+0x90>
 8004a44:	4629      	mov	r1, r5
 8004a46:	4638      	mov	r0, r7
 8004a48:	f7ff ffc0 	bl	80049cc <sbrk_aligned>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	4604      	mov	r4, r0
 8004a50:	d155      	bne.n	8004afe <_malloc_r+0xf2>
 8004a52:	f8d8 4000 	ldr.w	r4, [r8]
 8004a56:	4626      	mov	r6, r4
 8004a58:	2e00      	cmp	r6, #0
 8004a5a:	d145      	bne.n	8004ae8 <_malloc_r+0xdc>
 8004a5c:	2c00      	cmp	r4, #0
 8004a5e:	d048      	beq.n	8004af2 <_malloc_r+0xe6>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	4631      	mov	r1, r6
 8004a64:	4638      	mov	r0, r7
 8004a66:	eb04 0903 	add.w	r9, r4, r3
 8004a6a:	f000 fc85 	bl	8005378 <_sbrk_r>
 8004a6e:	4581      	cmp	r9, r0
 8004a70:	d13f      	bne.n	8004af2 <_malloc_r+0xe6>
 8004a72:	6821      	ldr	r1, [r4, #0]
 8004a74:	1a6d      	subs	r5, r5, r1
 8004a76:	4629      	mov	r1, r5
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f7ff ffa7 	bl	80049cc <sbrk_aligned>
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d037      	beq.n	8004af2 <_malloc_r+0xe6>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	442b      	add	r3, r5
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	f8d8 3000 	ldr.w	r3, [r8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d038      	beq.n	8004b02 <_malloc_r+0xf6>
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	42a2      	cmp	r2, r4
 8004a94:	d12b      	bne.n	8004aee <_malloc_r+0xe2>
 8004a96:	2200      	movs	r2, #0
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	e00f      	b.n	8004abc <_malloc_r+0xb0>
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	1b52      	subs	r2, r2, r5
 8004aa0:	d41f      	bmi.n	8004ae2 <_malloc_r+0xd6>
 8004aa2:	2a0b      	cmp	r2, #11
 8004aa4:	d917      	bls.n	8004ad6 <_malloc_r+0xca>
 8004aa6:	1961      	adds	r1, r4, r5
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	6025      	str	r5, [r4, #0]
 8004aac:	bf18      	it	ne
 8004aae:	6059      	strne	r1, [r3, #4]
 8004ab0:	6863      	ldr	r3, [r4, #4]
 8004ab2:	bf08      	it	eq
 8004ab4:	f8c8 1000 	streq.w	r1, [r8]
 8004ab8:	5162      	str	r2, [r4, r5]
 8004aba:	604b      	str	r3, [r1, #4]
 8004abc:	4638      	mov	r0, r7
 8004abe:	f104 060b 	add.w	r6, r4, #11
 8004ac2:	f000 f829 	bl	8004b18 <__malloc_unlock>
 8004ac6:	f026 0607 	bic.w	r6, r6, #7
 8004aca:	1d23      	adds	r3, r4, #4
 8004acc:	1af2      	subs	r2, r6, r3
 8004ace:	d0ae      	beq.n	8004a2e <_malloc_r+0x22>
 8004ad0:	1b9b      	subs	r3, r3, r6
 8004ad2:	50a3      	str	r3, [r4, r2]
 8004ad4:	e7ab      	b.n	8004a2e <_malloc_r+0x22>
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	6862      	ldr	r2, [r4, #4]
 8004ada:	d1dd      	bne.n	8004a98 <_malloc_r+0x8c>
 8004adc:	f8c8 2000 	str.w	r2, [r8]
 8004ae0:	e7ec      	b.n	8004abc <_malloc_r+0xb0>
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	6864      	ldr	r4, [r4, #4]
 8004ae6:	e7ac      	b.n	8004a42 <_malloc_r+0x36>
 8004ae8:	4634      	mov	r4, r6
 8004aea:	6876      	ldr	r6, [r6, #4]
 8004aec:	e7b4      	b.n	8004a58 <_malloc_r+0x4c>
 8004aee:	4613      	mov	r3, r2
 8004af0:	e7cc      	b.n	8004a8c <_malloc_r+0x80>
 8004af2:	230c      	movs	r3, #12
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	4638      	mov	r0, r7
 8004af8:	f000 f80e 	bl	8004b18 <__malloc_unlock>
 8004afc:	e797      	b.n	8004a2e <_malloc_r+0x22>
 8004afe:	6025      	str	r5, [r4, #0]
 8004b00:	e7dc      	b.n	8004abc <_malloc_r+0xb0>
 8004b02:	605b      	str	r3, [r3, #4]
 8004b04:	deff      	udf	#255	; 0xff
 8004b06:	bf00      	nop
 8004b08:	200008c4 	.word	0x200008c4

08004b0c <__malloc_lock>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	; (8004b14 <__malloc_lock+0x8>)
 8004b0e:	f7ff b87c 	b.w	8003c0a <__retarget_lock_acquire_recursive>
 8004b12:	bf00      	nop
 8004b14:	200008c0 	.word	0x200008c0

08004b18 <__malloc_unlock>:
 8004b18:	4801      	ldr	r0, [pc, #4]	; (8004b20 <__malloc_unlock+0x8>)
 8004b1a:	f7ff b877 	b.w	8003c0c <__retarget_lock_release_recursive>
 8004b1e:	bf00      	nop
 8004b20:	200008c0 	.word	0x200008c0

08004b24 <_Balloc>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	69c6      	ldr	r6, [r0, #28]
 8004b28:	4604      	mov	r4, r0
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	b976      	cbnz	r6, 8004b4c <_Balloc+0x28>
 8004b2e:	2010      	movs	r0, #16
 8004b30:	f7ff ff44 	bl	80049bc <malloc>
 8004b34:	4602      	mov	r2, r0
 8004b36:	61e0      	str	r0, [r4, #28]
 8004b38:	b920      	cbnz	r0, 8004b44 <_Balloc+0x20>
 8004b3a:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <_Balloc+0x78>)
 8004b3c:	4818      	ldr	r0, [pc, #96]	; (8004ba0 <_Balloc+0x7c>)
 8004b3e:	216b      	movs	r1, #107	; 0x6b
 8004b40:	f000 fc2a 	bl	8005398 <__assert_func>
 8004b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b48:	6006      	str	r6, [r0, #0]
 8004b4a:	60c6      	str	r6, [r0, #12]
 8004b4c:	69e6      	ldr	r6, [r4, #28]
 8004b4e:	68f3      	ldr	r3, [r6, #12]
 8004b50:	b183      	cbz	r3, 8004b74 <_Balloc+0x50>
 8004b52:	69e3      	ldr	r3, [r4, #28]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b5a:	b9b8      	cbnz	r0, 8004b8c <_Balloc+0x68>
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	fa01 f605 	lsl.w	r6, r1, r5
 8004b62:	1d72      	adds	r2, r6, #5
 8004b64:	0092      	lsls	r2, r2, #2
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 fc34 	bl	80053d4 <_calloc_r>
 8004b6c:	b160      	cbz	r0, 8004b88 <_Balloc+0x64>
 8004b6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b72:	e00e      	b.n	8004b92 <_Balloc+0x6e>
 8004b74:	2221      	movs	r2, #33	; 0x21
 8004b76:	2104      	movs	r1, #4
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f000 fc2b 	bl	80053d4 <_calloc_r>
 8004b7e:	69e3      	ldr	r3, [r4, #28]
 8004b80:	60f0      	str	r0, [r6, #12]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e4      	bne.n	8004b52 <_Balloc+0x2e>
 8004b88:	2000      	movs	r0, #0
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	6802      	ldr	r2, [r0, #0]
 8004b8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b92:	2300      	movs	r3, #0
 8004b94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b98:	e7f7      	b.n	8004b8a <_Balloc+0x66>
 8004b9a:	bf00      	nop
 8004b9c:	08005a29 	.word	0x08005a29
 8004ba0:	08005aa9 	.word	0x08005aa9

08004ba4 <_Bfree>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	69c6      	ldr	r6, [r0, #28]
 8004ba8:	4605      	mov	r5, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	b976      	cbnz	r6, 8004bcc <_Bfree+0x28>
 8004bae:	2010      	movs	r0, #16
 8004bb0:	f7ff ff04 	bl	80049bc <malloc>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	61e8      	str	r0, [r5, #28]
 8004bb8:	b920      	cbnz	r0, 8004bc4 <_Bfree+0x20>
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <_Bfree+0x3c>)
 8004bbc:	4809      	ldr	r0, [pc, #36]	; (8004be4 <_Bfree+0x40>)
 8004bbe:	218f      	movs	r1, #143	; 0x8f
 8004bc0:	f000 fbea 	bl	8005398 <__assert_func>
 8004bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bc8:	6006      	str	r6, [r0, #0]
 8004bca:	60c6      	str	r6, [r0, #12]
 8004bcc:	b13c      	cbz	r4, 8004bde <_Bfree+0x3a>
 8004bce:	69eb      	ldr	r3, [r5, #28]
 8004bd0:	6862      	ldr	r2, [r4, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bd8:	6021      	str	r1, [r4, #0]
 8004bda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	08005a29 	.word	0x08005a29
 8004be4:	08005aa9 	.word	0x08005aa9

08004be8 <__multadd>:
 8004be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bec:	690d      	ldr	r5, [r1, #16]
 8004bee:	4607      	mov	r7, r0
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	461e      	mov	r6, r3
 8004bf4:	f101 0c14 	add.w	ip, r1, #20
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f8dc 3000 	ldr.w	r3, [ip]
 8004bfe:	b299      	uxth	r1, r3
 8004c00:	fb02 6101 	mla	r1, r2, r1, r6
 8004c04:	0c1e      	lsrs	r6, r3, #16
 8004c06:	0c0b      	lsrs	r3, r1, #16
 8004c08:	fb02 3306 	mla	r3, r2, r6, r3
 8004c0c:	b289      	uxth	r1, r1
 8004c0e:	3001      	adds	r0, #1
 8004c10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c14:	4285      	cmp	r5, r0
 8004c16:	f84c 1b04 	str.w	r1, [ip], #4
 8004c1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004c1e:	dcec      	bgt.n	8004bfa <__multadd+0x12>
 8004c20:	b30e      	cbz	r6, 8004c66 <__multadd+0x7e>
 8004c22:	68a3      	ldr	r3, [r4, #8]
 8004c24:	42ab      	cmp	r3, r5
 8004c26:	dc19      	bgt.n	8004c5c <__multadd+0x74>
 8004c28:	6861      	ldr	r1, [r4, #4]
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	3101      	adds	r1, #1
 8004c2e:	f7ff ff79 	bl	8004b24 <_Balloc>
 8004c32:	4680      	mov	r8, r0
 8004c34:	b928      	cbnz	r0, 8004c42 <__multadd+0x5a>
 8004c36:	4602      	mov	r2, r0
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <__multadd+0x84>)
 8004c3a:	480d      	ldr	r0, [pc, #52]	; (8004c70 <__multadd+0x88>)
 8004c3c:	21ba      	movs	r1, #186	; 0xba
 8004c3e:	f000 fbab 	bl	8005398 <__assert_func>
 8004c42:	6922      	ldr	r2, [r4, #16]
 8004c44:	3202      	adds	r2, #2
 8004c46:	f104 010c 	add.w	r1, r4, #12
 8004c4a:	0092      	lsls	r2, r2, #2
 8004c4c:	300c      	adds	r0, #12
 8004c4e:	f7fe ffde 	bl	8003c0e <memcpy>
 8004c52:	4621      	mov	r1, r4
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7ff ffa5 	bl	8004ba4 <_Bfree>
 8004c5a:	4644      	mov	r4, r8
 8004c5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c60:	3501      	adds	r5, #1
 8004c62:	615e      	str	r6, [r3, #20]
 8004c64:	6125      	str	r5, [r4, #16]
 8004c66:	4620      	mov	r0, r4
 8004c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c6c:	08005a98 	.word	0x08005a98
 8004c70:	08005aa9 	.word	0x08005aa9

08004c74 <__hi0bits>:
 8004c74:	0c03      	lsrs	r3, r0, #16
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	b9d3      	cbnz	r3, 8004cb0 <__hi0bits+0x3c>
 8004c7a:	0400      	lsls	r0, r0, #16
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004c82:	bf04      	itt	eq
 8004c84:	0200      	lsleq	r0, r0, #8
 8004c86:	3308      	addeq	r3, #8
 8004c88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004c8c:	bf04      	itt	eq
 8004c8e:	0100      	lsleq	r0, r0, #4
 8004c90:	3304      	addeq	r3, #4
 8004c92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004c96:	bf04      	itt	eq
 8004c98:	0080      	lsleq	r0, r0, #2
 8004c9a:	3302      	addeq	r3, #2
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	db05      	blt.n	8004cac <__hi0bits+0x38>
 8004ca0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004ca4:	f103 0301 	add.w	r3, r3, #1
 8004ca8:	bf08      	it	eq
 8004caa:	2320      	moveq	r3, #32
 8004cac:	4618      	mov	r0, r3
 8004cae:	4770      	bx	lr
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e7e4      	b.n	8004c7e <__hi0bits+0xa>

08004cb4 <__lo0bits>:
 8004cb4:	6803      	ldr	r3, [r0, #0]
 8004cb6:	f013 0207 	ands.w	r2, r3, #7
 8004cba:	d00c      	beq.n	8004cd6 <__lo0bits+0x22>
 8004cbc:	07d9      	lsls	r1, r3, #31
 8004cbe:	d422      	bmi.n	8004d06 <__lo0bits+0x52>
 8004cc0:	079a      	lsls	r2, r3, #30
 8004cc2:	bf49      	itett	mi
 8004cc4:	085b      	lsrmi	r3, r3, #1
 8004cc6:	089b      	lsrpl	r3, r3, #2
 8004cc8:	6003      	strmi	r3, [r0, #0]
 8004cca:	2201      	movmi	r2, #1
 8004ccc:	bf5c      	itt	pl
 8004cce:	6003      	strpl	r3, [r0, #0]
 8004cd0:	2202      	movpl	r2, #2
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4770      	bx	lr
 8004cd6:	b299      	uxth	r1, r3
 8004cd8:	b909      	cbnz	r1, 8004cde <__lo0bits+0x2a>
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	2210      	movs	r2, #16
 8004cde:	b2d9      	uxtb	r1, r3
 8004ce0:	b909      	cbnz	r1, 8004ce6 <__lo0bits+0x32>
 8004ce2:	3208      	adds	r2, #8
 8004ce4:	0a1b      	lsrs	r3, r3, #8
 8004ce6:	0719      	lsls	r1, r3, #28
 8004ce8:	bf04      	itt	eq
 8004cea:	091b      	lsreq	r3, r3, #4
 8004cec:	3204      	addeq	r2, #4
 8004cee:	0799      	lsls	r1, r3, #30
 8004cf0:	bf04      	itt	eq
 8004cf2:	089b      	lsreq	r3, r3, #2
 8004cf4:	3202      	addeq	r2, #2
 8004cf6:	07d9      	lsls	r1, r3, #31
 8004cf8:	d403      	bmi.n	8004d02 <__lo0bits+0x4e>
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	f102 0201 	add.w	r2, r2, #1
 8004d00:	d003      	beq.n	8004d0a <__lo0bits+0x56>
 8004d02:	6003      	str	r3, [r0, #0]
 8004d04:	e7e5      	b.n	8004cd2 <__lo0bits+0x1e>
 8004d06:	2200      	movs	r2, #0
 8004d08:	e7e3      	b.n	8004cd2 <__lo0bits+0x1e>
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	e7e1      	b.n	8004cd2 <__lo0bits+0x1e>
	...

08004d10 <__i2b>:
 8004d10:	b510      	push	{r4, lr}
 8004d12:	460c      	mov	r4, r1
 8004d14:	2101      	movs	r1, #1
 8004d16:	f7ff ff05 	bl	8004b24 <_Balloc>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	b928      	cbnz	r0, 8004d2a <__i2b+0x1a>
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <__i2b+0x24>)
 8004d20:	4805      	ldr	r0, [pc, #20]	; (8004d38 <__i2b+0x28>)
 8004d22:	f240 1145 	movw	r1, #325	; 0x145
 8004d26:	f000 fb37 	bl	8005398 <__assert_func>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	6144      	str	r4, [r0, #20]
 8004d2e:	6103      	str	r3, [r0, #16]
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	bf00      	nop
 8004d34:	08005a98 	.word	0x08005a98
 8004d38:	08005aa9 	.word	0x08005aa9

08004d3c <__multiply>:
 8004d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d40:	4691      	mov	r9, r2
 8004d42:	690a      	ldr	r2, [r1, #16]
 8004d44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	bfb8      	it	lt
 8004d4c:	460b      	movlt	r3, r1
 8004d4e:	460c      	mov	r4, r1
 8004d50:	bfbc      	itt	lt
 8004d52:	464c      	movlt	r4, r9
 8004d54:	4699      	movlt	r9, r3
 8004d56:	6927      	ldr	r7, [r4, #16]
 8004d58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004d5c:	68a3      	ldr	r3, [r4, #8]
 8004d5e:	6861      	ldr	r1, [r4, #4]
 8004d60:	eb07 060a 	add.w	r6, r7, sl
 8004d64:	42b3      	cmp	r3, r6
 8004d66:	b085      	sub	sp, #20
 8004d68:	bfb8      	it	lt
 8004d6a:	3101      	addlt	r1, #1
 8004d6c:	f7ff feda 	bl	8004b24 <_Balloc>
 8004d70:	b930      	cbnz	r0, 8004d80 <__multiply+0x44>
 8004d72:	4602      	mov	r2, r0
 8004d74:	4b44      	ldr	r3, [pc, #272]	; (8004e88 <__multiply+0x14c>)
 8004d76:	4845      	ldr	r0, [pc, #276]	; (8004e8c <__multiply+0x150>)
 8004d78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004d7c:	f000 fb0c 	bl	8005398 <__assert_func>
 8004d80:	f100 0514 	add.w	r5, r0, #20
 8004d84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d88:	462b      	mov	r3, r5
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	4543      	cmp	r3, r8
 8004d8e:	d321      	bcc.n	8004dd4 <__multiply+0x98>
 8004d90:	f104 0314 	add.w	r3, r4, #20
 8004d94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004d98:	f109 0314 	add.w	r3, r9, #20
 8004d9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004da0:	9202      	str	r2, [sp, #8]
 8004da2:	1b3a      	subs	r2, r7, r4
 8004da4:	3a15      	subs	r2, #21
 8004da6:	f022 0203 	bic.w	r2, r2, #3
 8004daa:	3204      	adds	r2, #4
 8004dac:	f104 0115 	add.w	r1, r4, #21
 8004db0:	428f      	cmp	r7, r1
 8004db2:	bf38      	it	cc
 8004db4:	2204      	movcc	r2, #4
 8004db6:	9201      	str	r2, [sp, #4]
 8004db8:	9a02      	ldr	r2, [sp, #8]
 8004dba:	9303      	str	r3, [sp, #12]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d80c      	bhi.n	8004dda <__multiply+0x9e>
 8004dc0:	2e00      	cmp	r6, #0
 8004dc2:	dd03      	ble.n	8004dcc <__multiply+0x90>
 8004dc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d05b      	beq.n	8004e84 <__multiply+0x148>
 8004dcc:	6106      	str	r6, [r0, #16]
 8004dce:	b005      	add	sp, #20
 8004dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd4:	f843 2b04 	str.w	r2, [r3], #4
 8004dd8:	e7d8      	b.n	8004d8c <__multiply+0x50>
 8004dda:	f8b3 a000 	ldrh.w	sl, [r3]
 8004dde:	f1ba 0f00 	cmp.w	sl, #0
 8004de2:	d024      	beq.n	8004e2e <__multiply+0xf2>
 8004de4:	f104 0e14 	add.w	lr, r4, #20
 8004de8:	46a9      	mov	r9, r5
 8004dea:	f04f 0c00 	mov.w	ip, #0
 8004dee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004df2:	f8d9 1000 	ldr.w	r1, [r9]
 8004df6:	fa1f fb82 	uxth.w	fp, r2
 8004dfa:	b289      	uxth	r1, r1
 8004dfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8004e00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004e04:	f8d9 2000 	ldr.w	r2, [r9]
 8004e08:	4461      	add	r1, ip
 8004e0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004e12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004e16:	b289      	uxth	r1, r1
 8004e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e1c:	4577      	cmp	r7, lr
 8004e1e:	f849 1b04 	str.w	r1, [r9], #4
 8004e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e26:	d8e2      	bhi.n	8004dee <__multiply+0xb2>
 8004e28:	9a01      	ldr	r2, [sp, #4]
 8004e2a:	f845 c002 	str.w	ip, [r5, r2]
 8004e2e:	9a03      	ldr	r2, [sp, #12]
 8004e30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004e34:	3304      	adds	r3, #4
 8004e36:	f1b9 0f00 	cmp.w	r9, #0
 8004e3a:	d021      	beq.n	8004e80 <__multiply+0x144>
 8004e3c:	6829      	ldr	r1, [r5, #0]
 8004e3e:	f104 0c14 	add.w	ip, r4, #20
 8004e42:	46ae      	mov	lr, r5
 8004e44:	f04f 0a00 	mov.w	sl, #0
 8004e48:	f8bc b000 	ldrh.w	fp, [ip]
 8004e4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004e50:	fb09 220b 	mla	r2, r9, fp, r2
 8004e54:	4452      	add	r2, sl
 8004e56:	b289      	uxth	r1, r1
 8004e58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e5c:	f84e 1b04 	str.w	r1, [lr], #4
 8004e60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004e64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004e68:	f8be 1000 	ldrh.w	r1, [lr]
 8004e6c:	fb09 110a 	mla	r1, r9, sl, r1
 8004e70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004e74:	4567      	cmp	r7, ip
 8004e76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004e7a:	d8e5      	bhi.n	8004e48 <__multiply+0x10c>
 8004e7c:	9a01      	ldr	r2, [sp, #4]
 8004e7e:	50a9      	str	r1, [r5, r2]
 8004e80:	3504      	adds	r5, #4
 8004e82:	e799      	b.n	8004db8 <__multiply+0x7c>
 8004e84:	3e01      	subs	r6, #1
 8004e86:	e79b      	b.n	8004dc0 <__multiply+0x84>
 8004e88:	08005a98 	.word	0x08005a98
 8004e8c:	08005aa9 	.word	0x08005aa9

08004e90 <__pow5mult>:
 8004e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e94:	4615      	mov	r5, r2
 8004e96:	f012 0203 	ands.w	r2, r2, #3
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460f      	mov	r7, r1
 8004e9e:	d007      	beq.n	8004eb0 <__pow5mult+0x20>
 8004ea0:	4c25      	ldr	r4, [pc, #148]	; (8004f38 <__pow5mult+0xa8>)
 8004ea2:	3a01      	subs	r2, #1
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004eaa:	f7ff fe9d 	bl	8004be8 <__multadd>
 8004eae:	4607      	mov	r7, r0
 8004eb0:	10ad      	asrs	r5, r5, #2
 8004eb2:	d03d      	beq.n	8004f30 <__pow5mult+0xa0>
 8004eb4:	69f4      	ldr	r4, [r6, #28]
 8004eb6:	b97c      	cbnz	r4, 8004ed8 <__pow5mult+0x48>
 8004eb8:	2010      	movs	r0, #16
 8004eba:	f7ff fd7f 	bl	80049bc <malloc>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	61f0      	str	r0, [r6, #28]
 8004ec2:	b928      	cbnz	r0, 8004ed0 <__pow5mult+0x40>
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <__pow5mult+0xac>)
 8004ec6:	481e      	ldr	r0, [pc, #120]	; (8004f40 <__pow5mult+0xb0>)
 8004ec8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004ecc:	f000 fa64 	bl	8005398 <__assert_func>
 8004ed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ed4:	6004      	str	r4, [r0, #0]
 8004ed6:	60c4      	str	r4, [r0, #12]
 8004ed8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004edc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ee0:	b94c      	cbnz	r4, 8004ef6 <__pow5mult+0x66>
 8004ee2:	f240 2171 	movw	r1, #625	; 0x271
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f7ff ff12 	bl	8004d10 <__i2b>
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	6003      	str	r3, [r0, #0]
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	07eb      	lsls	r3, r5, #31
 8004efc:	d50a      	bpl.n	8004f14 <__pow5mult+0x84>
 8004efe:	4639      	mov	r1, r7
 8004f00:	4622      	mov	r2, r4
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff ff1a 	bl	8004d3c <__multiply>
 8004f08:	4639      	mov	r1, r7
 8004f0a:	4680      	mov	r8, r0
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7ff fe49 	bl	8004ba4 <_Bfree>
 8004f12:	4647      	mov	r7, r8
 8004f14:	106d      	asrs	r5, r5, #1
 8004f16:	d00b      	beq.n	8004f30 <__pow5mult+0xa0>
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	b938      	cbnz	r0, 8004f2c <__pow5mult+0x9c>
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4630      	mov	r0, r6
 8004f22:	f7ff ff0b 	bl	8004d3c <__multiply>
 8004f26:	6020      	str	r0, [r4, #0]
 8004f28:	f8c0 9000 	str.w	r9, [r0]
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	e7e4      	b.n	8004efa <__pow5mult+0x6a>
 8004f30:	4638      	mov	r0, r7
 8004f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f36:	bf00      	nop
 8004f38:	08005bf8 	.word	0x08005bf8
 8004f3c:	08005a29 	.word	0x08005a29
 8004f40:	08005aa9 	.word	0x08005aa9

08004f44 <__lshift>:
 8004f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	460c      	mov	r4, r1
 8004f4a:	6849      	ldr	r1, [r1, #4]
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004f52:	68a3      	ldr	r3, [r4, #8]
 8004f54:	4607      	mov	r7, r0
 8004f56:	4691      	mov	r9, r2
 8004f58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f5c:	f108 0601 	add.w	r6, r8, #1
 8004f60:	42b3      	cmp	r3, r6
 8004f62:	db0b      	blt.n	8004f7c <__lshift+0x38>
 8004f64:	4638      	mov	r0, r7
 8004f66:	f7ff fddd 	bl	8004b24 <_Balloc>
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	b948      	cbnz	r0, 8004f82 <__lshift+0x3e>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <__lshift+0xd0>)
 8004f72:	4829      	ldr	r0, [pc, #164]	; (8005018 <__lshift+0xd4>)
 8004f74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004f78:	f000 fa0e 	bl	8005398 <__assert_func>
 8004f7c:	3101      	adds	r1, #1
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	e7ee      	b.n	8004f60 <__lshift+0x1c>
 8004f82:	2300      	movs	r3, #0
 8004f84:	f100 0114 	add.w	r1, r0, #20
 8004f88:	f100 0210 	add.w	r2, r0, #16
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	4553      	cmp	r3, sl
 8004f90:	db33      	blt.n	8004ffa <__lshift+0xb6>
 8004f92:	6920      	ldr	r0, [r4, #16]
 8004f94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f98:	f104 0314 	add.w	r3, r4, #20
 8004f9c:	f019 091f 	ands.w	r9, r9, #31
 8004fa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004fa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004fa8:	d02b      	beq.n	8005002 <__lshift+0xbe>
 8004faa:	f1c9 0e20 	rsb	lr, r9, #32
 8004fae:	468a      	mov	sl, r1
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	fa00 f009 	lsl.w	r0, r0, r9
 8004fb8:	4310      	orrs	r0, r2
 8004fba:	f84a 0b04 	str.w	r0, [sl], #4
 8004fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc2:	459c      	cmp	ip, r3
 8004fc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004fc8:	d8f3      	bhi.n	8004fb2 <__lshift+0x6e>
 8004fca:	ebac 0304 	sub.w	r3, ip, r4
 8004fce:	3b15      	subs	r3, #21
 8004fd0:	f023 0303 	bic.w	r3, r3, #3
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	f104 0015 	add.w	r0, r4, #21
 8004fda:	4584      	cmp	ip, r0
 8004fdc:	bf38      	it	cc
 8004fde:	2304      	movcc	r3, #4
 8004fe0:	50ca      	str	r2, [r1, r3]
 8004fe2:	b10a      	cbz	r2, 8004fe8 <__lshift+0xa4>
 8004fe4:	f108 0602 	add.w	r6, r8, #2
 8004fe8:	3e01      	subs	r6, #1
 8004fea:	4638      	mov	r0, r7
 8004fec:	612e      	str	r6, [r5, #16]
 8004fee:	4621      	mov	r1, r4
 8004ff0:	f7ff fdd8 	bl	8004ba4 <_Bfree>
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffa:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ffe:	3301      	adds	r3, #1
 8005000:	e7c5      	b.n	8004f8e <__lshift+0x4a>
 8005002:	3904      	subs	r1, #4
 8005004:	f853 2b04 	ldr.w	r2, [r3], #4
 8005008:	f841 2f04 	str.w	r2, [r1, #4]!
 800500c:	459c      	cmp	ip, r3
 800500e:	d8f9      	bhi.n	8005004 <__lshift+0xc0>
 8005010:	e7ea      	b.n	8004fe8 <__lshift+0xa4>
 8005012:	bf00      	nop
 8005014:	08005a98 	.word	0x08005a98
 8005018:	08005aa9 	.word	0x08005aa9

0800501c <__mcmp>:
 800501c:	b530      	push	{r4, r5, lr}
 800501e:	6902      	ldr	r2, [r0, #16]
 8005020:	690c      	ldr	r4, [r1, #16]
 8005022:	1b12      	subs	r2, r2, r4
 8005024:	d10e      	bne.n	8005044 <__mcmp+0x28>
 8005026:	f100 0314 	add.w	r3, r0, #20
 800502a:	3114      	adds	r1, #20
 800502c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005030:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005034:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005038:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800503c:	42a5      	cmp	r5, r4
 800503e:	d003      	beq.n	8005048 <__mcmp+0x2c>
 8005040:	d305      	bcc.n	800504e <__mcmp+0x32>
 8005042:	2201      	movs	r2, #1
 8005044:	4610      	mov	r0, r2
 8005046:	bd30      	pop	{r4, r5, pc}
 8005048:	4283      	cmp	r3, r0
 800504a:	d3f3      	bcc.n	8005034 <__mcmp+0x18>
 800504c:	e7fa      	b.n	8005044 <__mcmp+0x28>
 800504e:	f04f 32ff 	mov.w	r2, #4294967295
 8005052:	e7f7      	b.n	8005044 <__mcmp+0x28>

08005054 <__mdiff>:
 8005054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005058:	460c      	mov	r4, r1
 800505a:	4606      	mov	r6, r0
 800505c:	4611      	mov	r1, r2
 800505e:	4620      	mov	r0, r4
 8005060:	4690      	mov	r8, r2
 8005062:	f7ff ffdb 	bl	800501c <__mcmp>
 8005066:	1e05      	subs	r5, r0, #0
 8005068:	d110      	bne.n	800508c <__mdiff+0x38>
 800506a:	4629      	mov	r1, r5
 800506c:	4630      	mov	r0, r6
 800506e:	f7ff fd59 	bl	8004b24 <_Balloc>
 8005072:	b930      	cbnz	r0, 8005082 <__mdiff+0x2e>
 8005074:	4b3a      	ldr	r3, [pc, #232]	; (8005160 <__mdiff+0x10c>)
 8005076:	4602      	mov	r2, r0
 8005078:	f240 2137 	movw	r1, #567	; 0x237
 800507c:	4839      	ldr	r0, [pc, #228]	; (8005164 <__mdiff+0x110>)
 800507e:	f000 f98b 	bl	8005398 <__assert_func>
 8005082:	2301      	movs	r3, #1
 8005084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	bfa4      	itt	ge
 800508e:	4643      	movge	r3, r8
 8005090:	46a0      	movge	r8, r4
 8005092:	4630      	mov	r0, r6
 8005094:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005098:	bfa6      	itte	ge
 800509a:	461c      	movge	r4, r3
 800509c:	2500      	movge	r5, #0
 800509e:	2501      	movlt	r5, #1
 80050a0:	f7ff fd40 	bl	8004b24 <_Balloc>
 80050a4:	b920      	cbnz	r0, 80050b0 <__mdiff+0x5c>
 80050a6:	4b2e      	ldr	r3, [pc, #184]	; (8005160 <__mdiff+0x10c>)
 80050a8:	4602      	mov	r2, r0
 80050aa:	f240 2145 	movw	r1, #581	; 0x245
 80050ae:	e7e5      	b.n	800507c <__mdiff+0x28>
 80050b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80050b4:	6926      	ldr	r6, [r4, #16]
 80050b6:	60c5      	str	r5, [r0, #12]
 80050b8:	f104 0914 	add.w	r9, r4, #20
 80050bc:	f108 0514 	add.w	r5, r8, #20
 80050c0:	f100 0e14 	add.w	lr, r0, #20
 80050c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80050c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80050cc:	f108 0210 	add.w	r2, r8, #16
 80050d0:	46f2      	mov	sl, lr
 80050d2:	2100      	movs	r1, #0
 80050d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80050d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80050dc:	fa11 f88b 	uxtah	r8, r1, fp
 80050e0:	b299      	uxth	r1, r3
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	eba8 0801 	sub.w	r8, r8, r1
 80050e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80050ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80050f0:	fa1f f888 	uxth.w	r8, r8
 80050f4:	1419      	asrs	r1, r3, #16
 80050f6:	454e      	cmp	r6, r9
 80050f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80050fc:	f84a 3b04 	str.w	r3, [sl], #4
 8005100:	d8e8      	bhi.n	80050d4 <__mdiff+0x80>
 8005102:	1b33      	subs	r3, r6, r4
 8005104:	3b15      	subs	r3, #21
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	3304      	adds	r3, #4
 800510c:	3415      	adds	r4, #21
 800510e:	42a6      	cmp	r6, r4
 8005110:	bf38      	it	cc
 8005112:	2304      	movcc	r3, #4
 8005114:	441d      	add	r5, r3
 8005116:	4473      	add	r3, lr
 8005118:	469e      	mov	lr, r3
 800511a:	462e      	mov	r6, r5
 800511c:	4566      	cmp	r6, ip
 800511e:	d30e      	bcc.n	800513e <__mdiff+0xea>
 8005120:	f10c 0203 	add.w	r2, ip, #3
 8005124:	1b52      	subs	r2, r2, r5
 8005126:	f022 0203 	bic.w	r2, r2, #3
 800512a:	3d03      	subs	r5, #3
 800512c:	45ac      	cmp	ip, r5
 800512e:	bf38      	it	cc
 8005130:	2200      	movcc	r2, #0
 8005132:	4413      	add	r3, r2
 8005134:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005138:	b17a      	cbz	r2, 800515a <__mdiff+0x106>
 800513a:	6107      	str	r7, [r0, #16]
 800513c:	e7a4      	b.n	8005088 <__mdiff+0x34>
 800513e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005142:	fa11 f288 	uxtah	r2, r1, r8
 8005146:	1414      	asrs	r4, r2, #16
 8005148:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800514c:	b292      	uxth	r2, r2
 800514e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005152:	f84e 2b04 	str.w	r2, [lr], #4
 8005156:	1421      	asrs	r1, r4, #16
 8005158:	e7e0      	b.n	800511c <__mdiff+0xc8>
 800515a:	3f01      	subs	r7, #1
 800515c:	e7ea      	b.n	8005134 <__mdiff+0xe0>
 800515e:	bf00      	nop
 8005160:	08005a98 	.word	0x08005a98
 8005164:	08005aa9 	.word	0x08005aa9

08005168 <__d2b>:
 8005168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800516c:	460f      	mov	r7, r1
 800516e:	2101      	movs	r1, #1
 8005170:	ec59 8b10 	vmov	r8, r9, d0
 8005174:	4616      	mov	r6, r2
 8005176:	f7ff fcd5 	bl	8004b24 <_Balloc>
 800517a:	4604      	mov	r4, r0
 800517c:	b930      	cbnz	r0, 800518c <__d2b+0x24>
 800517e:	4602      	mov	r2, r0
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <__d2b+0xac>)
 8005182:	4825      	ldr	r0, [pc, #148]	; (8005218 <__d2b+0xb0>)
 8005184:	f240 310f 	movw	r1, #783	; 0x30f
 8005188:	f000 f906 	bl	8005398 <__assert_func>
 800518c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005194:	bb2d      	cbnz	r5, 80051e2 <__d2b+0x7a>
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	f1b8 0300 	subs.w	r3, r8, #0
 800519c:	d026      	beq.n	80051ec <__d2b+0x84>
 800519e:	4668      	mov	r0, sp
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	f7ff fd87 	bl	8004cb4 <__lo0bits>
 80051a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80051aa:	b1e8      	cbz	r0, 80051e8 <__d2b+0x80>
 80051ac:	f1c0 0320 	rsb	r3, r0, #32
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	430b      	orrs	r3, r1
 80051b6:	40c2      	lsrs	r2, r0
 80051b8:	6163      	str	r3, [r4, #20]
 80051ba:	9201      	str	r2, [sp, #4]
 80051bc:	9b01      	ldr	r3, [sp, #4]
 80051be:	61a3      	str	r3, [r4, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf14      	ite	ne
 80051c4:	2202      	movne	r2, #2
 80051c6:	2201      	moveq	r2, #1
 80051c8:	6122      	str	r2, [r4, #16]
 80051ca:	b1bd      	cbz	r5, 80051fc <__d2b+0x94>
 80051cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80051d0:	4405      	add	r5, r0
 80051d2:	603d      	str	r5, [r7, #0]
 80051d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80051d8:	6030      	str	r0, [r6, #0]
 80051da:	4620      	mov	r0, r4
 80051dc:	b003      	add	sp, #12
 80051de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e6:	e7d6      	b.n	8005196 <__d2b+0x2e>
 80051e8:	6161      	str	r1, [r4, #20]
 80051ea:	e7e7      	b.n	80051bc <__d2b+0x54>
 80051ec:	a801      	add	r0, sp, #4
 80051ee:	f7ff fd61 	bl	8004cb4 <__lo0bits>
 80051f2:	9b01      	ldr	r3, [sp, #4]
 80051f4:	6163      	str	r3, [r4, #20]
 80051f6:	3020      	adds	r0, #32
 80051f8:	2201      	movs	r2, #1
 80051fa:	e7e5      	b.n	80051c8 <__d2b+0x60>
 80051fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005200:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005204:	6038      	str	r0, [r7, #0]
 8005206:	6918      	ldr	r0, [r3, #16]
 8005208:	f7ff fd34 	bl	8004c74 <__hi0bits>
 800520c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005210:	e7e2      	b.n	80051d8 <__d2b+0x70>
 8005212:	bf00      	nop
 8005214:	08005a98 	.word	0x08005a98
 8005218:	08005aa9 	.word	0x08005aa9

0800521c <__sflush_r>:
 800521c:	898a      	ldrh	r2, [r1, #12]
 800521e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005222:	4605      	mov	r5, r0
 8005224:	0710      	lsls	r0, r2, #28
 8005226:	460c      	mov	r4, r1
 8005228:	d458      	bmi.n	80052dc <__sflush_r+0xc0>
 800522a:	684b      	ldr	r3, [r1, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	dc05      	bgt.n	800523c <__sflush_r+0x20>
 8005230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	dc02      	bgt.n	800523c <__sflush_r+0x20>
 8005236:	2000      	movs	r0, #0
 8005238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800523c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800523e:	2e00      	cmp	r6, #0
 8005240:	d0f9      	beq.n	8005236 <__sflush_r+0x1a>
 8005242:	2300      	movs	r3, #0
 8005244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005248:	682f      	ldr	r7, [r5, #0]
 800524a:	6a21      	ldr	r1, [r4, #32]
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	d032      	beq.n	80052b6 <__sflush_r+0x9a>
 8005250:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	075a      	lsls	r2, r3, #29
 8005256:	d505      	bpl.n	8005264 <__sflush_r+0x48>
 8005258:	6863      	ldr	r3, [r4, #4]
 800525a:	1ac0      	subs	r0, r0, r3
 800525c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800525e:	b10b      	cbz	r3, 8005264 <__sflush_r+0x48>
 8005260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005262:	1ac0      	subs	r0, r0, r3
 8005264:	2300      	movs	r3, #0
 8005266:	4602      	mov	r2, r0
 8005268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800526a:	6a21      	ldr	r1, [r4, #32]
 800526c:	4628      	mov	r0, r5
 800526e:	47b0      	blx	r6
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	d106      	bne.n	8005284 <__sflush_r+0x68>
 8005276:	6829      	ldr	r1, [r5, #0]
 8005278:	291d      	cmp	r1, #29
 800527a:	d82b      	bhi.n	80052d4 <__sflush_r+0xb8>
 800527c:	4a29      	ldr	r2, [pc, #164]	; (8005324 <__sflush_r+0x108>)
 800527e:	410a      	asrs	r2, r1
 8005280:	07d6      	lsls	r6, r2, #31
 8005282:	d427      	bmi.n	80052d4 <__sflush_r+0xb8>
 8005284:	2200      	movs	r2, #0
 8005286:	6062      	str	r2, [r4, #4]
 8005288:	04d9      	lsls	r1, r3, #19
 800528a:	6922      	ldr	r2, [r4, #16]
 800528c:	6022      	str	r2, [r4, #0]
 800528e:	d504      	bpl.n	800529a <__sflush_r+0x7e>
 8005290:	1c42      	adds	r2, r0, #1
 8005292:	d101      	bne.n	8005298 <__sflush_r+0x7c>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	b903      	cbnz	r3, 800529a <__sflush_r+0x7e>
 8005298:	6560      	str	r0, [r4, #84]	; 0x54
 800529a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800529c:	602f      	str	r7, [r5, #0]
 800529e:	2900      	cmp	r1, #0
 80052a0:	d0c9      	beq.n	8005236 <__sflush_r+0x1a>
 80052a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052a6:	4299      	cmp	r1, r3
 80052a8:	d002      	beq.n	80052b0 <__sflush_r+0x94>
 80052aa:	4628      	mov	r0, r5
 80052ac:	f7ff fb3a 	bl	8004924 <_free_r>
 80052b0:	2000      	movs	r0, #0
 80052b2:	6360      	str	r0, [r4, #52]	; 0x34
 80052b4:	e7c0      	b.n	8005238 <__sflush_r+0x1c>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b0      	blx	r6
 80052bc:	1c41      	adds	r1, r0, #1
 80052be:	d1c8      	bne.n	8005252 <__sflush_r+0x36>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0c5      	beq.n	8005252 <__sflush_r+0x36>
 80052c6:	2b1d      	cmp	r3, #29
 80052c8:	d001      	beq.n	80052ce <__sflush_r+0xb2>
 80052ca:	2b16      	cmp	r3, #22
 80052cc:	d101      	bne.n	80052d2 <__sflush_r+0xb6>
 80052ce:	602f      	str	r7, [r5, #0]
 80052d0:	e7b1      	b.n	8005236 <__sflush_r+0x1a>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	e7ad      	b.n	8005238 <__sflush_r+0x1c>
 80052dc:	690f      	ldr	r7, [r1, #16]
 80052de:	2f00      	cmp	r7, #0
 80052e0:	d0a9      	beq.n	8005236 <__sflush_r+0x1a>
 80052e2:	0793      	lsls	r3, r2, #30
 80052e4:	680e      	ldr	r6, [r1, #0]
 80052e6:	bf08      	it	eq
 80052e8:	694b      	ldreq	r3, [r1, #20]
 80052ea:	600f      	str	r7, [r1, #0]
 80052ec:	bf18      	it	ne
 80052ee:	2300      	movne	r3, #0
 80052f0:	eba6 0807 	sub.w	r8, r6, r7
 80052f4:	608b      	str	r3, [r1, #8]
 80052f6:	f1b8 0f00 	cmp.w	r8, #0
 80052fa:	dd9c      	ble.n	8005236 <__sflush_r+0x1a>
 80052fc:	6a21      	ldr	r1, [r4, #32]
 80052fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005300:	4643      	mov	r3, r8
 8005302:	463a      	mov	r2, r7
 8005304:	4628      	mov	r0, r5
 8005306:	47b0      	blx	r6
 8005308:	2800      	cmp	r0, #0
 800530a:	dc06      	bgt.n	800531a <__sflush_r+0xfe>
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	e78e      	b.n	8005238 <__sflush_r+0x1c>
 800531a:	4407      	add	r7, r0
 800531c:	eba8 0800 	sub.w	r8, r8, r0
 8005320:	e7e9      	b.n	80052f6 <__sflush_r+0xda>
 8005322:	bf00      	nop
 8005324:	dfbffffe 	.word	0xdfbffffe

08005328 <_fflush_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	690b      	ldr	r3, [r1, #16]
 800532c:	4605      	mov	r5, r0
 800532e:	460c      	mov	r4, r1
 8005330:	b913      	cbnz	r3, 8005338 <_fflush_r+0x10>
 8005332:	2500      	movs	r5, #0
 8005334:	4628      	mov	r0, r5
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	b118      	cbz	r0, 8005342 <_fflush_r+0x1a>
 800533a:	6a03      	ldr	r3, [r0, #32]
 800533c:	b90b      	cbnz	r3, 8005342 <_fflush_r+0x1a>
 800533e:	f7fe fb6d 	bl	8003a1c <__sinit>
 8005342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f3      	beq.n	8005332 <_fflush_r+0xa>
 800534a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800534c:	07d0      	lsls	r0, r2, #31
 800534e:	d404      	bmi.n	800535a <_fflush_r+0x32>
 8005350:	0599      	lsls	r1, r3, #22
 8005352:	d402      	bmi.n	800535a <_fflush_r+0x32>
 8005354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005356:	f7fe fc58 	bl	8003c0a <__retarget_lock_acquire_recursive>
 800535a:	4628      	mov	r0, r5
 800535c:	4621      	mov	r1, r4
 800535e:	f7ff ff5d 	bl	800521c <__sflush_r>
 8005362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005364:	07da      	lsls	r2, r3, #31
 8005366:	4605      	mov	r5, r0
 8005368:	d4e4      	bmi.n	8005334 <_fflush_r+0xc>
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	059b      	lsls	r3, r3, #22
 800536e:	d4e1      	bmi.n	8005334 <_fflush_r+0xc>
 8005370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005372:	f7fe fc4b 	bl	8003c0c <__retarget_lock_release_recursive>
 8005376:	e7dd      	b.n	8005334 <_fflush_r+0xc>

08005378 <_sbrk_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4d06      	ldr	r5, [pc, #24]	; (8005394 <_sbrk_r+0x1c>)
 800537c:	2300      	movs	r3, #0
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	f7fc f90e 	bl	80015a4 <_sbrk>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_sbrk_r+0x1a>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_sbrk_r+0x1a>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	200008bc 	.word	0x200008bc

08005398 <__assert_func>:
 8005398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800539a:	4614      	mov	r4, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <__assert_func+0x2c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4605      	mov	r5, r0
 80053a4:	68d8      	ldr	r0, [r3, #12]
 80053a6:	b14c      	cbz	r4, 80053bc <__assert_func+0x24>
 80053a8:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <__assert_func+0x30>)
 80053aa:	9100      	str	r1, [sp, #0]
 80053ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053b0:	4906      	ldr	r1, [pc, #24]	; (80053cc <__assert_func+0x34>)
 80053b2:	462b      	mov	r3, r5
 80053b4:	f000 f844 	bl	8005440 <fiprintf>
 80053b8:	f000 f854 	bl	8005464 <abort>
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <__assert_func+0x38>)
 80053be:	461c      	mov	r4, r3
 80053c0:	e7f3      	b.n	80053aa <__assert_func+0x12>
 80053c2:	bf00      	nop
 80053c4:	20000234 	.word	0x20000234
 80053c8:	08005c0e 	.word	0x08005c0e
 80053cc:	08005c1b 	.word	0x08005c1b
 80053d0:	08005c49 	.word	0x08005c49

080053d4 <_calloc_r>:
 80053d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053d6:	fba1 2402 	umull	r2, r4, r1, r2
 80053da:	b94c      	cbnz	r4, 80053f0 <_calloc_r+0x1c>
 80053dc:	4611      	mov	r1, r2
 80053de:	9201      	str	r2, [sp, #4]
 80053e0:	f7ff fb14 	bl	8004a0c <_malloc_r>
 80053e4:	9a01      	ldr	r2, [sp, #4]
 80053e6:	4605      	mov	r5, r0
 80053e8:	b930      	cbnz	r0, 80053f8 <_calloc_r+0x24>
 80053ea:	4628      	mov	r0, r5
 80053ec:	b003      	add	sp, #12
 80053ee:	bd30      	pop	{r4, r5, pc}
 80053f0:	220c      	movs	r2, #12
 80053f2:	6002      	str	r2, [r0, #0]
 80053f4:	2500      	movs	r5, #0
 80053f6:	e7f8      	b.n	80053ea <_calloc_r+0x16>
 80053f8:	4621      	mov	r1, r4
 80053fa:	f7fe fb88 	bl	8003b0e <memset>
 80053fe:	e7f4      	b.n	80053ea <_calloc_r+0x16>

08005400 <__ascii_mbtowc>:
 8005400:	b082      	sub	sp, #8
 8005402:	b901      	cbnz	r1, 8005406 <__ascii_mbtowc+0x6>
 8005404:	a901      	add	r1, sp, #4
 8005406:	b142      	cbz	r2, 800541a <__ascii_mbtowc+0x1a>
 8005408:	b14b      	cbz	r3, 800541e <__ascii_mbtowc+0x1e>
 800540a:	7813      	ldrb	r3, [r2, #0]
 800540c:	600b      	str	r3, [r1, #0]
 800540e:	7812      	ldrb	r2, [r2, #0]
 8005410:	1e10      	subs	r0, r2, #0
 8005412:	bf18      	it	ne
 8005414:	2001      	movne	r0, #1
 8005416:	b002      	add	sp, #8
 8005418:	4770      	bx	lr
 800541a:	4610      	mov	r0, r2
 800541c:	e7fb      	b.n	8005416 <__ascii_mbtowc+0x16>
 800541e:	f06f 0001 	mvn.w	r0, #1
 8005422:	e7f8      	b.n	8005416 <__ascii_mbtowc+0x16>

08005424 <__ascii_wctomb>:
 8005424:	b149      	cbz	r1, 800543a <__ascii_wctomb+0x16>
 8005426:	2aff      	cmp	r2, #255	; 0xff
 8005428:	bf85      	ittet	hi
 800542a:	238a      	movhi	r3, #138	; 0x8a
 800542c:	6003      	strhi	r3, [r0, #0]
 800542e:	700a      	strbls	r2, [r1, #0]
 8005430:	f04f 30ff 	movhi.w	r0, #4294967295
 8005434:	bf98      	it	ls
 8005436:	2001      	movls	r0, #1
 8005438:	4770      	bx	lr
 800543a:	4608      	mov	r0, r1
 800543c:	4770      	bx	lr
	...

08005440 <fiprintf>:
 8005440:	b40e      	push	{r1, r2, r3}
 8005442:	b503      	push	{r0, r1, lr}
 8005444:	4601      	mov	r1, r0
 8005446:	ab03      	add	r3, sp, #12
 8005448:	4805      	ldr	r0, [pc, #20]	; (8005460 <fiprintf+0x20>)
 800544a:	f853 2b04 	ldr.w	r2, [r3], #4
 800544e:	6800      	ldr	r0, [r0, #0]
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	f000 f837 	bl	80054c4 <_vfiprintf_r>
 8005456:	b002      	add	sp, #8
 8005458:	f85d eb04 	ldr.w	lr, [sp], #4
 800545c:	b003      	add	sp, #12
 800545e:	4770      	bx	lr
 8005460:	20000234 	.word	0x20000234

08005464 <abort>:
 8005464:	b508      	push	{r3, lr}
 8005466:	2006      	movs	r0, #6
 8005468:	f000 fa04 	bl	8005874 <raise>
 800546c:	2001      	movs	r0, #1
 800546e:	f7fc f83d 	bl	80014ec <_exit>

08005472 <__sfputc_r>:
 8005472:	6893      	ldr	r3, [r2, #8]
 8005474:	3b01      	subs	r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	b410      	push	{r4}
 800547a:	6093      	str	r3, [r2, #8]
 800547c:	da08      	bge.n	8005490 <__sfputc_r+0x1e>
 800547e:	6994      	ldr	r4, [r2, #24]
 8005480:	42a3      	cmp	r3, r4
 8005482:	db01      	blt.n	8005488 <__sfputc_r+0x16>
 8005484:	290a      	cmp	r1, #10
 8005486:	d103      	bne.n	8005490 <__sfputc_r+0x1e>
 8005488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800548c:	f000 b934 	b.w	80056f8 <__swbuf_r>
 8005490:	6813      	ldr	r3, [r2, #0]
 8005492:	1c58      	adds	r0, r3, #1
 8005494:	6010      	str	r0, [r2, #0]
 8005496:	7019      	strb	r1, [r3, #0]
 8005498:	4608      	mov	r0, r1
 800549a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <__sfputs_r>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	4606      	mov	r6, r0
 80054a4:	460f      	mov	r7, r1
 80054a6:	4614      	mov	r4, r2
 80054a8:	18d5      	adds	r5, r2, r3
 80054aa:	42ac      	cmp	r4, r5
 80054ac:	d101      	bne.n	80054b2 <__sfputs_r+0x12>
 80054ae:	2000      	movs	r0, #0
 80054b0:	e007      	b.n	80054c2 <__sfputs_r+0x22>
 80054b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054b6:	463a      	mov	r2, r7
 80054b8:	4630      	mov	r0, r6
 80054ba:	f7ff ffda 	bl	8005472 <__sfputc_r>
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	d1f3      	bne.n	80054aa <__sfputs_r+0xa>
 80054c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054c4 <_vfiprintf_r>:
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	460d      	mov	r5, r1
 80054ca:	b09d      	sub	sp, #116	; 0x74
 80054cc:	4614      	mov	r4, r2
 80054ce:	4698      	mov	r8, r3
 80054d0:	4606      	mov	r6, r0
 80054d2:	b118      	cbz	r0, 80054dc <_vfiprintf_r+0x18>
 80054d4:	6a03      	ldr	r3, [r0, #32]
 80054d6:	b90b      	cbnz	r3, 80054dc <_vfiprintf_r+0x18>
 80054d8:	f7fe faa0 	bl	8003a1c <__sinit>
 80054dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054de:	07d9      	lsls	r1, r3, #31
 80054e0:	d405      	bmi.n	80054ee <_vfiprintf_r+0x2a>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	059a      	lsls	r2, r3, #22
 80054e6:	d402      	bmi.n	80054ee <_vfiprintf_r+0x2a>
 80054e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ea:	f7fe fb8e 	bl	8003c0a <__retarget_lock_acquire_recursive>
 80054ee:	89ab      	ldrh	r3, [r5, #12]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	d501      	bpl.n	80054f8 <_vfiprintf_r+0x34>
 80054f4:	692b      	ldr	r3, [r5, #16]
 80054f6:	b99b      	cbnz	r3, 8005520 <_vfiprintf_r+0x5c>
 80054f8:	4629      	mov	r1, r5
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 f93a 	bl	8005774 <__swsetup_r>
 8005500:	b170      	cbz	r0, 8005520 <_vfiprintf_r+0x5c>
 8005502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005504:	07dc      	lsls	r4, r3, #31
 8005506:	d504      	bpl.n	8005512 <_vfiprintf_r+0x4e>
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	b01d      	add	sp, #116	; 0x74
 800550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	0598      	lsls	r0, r3, #22
 8005516:	d4f7      	bmi.n	8005508 <_vfiprintf_r+0x44>
 8005518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800551a:	f7fe fb77 	bl	8003c0c <__retarget_lock_release_recursive>
 800551e:	e7f3      	b.n	8005508 <_vfiprintf_r+0x44>
 8005520:	2300      	movs	r3, #0
 8005522:	9309      	str	r3, [sp, #36]	; 0x24
 8005524:	2320      	movs	r3, #32
 8005526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800552a:	f8cd 800c 	str.w	r8, [sp, #12]
 800552e:	2330      	movs	r3, #48	; 0x30
 8005530:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80056e4 <_vfiprintf_r+0x220>
 8005534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005538:	f04f 0901 	mov.w	r9, #1
 800553c:	4623      	mov	r3, r4
 800553e:	469a      	mov	sl, r3
 8005540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005544:	b10a      	cbz	r2, 800554a <_vfiprintf_r+0x86>
 8005546:	2a25      	cmp	r2, #37	; 0x25
 8005548:	d1f9      	bne.n	800553e <_vfiprintf_r+0x7a>
 800554a:	ebba 0b04 	subs.w	fp, sl, r4
 800554e:	d00b      	beq.n	8005568 <_vfiprintf_r+0xa4>
 8005550:	465b      	mov	r3, fp
 8005552:	4622      	mov	r2, r4
 8005554:	4629      	mov	r1, r5
 8005556:	4630      	mov	r0, r6
 8005558:	f7ff ffa2 	bl	80054a0 <__sfputs_r>
 800555c:	3001      	adds	r0, #1
 800555e:	f000 80a9 	beq.w	80056b4 <_vfiprintf_r+0x1f0>
 8005562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005564:	445a      	add	r2, fp
 8005566:	9209      	str	r2, [sp, #36]	; 0x24
 8005568:	f89a 3000 	ldrb.w	r3, [sl]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80a1 	beq.w	80056b4 <_vfiprintf_r+0x1f0>
 8005572:	2300      	movs	r3, #0
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800557c:	f10a 0a01 	add.w	sl, sl, #1
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	9307      	str	r3, [sp, #28]
 8005584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005588:	931a      	str	r3, [sp, #104]	; 0x68
 800558a:	4654      	mov	r4, sl
 800558c:	2205      	movs	r2, #5
 800558e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005592:	4854      	ldr	r0, [pc, #336]	; (80056e4 <_vfiprintf_r+0x220>)
 8005594:	f7fa fe24 	bl	80001e0 <memchr>
 8005598:	9a04      	ldr	r2, [sp, #16]
 800559a:	b9d8      	cbnz	r0, 80055d4 <_vfiprintf_r+0x110>
 800559c:	06d1      	lsls	r1, r2, #27
 800559e:	bf44      	itt	mi
 80055a0:	2320      	movmi	r3, #32
 80055a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055a6:	0713      	lsls	r3, r2, #28
 80055a8:	bf44      	itt	mi
 80055aa:	232b      	movmi	r3, #43	; 0x2b
 80055ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b0:	f89a 3000 	ldrb.w	r3, [sl]
 80055b4:	2b2a      	cmp	r3, #42	; 0x2a
 80055b6:	d015      	beq.n	80055e4 <_vfiprintf_r+0x120>
 80055b8:	9a07      	ldr	r2, [sp, #28]
 80055ba:	4654      	mov	r4, sl
 80055bc:	2000      	movs	r0, #0
 80055be:	f04f 0c0a 	mov.w	ip, #10
 80055c2:	4621      	mov	r1, r4
 80055c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055c8:	3b30      	subs	r3, #48	; 0x30
 80055ca:	2b09      	cmp	r3, #9
 80055cc:	d94d      	bls.n	800566a <_vfiprintf_r+0x1a6>
 80055ce:	b1b0      	cbz	r0, 80055fe <_vfiprintf_r+0x13a>
 80055d0:	9207      	str	r2, [sp, #28]
 80055d2:	e014      	b.n	80055fe <_vfiprintf_r+0x13a>
 80055d4:	eba0 0308 	sub.w	r3, r0, r8
 80055d8:	fa09 f303 	lsl.w	r3, r9, r3
 80055dc:	4313      	orrs	r3, r2
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	46a2      	mov	sl, r4
 80055e2:	e7d2      	b.n	800558a <_vfiprintf_r+0xc6>
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	1d19      	adds	r1, r3, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	9103      	str	r1, [sp, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bfbb      	ittet	lt
 80055f0:	425b      	neglt	r3, r3
 80055f2:	f042 0202 	orrlt.w	r2, r2, #2
 80055f6:	9307      	strge	r3, [sp, #28]
 80055f8:	9307      	strlt	r3, [sp, #28]
 80055fa:	bfb8      	it	lt
 80055fc:	9204      	strlt	r2, [sp, #16]
 80055fe:	7823      	ldrb	r3, [r4, #0]
 8005600:	2b2e      	cmp	r3, #46	; 0x2e
 8005602:	d10c      	bne.n	800561e <_vfiprintf_r+0x15a>
 8005604:	7863      	ldrb	r3, [r4, #1]
 8005606:	2b2a      	cmp	r3, #42	; 0x2a
 8005608:	d134      	bne.n	8005674 <_vfiprintf_r+0x1b0>
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	1d1a      	adds	r2, r3, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	9203      	str	r2, [sp, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	bfb8      	it	lt
 8005616:	f04f 33ff 	movlt.w	r3, #4294967295
 800561a:	3402      	adds	r4, #2
 800561c:	9305      	str	r3, [sp, #20]
 800561e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80056f4 <_vfiprintf_r+0x230>
 8005622:	7821      	ldrb	r1, [r4, #0]
 8005624:	2203      	movs	r2, #3
 8005626:	4650      	mov	r0, sl
 8005628:	f7fa fdda 	bl	80001e0 <memchr>
 800562c:	b138      	cbz	r0, 800563e <_vfiprintf_r+0x17a>
 800562e:	9b04      	ldr	r3, [sp, #16]
 8005630:	eba0 000a 	sub.w	r0, r0, sl
 8005634:	2240      	movs	r2, #64	; 0x40
 8005636:	4082      	lsls	r2, r0
 8005638:	4313      	orrs	r3, r2
 800563a:	3401      	adds	r4, #1
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005642:	4829      	ldr	r0, [pc, #164]	; (80056e8 <_vfiprintf_r+0x224>)
 8005644:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005648:	2206      	movs	r2, #6
 800564a:	f7fa fdc9 	bl	80001e0 <memchr>
 800564e:	2800      	cmp	r0, #0
 8005650:	d03f      	beq.n	80056d2 <_vfiprintf_r+0x20e>
 8005652:	4b26      	ldr	r3, [pc, #152]	; (80056ec <_vfiprintf_r+0x228>)
 8005654:	bb1b      	cbnz	r3, 800569e <_vfiprintf_r+0x1da>
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	3307      	adds	r3, #7
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	3308      	adds	r3, #8
 8005660:	9303      	str	r3, [sp, #12]
 8005662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005664:	443b      	add	r3, r7
 8005666:	9309      	str	r3, [sp, #36]	; 0x24
 8005668:	e768      	b.n	800553c <_vfiprintf_r+0x78>
 800566a:	fb0c 3202 	mla	r2, ip, r2, r3
 800566e:	460c      	mov	r4, r1
 8005670:	2001      	movs	r0, #1
 8005672:	e7a6      	b.n	80055c2 <_vfiprintf_r+0xfe>
 8005674:	2300      	movs	r3, #0
 8005676:	3401      	adds	r4, #1
 8005678:	9305      	str	r3, [sp, #20]
 800567a:	4619      	mov	r1, r3
 800567c:	f04f 0c0a 	mov.w	ip, #10
 8005680:	4620      	mov	r0, r4
 8005682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005686:	3a30      	subs	r2, #48	; 0x30
 8005688:	2a09      	cmp	r2, #9
 800568a:	d903      	bls.n	8005694 <_vfiprintf_r+0x1d0>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0c6      	beq.n	800561e <_vfiprintf_r+0x15a>
 8005690:	9105      	str	r1, [sp, #20]
 8005692:	e7c4      	b.n	800561e <_vfiprintf_r+0x15a>
 8005694:	fb0c 2101 	mla	r1, ip, r1, r2
 8005698:	4604      	mov	r4, r0
 800569a:	2301      	movs	r3, #1
 800569c:	e7f0      	b.n	8005680 <_vfiprintf_r+0x1bc>
 800569e:	ab03      	add	r3, sp, #12
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	462a      	mov	r2, r5
 80056a4:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <_vfiprintf_r+0x22c>)
 80056a6:	a904      	add	r1, sp, #16
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7fd fd65 	bl	8003178 <_printf_float>
 80056ae:	4607      	mov	r7, r0
 80056b0:	1c78      	adds	r0, r7, #1
 80056b2:	d1d6      	bne.n	8005662 <_vfiprintf_r+0x19e>
 80056b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056b6:	07d9      	lsls	r1, r3, #31
 80056b8:	d405      	bmi.n	80056c6 <_vfiprintf_r+0x202>
 80056ba:	89ab      	ldrh	r3, [r5, #12]
 80056bc:	059a      	lsls	r2, r3, #22
 80056be:	d402      	bmi.n	80056c6 <_vfiprintf_r+0x202>
 80056c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056c2:	f7fe faa3 	bl	8003c0c <__retarget_lock_release_recursive>
 80056c6:	89ab      	ldrh	r3, [r5, #12]
 80056c8:	065b      	lsls	r3, r3, #25
 80056ca:	f53f af1d 	bmi.w	8005508 <_vfiprintf_r+0x44>
 80056ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056d0:	e71c      	b.n	800550c <_vfiprintf_r+0x48>
 80056d2:	ab03      	add	r3, sp, #12
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	462a      	mov	r2, r5
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <_vfiprintf_r+0x22c>)
 80056da:	a904      	add	r1, sp, #16
 80056dc:	4630      	mov	r0, r6
 80056de:	f7fd ffef 	bl	80036c0 <_printf_i>
 80056e2:	e7e4      	b.n	80056ae <_vfiprintf_r+0x1ea>
 80056e4:	08005d4b 	.word	0x08005d4b
 80056e8:	08005d55 	.word	0x08005d55
 80056ec:	08003179 	.word	0x08003179
 80056f0:	080054a1 	.word	0x080054a1
 80056f4:	08005d51 	.word	0x08005d51

080056f8 <__swbuf_r>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	460e      	mov	r6, r1
 80056fc:	4614      	mov	r4, r2
 80056fe:	4605      	mov	r5, r0
 8005700:	b118      	cbz	r0, 800570a <__swbuf_r+0x12>
 8005702:	6a03      	ldr	r3, [r0, #32]
 8005704:	b90b      	cbnz	r3, 800570a <__swbuf_r+0x12>
 8005706:	f7fe f989 	bl	8003a1c <__sinit>
 800570a:	69a3      	ldr	r3, [r4, #24]
 800570c:	60a3      	str	r3, [r4, #8]
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	071a      	lsls	r2, r3, #28
 8005712:	d525      	bpl.n	8005760 <__swbuf_r+0x68>
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	b31b      	cbz	r3, 8005760 <__swbuf_r+0x68>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	6922      	ldr	r2, [r4, #16]
 800571c:	1a98      	subs	r0, r3, r2
 800571e:	6963      	ldr	r3, [r4, #20]
 8005720:	b2f6      	uxtb	r6, r6
 8005722:	4283      	cmp	r3, r0
 8005724:	4637      	mov	r7, r6
 8005726:	dc04      	bgt.n	8005732 <__swbuf_r+0x3a>
 8005728:	4621      	mov	r1, r4
 800572a:	4628      	mov	r0, r5
 800572c:	f7ff fdfc 	bl	8005328 <_fflush_r>
 8005730:	b9e0      	cbnz	r0, 800576c <__swbuf_r+0x74>
 8005732:	68a3      	ldr	r3, [r4, #8]
 8005734:	3b01      	subs	r3, #1
 8005736:	60a3      	str	r3, [r4, #8]
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	6022      	str	r2, [r4, #0]
 800573e:	701e      	strb	r6, [r3, #0]
 8005740:	6962      	ldr	r2, [r4, #20]
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	429a      	cmp	r2, r3
 8005746:	d004      	beq.n	8005752 <__swbuf_r+0x5a>
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	07db      	lsls	r3, r3, #31
 800574c:	d506      	bpl.n	800575c <__swbuf_r+0x64>
 800574e:	2e0a      	cmp	r6, #10
 8005750:	d104      	bne.n	800575c <__swbuf_r+0x64>
 8005752:	4621      	mov	r1, r4
 8005754:	4628      	mov	r0, r5
 8005756:	f7ff fde7 	bl	8005328 <_fflush_r>
 800575a:	b938      	cbnz	r0, 800576c <__swbuf_r+0x74>
 800575c:	4638      	mov	r0, r7
 800575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005760:	4621      	mov	r1, r4
 8005762:	4628      	mov	r0, r5
 8005764:	f000 f806 	bl	8005774 <__swsetup_r>
 8005768:	2800      	cmp	r0, #0
 800576a:	d0d5      	beq.n	8005718 <__swbuf_r+0x20>
 800576c:	f04f 37ff 	mov.w	r7, #4294967295
 8005770:	e7f4      	b.n	800575c <__swbuf_r+0x64>
	...

08005774 <__swsetup_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <__swsetup_r+0xac>)
 8005778:	4605      	mov	r5, r0
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	460c      	mov	r4, r1
 800577e:	b118      	cbz	r0, 8005788 <__swsetup_r+0x14>
 8005780:	6a03      	ldr	r3, [r0, #32]
 8005782:	b90b      	cbnz	r3, 8005788 <__swsetup_r+0x14>
 8005784:	f7fe f94a 	bl	8003a1c <__sinit>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800578e:	0718      	lsls	r0, r3, #28
 8005790:	d422      	bmi.n	80057d8 <__swsetup_r+0x64>
 8005792:	06d9      	lsls	r1, r3, #27
 8005794:	d407      	bmi.n	80057a6 <__swsetup_r+0x32>
 8005796:	2309      	movs	r3, #9
 8005798:	602b      	str	r3, [r5, #0]
 800579a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800579e:	81a3      	strh	r3, [r4, #12]
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	e034      	b.n	8005810 <__swsetup_r+0x9c>
 80057a6:	0758      	lsls	r0, r3, #29
 80057a8:	d512      	bpl.n	80057d0 <__swsetup_r+0x5c>
 80057aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ac:	b141      	cbz	r1, 80057c0 <__swsetup_r+0x4c>
 80057ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b2:	4299      	cmp	r1, r3
 80057b4:	d002      	beq.n	80057bc <__swsetup_r+0x48>
 80057b6:	4628      	mov	r0, r5
 80057b8:	f7ff f8b4 	bl	8004924 <_free_r>
 80057bc:	2300      	movs	r3, #0
 80057be:	6363      	str	r3, [r4, #52]	; 0x34
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057c6:	81a3      	strh	r3, [r4, #12]
 80057c8:	2300      	movs	r3, #0
 80057ca:	6063      	str	r3, [r4, #4]
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	f043 0308 	orr.w	r3, r3, #8
 80057d6:	81a3      	strh	r3, [r4, #12]
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	b94b      	cbnz	r3, 80057f0 <__swsetup_r+0x7c>
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e6:	d003      	beq.n	80057f0 <__swsetup_r+0x7c>
 80057e8:	4621      	mov	r1, r4
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 f884 	bl	80058f8 <__smakebuf_r>
 80057f0:	89a0      	ldrh	r0, [r4, #12]
 80057f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057f6:	f010 0301 	ands.w	r3, r0, #1
 80057fa:	d00a      	beq.n	8005812 <__swsetup_r+0x9e>
 80057fc:	2300      	movs	r3, #0
 80057fe:	60a3      	str	r3, [r4, #8]
 8005800:	6963      	ldr	r3, [r4, #20]
 8005802:	425b      	negs	r3, r3
 8005804:	61a3      	str	r3, [r4, #24]
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	b943      	cbnz	r3, 800581c <__swsetup_r+0xa8>
 800580a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800580e:	d1c4      	bne.n	800579a <__swsetup_r+0x26>
 8005810:	bd38      	pop	{r3, r4, r5, pc}
 8005812:	0781      	lsls	r1, r0, #30
 8005814:	bf58      	it	pl
 8005816:	6963      	ldrpl	r3, [r4, #20]
 8005818:	60a3      	str	r3, [r4, #8]
 800581a:	e7f4      	b.n	8005806 <__swsetup_r+0x92>
 800581c:	2000      	movs	r0, #0
 800581e:	e7f7      	b.n	8005810 <__swsetup_r+0x9c>
 8005820:	20000234 	.word	0x20000234

08005824 <_raise_r>:
 8005824:	291f      	cmp	r1, #31
 8005826:	b538      	push	{r3, r4, r5, lr}
 8005828:	4604      	mov	r4, r0
 800582a:	460d      	mov	r5, r1
 800582c:	d904      	bls.n	8005838 <_raise_r+0x14>
 800582e:	2316      	movs	r3, #22
 8005830:	6003      	str	r3, [r0, #0]
 8005832:	f04f 30ff 	mov.w	r0, #4294967295
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800583a:	b112      	cbz	r2, 8005842 <_raise_r+0x1e>
 800583c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005840:	b94b      	cbnz	r3, 8005856 <_raise_r+0x32>
 8005842:	4620      	mov	r0, r4
 8005844:	f000 f830 	bl	80058a8 <_getpid_r>
 8005848:	462a      	mov	r2, r5
 800584a:	4601      	mov	r1, r0
 800584c:	4620      	mov	r0, r4
 800584e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005852:	f000 b817 	b.w	8005884 <_kill_r>
 8005856:	2b01      	cmp	r3, #1
 8005858:	d00a      	beq.n	8005870 <_raise_r+0x4c>
 800585a:	1c59      	adds	r1, r3, #1
 800585c:	d103      	bne.n	8005866 <_raise_r+0x42>
 800585e:	2316      	movs	r3, #22
 8005860:	6003      	str	r3, [r0, #0]
 8005862:	2001      	movs	r0, #1
 8005864:	e7e7      	b.n	8005836 <_raise_r+0x12>
 8005866:	2400      	movs	r4, #0
 8005868:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800586c:	4628      	mov	r0, r5
 800586e:	4798      	blx	r3
 8005870:	2000      	movs	r0, #0
 8005872:	e7e0      	b.n	8005836 <_raise_r+0x12>

08005874 <raise>:
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <raise+0xc>)
 8005876:	4601      	mov	r1, r0
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f7ff bfd3 	b.w	8005824 <_raise_r>
 800587e:	bf00      	nop
 8005880:	20000234 	.word	0x20000234

08005884 <_kill_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d07      	ldr	r5, [pc, #28]	; (80058a4 <_kill_r+0x20>)
 8005888:	2300      	movs	r3, #0
 800588a:	4604      	mov	r4, r0
 800588c:	4608      	mov	r0, r1
 800588e:	4611      	mov	r1, r2
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	f7fb fe1b 	bl	80014cc <_kill>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d102      	bne.n	80058a0 <_kill_r+0x1c>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	b103      	cbz	r3, 80058a0 <_kill_r+0x1c>
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	bd38      	pop	{r3, r4, r5, pc}
 80058a2:	bf00      	nop
 80058a4:	200008bc 	.word	0x200008bc

080058a8 <_getpid_r>:
 80058a8:	f7fb be08 	b.w	80014bc <_getpid>

080058ac <__swhatbuf_r>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	460c      	mov	r4, r1
 80058b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b4:	2900      	cmp	r1, #0
 80058b6:	b096      	sub	sp, #88	; 0x58
 80058b8:	4615      	mov	r5, r2
 80058ba:	461e      	mov	r6, r3
 80058bc:	da0d      	bge.n	80058da <__swhatbuf_r+0x2e>
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	bf0c      	ite	eq
 80058ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80058ce:	2340      	movne	r3, #64	; 0x40
 80058d0:	2000      	movs	r0, #0
 80058d2:	6031      	str	r1, [r6, #0]
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	b016      	add	sp, #88	; 0x58
 80058d8:	bd70      	pop	{r4, r5, r6, pc}
 80058da:	466a      	mov	r2, sp
 80058dc:	f000 f848 	bl	8005970 <_fstat_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	dbec      	blt.n	80058be <__swhatbuf_r+0x12>
 80058e4:	9901      	ldr	r1, [sp, #4]
 80058e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80058ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80058ee:	4259      	negs	r1, r3
 80058f0:	4159      	adcs	r1, r3
 80058f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f6:	e7eb      	b.n	80058d0 <__swhatbuf_r+0x24>

080058f8 <__smakebuf_r>:
 80058f8:	898b      	ldrh	r3, [r1, #12]
 80058fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058fc:	079d      	lsls	r5, r3, #30
 80058fe:	4606      	mov	r6, r0
 8005900:	460c      	mov	r4, r1
 8005902:	d507      	bpl.n	8005914 <__smakebuf_r+0x1c>
 8005904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	6123      	str	r3, [r4, #16]
 800590c:	2301      	movs	r3, #1
 800590e:	6163      	str	r3, [r4, #20]
 8005910:	b002      	add	sp, #8
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	ab01      	add	r3, sp, #4
 8005916:	466a      	mov	r2, sp
 8005918:	f7ff ffc8 	bl	80058ac <__swhatbuf_r>
 800591c:	9900      	ldr	r1, [sp, #0]
 800591e:	4605      	mov	r5, r0
 8005920:	4630      	mov	r0, r6
 8005922:	f7ff f873 	bl	8004a0c <_malloc_r>
 8005926:	b948      	cbnz	r0, 800593c <__smakebuf_r+0x44>
 8005928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800592c:	059a      	lsls	r2, r3, #22
 800592e:	d4ef      	bmi.n	8005910 <__smakebuf_r+0x18>
 8005930:	f023 0303 	bic.w	r3, r3, #3
 8005934:	f043 0302 	orr.w	r3, r3, #2
 8005938:	81a3      	strh	r3, [r4, #12]
 800593a:	e7e3      	b.n	8005904 <__smakebuf_r+0xc>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	6020      	str	r0, [r4, #0]
 8005940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	9b00      	ldr	r3, [sp, #0]
 8005948:	6163      	str	r3, [r4, #20]
 800594a:	9b01      	ldr	r3, [sp, #4]
 800594c:	6120      	str	r0, [r4, #16]
 800594e:	b15b      	cbz	r3, 8005968 <__smakebuf_r+0x70>
 8005950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005954:	4630      	mov	r0, r6
 8005956:	f000 f81d 	bl	8005994 <_isatty_r>
 800595a:	b128      	cbz	r0, 8005968 <__smakebuf_r+0x70>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	431d      	orrs	r5, r3
 800596c:	81a5      	strh	r5, [r4, #12]
 800596e:	e7cf      	b.n	8005910 <__smakebuf_r+0x18>

08005970 <_fstat_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	; (8005990 <_fstat_r+0x20>)
 8005974:	2300      	movs	r3, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	4611      	mov	r1, r2
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	f7fb fde8 	bl	8001552 <_fstat>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d102      	bne.n	800598c <_fstat_r+0x1c>
 8005986:	682b      	ldr	r3, [r5, #0]
 8005988:	b103      	cbz	r3, 800598c <_fstat_r+0x1c>
 800598a:	6023      	str	r3, [r4, #0]
 800598c:	bd38      	pop	{r3, r4, r5, pc}
 800598e:	bf00      	nop
 8005990:	200008bc 	.word	0x200008bc

08005994 <_isatty_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4d06      	ldr	r5, [pc, #24]	; (80059b0 <_isatty_r+0x1c>)
 8005998:	2300      	movs	r3, #0
 800599a:	4604      	mov	r4, r0
 800599c:	4608      	mov	r0, r1
 800599e:	602b      	str	r3, [r5, #0]
 80059a0:	f7fb fde7 	bl	8001572 <_isatty>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_isatty_r+0x1a>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_isatty_r+0x1a>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	200008bc 	.word	0x200008bc

080059b4 <_init>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr

080059c0 <_fini>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr
