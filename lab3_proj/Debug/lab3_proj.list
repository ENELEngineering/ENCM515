
lab3_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080090a8  080090a8  000190a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a4  080094a4  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094ac  080094ac  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  080094b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  20000240  080096f4  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  080096f4  00021078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b3d  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030e0  00000000  00000000  00032df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00035ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e93  00000000  00000000  00037198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ab9a  00000000  00000000  0003802b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ce3  00000000  00000000  00052bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bd48  00000000  00000000  0006b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e10  00000000  00000000  001075f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0010d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800908c 	.word	0x0800908c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800908c 	.word	0x0800908c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 8000eb8:	f000 fa24 	bl	8001304 <Error_Handler>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{ 
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  BufferCtl.offset = BUFFER_OFFSET_FULL;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	601a      	str	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	2000025c 	.word	0x2000025c

08000ed8 <BSP_AUDIO_IN_Error_Callback>:
  * @brief  Audio IN Error callback function
  * @param  pData
  * @retval None
  */
void BSP_AUDIO_IN_Error_Callback(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  Error_Handler();
 8000edc:	f000 fa12 	bl	8001304 <Error_Handler>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ef0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d013      	beq.n	8000f24 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000efc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f00:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f04:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f0c:	e000      	b.n	8000f10 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f0e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */

	HAL_Init();
 8000f38:	f000 fdd0 	bl	8001adc <HAL_Init>

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f004 ff6b 	bl	8005e18 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f004 ff68 	bl	8005e18 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f004 ff65 	bl	8005e18 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f004 ff62 	bl	8005e18 <BSP_LED_Init>

  /* Configure the system clock to 100 MHz */
  SystemClock_Config();
 8000f54:	f000 f8fe 	bl	8001154 <SystemClock_Config>

  /* Configure GPIO so that we can probe PB2 with an Oscilloscope */
  GPIOA_Init();
 8000f58:	f000 f9da 	bl	8001310 <GPIOA_Init>

  /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f004 ffec 	bl	8005f3c <BSP_PB_Init>

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8000f64:	4b6c      	ldr	r3, [pc, #432]	; (8001118 <main+0x1e4>)
 8000f66:	4a6d      	ldr	r2, [pc, #436]	; (800111c <main+0x1e8>)
 8000f68:	601a      	str	r2, [r3, #0]


  /* Initialize the Audio driver */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 60, 8000) != 0) {
 8000f6a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f6e:	213c      	movs	r1, #60	; 0x3c
 8000f70:	2004      	movs	r0, #4
 8000f72:	f005 f99f 	bl	80062b4 <BSP_AUDIO_OUT_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <main+0x4c>
	  Error_Handler();
 8000f7c:	f000 f9c2 	bl	8001304 <Error_Handler>

  /* Initialize TIM3 peripheral to toggle with a frequency of ~ 8 kHz
   * System clock is 100 MHz and TIM3 is counting at the rate of the system clock
   * so 100 M / 8 k is 12500
   */
  TimHandle.Init.Period = 12499;
 8000f80:	4b65      	ldr	r3, [pc, #404]	; (8001118 <main+0x1e4>)
 8000f82:	f243 02d3 	movw	r2, #12499	; 0x30d3
 8000f86:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 0;
 8000f88:	4b63      	ldr	r3, [pc, #396]	; (8001118 <main+0x1e4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <main+0x1e4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b60      	ldr	r3, [pc, #384]	; (8001118 <main+0x1e4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <main+0x1e4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000fa0:	485d      	ldr	r0, [pc, #372]	; (8001118 <main+0x1e4>)
 8000fa2:	f004 f995 	bl	80052d0 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <main+0x7c>
  {
	  /* Initialization Error */
	  Error_Handler();
 8000fac:	f000 f9aa 	bl	8001304 <Error_Handler>
  }

  ITM_Port32(30) = 0;
 8000fb0:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <main+0x1ec>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
#ifndef FUNCTIONAL_TEST
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000fb6:	4858      	ldr	r0, [pc, #352]	; (8001118 <main+0x1e4>)
 8000fb8:	f004 f9da 	bl	8005370 <HAL_TIM_Base_Start_IT>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <main+0x92>
  {
	  /* Starting Error */
	  Error_Handler();
 8000fc2:	f000 f99f 	bl	8001304 <Error_Handler>
		  } else {
			  sample_count = 0;
		  }
#endif

	if (new_sample_flag == 1) {
 8000fc6:	4b57      	ldr	r3, [pc, #348]	; (8001124 <main+0x1f0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d145      	bne.n	800105a <main+0x126>
		ITM_Port32(31) = 1;
 8000fce:	4b56      	ldr	r3, [pc, #344]	; (8001128 <main+0x1f4>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
		filteredSampleL = ProcessSample(newSampleL); // "L"
 8000fd4:	4b55      	ldr	r3, [pc, #340]	; (800112c <main+0x1f8>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f9c6 	bl	800136c <ProcessSample>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b52      	ldr	r3, [pc, #328]	; (8001130 <main+0x1fc>)
 8000fe6:	801a      	strh	r2, [r3, #0]
		ITM_Port32(31) = 2;
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <main+0x1f4>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
		filteredSampleL = echoEffect(filteredSampleL);
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <main+0x1fc>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fa21 	bl	800143c <echoEffect>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <main+0x1fc>)
 8001000:	801a      	strh	r2, [r3, #0]
		//filteredSampleL = reverbEffect(filteredSampleL);
		ITM_Port32(31) = 3;
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <main+0x1f4>)
 8001004:	2203      	movs	r2, #3
 8001006:	601a      	str	r2, [r3, #0]
		new_sample_flag = 0;
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <main+0x1f0>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

		/* Attempt at double buffering here: note that we are duplicating the sample for L and R, but this could be changed*/
		if (bufchoice == 0) {
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <main+0x200>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10e      	bne.n	8001034 <main+0x100>
			filteredOutBufferA[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL; // copy the filtered output to both channels
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <main+0x1fc>)
 8001018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <main+0x1fc>)
 8001020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001024:	4619      	mov	r1, r3
 8001026:	4b44      	ldr	r3, [pc, #272]	; (8001138 <main+0x204>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	440a      	add	r2, r1
 800102c:	4943      	ldr	r1, [pc, #268]	; (800113c <main+0x208>)
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001032:	e00d      	b.n	8001050 <main+0x11c>
		} else {
			filteredOutBufferB[k] = ((int32_t)filteredSampleL << 16) + (int32_t)filteredSampleL;
 8001034:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <main+0x1fc>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	041a      	lsls	r2, r3, #16
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <main+0x1fc>)
 800103e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001042:	4619      	mov	r1, r3
 8001044:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <main+0x204>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	440a      	add	r2, r1
 800104a:	493d      	ldr	r1, [pc, #244]	; (8001140 <main+0x20c>)
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		k++;
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <main+0x204>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a38      	ldr	r2, [pc, #224]	; (8001138 <main+0x204>)
 8001058:	6013      	str	r3, [r2, #0]
	}

	// once a buffer is full, we can swap to fill up the other buffer
	if (k == BUFFER_SIZE) {
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <main+0x204>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d113      	bne.n	800108a <main+0x156>
		k = 0;
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <main+0x204>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
		if (bufchoice == 0) {
 8001068:	4b32      	ldr	r3, [pc, #200]	; (8001134 <main+0x200>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d106      	bne.n	800107e <main+0x14a>
			bufchoice = 1;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <main+0x200>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
			bufArdy = 1;
 8001076:	4b33      	ldr	r3, [pc, #204]	; (8001144 <main+0x210>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e005      	b.n	800108a <main+0x156>
		} else {
			bufchoice = 0;
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <main+0x200>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
			bufBrdy = 1;
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <main+0x214>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
	}
#ifndef FUNCTIONAL_TEST

	/* We'll use double buffering here, so that once one buffer is ready to go, we use
	 * BSP_AUDIO_OUT_ChangeBuffer to tell the DMA to send the audio to the DAC*/
	if(bufBrdy == 1 && ready == 1 && start == 1) {
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <main+0x214>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d112      	bne.n	80010b8 <main+0x184>
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <main+0x218>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10e      	bne.n	80010b8 <main+0x184>
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <main+0x21c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d10a      	bne.n	80010b8 <main+0x184>
		bufBrdy = 0;
 80010a2:	4b29      	ldr	r3, [pc, #164]	; (8001148 <main+0x214>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)(filteredOutBufferB), BUFFER_SIZE*2);
 80010a8:	21c8      	movs	r1, #200	; 0xc8
 80010aa:	4825      	ldr	r0, [pc, #148]	; (8001140 <main+0x20c>)
 80010ac:	f005 f97a 	bl	80063a4 <BSP_AUDIO_OUT_ChangeBuffer>
		ready = 0;
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <main+0x218>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e015      	b.n	80010e4 <main+0x1b0>
	}

	else if(bufArdy == 1 && ready == 1 && start == 1) {
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <main+0x210>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d111      	bne.n	80010e4 <main+0x1b0>
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <main+0x218>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10d      	bne.n	80010e4 <main+0x1b0>
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <main+0x21c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d109      	bne.n	80010e4 <main+0x1b0>
		bufArdy = 0;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <main+0x210>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
		BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)(filteredOutBufferA), BUFFER_SIZE*2);
 80010d6:	21c8      	movs	r1, #200	; 0xc8
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <main+0x208>)
 80010da:	f005 f963 	bl	80063a4 <BSP_AUDIO_OUT_ChangeBuffer>
		ready = 0;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <main+0x218>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
	}

	/* AUDIO_OUT_PLAY is the BSP function essentially tells the audio chip to start working
	 * so every time the audio DAC receives some new data via DMA /I2S, it will play sound*/
	if (bufArdy == 1 && bufBrdy == 1 && start == 0) {
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <main+0x210>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	f47f af6c 	bne.w	8000fc6 <main+0x92>
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <main+0x214>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	f47f af67 	bne.w	8000fc6 <main+0x92>
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <main+0x21c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f47f af62 	bne.w	8000fc6 <main+0x92>
		BSP_AUDIO_OUT_Play((uint16_t*)(filteredOutBufferA), BUFFER_SIZE*2);
 8001102:	21c8      	movs	r1, #200	; 0xc8
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <main+0x208>)
 8001106:	f005 f923 	bl	8006350 <BSP_AUDIO_OUT_Play>
		start = 1;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <main+0x21c>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
		bufArdy = 0;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <main+0x210>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	if (new_sample_flag == 1) {
 8001116:	e756      	b.n	8000fc6 <main+0x92>
 8001118:	20000268 	.word	0x20000268
 800111c:	40000400 	.word	0x40000400
 8001120:	e0000078 	.word	0xe0000078
 8001124:	200002b0 	.word	0x200002b0
 8001128:	e000007c 	.word	0xe000007c
 800112c:	200002b8 	.word	0x200002b8
 8001130:	200002bc 	.word	0x200002bc
 8001134:	20000dc0 	.word	0x20000dc0
 8001138:	20000dd0 	.word	0x20000dd0
 800113c:	20000aa0 	.word	0x20000aa0
 8001140:	20000c30 	.word	0x20000c30
 8001144:	20000dc4 	.word	0x20000dc4
 8001148:	20000dc8 	.word	0x20000dc8
 800114c:	20000dcc 	.word	0x20000dcc
 8001150:	20000dd4 	.word	0x20000dd4

08001154 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	; 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <SystemClock_Config+0xac>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a27      	ldr	r2, [pc, #156]	; (8001200 <SystemClock_Config+0xac>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <SystemClock_Config+0xac>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <SystemClock_Config+0xb0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <SystemClock_Config+0xb0>)
 8001180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <SystemClock_Config+0xb0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001192:	2302      	movs	r3, #2
 8001194:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 800119a:	2310      	movs	r3, #16
 800119c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a6:	2310      	movs	r3, #16
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80011aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b4:	2307      	movs	r3, #7
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fa71 	bl	80046a4 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011c8:	f000 f89c 	bl	8001304 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80011cc:	230f      	movs	r3, #15
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011e6:	2103      	movs	r1, #3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fcd3 	bl	8004b94 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011f4:	f000 f886 	bl	8001304 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	; 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  if (KEY_BUTTON_PIN == GPIO_Pin)
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d109      	bne.n	800122c <HAL_GPIO_EXTI_Callback+0x24>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8001218:	bf00      	nop
 800121a:	2000      	movs	r0, #0
 800121c:	f004 fee4 	bl	8005fe8 <BSP_PB_GetState>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f9      	bne.n	800121a <HAL_GPIO_EXTI_Callback+0x12>
    UserPressButton = 1;
 8001226:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000264 	.word	0x20000264

08001238 <HAL_TIM_PeriodElapsedCallback>:
}

// This timer callback should trigger every 1/8000 Hz, and it emulates
// the idea of receiving a new sample peridiocally
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
//  BSP_LED_Toggle(LED4);
//  HAL_GPIO_TogglePin(SCOPE_CHECK_GPIO_Port, SCOPE_CHECK_Pin);

	// If we "miss" processing a sample, the new_sample_flag will still be
	// high on the trigger of the interrupt
	if (new_sample_flag == 1) {
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <HAL_TIM_PeriodElapsedCallback+0x16>
		ITM_Port32(30) = 10;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800124a:	220a      	movs	r2, #10
 800124c:	601a      	str	r2, [r3, #0]
	}

	// Otherwise, go to the raw audio in memory and "retrieve" a new sample every timer period
	// set the new_sample_flag high
	if (sample_count < AUDIO_SIZE) {
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f64a 72af 	movw	r2, #44975	; 0xafaf
 8001256:	4293      	cmp	r3, r2
 8001258:	dc25      	bgt.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		newSampleL = (int16_t)raw_audio[sample_count];
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800126c:	801a      	strh	r2, [r3, #0]
		newSampleR = (int16_t)(raw_audio[sample_count] >> 16);
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	141b      	asrs	r3, r3, #16
 800127e:	b21a      	sxth	r2, r3
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001282:	801a      	strh	r2, [r3, #0]
		sample_count++;
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800128c:	6013      	str	r3, [r2, #0]

		if (sample_count >= AUDIO_SIZE) sample_count = 0;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f64a 72af 	movw	r2, #44975	; 0xafaf
 8001296:	4293      	cmp	r3, r2
 8001298:	dd02      	ble.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x68>
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
		new_sample_flag = 1;
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
	}
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200002b0 	.word	0x200002b0
 80012b8:	e0000078 	.word	0xe0000078
 80012bc:	200002b4 	.word	0x200002b4
 80012c0:	20000000 	.word	0x20000000
 80012c4:	200002b8 	.word	0x200002b8
 80012c8:	200002ba 	.word	0x200002ba

080012cc <_write>:

int _write(int file, char* ptr, int len) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e009      	b.n	80012f2 <_write+0x26>
		ITM_SendChar(*ptr++);
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	60ba      	str	r2, [r7, #8]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fdfc 	bl	8000ee4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dbf1      	blt.n	80012de <_write+0x12>
	}
	return len;
 80012fa:	687b      	ldr	r3, [r7, #4]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 8001308:	2002      	movs	r0, #2
 800130a:	f004 fdfd 	bl	8005f08 <BSP_LED_On>
  while(1)
 800130e:	e7fe      	b.n	800130e <Error_Handler+0xa>

08001310 <GPIOA_Init>:
  {
  }
}

static void GPIOA_Init(void){
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <GPIOA_Init+0x54>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <GPIOA_Init+0x54>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <GPIOA_Init+0x54>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin : SCOPE_CHECK_Pin */
	  GPIO_InitStruct.Pin = SCOPE_CHECK_Pin;
 8001340:	2302      	movs	r3, #2
 8001342:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(SCOPE_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <GPIOA_Init+0x58>)
 8001356:	f001 f969 	bl	800262c <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400

0800136c <ProcessSample>:

static int16_t ProcessSample(int16_t newsample) {
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
//	}
//	delayOutput[1] = delayOutput[0];
//	delayOutput[0] = temp;
//	return temp;
//}
	int32_t accu = 0x00000000;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
	delayBuffer[0] = newsample;
 800137a:	4a2c      	ldr	r2, [pc, #176]	; (800142c <ProcessSample+0xc0>)
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	8013      	strh	r3, [r2, #0]
	for(int i = 0; i<DELAY_NUMBER;i++){
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	e00e      	b.n	80013a4 <ProcessSample+0x38>
		__asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
						:[result] "=r" (accu)
						:[op1] "r" (b[i]), [op2] "r" (delayBuffer[i]), [acc] "r" (accu)
 8001386:	4a2a      	ldr	r2, [pc, #168]	; (8001430 <ProcessSample+0xc4>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800138e:	4927      	ldr	r1, [pc, #156]	; (800142c <ProcessSample+0xc0>)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
		__asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	fb13 1302 	smlabb	r3, r3, r2, r1
 800139c:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<DELAY_NUMBER;i++){
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	3301      	adds	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	dded      	ble.n	8001386 <ProcessSample+0x1a>
						);
	}

	for(int i = 0; i<DELAY_NUMBER-1;i+=2){
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	e00e      	b.n	80013ce <ProcessSample+0x62>
			__asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
									:[result] "=r" (accu)
									:[op1] "r" (a[i]), [op2] "r" (delayOutput[i]), [acc] "r" (accu)
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <ProcessSample+0xc8>)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80013b8:	491f      	ldr	r1, [pc, #124]	; (8001438 <ProcessSample+0xcc>)
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
			__asm volatile("SMLABB %[result], %[op1], %[op2], %[acc]"
 80013c0:	6979      	ldr	r1, [r7, #20]
 80013c2:	fb13 1302 	smlabb	r3, r3, r2, r1
 80013c6:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<DELAY_NUMBER-1;i+=2){
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3302      	adds	r3, #2
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	dded      	ble.n	80013b0 <ProcessSample+0x44>
									);
	}
	if(accu > 0x3FFFFFFF){
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013da:	db03      	blt.n	80013e4 <ProcessSample+0x78>
		accu = 0x3FFFFFF;
 80013dc:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e006      	b.n	80013f2 <ProcessSample+0x86>
	}
	else if(accu < -0x40000000){
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80013ea:	da02      	bge.n	80013f2 <ProcessSample+0x86>
		accu = -0x40000000;
 80013ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013f0:	617b      	str	r3, [r7, #20]
	}
	int16_t temp = (int16_t)(accu >> 15);
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	13db      	asrs	r3, r3, #15
 80013f6:	817b      	strh	r3, [r7, #10]

	delayBuffer[2] = delayBuffer[1];
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <ProcessSample+0xc0>)
 80013fa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <ProcessSample+0xc0>)
 8001400:	809a      	strh	r2, [r3, #4]
	delayBuffer[1] = delayBuffer[0];
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <ProcessSample+0xc0>)
 8001404:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <ProcessSample+0xc0>)
 800140a:	805a      	strh	r2, [r3, #2]

	delayOutput[1] = delayOutput[0];
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <ProcessSample+0xcc>)
 800140e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <ProcessSample+0xcc>)
 8001414:	805a      	strh	r2, [r3, #2]
	delayOutput[0] = temp;
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <ProcessSample+0xcc>)
 8001418:	897b      	ldrh	r3, [r7, #10]
 800141a:	8013      	strh	r3, [r2, #0]
	return temp;
 800141c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 }
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	200002c0 	.word	0x200002c0
 8001430:	20000010 	.word	0x20000010
 8001434:	20000018 	.word	0x20000018
 8001438:	200002c8 	.word	0x200002c8

0800143c <echoEffect>:

static int16_t echoEffect(int16_t newsample) {
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
	int32_t accu = 0x00000000;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
	next_value_ptr = new_value_ptr - 1;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <echoEffect+0x88>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3b02      	subs	r3, #2
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <echoEffect+0x8c>)
 8001452:	6013      	str	r3, [r2, #0]
	if(next_value_ptr < start_buffer){
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <echoEffect+0x8c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <echoEffect+0x90>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d203      	bcs.n	8001468 <echoEffect+0x2c>
		next_value_ptr = end_buffer;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <echoEffect+0x94>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <echoEffect+0x8c>)
 8001466:	6013      	str	r3, [r2, #0]
	}
	accu = (int32_t)newsample+(((*next_value_ptr)*alpha)>>15);
 8001468:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <echoEffect+0x8c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001474:	4619      	mov	r1, r3
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <echoEffect+0x98>)
 8001478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	13db      	asrs	r3, r3, #15
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
	*new_value_ptr = newsample;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <echoEffect+0x88>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	801a      	strh	r2, [r3, #0]
	new_value_ptr = next_value_ptr;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <echoEffect+0x8c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <echoEffect+0x88>)
 8001494:	6013      	str	r3, [r2, #0]
	if(accu > 0x00007FFF){
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800149c:	db03      	blt.n	80014a6 <echoEffect+0x6a>
		accu = 0x00007FFF;
 800149e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e005      	b.n	80014b2 <echoEffect+0x76>
	}
	else if(accu < - 0x00008000){
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80014ac:	da01      	bge.n	80014b2 <echoEffect+0x76>
		accu = -0x00008000;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <echoEffect+0x9c>)
 80014b0:	60fb      	str	r3, [r7, #12]
	}
	return (int16_t)accu;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	b21b      	sxth	r3, r3
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	20000a9c 	.word	0x20000a9c
 80014cc:	20000004 	.word	0x20000004
 80014d0:	20000008 	.word	0x20000008
 80014d4:	2000001c 	.word	0x2000001c
 80014d8:	ffff8000 	.word	0xffff8000

080014dc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
			accu = -0x00008000;
		}
	return (int16_t)accu;
}

void BSP_AUDIO_OUT_TransferComplete_CallBack() {
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	ready = 1;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000dcc 	.word	0x20000dcc

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_MspInit+0x4c>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_MspInit+0x4c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001532:	2007      	movs	r0, #7
 8001534:	f000 fc5c 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_I2C_MspInit+0x94>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d134      	bne.n	80015d0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_I2C_MspInit+0x98>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_I2C_MspInit+0x98>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_I2C_MspInit+0x98>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001582:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001594:	2304      	movs	r3, #4
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4810      	ldr	r0, [pc, #64]	; (80015e0 <HAL_I2C_MspInit+0x9c>)
 80015a0:	f001 f844 	bl	800262c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_I2C_MspInit+0x98>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_I2C_MspInit+0x98>)
 80015ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_I2C_MspInit+0x98>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	201f      	movs	r0, #31
 80015c6:	f000 fc1e 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015ca:	201f      	movs	r0, #31
 80015cc:	f000 fc37 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40005400 	.word	0x40005400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400

080015e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_I2C_MspDeInit+0x40>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d111      	bne.n	800161a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_I2C_MspDeInit+0x44>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_I2C_MspDeInit+0x44>)
 80015fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001602:	2140      	movs	r1, #64	; 0x40
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <HAL_I2C_MspDeInit+0x48>)
 8001606:	f001 f995 	bl	8002934 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800160a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <HAL_I2C_MspDeInit+0x48>)
 8001610:	f001 f990 	bl	8002934 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001614:	201f      	movs	r0, #31
 8001616:	f000 fc20 	bl	8001e5a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40005400 	.word	0x40005400
 8001628:	40023800 	.word	0x40023800
 800162c:	40020400 	.word	0x40020400

08001630 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a59      	ldr	r2, [pc, #356]	; (80017b4 <HAL_I2S_MspInit+0x184>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d15b      	bne.n	800170a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a57      	ldr	r2, [pc, #348]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	623b      	str	r3, [r7, #32]
 800166c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a50      	ldr	r2, [pc, #320]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a6:	2304      	movs	r3, #4
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80016b6:	2306      	movs	r3, #6
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	483e      	ldr	r0, [pc, #248]	; (80017bc <HAL_I2S_MspInit+0x18c>)
 80016c2:	f000 ffb3 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016c6:	2308      	movs	r3, #8
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d6:	2305      	movs	r3, #5
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	4836      	ldr	r0, [pc, #216]	; (80017bc <HAL_I2S_MspInit+0x18c>)
 80016e2:	f000 ffa3 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80016e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f8:	2305      	movs	r3, #5
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	482f      	ldr	r0, [pc, #188]	; (80017c0 <HAL_I2S_MspInit+0x190>)
 8001704:	f000 ff92 	bl	800262c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001708:	e04f      	b.n	80017aa <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <HAL_I2S_MspInit+0x194>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d14a      	bne.n	80017aa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 800171e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6313      	str	r3, [r2, #48]	; 0x30
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_I2S_MspInit+0x188>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001768:	2310      	movs	r3, #16
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001778:	2306      	movs	r3, #6
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4811      	ldr	r0, [pc, #68]	; (80017c8 <HAL_I2S_MspInit+0x198>)
 8001784:	f000 ff52 	bl	800262c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001788:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800179a:	2306      	movs	r3, #6
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_I2S_MspInit+0x18c>)
 80017a6:	f000 ff41 	bl	800262c <HAL_GPIO_Init>
}
 80017aa:	bf00      	nop
 80017ac:	3738      	adds	r7, #56	; 0x38
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40003800 	.word	0x40003800
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020400 	.word	0x40020400
 80017c4:	40003c00 	.word	0x40003c00
 80017c8:	40020000 	.word	0x40020000

080017cc <HAL_TIM_Base_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_TIM_Base_MspInit+0x3c>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_TIM_Base_MspInit+0x3c>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_TIM_Base_MspInit+0x3c>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 4, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2104      	movs	r1, #4
 80017f4:	201d      	movs	r0, #29
 80017f6:	f000 fb06 	bl	8001e06 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80017fa:	201d      	movs	r0, #29
 80017fc:	f000 fb1f 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800

0800180c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001860:	f000 f98e 	bl	8001b80 <HAL_IncTick>
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800186c:	2001      	movs	r0, #1
 800186e:	f001 f977 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}

08001876 <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 800187a:	2010      	movs	r0, #16
 800187c:	f001 f970 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <DMA1_Stream7_IRQHandler+0x14>)
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fc63 	bl	8002158 <HAL_DMA_IRQHandler>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000e3c 	.word	0x20000e3c

0800189c <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles I2S IT Stream interrupt request.
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <DMA1_Stream3_IRQHandler+0x14>)
 80018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fc57 	bl	8002158 <HAL_DMA_IRQHandler>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000e84 	.word	0x20000e84

080018b4 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <TIM3_IRQHandler+0x10>)
 80018ba:	f003 fdbb 	bl	8005434 <HAL_TIM_IRQHandler>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000268 	.word	0x20000268

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_kill>:

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018e2:	f005 fcd5 	bl	8007290 <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
	return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800190a:	e7fe      	b.n	800190a <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
	}

return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196e:	605a      	str	r2, [r3, #4]
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_isatty>:

int _isatty(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
	return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f005 fc56 	bl	8007290 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20020000 	.word	0x20020000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	20000dd8 	.word	0x20000dd8
 8001a18:	20001078 	.word	0x20001078

08001a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <SystemInit+0x60>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <SystemInit+0x60>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <SystemInit+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <SystemInit+0x64>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <SystemInit+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <SystemInit+0x64>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <SystemInit+0x64>)
 8001a48:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <SystemInit+0x64>)
 8001a54:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <SystemInit+0x68>)
 8001a56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <SystemInit+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <SystemInit+0x64>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SystemInit+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SystemInit+0x60>)
 8001a6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a70:	609a      	str	r2, [r3, #8]
#endif
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	40023800 	.word	0x40023800
 8001a84:	24003010 	.word	0x24003010

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa4:	4c0b      	ldr	r4, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ab2:	f7ff ffb3 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f005 fbf1 	bl	800729c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7ff fa3b 	bl	8000f34 <main>
  bx  lr    
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001acc:	080094b4 	.word	0x080094b4
  ldr r2, =_sbss
 8001ad0:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001ad4:	20001078 	.word	0x20001078

08001ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <HAL_Init+0x40>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_Init+0x40>)
 8001af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_Init+0x40>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f973 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f000 f808 	bl	8001b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff fcf0 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x54>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x58>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f999 	bl	8001e76 <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f000 f953 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_InitTick+0x5c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000020 	.word	0x20000020
 8001b78:	20000028 	.word	0x20000028
 8001b7c:	20000024 	.word	0x20000024

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000028 	.word	0x20000028
 8001ba4:	20000ddc 	.word	0x20000ddc

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000ddc 	.word	0x20000ddc

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff ffee 	bl	8001ba8 <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000028 	.word	0x20000028

08001c08 <__NVIC_SetPriorityGrouping>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_DisableIRQ>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db12      	blt.n	8001ce0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	490a      	ldr	r1, [pc, #40]	; (8001cec <__NVIC_DisableIRQ+0x44>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	3320      	adds	r3, #32
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cda:	f3bf 8f6f 	isb	sy
}
 8001cde:	bf00      	nop
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff05 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff1a 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff0d 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff1d 	bl	8001ca8 <__NVIC_DisableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff94 	bl	8001dac <SysTick_Config>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff fe84 	bl	8001ba8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e099      	b.n	8001fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ecc:	e00f      	b.n	8001eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ece:	f7ff fe6b 	bl	8001ba8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d908      	bls.n	8001eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e078      	b.n	8001fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e8      	bne.n	8001ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_DMA_Init+0x158>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d107      	bne.n	8001f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	4313      	orrs	r3, r2
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d117      	bne.n	8001fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 facd 	bl	8002534 <DMA_CheckFifoParam>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e016      	b.n	8001fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fa84 	bl	80024c8 <DMA_CalcBaseAndBitshift>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	223f      	movs	r2, #63	; 0x3f
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	f010803f 	.word	0xf010803f

08001fec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e050      	b.n	80020a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d101      	bne.n	800200e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
 800200c:	e048      	b.n	80020a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2221      	movs	r2, #33	; 0x21
 800204c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa3a 	bl	80024c8 <DMA_CalcBaseAndBitshift>
 8002054:	4603      	mov	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	223f      	movs	r2, #63	; 0x3f
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_DMA_Start_IT+0x26>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e040      	b.n	8002150 <HAL_DMA_Start_IT+0xa8>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d12f      	bne.n	8002142 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f9b8 	bl	800246c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	223f      	movs	r2, #63	; 0x3f
 8002102:	409a      	lsls	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0216 	orr.w	r2, r2, #22
 8002116:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0208 	orr.w	r2, r2, #8
 800212e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e005      	b.n	800214e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800214a:	2302      	movs	r3, #2
 800214c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800214e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002164:	4b8e      	ldr	r3, [pc, #568]	; (80023a0 <HAL_DMA_IRQHandler+0x248>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a8e      	ldr	r2, [pc, #568]	; (80023a4 <HAL_DMA_IRQHandler+0x24c>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0a9b      	lsrs	r3, r3, #10
 8002170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2208      	movs	r2, #8
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01a      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0204 	bic.w	r2, r2, #4
 80021aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2208      	movs	r2, #8
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	2201      	movs	r2, #1
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d012      	beq.n	80021fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	2201      	movs	r2, #1
 80021e8:	409a      	lsls	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	f043 0202 	orr.w	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	2204      	movs	r2, #4
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d012      	beq.n	8002230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	2204      	movs	r2, #4
 800221e:	409a      	lsls	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f043 0204 	orr.w	r2, r3, #4
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	2210      	movs	r2, #16
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d043      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d03c      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	2210      	movs	r2, #16
 8002254:	409a      	lsls	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d018      	beq.n	800229a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d108      	bne.n	8002288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d024      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	e01f      	b.n	80022c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01b      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
 8002298:	e016      	b.n	80022c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0208 	bic.w	r2, r2, #8
 80022b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	2220      	movs	r2, #32
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 808f 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8087 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2220      	movs	r2, #32
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d136      	bne.n	8002370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0216 	bic.w	r2, r2, #22
 8002310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <HAL_DMA_IRQHandler+0x1da>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0208 	bic.w	r2, r2, #8
 8002340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	223f      	movs	r2, #63	; 0x3f
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002362:	2b00      	cmp	r3, #0
 8002364:	d07e      	beq.n	8002464 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
        }
        return;
 800236e:	e079      	b.n	8002464 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01d      	beq.n	80023ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	2b00      	cmp	r3, #0
 8002392:	d031      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
 800239c:	e02c      	b.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
 800239e:	bf00      	nop
 80023a0:	20000020 	.word	0x20000020
 80023a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d023      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
 80023b8:	e01e      	b.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10f      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0210 	bic.w	r2, r2, #16
 80023d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d032      	beq.n	8002466 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d022      	beq.n	8002452 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2205      	movs	r2, #5
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3301      	adds	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	d307      	bcc.n	8002440 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f2      	bne.n	8002424 <HAL_DMA_IRQHandler+0x2cc>
 800243e:	e000      	b.n	8002442 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002440:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
 8002462:	e000      	b.n	8002466 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002464:	bf00      	nop
    }
  }
}
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002488:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d108      	bne.n	80024ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024aa:	e007      	b.n	80024bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	60da      	str	r2, [r3, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3b10      	subs	r3, #16
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <DMA_CalcBaseAndBitshift+0x64>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024e2:	4a13      	ldr	r2, [pc, #76]	; (8002530 <DMA_CalcBaseAndBitshift+0x68>)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d909      	bls.n	800250a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	1d1a      	adds	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	659a      	str	r2, [r3, #88]	; 0x58
 8002508:	e007      	b.n	800251a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	aaaaaaab 	.word	0xaaaaaaab
 8002530:	080090c0 	.word	0x080090c0

08002534 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11f      	bne.n	800258e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d856      	bhi.n	8002602 <DMA_CheckFifoParam+0xce>
 8002554:	a201      	add	r2, pc, #4	; (adr r2, 800255c <DMA_CheckFifoParam+0x28>)
 8002556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255a:	bf00      	nop
 800255c:	0800256d 	.word	0x0800256d
 8002560:	0800257f 	.word	0x0800257f
 8002564:	0800256d 	.word	0x0800256d
 8002568:	08002603 	.word	0x08002603
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d046      	beq.n	8002606 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257c:	e043      	b.n	8002606 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002586:	d140      	bne.n	800260a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258c:	e03d      	b.n	800260a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002596:	d121      	bne.n	80025dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d837      	bhi.n	800260e <DMA_CheckFifoParam+0xda>
 800259e:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <DMA_CheckFifoParam+0x70>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	080025b5 	.word	0x080025b5
 80025a8:	080025bb 	.word	0x080025bb
 80025ac:	080025b5 	.word	0x080025b5
 80025b0:	080025cd 	.word	0x080025cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      break;
 80025b8:	e030      	b.n	800261c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d025      	beq.n	8002612 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ca:	e022      	b.n	8002612 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025d4:	d11f      	bne.n	8002616 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025da:	e01c      	b.n	8002616 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d903      	bls.n	80025ea <DMA_CheckFifoParam+0xb6>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d003      	beq.n	80025f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025e8:	e018      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      break;
 80025ee:	e015      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00e      	beq.n	800261a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002600:	e00b      	b.n	800261a <DMA_CheckFifoParam+0xe6>
      break;
 8002602:	bf00      	nop
 8002604:	e00a      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
 8002608:	e008      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
 800260c:	e006      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 800260e:	bf00      	nop
 8002610:	e004      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 8002612:	bf00      	nop
 8002614:	e002      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;   
 8002616:	bf00      	nop
 8002618:	e000      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
    }
  } 
  
  return status; 
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	e159      	b.n	80028fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	429a      	cmp	r2, r3
 8002662:	f040 8148 	bne.w	80028f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d005      	beq.n	800267e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267a:	2b02      	cmp	r3, #2
 800267c:	d130      	bne.n	80026e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 0201 	and.w	r2, r3, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d017      	beq.n	800271c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d123      	bne.n	8002770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	08da      	lsrs	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	69b9      	ldr	r1, [r7, #24]
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0203 	and.w	r2, r3, #3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a2 	beq.w	80028f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b57      	ldr	r3, [pc, #348]	; (8002914 <HAL_GPIO_Init+0x2e8>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_GPIO_Init+0x2e8>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b54      	ldr	r3, [pc, #336]	; (8002914 <HAL_GPIO_Init+0x2e8>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ce:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_GPIO_Init+0x2ec>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a49      	ldr	r2, [pc, #292]	; (800291c <HAL_GPIO_Init+0x2f0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d019      	beq.n	800282e <HAL_GPIO_Init+0x202>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a48      	ldr	r2, [pc, #288]	; (8002920 <HAL_GPIO_Init+0x2f4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_GPIO_Init+0x1fe>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a47      	ldr	r2, [pc, #284]	; (8002924 <HAL_GPIO_Init+0x2f8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_GPIO_Init+0x1fa>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a46      	ldr	r2, [pc, #280]	; (8002928 <HAL_GPIO_Init+0x2fc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x1f6>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a45      	ldr	r2, [pc, #276]	; (800292c <HAL_GPIO_Init+0x300>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_GPIO_Init+0x1f2>
 800281a:	2304      	movs	r3, #4
 800281c:	e008      	b.n	8002830 <HAL_GPIO_Init+0x204>
 800281e:	2307      	movs	r3, #7
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x204>
 8002822:	2303      	movs	r3, #3
 8002824:	e004      	b.n	8002830 <HAL_GPIO_Init+0x204>
 8002826:	2302      	movs	r3, #2
 8002828:	e002      	b.n	8002830 <HAL_GPIO_Init+0x204>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_GPIO_Init+0x204>
 800282e:	2300      	movs	r3, #0
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	f002 0203 	and.w	r2, r2, #3
 8002836:	0092      	lsls	r2, r2, #2
 8002838:	4093      	lsls	r3, r2
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002840:	4935      	ldr	r1, [pc, #212]	; (8002918 <HAL_GPIO_Init+0x2ec>)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800284e:	4b38      	ldr	r3, [pc, #224]	; (8002930 <HAL_GPIO_Init+0x304>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002872:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <HAL_GPIO_Init+0x304>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_GPIO_Init+0x304>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800289c:	4a24      	ldr	r2, [pc, #144]	; (8002930 <HAL_GPIO_Init+0x304>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_GPIO_Init+0x304>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_GPIO_Init+0x304>)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_GPIO_Init+0x304>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f0:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <HAL_GPIO_Init+0x304>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3301      	adds	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2b0f      	cmp	r3, #15
 8002900:	f67f aea2 	bls.w	8002648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40013800 	.word	0x40013800
 800291c:	40020000 	.word	0x40020000
 8002920:	40020400 	.word	0x40020400
 8002924:	40020800 	.word	0x40020800
 8002928:	40020c00 	.word	0x40020c00
 800292c:	40021000 	.word	0x40021000
 8002930:	40013c00 	.word	0x40013c00

08002934 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e0bb      	b.n	8002ac8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002950:	2201      	movs	r2, #1
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	429a      	cmp	r2, r3
 8002968:	f040 80ab 	bne.w	8002ac2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800296c:	4a5c      	ldr	r2, [pc, #368]	; (8002ae0 <HAL_GPIO_DeInit+0x1ac>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_GPIO_DeInit+0x1b0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d019      	beq.n	80029ca <HAL_GPIO_DeInit+0x96>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a53      	ldr	r2, [pc, #332]	; (8002ae8 <HAL_GPIO_DeInit+0x1b4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_DeInit+0x92>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_GPIO_DeInit+0x1b8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_DeInit+0x8e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a51      	ldr	r2, [pc, #324]	; (8002af0 <HAL_GPIO_DeInit+0x1bc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_DeInit+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <HAL_GPIO_DeInit+0x1c0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_DeInit+0x86>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_DeInit+0x98>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_DeInit+0x98>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_DeInit+0x98>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_DeInit+0x98>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_DeInit+0x98>
 80029ca:	2300      	movs	r3, #0
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d132      	bne.n	8002a42 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_GPIO_DeInit+0x1c4>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	4944      	ldr	r1, [pc, #272]	; (8002af8 <HAL_GPIO_DeInit+0x1c4>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_GPIO_DeInit+0x1c4>)
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	4941      	ldr	r1, [pc, #260]	; (8002af8 <HAL_GPIO_DeInit+0x1c4>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80029f8:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_GPIO_DeInit+0x1c4>)
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	493d      	ldr	r1, [pc, #244]	; (8002af8 <HAL_GPIO_DeInit+0x1c4>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a06:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_GPIO_DeInit+0x1c4>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	493a      	ldr	r1, [pc, #232]	; (8002af8 <HAL_GPIO_DeInit+0x1c4>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002a24:	4a2e      	ldr	r2, [pc, #184]	; (8002ae0 <HAL_GPIO_DeInit+0x1ac>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	43da      	mvns	r2, r3
 8002a34:	482a      	ldr	r0, [pc, #168]	; (8002ae0 <HAL_GPIO_DeInit+0x1ac>)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	08d2      	lsrs	r2, r2, #3
 8002a78:	4019      	ands	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2103      	movs	r1, #3
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	401a      	ands	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b0f      	cmp	r3, #15
 8002acc:	f67f af40 	bls.w	8002950 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40013c00 	.word	0x40013c00

08002afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e001      	b.n	8002b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fb42 	bl	8001208 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40013c00 	.word	0x40013c00

08002b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e12b      	b.n	8002dfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe fcc4 	bl	8001544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf4:	f002 f9c6 	bl	8004f84 <HAL_RCC_GetPCLK1Freq>
 8002bf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4a81      	ldr	r2, [pc, #516]	; (8002e04 <HAL_I2C_Init+0x274>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d807      	bhi.n	8002c14 <HAL_I2C_Init+0x84>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a80      	ldr	r2, [pc, #512]	; (8002e08 <HAL_I2C_Init+0x278>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	bf94      	ite	ls
 8002c0c:	2301      	movls	r3, #1
 8002c0e:	2300      	movhi	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e006      	b.n	8002c22 <HAL_I2C_Init+0x92>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a7d      	ldr	r2, [pc, #500]	; (8002e0c <HAL_I2C_Init+0x27c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	bf94      	ite	ls
 8002c1c:	2301      	movls	r3, #1
 8002c1e:	2300      	movhi	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0e7      	b.n	8002dfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4a78      	ldr	r2, [pc, #480]	; (8002e10 <HAL_I2C_Init+0x280>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	0c9b      	lsrs	r3, r3, #18
 8002c34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a6a      	ldr	r2, [pc, #424]	; (8002e04 <HAL_I2C_Init+0x274>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d802      	bhi.n	8002c64 <HAL_I2C_Init+0xd4>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	3301      	adds	r3, #1
 8002c62:	e009      	b.n	8002c78 <HAL_I2C_Init+0xe8>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	4a69      	ldr	r2, [pc, #420]	; (8002e14 <HAL_I2C_Init+0x284>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	3301      	adds	r3, #1
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	495c      	ldr	r1, [pc, #368]	; (8002e04 <HAL_I2C_Init+0x274>)
 8002c94:	428b      	cmp	r3, r1
 8002c96:	d819      	bhi.n	8002ccc <HAL_I2C_Init+0x13c>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e59      	subs	r1, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca6:	1c59      	adds	r1, r3, #1
 8002ca8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cac:	400b      	ands	r3, r1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_I2C_Init+0x138>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1e59      	subs	r1, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc6:	e051      	b.n	8002d6c <HAL_I2C_Init+0x1dc>
 8002cc8:	2304      	movs	r3, #4
 8002cca:	e04f      	b.n	8002d6c <HAL_I2C_Init+0x1dc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d111      	bne.n	8002cf8 <HAL_I2C_Init+0x168>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1e58      	subs	r0, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	440b      	add	r3, r1
 8002ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e012      	b.n	8002d1e <HAL_I2C_Init+0x18e>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e58      	subs	r0, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	0099      	lsls	r1, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Init+0x196>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e022      	b.n	8002d6c <HAL_I2C_Init+0x1dc>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_I2C_Init+0x1bc>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e58      	subs	r0, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	440b      	add	r3, r1
 8002d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4a:	e00f      	b.n	8002d6c <HAL_I2C_Init+0x1dc>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	0099      	lsls	r1, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	6809      	ldr	r1, [r1, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6911      	ldr	r1, [r2, #16]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68d2      	ldr	r2, [r2, #12]
 8002da6:	4311      	orrs	r1, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	000186a0 	.word	0x000186a0
 8002e08:	001e847f 	.word	0x001e847f
 8002e0c:	003d08ff 	.word	0x003d08ff
 8002e10:	431bde83 	.word	0x431bde83
 8002e14:	10624dd3 	.word	0x10624dd3

08002e18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e021      	b.n	8002e6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2224      	movs	r2, #36	; 0x24
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fbce 	bl	80015e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e92:	f7fe fe89 	bl	8001ba8 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	f040 80d9 	bne.w	8003058 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2319      	movs	r3, #25
 8002eac:	2201      	movs	r2, #1
 8002eae:	496d      	ldr	r1, [pc, #436]	; (8003064 <HAL_I2C_Mem_Write+0x1ec>)
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fc8d 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e0cc      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Mem_Write+0x56>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0c5      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d007      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2221      	movs	r2, #33	; 0x21
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a4d      	ldr	r2, [pc, #308]	; (8003068 <HAL_I2C_Mem_Write+0x1f0>)
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f36:	88f8      	ldrh	r0, [r7, #6]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	8979      	ldrh	r1, [r7, #10]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4603      	mov	r3, r0
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fac4 	bl	80034d4 <I2C_RequestMemoryWrite>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d052      	beq.n	8002ff8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e081      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fd0e 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d107      	bne.n	8002f7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06b      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	781a      	ldrb	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_I2C_Mem_Write+0x180>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d017      	beq.n	8002ff8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1aa      	bne.n	8002f56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fcfa 	bl	80039fe <I2C_WaitOnBTFFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b04      	cmp	r3, #4
 8003016:	d107      	bne.n	8003028 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e016      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	00100002 	.word	0x00100002
 8003068:	ffff0000 	.word	0xffff0000

0800306c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	; 0x30
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	817b      	strh	r3, [r7, #10]
 800307e:	460b      	mov	r3, r1
 8003080:	813b      	strh	r3, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003086:	f7fe fd8f 	bl	8001ba8 <HAL_GetTick>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b20      	cmp	r3, #32
 8003096:	f040 8208 	bne.w	80034aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2319      	movs	r3, #25
 80030a0:	2201      	movs	r2, #1
 80030a2:	497b      	ldr	r1, [pc, #492]	; (8003290 <HAL_I2C_Mem_Read+0x224>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fb93 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
 80030b2:	e1fb      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_I2C_Mem_Read+0x56>
 80030be:	2302      	movs	r3, #2
 80030c0:	e1f4      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d007      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2222      	movs	r2, #34	; 0x22
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a5b      	ldr	r2, [pc, #364]	; (8003294 <HAL_I2C_Mem_Read+0x228>)
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800312a:	88f8      	ldrh	r0, [r7, #6]
 800312c:	893a      	ldrh	r2, [r7, #8]
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	4603      	mov	r3, r0
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa60 	bl	8003600 <I2C_RequestMemoryRead>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1b0      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e184      	b.n	8003484 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	2b01      	cmp	r3, #1
 8003180:	d11b      	bne.n	80031ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e164      	b.n	8003484 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d11b      	bne.n	80031fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	e144      	b.n	8003484 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003210:	e138      	b.n	8003484 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	2b03      	cmp	r3, #3
 8003218:	f200 80f1 	bhi.w	80033fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	2b01      	cmp	r3, #1
 8003222:	d123      	bne.n	800326c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fc29 	bl	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e139      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800326a:	e10b      	b.n	8003484 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	2b02      	cmp	r3, #2
 8003272:	d14e      	bne.n	8003312 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	2200      	movs	r2, #0
 800327c:	4906      	ldr	r1, [pc, #24]	; (8003298 <HAL_I2C_Mem_Read+0x22c>)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 faa6 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e10e      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
 800328e:	bf00      	nop
 8003290:	00100002 	.word	0x00100002
 8003294:	ffff0000 	.word	0xffff0000
 8003298:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003310:	e0b8      	b.n	8003484 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	2200      	movs	r2, #0
 800331a:	4966      	ldr	r1, [pc, #408]	; (80034b4 <HAL_I2C_Mem_Read+0x448>)
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fa57 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0bf      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2200      	movs	r2, #0
 8003376:	494f      	ldr	r1, [pc, #316]	; (80034b4 <HAL_I2C_Mem_Read+0x448>)
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fa29 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e091      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033fc:	e042      	b.n	8003484 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fb3c 	bl	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e04c      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b04      	cmp	r3, #4
 8003450:	d118      	bne.n	8003484 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	f47f aec2 	bne.w	8003212 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3728      	adds	r7, #40	; 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	00010004 	.word	0x00010004

080034b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c6:	b2db      	uxtb	r3, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	817b      	strh	r3, [r7, #10]
 80034e6:	460b      	mov	r3, r1
 80034e8:	813b      	strh	r3, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	2200      	movs	r2, #0
 8003506:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f960 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003524:	d103      	bne.n	800352e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e05f      	b.n	80035f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003540:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	492d      	ldr	r1, [pc, #180]	; (80035fc <I2C_RequestMemoryWrite+0x128>)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f998 	bl	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e04c      	b.n	80035f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	6a39      	ldr	r1, [r7, #32]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa02 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b04      	cmp	r3, #4
 8003584:	d107      	bne.n	8003596 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003594:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e02b      	b.n	80035f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d105      	bne.n	80035ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a0:	893b      	ldrh	r3, [r7, #8]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]
 80035aa:	e021      	b.n	80035f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f9dc 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e005      	b.n	80035f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035e6:	893b      	ldrh	r3, [r7, #8]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	00010002 	.word	0x00010002

08003600 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	461a      	mov	r2, r3
 800360e:	4603      	mov	r3, r0
 8003610:	817b      	strh	r3, [r7, #10]
 8003612:	460b      	mov	r3, r1
 8003614:	813b      	strh	r3, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003628:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003638:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	2200      	movs	r2, #0
 8003642:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8c2 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003660:	d103      	bne.n	800366a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0aa      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800367c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	4952      	ldr	r1, [pc, #328]	; (80037cc <I2C_RequestMemoryRead+0x1cc>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f8fa 	bl	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e097      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f964 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d107      	bne.n	80036d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e076      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036dc:	893b      	ldrh	r3, [r7, #8]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	611a      	str	r2, [r3, #16]
 80036e6:	e021      	b.n	800372c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	6a39      	ldr	r1, [r7, #32]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f93e 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b04      	cmp	r3, #4
 800370c:	d107      	bne.n	800371e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e050      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003722:	893b      	ldrh	r3, [r7, #8]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	6a39      	ldr	r1, [r7, #32]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f923 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2b04      	cmp	r3, #4
 8003742:	d107      	bne.n	8003754 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e035      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003766:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	2200      	movs	r2, #0
 8003770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f82b 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00d      	beq.n	800379c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378e:	d103      	bne.n	8003798 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e013      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800379c:	897b      	ldrh	r3, [r7, #10]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	6a3a      	ldr	r2, [r7, #32]
 80037b0:	4906      	ldr	r1, [pc, #24]	; (80037cc <I2C_RequestMemoryRead+0x1cc>)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f863 	bl	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	00010002 	.word	0x00010002

080037d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e0:	e025      	b.n	800382e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d021      	beq.n	800382e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ea:	f7fe f9dd 	bl	8001ba8 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d302      	bcc.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d116      	bne.n	800382e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e023      	b.n	8003876 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10d      	bne.n	8003854 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	e00c      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	429a      	cmp	r2, r3
 8003872:	d0b6      	beq.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800388c:	e051      	b.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	d123      	bne.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f043 0204 	orr.w	r2, r3, #4
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e046      	b.n	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d021      	beq.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7fe f95b 	bl	8001ba8 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d116      	bne.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e020      	b.n	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10c      	bne.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	43da      	mvns	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf14      	ite	ne
 800394e:	2301      	movne	r3, #1
 8003950:	2300      	moveq	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	e00b      	b.n	800396e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	43da      	mvns	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4013      	ands	r3, r2
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d18d      	bne.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003988:	e02d      	b.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f8ce 	bl	8003b2c <I2C_IsAcknowledgeFailed>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e02d      	b.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d021      	beq.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe f901 	bl	8001ba8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d116      	bne.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e007      	b.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b80      	cmp	r3, #128	; 0x80
 80039f2:	d1ca      	bne.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a0a:	e02d      	b.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f88d 	bl	8003b2c <I2C_IsAcknowledgeFailed>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e02d      	b.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d021      	beq.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a24:	f7fe f8c0 	bl	8001ba8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d302      	bcc.n	8003a3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e007      	b.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d1ca      	bne.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a8c:	e042      	b.n	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d119      	bne.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0210 	mvn.w	r2, #16
 8003aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e029      	b.n	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad0:	f7fe f86a 	bl	8001ba8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d116      	bne.n	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d1b5      	bne.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b42:	d11b      	bne.n	8003b7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f043 0204 	orr.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e128      	b.n	8003df0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a90      	ldr	r2, [pc, #576]	; (8003df8 <HAL_I2S_Init+0x26c>)
 8003bb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fd fd39 	bl	8001630 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bd4:	f023 030f 	bic.w	r3, r3, #15
 8003bd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2202      	movs	r2, #2
 8003be0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d060      	beq.n	8003cac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bf2:	2310      	movs	r3, #16
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e001      	b.n	8003bfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d802      	bhi.n	8003c0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f001 fb00 	bl	8005210 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1a:	d125      	bne.n	8003c68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	461a      	mov	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	3305      	adds	r3, #5
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e01f      	b.n	8003c86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	461a      	mov	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	3305      	adds	r3, #5
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e00e      	b.n	8003c86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	3305      	adds	r3, #5
 8003c84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4a5c      	ldr	r2, [pc, #368]	; (8003dfc <HAL_I2S_Init+0x270>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	08db      	lsrs	r3, r3, #3
 8003c90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e003      	b.n	8003cb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003cac:	2302      	movs	r3, #2
 8003cae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d902      	bls.n	8003cc0 <HAL_I2S_Init+0x134>
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2bff      	cmp	r3, #255	; 0xff
 8003cbe:	d907      	bls.n	8003cd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e08f      	b.n	8003df0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	ea42 0103 	orr.w	r1, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cee:	f023 030f 	bic.w	r3, r3, #15
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6851      	ldr	r1, [r2, #4]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6892      	ldr	r2, [r2, #8]
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68d2      	ldr	r2, [r2, #12]
 8003d00:	4311      	orrs	r1, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6992      	ldr	r2, [r2, #24]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d161      	bne.n	8003de0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <HAL_I2S_Init+0x274>)
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a37      	ldr	r2, [pc, #220]	; (8003e04 <HAL_I2S_Init+0x278>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2S_Init+0x1a4>
 8003d2c:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_I2S_Init+0x27c>)
 8003d2e:	e001      	b.n	8003d34 <HAL_I2S_Init+0x1a8>
 8003d30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	4932      	ldr	r1, [pc, #200]	; (8003e04 <HAL_I2S_Init+0x278>)
 8003d3c:	428a      	cmp	r2, r1
 8003d3e:	d101      	bne.n	8003d44 <HAL_I2S_Init+0x1b8>
 8003d40:	4a31      	ldr	r2, [pc, #196]	; (8003e08 <HAL_I2S_Init+0x27c>)
 8003d42:	e001      	b.n	8003d48 <HAL_I2S_Init+0x1bc>
 8003d44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d4c:	f023 030f 	bic.w	r3, r3, #15
 8003d50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <HAL_I2S_Init+0x278>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_I2S_Init+0x1d4>
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_I2S_Init+0x27c>)
 8003d5e:	e001      	b.n	8003d64 <HAL_I2S_Init+0x1d8>
 8003d60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d64:	2202      	movs	r2, #2
 8003d66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <HAL_I2S_Init+0x278>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_I2S_Init+0x1ea>
 8003d72:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_I2S_Init+0x27c>)
 8003d74:	e001      	b.n	8003d7a <HAL_I2S_Init+0x1ee>
 8003d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d86:	d003      	beq.n	8003d90 <HAL_I2S_Init+0x204>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e001      	b.n	8003d9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003db0:	4313      	orrs	r3, r2
 8003db2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	897b      	ldrh	r3, [r7, #10]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <HAL_I2S_Init+0x278>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2S_Init+0x24c>
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_I2S_Init+0x27c>)
 8003dd6:	e001      	b.n	8003ddc <HAL_I2S_Init+0x250>
 8003dd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ddc:	897a      	ldrh	r2, [r7, #10]
 8003dde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	080040dd 	.word	0x080040dd
 8003dfc:	cccccccd 	.word	0xcccccccd
 8003e00:	080041f1 	.word	0x080041f1
 8003e04:	40003800 	.word	0x40003800
 8003e08:	40003400 	.word	0x40003400

08003e0c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_I2S_Transmit_DMA+0x1a>
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e08e      	b.n	8003f48 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_I2S_Transmit_DMA+0x2e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e086      	b.n	8003f48 <HAL_I2S_Transmit_DMA+0x13c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d005      	beq.n	8003e5a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
 8003e58:	e076      	b.n	8003f48 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d002      	beq.n	8003e86 <HAL_I2S_Transmit_DMA+0x7a>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d10a      	bne.n	8003e9c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e9a:	e005      	b.n	8003ea8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	88fa      	ldrh	r2, [r7, #6]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	88fa      	ldrh	r2, [r7, #6]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <HAL_I2S_Transmit_DMA+0x144>)
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <HAL_I2S_Transmit_DMA+0x148>)
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <HAL_I2S_Transmit_DMA+0x14c>)
 8003ebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ec8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ed0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ed8:	f7fe f8e6 	bl	80020a8 <HAL_DMA_Start_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00f      	beq.n	8003f02 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f043 0208 	orr.w	r2, r3, #8
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e022      	b.n	8003f48 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d107      	bne.n	8003f20 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f1e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0202 	orr.w	r2, r2, #2
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	08003fbb 	.word	0x08003fbb
 8003f54:	08003f79 	.word	0x08003f79
 8003f58:	08003fd7 	.word	0x08003fd7

08003f5c <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6a:	b2db      	uxtb	r3, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10e      	bne.n	8003fac <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0202 	bic.w	r2, r2, #2
 8003f9c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f002 fa0b 	bl	80063c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f002 fa0f 	bl	80063ec <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0203 	bic.w	r2, r2, #3
 8003ff2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400c:	f043 0208 	orr.w	r2, r3, #8
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f002 fb63 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10e      	bne.n	8004076 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004066:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f002 f9a9 	bl	80063c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	b292      	uxth	r2, r2
 8004092:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	1c9a      	adds	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10e      	bne.n	80040d4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f002 fafc 	bl	80066cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d13a      	bne.n	800416e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d109      	bne.n	8004116 <I2S_IRQHandler+0x3a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d102      	bne.n	8004116 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ffb4 	bl	800407e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d126      	bne.n	800416e <I2S_IRQHandler+0x92>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d11f      	bne.n	800416e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800413c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	f043 0202 	orr.w	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f002 fab9 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b03      	cmp	r3, #3
 8004178:	d136      	bne.n	80041e8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b02      	cmp	r3, #2
 8004182:	d109      	bne.n	8004198 <I2S_IRQHandler+0xbc>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b80      	cmp	r3, #128	; 0x80
 8004190:	d102      	bne.n	8004198 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ff45 	bl	8004022 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d122      	bne.n	80041e8 <I2S_IRQHandler+0x10c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d11b      	bne.n	80041e8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041be:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f043 0204 	orr.w	r2, r3, #4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f002 fa7c 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a92      	ldr	r2, [pc, #584]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800420a:	4b92      	ldr	r3, [pc, #584]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800420c:	e001      	b.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800420e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a8b      	ldr	r2, [pc, #556]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004228:	4b8a      	ldr	r3, [pc, #552]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800422a:	e001      	b.n	8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800422c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d004      	beq.n	8004248 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 8099 	bne.w	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d107      	bne.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f925 	bl	80044ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9c8 	bl	800460c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d13a      	bne.n	80042fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d035      	beq.n	80042fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6e      	ldr	r2, [pc, #440]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d101      	bne.n	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800429a:	4b6e      	ldr	r3, [pc, #440]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800429c:	e001      	b.n	80042a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800429e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4969      	ldr	r1, [pc, #420]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042aa:	428b      	cmp	r3, r1
 80042ac:	d101      	bne.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042ae:	4b69      	ldr	r3, [pc, #420]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042b0:	e001      	b.n	80042b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0202 	orr.w	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f002 f9f2 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b08      	cmp	r3, #8
 8004304:	f040 80c3 	bne.w	800448e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80bd 	beq.w	800448e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004322:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a49      	ldr	r2, [pc, #292]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800432e:	4b49      	ldr	r3, [pc, #292]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004330:	e001      	b.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4944      	ldr	r1, [pc, #272]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800433e:	428b      	cmp	r3, r1
 8004340:	d101      	bne.n	8004346 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004342:	4b44      	ldr	r3, [pc, #272]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004344:	e001      	b.n	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800434a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800434e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f002 f9b4 	bl	80066e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004378:	e089      	b.n	800448e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d107      	bne.n	8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8be 	bl	8004510 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f8fd 	bl	80045a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d12f      	bne.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d02a      	beq.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d101      	bne.n	80043e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043de:	e001      	b.n	80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4919      	ldr	r1, [pc, #100]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ec:	428b      	cmp	r3, r1
 80043ee:	d101      	bne.n	80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043f0:	4b18      	ldr	r3, [pc, #96]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043f2:	e001      	b.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f043 0202 	orr.w	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f002 f964 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d136      	bne.n	8004490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d031      	beq.n	8004490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a07      	ldr	r2, [pc, #28]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d101      	bne.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004438:	e001      	b.n	800443e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800443a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4902      	ldr	r1, [pc, #8]	; (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004446:	428b      	cmp	r3, r1
 8004448:	d106      	bne.n	8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800444a:	4b02      	ldr	r3, [pc, #8]	; (8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800444c:	e006      	b.n	800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800444e:	bf00      	nop
 8004450:	40003800 	.word	0x40003800
 8004454:	40003400 	.word	0x40003400
 8004458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800445c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004460:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004470:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f002 f92a 	bl	80066e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800448c:	e000      	b.n	8004490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800448e:	bf00      	nop
}
 8004490:	bf00      	nop
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c99      	adds	r1, r3, #2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6251      	str	r1, [r2, #36]	; 0x24
 80044be:	881a      	ldrh	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d113      	bne.n	8004506 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ffc9 	bl	8004498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	1c99      	adds	r1, r3, #2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6251      	str	r1, [r2, #36]	; 0x24
 8004522:	8819      	ldrh	r1, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <I2SEx_TxISR_I2SExt+0x90>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <I2SEx_TxISR_I2SExt+0x22>
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <I2SEx_TxISR_I2SExt+0x94>)
 8004530:	e001      	b.n	8004536 <I2SEx_TxISR_I2SExt+0x26>
 8004532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004536:	460a      	mov	r2, r1
 8004538:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d121      	bne.n	8004596 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a12      	ldr	r2, [pc, #72]	; (80045a0 <I2SEx_TxISR_I2SExt+0x90>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <I2SEx_TxISR_I2SExt+0x50>
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <I2SEx_TxISR_I2SExt+0x94>)
 800455e:	e001      	b.n	8004564 <I2SEx_TxISR_I2SExt+0x54>
 8004560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	490d      	ldr	r1, [pc, #52]	; (80045a0 <I2SEx_TxISR_I2SExt+0x90>)
 800456c:	428b      	cmp	r3, r1
 800456e:	d101      	bne.n	8004574 <I2SEx_TxISR_I2SExt+0x64>
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <I2SEx_TxISR_I2SExt+0x94>)
 8004572:	e001      	b.n	8004578 <I2SEx_TxISR_I2SExt+0x68>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004578:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800457c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff81 	bl	8004498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40003800 	.word	0x40003800
 80045a4:	40003400 	.word	0x40003400

080045a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68d8      	ldr	r0, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	1c99      	adds	r1, r3, #2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045c0:	b282      	uxth	r2, r0
 80045c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d113      	bne.n	8004604 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ff4a 	bl	8004498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a20      	ldr	r2, [pc, #128]	; (800469c <I2SEx_RxISR_I2SExt+0x90>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d101      	bne.n	8004622 <I2SEx_RxISR_I2SExt+0x16>
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <I2SEx_RxISR_I2SExt+0x94>)
 8004620:	e001      	b.n	8004626 <I2SEx_RxISR_I2SExt+0x1a>
 8004622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004626:	68d8      	ldr	r0, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	1c99      	adds	r1, r3, #2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004632:	b282      	uxth	r2, r0
 8004634:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d121      	bne.n	8004692 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <I2SEx_RxISR_I2SExt+0x90>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <I2SEx_RxISR_I2SExt+0x50>
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <I2SEx_RxISR_I2SExt+0x94>)
 800465a:	e001      	b.n	8004660 <I2SEx_RxISR_I2SExt+0x54>
 800465c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	490d      	ldr	r1, [pc, #52]	; (800469c <I2SEx_RxISR_I2SExt+0x90>)
 8004668:	428b      	cmp	r3, r1
 800466a:	d101      	bne.n	8004670 <I2SEx_RxISR_I2SExt+0x64>
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <I2SEx_RxISR_I2SExt+0x94>)
 800466e:	e001      	b.n	8004674 <I2SEx_RxISR_I2SExt+0x68>
 8004670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004674:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004678:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff03 	bl	8004498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40003800 	.word	0x40003800
 80046a0:	40003400 	.word	0x40003400

080046a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e267      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d075      	beq.n	80047ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c2:	4b88      	ldr	r3, [pc, #544]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d00c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ce:	4b85      	ldr	r3, [pc, #532]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d112      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046da:	4b82      	ldr	r3, [pc, #520]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d10b      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	4b7e      	ldr	r3, [pc, #504]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d05b      	beq.n	80047ac <HAL_RCC_OscConfig+0x108>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d157      	bne.n	80047ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e242      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004708:	d106      	bne.n	8004718 <HAL_RCC_OscConfig+0x74>
 800470a:	4b76      	ldr	r3, [pc, #472]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a75      	ldr	r2, [pc, #468]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e01d      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x98>
 8004722:	4b70      	ldr	r3, [pc, #448]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6f      	ldr	r2, [pc, #444]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b6d      	ldr	r3, [pc, #436]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6c      	ldr	r2, [pc, #432]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 800473c:	4b69      	ldr	r3, [pc, #420]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a68      	ldr	r2, [pc, #416]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b66      	ldr	r3, [pc, #408]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a65      	ldr	r2, [pc, #404]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd fa24 	bl	8001ba8 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004764:	f7fd fa20 	bl	8001ba8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e207      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b5b      	ldr	r3, [pc, #364]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0xc0>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd fa10 	bl	8001ba8 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800478c:	f7fd fa0c 	bl	8001ba8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1f3      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	4b51      	ldr	r3, [pc, #324]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0xe8>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d063      	beq.n	8004882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ba:	4b4a      	ldr	r3, [pc, #296]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c6:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11c      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d2:	4b44      	ldr	r3, [pc, #272]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1c7      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f6:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4937      	ldr	r1, [pc, #220]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	e03a      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004814:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <HAL_RCC_OscConfig+0x244>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fd f9c5 	bl	8001ba8 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004822:	f7fd f9c1 	bl	8001ba8 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e1a8      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4925      	ldr	r1, [pc, #148]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
 8004854:	e015      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004856:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_RCC_OscConfig+0x244>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd f9a4 	bl	8001ba8 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004864:	f7fd f9a0 	bl	8001ba8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e187      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d036      	beq.n	80048fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <HAL_RCC_OscConfig+0x248>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fd f984 	bl	8001ba8 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fd f980 	bl	8001ba8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e167      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCC_OscConfig+0x240>)
 80048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x200>
 80048c2:	e01b      	b.n	80048fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_OscConfig+0x248>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ca:	f7fd f96d 	bl	8001ba8 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	e00e      	b.n	80048f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d2:	f7fd f969 	bl	8001ba8 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d907      	bls.n	80048f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e150      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
 80048e4:	40023800 	.word	0x40023800
 80048e8:	42470000 	.word	0x42470000
 80048ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f0:	4b88      	ldr	r3, [pc, #544]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ea      	bne.n	80048d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8097 	beq.w	8004a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490e:	4b81      	ldr	r3, [pc, #516]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10f      	bne.n	800493a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	4b7d      	ldr	r3, [pc, #500]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	4a7c      	ldr	r2, [pc, #496]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004928:	6413      	str	r3, [r2, #64]	; 0x40
 800492a:	4b7a      	ldr	r3, [pc, #488]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493a:	4b77      	ldr	r3, [pc, #476]	; (8004b18 <HAL_RCC_OscConfig+0x474>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d118      	bne.n	8004978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004946:	4b74      	ldr	r3, [pc, #464]	; (8004b18 <HAL_RCC_OscConfig+0x474>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a73      	ldr	r2, [pc, #460]	; (8004b18 <HAL_RCC_OscConfig+0x474>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004952:	f7fd f929 	bl	8001ba8 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fd f925 	bl	8001ba8 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e10c      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <HAL_RCC_OscConfig+0x474>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <HAL_RCC_OscConfig+0x2ea>
 8004980:	4b64      	ldr	r3, [pc, #400]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	4a63      	ldr	r2, [pc, #396]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6713      	str	r3, [r2, #112]	; 0x70
 800498c:	e01c      	b.n	80049c8 <HAL_RCC_OscConfig+0x324>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b05      	cmp	r3, #5
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x30c>
 8004996:	4b5f      	ldr	r3, [pc, #380]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	4a5e      	ldr	r2, [pc, #376]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 800499c:	f043 0304 	orr.w	r3, r3, #4
 80049a0:	6713      	str	r3, [r2, #112]	; 0x70
 80049a2:	4b5c      	ldr	r3, [pc, #368]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a5b      	ldr	r2, [pc, #364]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0x324>
 80049b0:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a57      	ldr	r2, [pc, #348]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	4b55      	ldr	r3, [pc, #340]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a54      	ldr	r2, [pc, #336]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049c2:	f023 0304 	bic.w	r3, r3, #4
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd f8ea 	bl	8001ba8 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fd f8e6 	bl	8001ba8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0cb      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ee:	4b49      	ldr	r3, [pc, #292]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ee      	beq.n	80049d8 <HAL_RCC_OscConfig+0x334>
 80049fa:	e014      	b.n	8004a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fc:	f7fd f8d4 	bl	8001ba8 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fd f8d0 	bl	8001ba8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0b5      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1ee      	bne.n	8004a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d105      	bne.n	8004a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2c:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	4a38      	ldr	r2, [pc, #224]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a1 	beq.w	8004b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a42:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d05c      	beq.n	8004b08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d141      	bne.n	8004ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5c:	f7fd f8a4 	bl	8001ba8 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fd f8a0 	bl	8001ba8 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e087      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	491b      	ldr	r1, [pc, #108]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fd f879 	bl	8001ba8 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fd f875 	bl	8001ba8 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e05c      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x416>
 8004ad8:	e054      	b.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fd f862 	bl	8001ba8 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fd f85e 	bl	8001ba8 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e045      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x444>
 8004b06:	e03d      	b.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e038      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40007000 	.word	0x40007000
 8004b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d121      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d11a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800

08004b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0cc      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b68      	ldr	r3, [pc, #416]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d90c      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0b8      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be8:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a58      	ldr	r2, [pc, #352]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c00:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a52      	ldr	r2, [pc, #328]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b50      	ldr	r3, [pc, #320]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	494d      	ldr	r1, [pc, #308]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d044      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d119      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d003      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b3f      	ldr	r3, [pc, #252]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e067      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c72:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 0203 	bic.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4934      	ldr	r1, [pc, #208]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c84:	f7fc ff90 	bl	8001ba8 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8c:	f7fc ff8c 	bl	8001ba8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e04f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 020c 	and.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d1eb      	bne.n	8004c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d20c      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e032      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4916      	ldr	r1, [pc, #88]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	490e      	ldr	r1, [pc, #56]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d1a:	f000 f821 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	490a      	ldr	r1, [pc, #40]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	5ccb      	ldrb	r3, [r1, r3]
 8004d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fc fef0 	bl	8001b20 <HAL_InitTick>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00
 8004d50:	40023800 	.word	0x40023800
 8004d54:	080090a8 	.word	0x080090a8
 8004d58:	20000020 	.word	0x20000020
 8004d5c:	20000024 	.word	0x20000024

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d64:	b094      	sub	sp, #80	; 0x50
 8004d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d70:	2300      	movs	r3, #0
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d78:	4b79      	ldr	r3, [pc, #484]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d00d      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x40>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	f200 80e1 	bhi.w	8004f4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x34>
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d92:	e0db      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4b73      	ldr	r3, [pc, #460]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d98:	e0db      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d9a:	4b73      	ldr	r3, [pc, #460]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d9e:	e0d8      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da0:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004daa:	4b6d      	ldr	r3, [pc, #436]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d063      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db6:	4b6a      	ldr	r3, [pc, #424]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	f04f 0000 	mov.w	r0, #0
 8004dda:	f04f 0100 	mov.w	r1, #0
 8004dde:	0159      	lsls	r1, r3, #5
 8004de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de4:	0150      	lsls	r0, r2, #5
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4621      	mov	r1, r4
 8004dec:	1a51      	subs	r1, r2, r1
 8004dee:	6139      	str	r1, [r7, #16]
 8004df0:	4629      	mov	r1, r5
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e04:	4659      	mov	r1, fp
 8004e06:	018b      	lsls	r3, r1, #6
 8004e08:	4651      	mov	r1, sl
 8004e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0e:	4651      	mov	r1, sl
 8004e10:	018a      	lsls	r2, r1, #6
 8004e12:	4651      	mov	r1, sl
 8004e14:	ebb2 0801 	subs.w	r8, r2, r1
 8004e18:	4659      	mov	r1, fp
 8004e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e32:	4690      	mov	r8, r2
 8004e34:	4699      	mov	r9, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	eb18 0303 	adds.w	r3, r8, r3
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	462b      	mov	r3, r5
 8004e40:	eb49 0303 	adc.w	r3, r9, r3
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e52:	4629      	mov	r1, r5
 8004e54:	024b      	lsls	r3, r1, #9
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	024a      	lsls	r2, r1, #9
 8004e60:	4610      	mov	r0, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e66:	2200      	movs	r2, #0
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e70:	f7fb fea2 	bl	8000bb8 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4613      	mov	r3, r2
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e7c:	e058      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7e:	4b38      	ldr	r3, [pc, #224]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	099b      	lsrs	r3, r3, #6
 8004e84:	2200      	movs	r2, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	4611      	mov	r1, r2
 8004e8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	2300      	movs	r3, #0
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
 8004e94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	f04f 0000 	mov.w	r0, #0
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	0159      	lsls	r1, r3, #5
 8004ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eaa:	0150      	lsls	r0, r2, #5
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ecc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	00eb      	lsls	r3, r5, #3
 8004ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee6:	00e2      	lsls	r2, r4, #3
 8004ee8:	4614      	mov	r4, r2
 8004eea:	461d      	mov	r5, r3
 8004eec:	4643      	mov	r3, r8
 8004eee:	18e3      	adds	r3, r4, r3
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	eb45 0303 	adc.w	r3, r5, r3
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f06:	4629      	mov	r1, r5
 8004f08:	028b      	lsls	r3, r1, #10
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f10:	4621      	mov	r1, r4
 8004f12:	028a      	lsls	r2, r1, #10
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	61fa      	str	r2, [r7, #28]
 8004f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f24:	f7fb fe48 	bl	8000bb8 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f4a:	e002      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3750      	adds	r7, #80	; 0x50
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800
 8004f64:	00f42400 	.word	0x00f42400
 8004f68:	007a1200 	.word	0x007a1200

08004f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f72:	681b      	ldr	r3, [r3, #0]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000020 	.word	0x20000020

08004f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f88:	f7ff fff0 	bl	8004f6c <HAL_RCC_GetHCLKFreq>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	0a9b      	lsrs	r3, r3, #10
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	4903      	ldr	r1, [pc, #12]	; (8004fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9a:	5ccb      	ldrb	r3, [r1, r3]
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	080090b8 	.word	0x080090b8

08004fac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d038      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fd4:	4b68      	ldr	r3, [pc, #416]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fda:	f7fc fde5 	bl	8001ba8 <HAL_GetTick>
 8004fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fe2:	f7fc fde1 	bl	8001ba8 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e0bd      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff4:	4b61      	ldr	r3, [pc, #388]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	019b      	lsls	r3, r3, #6
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	071b      	lsls	r3, r3, #28
 8005012:	495a      	ldr	r1, [pc, #360]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800501a:	4b57      	ldr	r3, [pc, #348]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005020:	f7fc fdc2 	bl	8001ba8 <HAL_GetTick>
 8005024:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005028:	f7fc fdbe 	bl	8001ba8 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e09a      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800503a:	4b50      	ldr	r3, [pc, #320]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8083 	beq.w	800515a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	4b48      	ldr	r3, [pc, #288]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	4a47      	ldr	r2, [pc, #284]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005062:	6413      	str	r3, [r2, #64]	; 0x40
 8005064:	4b45      	ldr	r3, [pc, #276]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005070:	4b43      	ldr	r3, [pc, #268]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a42      	ldr	r2, [pc, #264]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800507c:	f7fc fd94 	bl	8001ba8 <HAL_GetTick>
 8005080:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005084:	f7fc fd90 	bl	8001ba8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e06c      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005096:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050a2:	4b36      	ldr	r3, [pc, #216]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02f      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d028      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c0:	4b2e      	ldr	r3, [pc, #184]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ca:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050d0:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050d6:	4a29      	ldr	r2, [pc, #164]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050dc:	4b27      	ldr	r3, [pc, #156]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d114      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050e8:	f7fc fd5e 	bl	8001ba8 <HAL_GetTick>
 80050ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ee:	e00a      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fc fd5a 	bl	8001ba8 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e034      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005106:	4b1d      	ldr	r3, [pc, #116]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ee      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800511e:	d10d      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005120:	4b16      	ldr	r3, [pc, #88]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	4911      	ldr	r1, [pc, #68]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
 800513a:	e005      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4a0e      	ldr	r2, [pc, #56]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005142:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005146:	6093      	str	r3, [r2, #8]
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005154:	4909      	ldr	r1, [pc, #36]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005156:	4313      	orrs	r3, r2
 8005158:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	7d1a      	ldrb	r2, [r3, #20]
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800516c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	42470068 	.word	0x42470068
 800517c:	40023800 	.word	0x40023800
 8005180:	40007000 	.word	0x40007000
 8005184:	42470e40 	.word	0x42470e40
 8005188:	424711e0 	.word	0x424711e0

0800518c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2203      	movs	r2, #3
 8005198:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800519a:	4b1c      	ldr	r3, [pc, #112]	; (800520c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800519c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051aa:	4b18      	ldr	r3, [pc, #96]	; (800520c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b0:	0f1b      	lsrs	r3, r3, #28
 80051b2:	f003 0207 	and.w	r2, r3, #7
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 80051ba:	4b14      	ldr	r3, [pc, #80]	; (800520c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80051c8:	4b10      	ldr	r3, [pc, #64]	; (800520c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80051d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80051d2:	4b0e      	ldr	r3, [pc, #56]	; (800520c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80051e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80051f6:	e002      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	751a      	strb	r2, [r3, #20]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800

08005210 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d140      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800522e:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d131      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005244:	4b1f      	ldr	r3, [pc, #124]	; (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005246:	617b      	str	r3, [r7, #20]
          break;
 8005248:	e031      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005256:	d109      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005262:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e008      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800526c:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005276:	4a15      	ldr	r2, [pc, #84]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800527e:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005284:	099b      	lsrs	r3, r3, #6
 8005286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	fb02 f303 	mul.w	r3, r2, r3
 8005290:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005298:	0f1b      	lsrs	r3, r3, #28
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
          break;
 80052a6:	e002      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
          break;
 80052ac:	bf00      	nop
        }
      }
      break;
 80052ae:	bf00      	nop
    }
  }
  return frequency;
 80052b0:	697b      	ldr	r3, [r7, #20]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	00bb8000 	.word	0x00bb8000
 80052c8:	007a1200 	.word	0x007a1200
 80052cc:	00f42400 	.word	0x00f42400

080052d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e041      	b.n	8005366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc fa68 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f000 f9c0 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d001      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e044      	b.n	8005412 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <HAL_TIM_Base_Start_IT+0xb0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x6c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b2:	d013      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x6c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <HAL_TIM_Base_Start_IT+0xb4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00e      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x6c>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a19      	ldr	r2, [pc, #100]	; (8005428 <HAL_TIM_Base_Start_IT+0xb8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x6c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a17      	ldr	r2, [pc, #92]	; (800542c <HAL_TIM_Base_Start_IT+0xbc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x6c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a16      	ldr	r2, [pc, #88]	; (8005430 <HAL_TIM_Base_Start_IT+0xc0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d111      	bne.n	8005400 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b06      	cmp	r3, #6
 80053ec:	d010      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0201 	orr.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fe:	e007      	b.n	8005410 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40014000 	.word	0x40014000

08005434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d122      	bne.n	8005490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b02      	cmp	r3, #2
 8005456:	d11b      	bne.n	8005490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0202 	mvn.w	r2, #2
 8005460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8ee 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8e0 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f8f1 	bl	800566c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b04      	cmp	r3, #4
 800549c:	d122      	bne.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d11b      	bne.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0204 	mvn.w	r2, #4
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2202      	movs	r2, #2
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8c4 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8b6 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8c7 	bl	800566c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d122      	bne.n	8005538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d11b      	bne.n	8005538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0208 	mvn.w	r2, #8
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2204      	movs	r2, #4
 800550e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f89a 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f88c 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f89d 	bl	800566c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b10      	cmp	r3, #16
 8005544:	d122      	bne.n	800558c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b10      	cmp	r3, #16
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0210 	mvn.w	r2, #16
 800555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2208      	movs	r2, #8
 8005562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f870 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f862 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f873 	bl	800566c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0201 	mvn.w	r2, #1
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fb fe40 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c2:	2b80      	cmp	r3, #128	; 0x80
 80055c4:	d10e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d0:	2b80      	cmp	r3, #128	; 0x80
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8e2 	bl	80057a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d10e      	bne.n	8005610 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d107      	bne.n	8005610 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f838 	bl	8005680 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b20      	cmp	r3, #32
 800561c:	d10e      	bne.n	800563c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b20      	cmp	r3, #32
 800562a:	d107      	bne.n	800563c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0220 	mvn.w	r2, #32
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8ac 	bl	8005794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a34      	ldr	r2, [pc, #208]	; (8005778 <TIM_Base_SetConfig+0xe4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00f      	beq.n	80056cc <TIM_Base_SetConfig+0x38>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d00b      	beq.n	80056cc <TIM_Base_SetConfig+0x38>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a31      	ldr	r2, [pc, #196]	; (800577c <TIM_Base_SetConfig+0xe8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_Base_SetConfig+0x38>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a30      	ldr	r2, [pc, #192]	; (8005780 <TIM_Base_SetConfig+0xec>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x38>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a2f      	ldr	r2, [pc, #188]	; (8005784 <TIM_Base_SetConfig+0xf0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d108      	bne.n	80056de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a25      	ldr	r2, [pc, #148]	; (8005778 <TIM_Base_SetConfig+0xe4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01b      	beq.n	800571e <TIM_Base_SetConfig+0x8a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ec:	d017      	beq.n	800571e <TIM_Base_SetConfig+0x8a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a22      	ldr	r2, [pc, #136]	; (800577c <TIM_Base_SetConfig+0xe8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d013      	beq.n	800571e <TIM_Base_SetConfig+0x8a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a21      	ldr	r2, [pc, #132]	; (8005780 <TIM_Base_SetConfig+0xec>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00f      	beq.n	800571e <TIM_Base_SetConfig+0x8a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a20      	ldr	r2, [pc, #128]	; (8005784 <TIM_Base_SetConfig+0xf0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00b      	beq.n	800571e <TIM_Base_SetConfig+0x8a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1f      	ldr	r2, [pc, #124]	; (8005788 <TIM_Base_SetConfig+0xf4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_Base_SetConfig+0x8a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1e      	ldr	r2, [pc, #120]	; (800578c <TIM_Base_SetConfig+0xf8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_Base_SetConfig+0x8a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <TIM_Base_SetConfig+0xfc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d108      	bne.n	8005730 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a08      	ldr	r2, [pc, #32]	; (8005778 <TIM_Base_SetConfig+0xe4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d103      	bne.n	8005764 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	615a      	str	r2, [r3, #20]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800

08005794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	4603      	mov	r3, r0
 80057c6:	81fb      	strh	r3, [r7, #14]
 80057c8:	460b      	mov	r3, r1
 80057ca:	81bb      	strh	r3, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80057d4:	f000 fd06 	bl	80061e4 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80057d8:	89fb      	ldrh	r3, [r7, #14]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2201      	movs	r2, #1
 80057de:	2102      	movs	r1, #2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fb01 	bl	8005de8 <CODEC_IO_Write>
 80057e6:	4603      	mov	r3, r0
 80057e8:	461a      	mov	r2, r3
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	4413      	add	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80057f0:	89bb      	ldrh	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d81b      	bhi.n	8005830 <cs43l22_Init+0x74>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <cs43l22_Init+0x44>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005811 	.word	0x08005811
 8005804:	08005819 	.word	0x08005819
 8005808:	08005821 	.word	0x08005821
 800580c:	08005829 	.word	0x08005829
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8005810:	4b5b      	ldr	r3, [pc, #364]	; (8005980 <cs43l22_Init+0x1c4>)
 8005812:	22fa      	movs	r2, #250	; 0xfa
 8005814:	701a      	strb	r2, [r3, #0]
    break;
 8005816:	e00f      	b.n	8005838 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <cs43l22_Init+0x1c4>)
 800581a:	22af      	movs	r2, #175	; 0xaf
 800581c:	701a      	strb	r2, [r3, #0]
    break;
 800581e:	e00b      	b.n	8005838 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8005820:	4b57      	ldr	r3, [pc, #348]	; (8005980 <cs43l22_Init+0x1c4>)
 8005822:	22aa      	movs	r2, #170	; 0xaa
 8005824:	701a      	strb	r2, [r3, #0]
    break;
 8005826:	e007      	b.n	8005838 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8005828:	4b55      	ldr	r3, [pc, #340]	; (8005980 <cs43l22_Init+0x1c4>)
 800582a:	2205      	movs	r2, #5
 800582c:	701a      	strb	r2, [r3, #0]
    break;    
 800582e:	e003      	b.n	8005838 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8005830:	4b53      	ldr	r3, [pc, #332]	; (8005980 <cs43l22_Init+0x1c4>)
 8005832:	2205      	movs	r2, #5
 8005834:	701a      	strb	r2, [r3, #0]
    break;    
 8005836:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8005838:	89fb      	ldrh	r3, [r7, #14]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	4a50      	ldr	r2, [pc, #320]	; (8005980 <cs43l22_Init+0x1c4>)
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	2104      	movs	r1, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f000 facf 	bl	8005de8 <CODEC_IO_Write>
 800584a:	4603      	mov	r3, r0
 800584c:	461a      	mov	r2, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8005854:	89fb      	ldrh	r3, [r7, #14]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2281      	movs	r2, #129	; 0x81
 800585a:	2105      	movs	r1, #5
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fac3 	bl	8005de8 <CODEC_IO_Write>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	4413      	add	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 800586c:	89fb      	ldrh	r3, [r7, #14]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2204      	movs	r2, #4
 8005872:	2106      	movs	r1, #6
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fab7 	bl	8005de8 <CODEC_IO_Write>
 800587a:	4603      	mov	r3, r0
 800587c:	461a      	mov	r2, r3
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	4413      	add	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8005884:	7afa      	ldrb	r2, [r7, #11]
 8005886:	89fb      	ldrh	r3, [r7, #14]
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f964 	bl	8005b58 <cs43l22_SetVolume>
 8005890:	4602      	mov	r2, r0
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8005898:	89bb      	ldrh	r3, [r7, #12]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d023      	beq.n	80058e6 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800589e:	89fb      	ldrh	r3, [r7, #14]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2206      	movs	r2, #6
 80058a4:	210f      	movs	r1, #15
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fa9e 	bl	8005de8 <CODEC_IO_Write>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80058b6:	89fb      	ldrh	r3, [r7, #14]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2200      	movs	r2, #0
 80058bc:	2124      	movs	r1, #36	; 0x24
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fa92 	bl	8005de8 <CODEC_IO_Write>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80058ce:	89fb      	ldrh	r3, [r7, #14]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2200      	movs	r2, #0
 80058d4:	2125      	movs	r1, #37	; 0x25
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fa86 	bl	8005de8 <CODEC_IO_Write>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	4413      	add	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80058e6:	89fb      	ldrh	r3, [r7, #14]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2200      	movs	r2, #0
 80058ec:	210a      	movs	r1, #10
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fa7a 	bl	8005de8 <CODEC_IO_Write>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4413      	add	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80058fe:	89fb      	ldrh	r3, [r7, #14]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2204      	movs	r2, #4
 8005904:	210e      	movs	r1, #14
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa6e 	bl	8005de8 <CODEC_IO_Write>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4413      	add	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8005916:	89fb      	ldrh	r3, [r7, #14]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2200      	movs	r2, #0
 800591c:	2127      	movs	r1, #39	; 0x27
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fa62 	bl	8005de8 <CODEC_IO_Write>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800592e:	89fb      	ldrh	r3, [r7, #14]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	220f      	movs	r2, #15
 8005934:	211f      	movs	r1, #31
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fa56 	bl	8005de8 <CODEC_IO_Write>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8005946:	89fb      	ldrh	r3, [r7, #14]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	220a      	movs	r2, #10
 800594c:	211a      	movs	r1, #26
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fa4a 	bl	8005de8 <CODEC_IO_Write>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4413      	add	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800595e:	89fb      	ldrh	r3, [r7, #14]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	220a      	movs	r2, #10
 8005964:	211b      	movs	r1, #27
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa3e 	bl	8005de8 <CODEC_IO_Write>
 800596c:	4603      	mov	r3, r0
 800596e:	461a      	mov	r2, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4413      	add	r3, r2
 8005974:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000de0 	.word	0x20000de0

08005984 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8005988:	f000 fc64 	bl	8006254 <AUDIO_IO_DeInit>
}
 800598c:	bf00      	nop
 800598e:	bd80      	pop	{r7, pc}

08005990 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 800599a:	f000 fc23 	bl	80061e4 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2101      	movs	r1, #1
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fc70 	bl	800628a <AUDIO_IO_Read>
 80059aa:	4603      	mov	r3, r0
 80059ac:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	f023 0307 	bic.w	r3, r3, #7
 80059b4:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	6039      	str	r1, [r7, #0]
 80059ca:	80fb      	strh	r3, [r7, #6]
 80059cc:	4613      	mov	r3, r2
 80059ce:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80059d4:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <cs43l22_Play+0x70>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d123      	bne.n	8005a24 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2206      	movs	r2, #6
 80059e2:	210e      	movs	r1, #14
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f9ff 	bl	8005de8 <CODEC_IO_Write>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f919 	bl	8005c30 <cs43l22_SetMute>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	229e      	movs	r2, #158	; 0x9e
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f9ea 	bl	8005de8 <CODEC_IO_Write>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8005a1e:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <cs43l22_Play+0x70>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8005a24:	68fb      	ldr	r3, [r7, #12]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	2000005c 	.word	0x2000005c

08005a34 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	2101      	movs	r1, #1
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f8f2 	bl	8005c30 <cs43l22_SetMute>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2201      	movs	r2, #1
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 f9c3 	bl	8005de8 <CODEC_IO_Write>
 8005a62:	4603      	mov	r3, r0
 8005a64:	461a      	mov	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 f8ce 	bl	8005c30 <cs43l22_SetMute>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	e002      	b.n	8005aa8 <cs43l22_Resume+0x30>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2bfe      	cmp	r3, #254	; 0xfe
 8005aac:	d9f9      	bls.n	8005aa2 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <cs43l22_Resume+0x74>)
 8005ab4:	7812      	ldrb	r2, [r2, #0]
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	2104      	movs	r1, #4
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f994 	bl	8005de8 <CODEC_IO_Write>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	229e      	movs	r2, #158	; 0x9e
 8005ad0:	2102      	movs	r1, #2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f988 	bl	8005de8 <CODEC_IO_Write>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20000de0 	.word	0x20000de0

08005af0 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	6039      	str	r1, [r7, #0]
 8005afa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	2101      	movs	r1, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 f893 	bl	8005c30 <cs43l22_SetMute>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2204      	movs	r2, #4
 8005b18:	210e      	movs	r1, #14
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f964 	bl	8005de8 <CODEC_IO_Write>
 8005b20:	4603      	mov	r3, r0
 8005b22:	461a      	mov	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	229f      	movs	r2, #159	; 0x9f
 8005b30:	2102      	movs	r1, #2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f958 	bl	8005de8 <CODEC_IO_Write>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <cs43l22_Stop+0x64>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]
  return counter;    
 8005b48:	68fb      	ldr	r3, [r7, #12]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	2000005c 	.word	0x2000005c

08005b58 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	460a      	mov	r2, r1
 8005b62:	80fb      	strh	r3, [r7, #6]
 8005b64:	4613      	mov	r3, r2
 8005b66:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005b6c:	797b      	ldrb	r3, [r7, #5]
 8005b6e:	2b64      	cmp	r3, #100	; 0x64
 8005b70:	d80b      	bhi.n	8005b8a <cs43l22_SetVolume+0x32>
 8005b72:	797a      	ldrb	r2, [r7, #5]
 8005b74:	4613      	mov	r3, r2
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <cs43l22_SetVolume+0xb8>)
 8005b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8005b80:	1152      	asrs	r2, r2, #5
 8005b82:	17db      	asrs	r3, r3, #31
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	e000      	b.n	8005b8c <cs43l22_SetVolume+0x34>
 8005b8a:	23ff      	movs	r3, #255	; 0xff
 8005b8c:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	2be6      	cmp	r3, #230	; 0xe6
 8005b92:	d91c      	bls.n	8005bce <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	b2d8      	uxtb	r0, r3
 8005b98:	7afb      	ldrb	r3, [r7, #11]
 8005b9a:	3319      	adds	r3, #25
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2120      	movs	r1, #32
 8005ba2:	f000 f921 	bl	8005de8 <CODEC_IO_Write>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	b2d8      	uxtb	r0, r3
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	3319      	adds	r3, #25
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	2121      	movs	r1, #33	; 0x21
 8005bbe:	f000 f913 	bl	8005de8 <CODEC_IO_Write>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e01b      	b.n	8005c06 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	b2d8      	uxtb	r0, r3
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	3319      	adds	r3, #25
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2120      	movs	r1, #32
 8005bdc:	f000 f904 	bl	8005de8 <CODEC_IO_Write>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	b2d8      	uxtb	r0, r3
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	3319      	adds	r3, #25
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2121      	movs	r1, #33	; 0x21
 8005bf8:	f000 f8f6 	bl	8005de8 <CODEC_IO_Write>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	51eb851f 	.word	0x51eb851f

08005c14 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	6039      	str	r1, [r7, #0]
 8005c3a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d124      	bne.n	8005c90 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	22ff      	movs	r2, #255	; 0xff
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f8ca 	bl	8005de8 <CODEC_IO_Write>
 8005c54:	4603      	mov	r3, r0
 8005c56:	461a      	mov	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2201      	movs	r2, #1
 8005c64:	2122      	movs	r1, #34	; 0x22
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f8be 	bl	8005de8 <CODEC_IO_Write>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	2123      	movs	r1, #35	; 0x23
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 f8b2 	bl	8005de8 <CODEC_IO_Write>
 8005c84:	4603      	mov	r3, r0
 8005c86:	461a      	mov	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e025      	b.n	8005cdc <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2200      	movs	r2, #0
 8005c96:	2122      	movs	r1, #34	; 0x22
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 f8a5 	bl	8005de8 <CODEC_IO_Write>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2200      	movs	r2, #0
 8005cae:	2123      	movs	r1, #35	; 0x23
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f899 	bl	8005de8 <CODEC_IO_Write>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <cs43l22_SetMute+0xb8>)
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	2104      	movs	r1, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f88b 	bl	8005de8 <CODEC_IO_Write>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000de0 	.word	0x20000de0

08005cec <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	460a      	mov	r2, r1
 8005cf6:	80fb      	strh	r3, [r7, #6]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8005d00:	797b      	ldrb	r3, [r7, #5]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d84b      	bhi.n	8005da0 <cs43l22_SetOutputMode+0xb4>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <cs43l22_SetOutputMode+0x24>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d21 	.word	0x08005d21
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	08005d61 	.word	0x08005d61
 8005d1c:	08005d81 	.word	0x08005d81
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	22fa      	movs	r2, #250	; 0xfa
 8005d26:	2104      	movs	r1, #4
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 f85d 	bl	8005de8 <CODEC_IO_Write>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	461a      	mov	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <cs43l22_SetOutputMode+0xe0>)
 8005d3a:	22fa      	movs	r2, #250	; 0xfa
 8005d3c:	701a      	strb	r2, [r3, #0]
      break;
 8005d3e:	e03f      	b.n	8005dc0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	22af      	movs	r2, #175	; 0xaf
 8005d46:	2104      	movs	r1, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f84d 	bl	8005de8 <CODEC_IO_Write>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	461a      	mov	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8005d58:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <cs43l22_SetOutputMode+0xe0>)
 8005d5a:	22af      	movs	r2, #175	; 0xaf
 8005d5c:	701a      	strb	r2, [r3, #0]
      break;
 8005d5e:	e02f      	b.n	8005dc0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	22aa      	movs	r2, #170	; 0xaa
 8005d66:	2104      	movs	r1, #4
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 f83d 	bl	8005de8 <CODEC_IO_Write>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	461a      	mov	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8005d78:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <cs43l22_SetOutputMode+0xe0>)
 8005d7a:	22aa      	movs	r2, #170	; 0xaa
 8005d7c:	701a      	strb	r2, [r3, #0]
      break;
 8005d7e:	e01f      	b.n	8005dc0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2205      	movs	r2, #5
 8005d86:	2104      	movs	r1, #4
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f82d 	bl	8005de8 <CODEC_IO_Write>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	461a      	mov	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <cs43l22_SetOutputMode+0xe0>)
 8005d9a:	2205      	movs	r2, #5
 8005d9c:	701a      	strb	r2, [r3, #0]
      break;    
 8005d9e:	e00f      	b.n	8005dc0 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2205      	movs	r2, #5
 8005da6:	2104      	movs	r1, #4
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 f81d 	bl	8005de8 <CODEC_IO_Write>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8005db8:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <cs43l22_SetOutputMode+0xe0>)
 8005dba:	2205      	movs	r2, #5
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	bf00      	nop
  }  
  return counter;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000de0 	.word	0x20000de0

08005dd0 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	80fb      	strh	r3, [r7, #6]
  return 0;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	71fb      	strb	r3, [r7, #7]
 8005df2:	460b      	mov	r3, r1
 8005df4:	71bb      	strb	r3, [r7, #6]
 8005df6:	4613      	mov	r3, r2
 8005df8:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8005dfe:	797a      	ldrb	r2, [r7, #5]
 8005e00:	79b9      	ldrb	r1, [r7, #6]
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fa2c 	bl	8006262 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	b2db      	uxtb	r3, r3
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08c      	sub	sp, #48	; 0x30
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10e      	bne.n	8005e46 <BSP_LED_Init+0x2e>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	4b33      	ldr	r3, [pc, #204]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	4a32      	ldr	r2, [pc, #200]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e32:	f043 0308 	orr.w	r3, r3, #8
 8005e36:	6313      	str	r3, [r2, #48]	; 0x30
 8005e38:	4b30      	ldr	r3, [pc, #192]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	e034      	b.n	8005eb0 <BSP_LED_Init+0x98>
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10e      	bne.n	8005e6a <BSP_LED_Init+0x52>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	4a29      	ldr	r2, [pc, #164]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e56:	f043 0308 	orr.w	r3, r3, #8
 8005e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5c:	4b27      	ldr	r3, [pc, #156]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	e022      	b.n	8005eb0 <BSP_LED_Init+0x98>
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d10e      	bne.n	8005e8e <BSP_LED_Init+0x76>
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	4b21      	ldr	r3, [pc, #132]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	4a20      	ldr	r2, [pc, #128]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e7a:	f043 0308 	orr.w	r3, r3, #8
 8005e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e80:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	e010      	b.n	8005eb0 <BSP_LED_Init+0x98>
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d10d      	bne.n	8005eb0 <BSP_LED_Init+0x98>
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	4b18      	ldr	r3, [pc, #96]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	4a17      	ldr	r2, [pc, #92]	; (8005efc <BSP_LED_Init+0xe4>)
 8005e9e:	f043 0308 	orr.w	r3, r3, #8
 8005ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea4:	4b15      	ldr	r3, [pc, #84]	; (8005efc <BSP_LED_Init+0xe4>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <BSP_LED_Init+0xe8>)
 8005eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	4a0e      	ldr	r2, [pc, #56]	; (8005f04 <BSP_LED_Init+0xec>)
 8005eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ece:	f107 021c 	add.w	r2, r7, #28
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fc fba9 	bl	800262c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <BSP_LED_Init+0xec>)
 8005ede:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <BSP_LED_Init+0xe8>)
 8005ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eea:	2200      	movs	r2, #0
 8005eec:	4619      	mov	r1, r3
 8005eee:	f7fc fe1d 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8005ef2:	bf00      	nop
 8005ef4:	3730      	adds	r7, #48	; 0x30
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	080090c8 	.word	0x080090c8
 8005f04:	20000060 	.word	0x20000060

08005f08 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	4a07      	ldr	r2, [pc, #28]	; (8005f34 <BSP_LED_On+0x2c>)
 8005f16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	4a06      	ldr	r2, [pc, #24]	; (8005f38 <BSP_LED_On+0x30>)
 8005f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f22:	2201      	movs	r2, #1
 8005f24:	4619      	mov	r1, r3
 8005f26:	f7fc fe01 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000060 	.word	0x20000060
 8005f38:	080090c8 	.word	0x080090c8

08005f3c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	460a      	mov	r2, r1
 8005f46:	71fb      	strb	r3, [r7, #7]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10d      	bne.n	8005f6e <BSP_PB_Init+0x32>
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <BSP_PB_Init+0xa4>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	4a21      	ldr	r2, [pc, #132]	; (8005fe0 <BSP_PB_Init+0xa4>)
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	6313      	str	r3, [r2, #48]	; 0x30
 8005f62:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <BSP_PB_Init+0xa4>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8005f6e:	79bb      	ldrb	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d111      	bne.n	8005f98 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005f74:	2301      	movs	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005f80:	2302      	movs	r3, #2
 8005f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <BSP_PB_Init+0xa8>)
 8005f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8c:	f107 020c 	add.w	r2, r7, #12
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fc fb4a 	bl	800262c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8005f98:	79bb      	ldrb	r3, [r7, #6]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d11c      	bne.n	8005fd8 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8005fa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005faa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	4a0d      	ldr	r2, [pc, #52]	; (8005fe4 <BSP_PB_Init+0xa8>)
 8005fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb4:	f107 020c 	add.w	r2, r7, #12
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fc fb36 	bl	800262c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005fc0:	2306      	movs	r3, #6
 8005fc2:	b25b      	sxtb	r3, r3
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	210f      	movs	r1, #15
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fb ff1c 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005fce:	2306      	movs	r3, #6
 8005fd0:	b25b      	sxtb	r3, r3
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fb ff33 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  }
}
 8005fd8:	bf00      	nop
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	20000070 	.word	0x20000070

08005fe8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	4a06      	ldr	r2, [pc, #24]	; (8006010 <BSP_PB_GetState+0x28>)
 8005ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fc fd7c 	bl	8002afc <HAL_GPIO_ReadPin>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000070 	.word	0x20000070

08006014 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8006018:	4814      	ldr	r0, [pc, #80]	; (800606c <I2Cx_Init+0x58>)
 800601a:	f7fd fa4d 	bl	80034b8 <HAL_I2C_GetState>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d121      	bne.n	8006068 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8006024:	4b11      	ldr	r3, [pc, #68]	; (800606c <I2Cx_Init+0x58>)
 8006026:	4a12      	ldr	r2, [pc, #72]	; (8006070 <I2Cx_Init+0x5c>)
 8006028:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800602a:	4b10      	ldr	r3, [pc, #64]	; (800606c <I2Cx_Init+0x58>)
 800602c:	2243      	movs	r2, #67	; 0x43
 800602e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8006030:	4b0e      	ldr	r3, [pc, #56]	; (800606c <I2Cx_Init+0x58>)
 8006032:	4a10      	ldr	r2, [pc, #64]	; (8006074 <I2Cx_Init+0x60>)
 8006034:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006036:	4b0d      	ldr	r3, [pc, #52]	; (800606c <I2Cx_Init+0x58>)
 8006038:	2200      	movs	r2, #0
 800603a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800603c:	4b0b      	ldr	r3, [pc, #44]	; (800606c <I2Cx_Init+0x58>)
 800603e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006042:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <I2Cx_Init+0x58>)
 8006046:	2200      	movs	r2, #0
 8006048:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <I2Cx_Init+0x58>)
 800604c:	2200      	movs	r2, #0
 800604e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <I2Cx_Init+0x58>)
 8006052:	2200      	movs	r2, #0
 8006054:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <I2Cx_Init+0x58>)
 8006058:	2200      	movs	r2, #0
 800605a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800605c:	4803      	ldr	r0, [pc, #12]	; (800606c <I2Cx_Init+0x58>)
 800605e:	f000 f86b 	bl	8006138 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8006062:	4802      	ldr	r0, [pc, #8]	; (800606c <I2Cx_Init+0x58>)
 8006064:	f7fc fd94 	bl	8002b90 <HAL_I2C_Init>
  }
}
 8006068:	bf00      	nop
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20000de4 	.word	0x20000de4
 8006070:	40005400 	.word	0x40005400
 8006074:	000186a0 	.word	0x000186a0

08006078 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af04      	add	r7, sp, #16
 800607e:	4603      	mov	r3, r0
 8006080:	80fb      	strh	r3, [r7, #6]
 8006082:	460b      	mov	r3, r1
 8006084:	717b      	strb	r3, [r7, #5]
 8006086:	4613      	mov	r3, r2
 8006088:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800608e:	797b      	ldrb	r3, [r7, #5]
 8006090:	b29a      	uxth	r2, r3
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <I2Cx_WriteData+0x48>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	88f9      	ldrh	r1, [r7, #6]
 8006098:	9302      	str	r3, [sp, #8]
 800609a:	2301      	movs	r3, #1
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	2301      	movs	r3, #1
 80060a4:	4807      	ldr	r0, [pc, #28]	; (80060c4 <I2Cx_WriteData+0x4c>)
 80060a6:	f7fc fee7 	bl	8002e78 <HAL_I2C_Mem_Write>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80060b4:	f000 f834 	bl	8006120 <I2Cx_Error>
  }
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000074 	.word	0x20000074
 80060c4:	20000de4 	.word	0x20000de4

080060c8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af04      	add	r7, sp, #16
 80060ce:	4603      	mov	r3, r0
 80060d0:	460a      	mov	r2, r1
 80060d2:	80fb      	strh	r3, [r7, #6]
 80060d4:	4613      	mov	r3, r2
 80060d6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80060e0:	797b      	ldrb	r3, [r7, #5]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <I2Cx_ReadData+0x50>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	88f9      	ldrh	r1, [r7, #6]
 80060ea:	9302      	str	r3, [sp, #8]
 80060ec:	2301      	movs	r3, #1
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	f107 030e 	add.w	r3, r7, #14
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	2301      	movs	r3, #1
 80060f8:	4808      	ldr	r0, [pc, #32]	; (800611c <I2Cx_ReadData+0x54>)
 80060fa:	f7fc ffb7 	bl	800306c <HAL_I2C_Mem_Read>
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8006108:	f000 f80a 	bl	8006120 <I2Cx_Error>
  }
  return value;
 800610c:	7bbb      	ldrb	r3, [r7, #14]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000074 	.word	0x20000074
 800611c:	20000de4 	.word	0x20000de4

08006120 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8006124:	4803      	ldr	r0, [pc, #12]	; (8006134 <I2Cx_Error+0x14>)
 8006126:	f7fc fe77 	bl	8002e18 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800612a:	f7ff ff73 	bl	8006014 <I2Cx_Init>
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000de4 	.word	0x20000de4

08006138 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	4b25      	ldr	r3, [pc, #148]	; (80061dc <I2Cx_MspInit+0xa4>)
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	4a24      	ldr	r2, [pc, #144]	; (80061dc <I2Cx_MspInit+0xa4>)
 800614a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800614e:	6413      	str	r3, [r2, #64]	; 0x40
 8006150:	4b22      	ldr	r3, [pc, #136]	; (80061dc <I2Cx_MspInit+0xa4>)
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <I2Cx_MspInit+0xa4>)
 8006162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006164:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <I2Cx_MspInit+0xa4>)
 8006166:	f043 0302 	orr.w	r3, r3, #2
 800616a:	6313      	str	r3, [r2, #48]	; 0x30
 800616c:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <I2Cx_MspInit+0xa4>)
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8006178:	f44f 7310 	mov.w	r3, #576	; 0x240
 800617c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800617e:	2312      	movs	r3, #18
 8006180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8006186:	2302      	movs	r3, #2
 8006188:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800618a:	2304      	movs	r3, #4
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800618e:	f107 0314 	add.w	r3, r7, #20
 8006192:	4619      	mov	r1, r3
 8006194:	4812      	ldr	r0, [pc, #72]	; (80061e0 <I2Cx_MspInit+0xa8>)
 8006196:	f7fc fa49 	bl	800262c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800619a:	4b10      	ldr	r3, [pc, #64]	; (80061dc <I2Cx_MspInit+0xa4>)
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	4a0f      	ldr	r2, [pc, #60]	; (80061dc <I2Cx_MspInit+0xa4>)
 80061a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061a4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <I2Cx_MspInit+0xa4>)
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <I2Cx_MspInit+0xa4>)
 80061ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061b0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80061b2:	2200      	movs	r2, #0
 80061b4:	210f      	movs	r1, #15
 80061b6:	201f      	movs	r0, #31
 80061b8:	f7fb fe25 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80061bc:	201f      	movs	r0, #31
 80061be:	f7fb fe3e 	bl	8001e3e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80061c2:	2200      	movs	r2, #0
 80061c4:	210f      	movs	r1, #15
 80061c6:	2020      	movs	r0, #32
 80061c8:	f7fb fe1d 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80061cc:	2020      	movs	r0, #32
 80061ce:	f7fb fe36 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 80061d2:	bf00      	nop
 80061d4:	3728      	adds	r7, #40	; 0x28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40020400 	.word	0x40020400

080061e4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4b17      	ldr	r3, [pc, #92]	; (800624c <AUDIO_IO_Init+0x68>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	4a16      	ldr	r2, [pc, #88]	; (800624c <AUDIO_IO_Init+0x68>)
 80061f4:	f043 0308 	orr.w	r3, r3, #8
 80061f8:	6313      	str	r3, [r2, #48]	; 0x30
 80061fa:	4b14      	ldr	r3, [pc, #80]	; (800624c <AUDIO_IO_Init+0x68>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8006206:	2310      	movs	r3, #16
 8006208:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800620a:	2301      	movs	r3, #1
 800620c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800620e:	2302      	movs	r3, #2
 8006210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8006216:	1d3b      	adds	r3, r7, #4
 8006218:	4619      	mov	r1, r3
 800621a:	480d      	ldr	r0, [pc, #52]	; (8006250 <AUDIO_IO_Init+0x6c>)
 800621c:	f7fc fa06 	bl	800262c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8006220:	f7ff fef8 	bl	8006014 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8006224:	2200      	movs	r2, #0
 8006226:	2110      	movs	r1, #16
 8006228:	4809      	ldr	r0, [pc, #36]	; (8006250 <AUDIO_IO_Init+0x6c>)
 800622a:	f7fc fc7f 	bl	8002b2c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800622e:	2005      	movs	r0, #5
 8006230:	f7fb fcc6 	bl	8001bc0 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8006234:	2201      	movs	r2, #1
 8006236:	2110      	movs	r1, #16
 8006238:	4805      	ldr	r0, [pc, #20]	; (8006250 <AUDIO_IO_Init+0x6c>)
 800623a:	f7fc fc77 	bl	8002b2c <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 800623e:	2005      	movs	r0, #5
 8006240:	f7fb fcbe 	bl	8001bc0 <HAL_Delay>
}
 8006244:	bf00      	nop
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40023800 	.word	0x40023800
 8006250:	40020c00 	.word	0x40020c00

08006254 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  
}
 8006258:	bf00      	nop
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	4603      	mov	r3, r0
 800626a:	71fb      	strb	r3, [r7, #7]
 800626c:	460b      	mov	r3, r1
 800626e:	71bb      	strb	r3, [r7, #6]
 8006270:	4613      	mov	r3, r2
 8006272:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	b29b      	uxth	r3, r3
 8006278:	797a      	ldrb	r2, [r7, #5]
 800627a:	79b9      	ldrb	r1, [r7, #6]
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fefb 	bl	8006078 <I2Cx_WriteData>
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	4603      	mov	r3, r0
 8006292:	460a      	mov	r2, r1
 8006294:	71fb      	strb	r3, [r7, #7]
 8006296:	4613      	mov	r3, r2
 8006298:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	b29b      	uxth	r3, r3
 800629e:	79ba      	ldrb	r2, [r7, #6]
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff ff10 	bl	80060c8 <I2Cx_ReadData>
 80062a8:	4603      	mov	r3, r0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <BSP_AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	4603      	mov	r3, r0
 80062bc:	603a      	str	r2, [r7, #0]
 80062be:	80fb      	strh	r3, [r7, #6]
 80062c0:	460b      	mov	r3, r1
 80062c2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80062c8:	2200      	movs	r2, #0
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	481c      	ldr	r0, [pc, #112]	; (8006340 <BSP_AUDIO_OUT_Init+0x8c>)
 80062ce:	f000 f89f 	bl	8006410 <BSP_AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80062d2:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <BSP_AUDIO_OUT_Init+0x8c>)
 80062d4:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <BSP_AUDIO_OUT_Init+0x90>)
 80062d6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80062d8:	4819      	ldr	r0, [pc, #100]	; (8006340 <BSP_AUDIO_OUT_Init+0x8c>)
 80062da:	f7fd fe3f 	bl	8003f5c <HAL_I2S_GetState>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <BSP_AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80062e4:	2100      	movs	r1, #0
 80062e6:	4816      	ldr	r0, [pc, #88]	; (8006340 <BSP_AUDIO_OUT_Init+0x8c>)
 80062e8:	f000 f8f0 	bl	80064cc <BSP_AUDIO_OUT_MspInit>
  }
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80062ec:	6838      	ldr	r0, [r7, #0]
 80062ee:	f000 f9b5 	bl	800665c <I2S3_Init>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <BSP_AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
  }
  
  if(ret == AUDIO_OK)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10e      	bne.n	8006320 <BSP_AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8006302:	4b11      	ldr	r3, [pc, #68]	; (8006348 <BSP_AUDIO_OUT_Init+0x94>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2094      	movs	r0, #148	; 0x94
 8006308:	4798      	blx	r3
 800630a:	4603      	mov	r3, r0
 800630c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8006310:	2be0      	cmp	r3, #224	; 0xe0
 8006312:	d103      	bne.n	800631c <BSP_AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <BSP_AUDIO_OUT_Init+0x98>)
 8006316:	4a0c      	ldr	r2, [pc, #48]	; (8006348 <BSP_AUDIO_OUT_Init+0x94>)
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e001      	b.n	8006320 <BSP_AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d107      	bne.n	8006336 <BSP_AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <BSP_AUDIO_OUT_Init+0x98>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681c      	ldr	r4, [r3, #0]
 800632c:	797a      	ldrb	r2, [r7, #5]
 800632e:	88f9      	ldrh	r1, [r7, #6]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2094      	movs	r0, #148	; 0x94
 8006334:	47a0      	blx	r4
  }
  
  return ret;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	bd90      	pop	{r4, r7, pc}
 8006340:	20000e3c 	.word	0x20000e3c
 8006344:	40003c00 	.word	0x40003c00
 8006348:	2000002c 	.word	0x2000002c
 800634c:	20000e38 	.word	0x20000e38

08006350 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800635a:	4b10      	ldr	r3, [pc, #64]	; (800639c <BSP_AUDIO_OUT_Play+0x4c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	b292      	uxth	r2, r2
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	2094      	movs	r0, #148	; 0x94
 8006368:	4798      	blx	r3
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <BSP_AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e00f      	b.n	8006394 <BSP_AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800637a:	d203      	bcs.n	8006384 <BSP_AUDIO_OUT_Play+0x34>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	e001      	b.n	8006388 <BSP_AUDIO_OUT_Play+0x38>
 8006384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006388:	461a      	mov	r2, r3
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4804      	ldr	r0, [pc, #16]	; (80063a0 <BSP_AUDIO_OUT_Play+0x50>)
 800638e:	f7fd fd3d 	bl	8003e0c <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8006392:	2300      	movs	r3, #0
  }
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000e38 	.word	0x20000e38
 80063a0:	20000e3c 	.word	0x20000e3c

080063a4 <BSP_AUDIO_OUT_ChangeBuffer>:
  * @brief  Sends n-Bytes on the I2S interface.
  * @param  pData: Pointer to data address 
  * @param  Size: Number of data to be written
  */
void BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	807b      	strh	r3, [r7, #2]
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 80063b0:	887b      	ldrh	r3, [r7, #2]
 80063b2:	461a      	mov	r2, r3
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4803      	ldr	r0, [pc, #12]	; (80063c4 <BSP_AUDIO_OUT_ChangeBuffer+0x20>)
 80063b8:	f7fd fd28 	bl	8003e0c <HAL_I2S_Transmit_DMA>
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000e3c 	.word	0x20000e3c

080063c8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <HAL_I2S_TxCpltCallback+0x20>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d101      	bne.n	80063de <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80063da:	f7fb f87f 	bl	80014dc <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	40003c00 	.word	0x40003c00

080063ec <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a04      	ldr	r2, [pc, #16]	; (800640c <HAL_I2S_TxHalfCpltCallback+0x20>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80063fe:	f000 f925 	bl	800664c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	40003c00 	.word	0x40003c00

08006410 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8006410:	b580      	push	{r7, lr}
 8006412:	b08c      	sub	sp, #48	; 0x30
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 800641c:	2300      	movs	r3, #0
 800641e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006422:	23ff      	movs	r3, #255	; 0xff
 8006424:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 8006428:	2300      	movs	r3, #0
 800642a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800642e:	e010      	b.n	8006452 <BSP_AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8006430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006434:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <BSP_AUDIO_OUT_ClockConfig+0xb0>)
 8006436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	d103      	bne.n	8006448 <BSP_AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8006440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006444:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 8006448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800644c:	3301      	adds	r3, #1
 800644e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006456:	2b07      	cmp	r3, #7
 8006458:	d9ea      	bls.n	8006430 <BSP_AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe fe94 	bl	800518c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8006464:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	2b00      	cmp	r3, #0
 800646e:	d115      	bne.n	800649c <BSP_AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8006474:	2308      	movs	r3, #8
 8006476:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8006478:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800647c:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <BSP_AUDIO_OUT_ClockConfig+0xb4>)
 800647e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006482:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8006484:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006488:	4a0f      	ldr	r2, [pc, #60]	; (80064c8 <BSP_AUDIO_OUT_ClockConfig+0xb8>)
 800648a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648e:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	4618      	mov	r0, r3
 8006496:	f7fe fd89 	bl	8004fac <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800649a:	e00d      	b.n	80064b8 <BSP_AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800649c:	2301      	movs	r3, #1
 800649e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80064a0:	2308      	movs	r3, #8
 80064a2:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80064a4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80064a8:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80064aa:	2303      	movs	r3, #3
 80064ac:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80064ae:	f107 0314 	add.w	r3, r7, #20
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fd7a 	bl	8004fac <HAL_RCCEx_PeriphCLKConfig>
}
 80064b8:	bf00      	nop
 80064ba:	3730      	adds	r7, #48	; 0x30
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	080090d0 	.word	0x080090d0
 80064c4:	080090f0 	.word	0x080090f0
 80064c8:	08009110 	.word	0x08009110

080064cc <BSP_AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	4b56      	ldr	r3, [pc, #344]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	4a55      	ldr	r2, [pc, #340]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e4:	6413      	str	r3, [r2, #64]	; 0x40
 80064e6:	4b53      	ldr	r3, [pc, #332]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	4b4f      	ldr	r3, [pc, #316]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	4a4e      	ldr	r2, [pc, #312]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 80064fc:	f043 0304 	orr.w	r3, r3, #4
 8006500:	6313      	str	r3, [r2, #48]	; 0x30
 8006502:	4b4c      	ldr	r3, [pc, #304]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800650e:	2300      	movs	r3, #0
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	4b48      	ldr	r3, [pc, #288]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	4a47      	ldr	r2, [pc, #284]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	6313      	str	r3, [r2, #48]	; 0x30
 800651e:	4b45      	ldr	r3, [pc, #276]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 800652a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800652e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8006530:	2302      	movs	r3, #2
 8006532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8006534:	2300      	movs	r3, #0
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8006538:	2302      	movs	r3, #2
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800653c:	2306      	movs	r3, #6
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8006540:	f107 031c 	add.w	r3, r7, #28
 8006544:	4619      	mov	r1, r3
 8006546:	483c      	ldr	r0, [pc, #240]	; (8006638 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8006548:	f7fc f870 	bl	800262c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800654c:	2310      	movs	r3, #16
 800654e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8006550:	f107 031c 	add.w	r3, r7, #28
 8006554:	4619      	mov	r1, r3
 8006556:	4839      	ldr	r0, [pc, #228]	; (800663c <BSP_AUDIO_OUT_MspInit+0x170>)
 8006558:	f7fc f868 	bl	800262c <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	4b34      	ldr	r3, [pc, #208]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	4a33      	ldr	r2, [pc, #204]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006566:	f043 0304 	orr.w	r3, r3, #4
 800656a:	6313      	str	r3, [r2, #48]	; 0x30
 800656c:	4b31      	ldr	r3, [pc, #196]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8006578:	2380      	movs	r3, #128	; 0x80
 800657a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800657c:	f107 031c 	add.w	r3, r7, #28
 8006580:	4619      	mov	r1, r3
 8006582:	482d      	ldr	r0, [pc, #180]	; (8006638 <BSP_AUDIO_OUT_MspInit+0x16c>)
 8006584:	f7fc f852 	bl	800262c <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8006588:	2300      	movs	r3, #0
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	4b29      	ldr	r3, [pc, #164]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	4a28      	ldr	r2, [pc, #160]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 8006592:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006596:	6313      	str	r3, [r2, #48]	; 0x30
 8006598:	4b26      	ldr	r3, [pc, #152]	; (8006634 <BSP_AUDIO_OUT_MspInit+0x168>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065a0:	60bb      	str	r3, [r7, #8]
 80065a2:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a25      	ldr	r2, [pc, #148]	; (8006640 <BSP_AUDIO_OUT_MspInit+0x174>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d136      	bne.n	800661c <BSP_AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80065ae:	4b25      	ldr	r3, [pc, #148]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80065b4:	4b23      	ldr	r3, [pc, #140]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065b6:	2240      	movs	r2, #64	; 0x40
 80065b8:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80065ba:	4b22      	ldr	r3, [pc, #136]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065bc:	2200      	movs	r2, #0
 80065be:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80065c0:	4b20      	ldr	r3, [pc, #128]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065c6:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80065c8:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ce:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80065d0:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065d6:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80065d8:	4b1a      	ldr	r3, [pc, #104]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065da:	2200      	movs	r2, #0
 80065dc:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80065de:	4b19      	ldr	r3, [pc, #100]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065e4:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065e8:	2204      	movs	r2, #4
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80065ec:	4b15      	ldr	r3, [pc, #84]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065ee:	2203      	movs	r2, #3
 80065f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80065f8:	4b12      	ldr	r3, [pc, #72]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 8006600:	4a11      	ldr	r2, [pc, #68]	; (8006648 <BSP_AUDIO_OUT_MspInit+0x17c>)
 8006602:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a0f      	ldr	r2, [pc, #60]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 8006608:	639a      	str	r2, [r3, #56]	; 0x38
 800660a:	4a0e      	ldr	r2, [pc, #56]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8006610:	480c      	ldr	r0, [pc, #48]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 8006612:	f7fb fceb 	bl	8001fec <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8006616:	480b      	ldr	r0, [pc, #44]	; (8006644 <BSP_AUDIO_OUT_MspInit+0x178>)
 8006618:	f7fb fc3a 	bl	8001e90 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800661c:	2200      	movs	r2, #0
 800661e:	210e      	movs	r1, #14
 8006620:	202f      	movs	r0, #47	; 0x2f
 8006622:	f7fb fbf0 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8006626:	202f      	movs	r0, #47	; 0x2f
 8006628:	f7fb fc09 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 800662c:	bf00      	nop
 800662e:	3730      	adds	r7, #48	; 0x30
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40023800 	.word	0x40023800
 8006638:	40020800 	.word	0x40020800
 800663c:	40020000 	.word	0x40020000
 8006640:	40003c00 	.word	0x40003c00
 8006644:	20000ecc 	.word	0x20000ecc
 8006648:	400260b8 	.word	0x400260b8

0800664c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
}
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8006664:	4b17      	ldr	r3, [pc, #92]	; (80066c4 <I2S3_Init+0x68>)
 8006666:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <I2S3_Init+0x6c>)
 8006668:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800666a:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <I2S3_Init+0x68>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <I2S3_Init+0x68>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006678:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800667a:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <I2S3_Init+0x68>)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8006680:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <I2S3_Init+0x68>)
 8006682:	2200      	movs	r2, #0
 8006684:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8006686:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <I2S3_Init+0x68>)
 8006688:	2200      	movs	r2, #0
 800668a:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <I2S3_Init+0x68>)
 800668e:	2200      	movs	r2, #0
 8006690:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8006692:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <I2S3_Init+0x68>)
 8006694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006698:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <I2S3_Init+0x68>)
 800669c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a0:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <I2S3_Init+0x68>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80066a8:	4806      	ldr	r0, [pc, #24]	; (80066c4 <I2S3_Init+0x68>)
 80066aa:	f7fd fa6f 	bl	8003b8c <HAL_I2S_Init>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 80066b8:	2300      	movs	r3, #0
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000e3c 	.word	0x20000e3c
 80066c8:	40003c00 	.word	0x40003c00

080066cc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80066d4:	f7fa fbf4 	bl	8000ec0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a07      	ldr	r2, [pc, #28]	; (800670c <HAL_I2S_ErrorCallback+0x2c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d101      	bne.n	80066f6 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80066f2:	f7fa fbdf 	bl	8000eb4 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a05      	ldr	r2, [pc, #20]	; (8006710 <HAL_I2S_ErrorCallback+0x30>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d101      	bne.n	8006704 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8006700:	f7fa fbea 	bl	8000ed8 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40003c00 	.word	0x40003c00
 8006710:	40003800 	.word	0x40003800

08006714 <__cvt>:
 8006714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	ec55 4b10 	vmov	r4, r5, d0
 800671c:	2d00      	cmp	r5, #0
 800671e:	460e      	mov	r6, r1
 8006720:	4619      	mov	r1, r3
 8006722:	462b      	mov	r3, r5
 8006724:	bfbb      	ittet	lt
 8006726:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800672a:	461d      	movlt	r5, r3
 800672c:	2300      	movge	r3, #0
 800672e:	232d      	movlt	r3, #45	; 0x2d
 8006730:	700b      	strb	r3, [r1, #0]
 8006732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006734:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006738:	4691      	mov	r9, r2
 800673a:	f023 0820 	bic.w	r8, r3, #32
 800673e:	bfbc      	itt	lt
 8006740:	4622      	movlt	r2, r4
 8006742:	4614      	movlt	r4, r2
 8006744:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006748:	d005      	beq.n	8006756 <__cvt+0x42>
 800674a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800674e:	d100      	bne.n	8006752 <__cvt+0x3e>
 8006750:	3601      	adds	r6, #1
 8006752:	2102      	movs	r1, #2
 8006754:	e000      	b.n	8006758 <__cvt+0x44>
 8006756:	2103      	movs	r1, #3
 8006758:	ab03      	add	r3, sp, #12
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	ab02      	add	r3, sp, #8
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	ec45 4b10 	vmov	d0, r4, r5
 8006764:	4653      	mov	r3, sl
 8006766:	4632      	mov	r2, r6
 8006768:	f000 fe56 	bl	8007418 <_dtoa_r>
 800676c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006770:	4607      	mov	r7, r0
 8006772:	d102      	bne.n	800677a <__cvt+0x66>
 8006774:	f019 0f01 	tst.w	r9, #1
 8006778:	d022      	beq.n	80067c0 <__cvt+0xac>
 800677a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800677e:	eb07 0906 	add.w	r9, r7, r6
 8006782:	d110      	bne.n	80067a6 <__cvt+0x92>
 8006784:	783b      	ldrb	r3, [r7, #0]
 8006786:	2b30      	cmp	r3, #48	; 0x30
 8006788:	d10a      	bne.n	80067a0 <__cvt+0x8c>
 800678a:	2200      	movs	r2, #0
 800678c:	2300      	movs	r3, #0
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7fa f9a1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006796:	b918      	cbnz	r0, 80067a0 <__cvt+0x8c>
 8006798:	f1c6 0601 	rsb	r6, r6, #1
 800679c:	f8ca 6000 	str.w	r6, [sl]
 80067a0:	f8da 3000 	ldr.w	r3, [sl]
 80067a4:	4499      	add	r9, r3
 80067a6:	2200      	movs	r2, #0
 80067a8:	2300      	movs	r3, #0
 80067aa:	4620      	mov	r0, r4
 80067ac:	4629      	mov	r1, r5
 80067ae:	f7fa f993 	bl	8000ad8 <__aeabi_dcmpeq>
 80067b2:	b108      	cbz	r0, 80067b8 <__cvt+0xa4>
 80067b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80067b8:	2230      	movs	r2, #48	; 0x30
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	454b      	cmp	r3, r9
 80067be:	d307      	bcc.n	80067d0 <__cvt+0xbc>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067c4:	1bdb      	subs	r3, r3, r7
 80067c6:	4638      	mov	r0, r7
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	b004      	add	sp, #16
 80067cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	9103      	str	r1, [sp, #12]
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	e7f0      	b.n	80067ba <__cvt+0xa6>

080067d8 <__exponent>:
 80067d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067da:	4603      	mov	r3, r0
 80067dc:	2900      	cmp	r1, #0
 80067de:	bfb8      	it	lt
 80067e0:	4249      	neglt	r1, r1
 80067e2:	f803 2b02 	strb.w	r2, [r3], #2
 80067e6:	bfb4      	ite	lt
 80067e8:	222d      	movlt	r2, #45	; 0x2d
 80067ea:	222b      	movge	r2, #43	; 0x2b
 80067ec:	2909      	cmp	r1, #9
 80067ee:	7042      	strb	r2, [r0, #1]
 80067f0:	dd2a      	ble.n	8006848 <__exponent+0x70>
 80067f2:	f10d 0207 	add.w	r2, sp, #7
 80067f6:	4617      	mov	r7, r2
 80067f8:	260a      	movs	r6, #10
 80067fa:	4694      	mov	ip, r2
 80067fc:	fb91 f5f6 	sdiv	r5, r1, r6
 8006800:	fb06 1415 	mls	r4, r6, r5, r1
 8006804:	3430      	adds	r4, #48	; 0x30
 8006806:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800680a:	460c      	mov	r4, r1
 800680c:	2c63      	cmp	r4, #99	; 0x63
 800680e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006812:	4629      	mov	r1, r5
 8006814:	dcf1      	bgt.n	80067fa <__exponent+0x22>
 8006816:	3130      	adds	r1, #48	; 0x30
 8006818:	f1ac 0402 	sub.w	r4, ip, #2
 800681c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006820:	1c41      	adds	r1, r0, #1
 8006822:	4622      	mov	r2, r4
 8006824:	42ba      	cmp	r2, r7
 8006826:	d30a      	bcc.n	800683e <__exponent+0x66>
 8006828:	f10d 0209 	add.w	r2, sp, #9
 800682c:	eba2 020c 	sub.w	r2, r2, ip
 8006830:	42bc      	cmp	r4, r7
 8006832:	bf88      	it	hi
 8006834:	2200      	movhi	r2, #0
 8006836:	4413      	add	r3, r2
 8006838:	1a18      	subs	r0, r3, r0
 800683a:	b003      	add	sp, #12
 800683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800683e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006842:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006846:	e7ed      	b.n	8006824 <__exponent+0x4c>
 8006848:	2330      	movs	r3, #48	; 0x30
 800684a:	3130      	adds	r1, #48	; 0x30
 800684c:	7083      	strb	r3, [r0, #2]
 800684e:	70c1      	strb	r1, [r0, #3]
 8006850:	1d03      	adds	r3, r0, #4
 8006852:	e7f1      	b.n	8006838 <__exponent+0x60>

08006854 <_printf_float>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	ed2d 8b02 	vpush	{d8}
 800685c:	b08d      	sub	sp, #52	; 0x34
 800685e:	460c      	mov	r4, r1
 8006860:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006864:	4616      	mov	r6, r2
 8006866:	461f      	mov	r7, r3
 8006868:	4605      	mov	r5, r0
 800686a:	f000 fcc7 	bl	80071fc <_localeconv_r>
 800686e:	f8d0 a000 	ldr.w	sl, [r0]
 8006872:	4650      	mov	r0, sl
 8006874:	f7f9 fd04 	bl	8000280 <strlen>
 8006878:	2300      	movs	r3, #0
 800687a:	930a      	str	r3, [sp, #40]	; 0x28
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	9305      	str	r3, [sp, #20]
 8006880:	f8d8 3000 	ldr.w	r3, [r8]
 8006884:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006888:	3307      	adds	r3, #7
 800688a:	f023 0307 	bic.w	r3, r3, #7
 800688e:	f103 0208 	add.w	r2, r3, #8
 8006892:	f8c8 2000 	str.w	r2, [r8]
 8006896:	e9d3 8900 	ldrd	r8, r9, [r3]
 800689a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800689e:	9307      	str	r3, [sp, #28]
 80068a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80068a4:	ee08 0a10 	vmov	s16, r0
 80068a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80068ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068b0:	4b9e      	ldr	r3, [pc, #632]	; (8006b2c <_printf_float+0x2d8>)
 80068b2:	f04f 32ff 	mov.w	r2, #4294967295
 80068b6:	f7fa f941 	bl	8000b3c <__aeabi_dcmpun>
 80068ba:	bb88      	cbnz	r0, 8006920 <_printf_float+0xcc>
 80068bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068c0:	4b9a      	ldr	r3, [pc, #616]	; (8006b2c <_printf_float+0x2d8>)
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295
 80068c6:	f7fa f91b 	bl	8000b00 <__aeabi_dcmple>
 80068ca:	bb48      	cbnz	r0, 8006920 <_printf_float+0xcc>
 80068cc:	2200      	movs	r2, #0
 80068ce:	2300      	movs	r3, #0
 80068d0:	4640      	mov	r0, r8
 80068d2:	4649      	mov	r1, r9
 80068d4:	f7fa f90a 	bl	8000aec <__aeabi_dcmplt>
 80068d8:	b110      	cbz	r0, 80068e0 <_printf_float+0x8c>
 80068da:	232d      	movs	r3, #45	; 0x2d
 80068dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e0:	4a93      	ldr	r2, [pc, #588]	; (8006b30 <_printf_float+0x2dc>)
 80068e2:	4b94      	ldr	r3, [pc, #592]	; (8006b34 <_printf_float+0x2e0>)
 80068e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068e8:	bf94      	ite	ls
 80068ea:	4690      	movls	r8, r2
 80068ec:	4698      	movhi	r8, r3
 80068ee:	2303      	movs	r3, #3
 80068f0:	6123      	str	r3, [r4, #16]
 80068f2:	9b05      	ldr	r3, [sp, #20]
 80068f4:	f023 0304 	bic.w	r3, r3, #4
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	f04f 0900 	mov.w	r9, #0
 80068fe:	9700      	str	r7, [sp, #0]
 8006900:	4633      	mov	r3, r6
 8006902:	aa0b      	add	r2, sp, #44	; 0x2c
 8006904:	4621      	mov	r1, r4
 8006906:	4628      	mov	r0, r5
 8006908:	f000 f9da 	bl	8006cc0 <_printf_common>
 800690c:	3001      	adds	r0, #1
 800690e:	f040 8090 	bne.w	8006a32 <_printf_float+0x1de>
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	b00d      	add	sp, #52	; 0x34
 8006918:	ecbd 8b02 	vpop	{d8}
 800691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006920:	4642      	mov	r2, r8
 8006922:	464b      	mov	r3, r9
 8006924:	4640      	mov	r0, r8
 8006926:	4649      	mov	r1, r9
 8006928:	f7fa f908 	bl	8000b3c <__aeabi_dcmpun>
 800692c:	b140      	cbz	r0, 8006940 <_printf_float+0xec>
 800692e:	464b      	mov	r3, r9
 8006930:	2b00      	cmp	r3, #0
 8006932:	bfbc      	itt	lt
 8006934:	232d      	movlt	r3, #45	; 0x2d
 8006936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800693a:	4a7f      	ldr	r2, [pc, #508]	; (8006b38 <_printf_float+0x2e4>)
 800693c:	4b7f      	ldr	r3, [pc, #508]	; (8006b3c <_printf_float+0x2e8>)
 800693e:	e7d1      	b.n	80068e4 <_printf_float+0x90>
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006946:	9206      	str	r2, [sp, #24]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	d13f      	bne.n	80069cc <_printf_float+0x178>
 800694c:	2306      	movs	r3, #6
 800694e:	6063      	str	r3, [r4, #4]
 8006950:	9b05      	ldr	r3, [sp, #20]
 8006952:	6861      	ldr	r1, [r4, #4]
 8006954:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006958:	2300      	movs	r3, #0
 800695a:	9303      	str	r3, [sp, #12]
 800695c:	ab0a      	add	r3, sp, #40	; 0x28
 800695e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006962:	ab09      	add	r3, sp, #36	; 0x24
 8006964:	ec49 8b10 	vmov	d0, r8, r9
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	6022      	str	r2, [r4, #0]
 800696c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006970:	4628      	mov	r0, r5
 8006972:	f7ff fecf 	bl	8006714 <__cvt>
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800697a:	2b47      	cmp	r3, #71	; 0x47
 800697c:	4680      	mov	r8, r0
 800697e:	d108      	bne.n	8006992 <_printf_float+0x13e>
 8006980:	1cc8      	adds	r0, r1, #3
 8006982:	db02      	blt.n	800698a <_printf_float+0x136>
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	4299      	cmp	r1, r3
 8006988:	dd41      	ble.n	8006a0e <_printf_float+0x1ba>
 800698a:	f1ab 0302 	sub.w	r3, fp, #2
 800698e:	fa5f fb83 	uxtb.w	fp, r3
 8006992:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006996:	d820      	bhi.n	80069da <_printf_float+0x186>
 8006998:	3901      	subs	r1, #1
 800699a:	465a      	mov	r2, fp
 800699c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069a0:	9109      	str	r1, [sp, #36]	; 0x24
 80069a2:	f7ff ff19 	bl	80067d8 <__exponent>
 80069a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a8:	1813      	adds	r3, r2, r0
 80069aa:	2a01      	cmp	r2, #1
 80069ac:	4681      	mov	r9, r0
 80069ae:	6123      	str	r3, [r4, #16]
 80069b0:	dc02      	bgt.n	80069b8 <_printf_float+0x164>
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	07d2      	lsls	r2, r2, #31
 80069b6:	d501      	bpl.n	80069bc <_printf_float+0x168>
 80069b8:	3301      	adds	r3, #1
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d09c      	beq.n	80068fe <_printf_float+0xaa>
 80069c4:	232d      	movs	r3, #45	; 0x2d
 80069c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ca:	e798      	b.n	80068fe <_printf_float+0xaa>
 80069cc:	9a06      	ldr	r2, [sp, #24]
 80069ce:	2a47      	cmp	r2, #71	; 0x47
 80069d0:	d1be      	bne.n	8006950 <_printf_float+0xfc>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1bc      	bne.n	8006950 <_printf_float+0xfc>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e7b9      	b.n	800694e <_printf_float+0xfa>
 80069da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069de:	d118      	bne.n	8006a12 <_printf_float+0x1be>
 80069e0:	2900      	cmp	r1, #0
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	dd0b      	ble.n	80069fe <_printf_float+0x1aa>
 80069e6:	6121      	str	r1, [r4, #16]
 80069e8:	b913      	cbnz	r3, 80069f0 <_printf_float+0x19c>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	07d0      	lsls	r0, r2, #31
 80069ee:	d502      	bpl.n	80069f6 <_printf_float+0x1a2>
 80069f0:	3301      	adds	r3, #1
 80069f2:	440b      	add	r3, r1
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80069f8:	f04f 0900 	mov.w	r9, #0
 80069fc:	e7de      	b.n	80069bc <_printf_float+0x168>
 80069fe:	b913      	cbnz	r3, 8006a06 <_printf_float+0x1b2>
 8006a00:	6822      	ldr	r2, [r4, #0]
 8006a02:	07d2      	lsls	r2, r2, #31
 8006a04:	d501      	bpl.n	8006a0a <_printf_float+0x1b6>
 8006a06:	3302      	adds	r3, #2
 8006a08:	e7f4      	b.n	80069f4 <_printf_float+0x1a0>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e7f2      	b.n	80069f4 <_printf_float+0x1a0>
 8006a0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a14:	4299      	cmp	r1, r3
 8006a16:	db05      	blt.n	8006a24 <_printf_float+0x1d0>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	6121      	str	r1, [r4, #16]
 8006a1c:	07d8      	lsls	r0, r3, #31
 8006a1e:	d5ea      	bpl.n	80069f6 <_printf_float+0x1a2>
 8006a20:	1c4b      	adds	r3, r1, #1
 8006a22:	e7e7      	b.n	80069f4 <_printf_float+0x1a0>
 8006a24:	2900      	cmp	r1, #0
 8006a26:	bfd4      	ite	le
 8006a28:	f1c1 0202 	rsble	r2, r1, #2
 8006a2c:	2201      	movgt	r2, #1
 8006a2e:	4413      	add	r3, r2
 8006a30:	e7e0      	b.n	80069f4 <_printf_float+0x1a0>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	055a      	lsls	r2, r3, #21
 8006a36:	d407      	bmi.n	8006a48 <_printf_float+0x1f4>
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	4642      	mov	r2, r8
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	d12c      	bne.n	8006aa0 <_printf_float+0x24c>
 8006a46:	e764      	b.n	8006912 <_printf_float+0xbe>
 8006a48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a4c:	f240 80e0 	bls.w	8006c10 <_printf_float+0x3bc>
 8006a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	f7fa f83e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d034      	beq.n	8006aca <_printf_float+0x276>
 8006a60:	4a37      	ldr	r2, [pc, #220]	; (8006b40 <_printf_float+0x2ec>)
 8006a62:	2301      	movs	r3, #1
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	f43f af51 	beq.w	8006912 <_printf_float+0xbe>
 8006a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a74:	429a      	cmp	r2, r3
 8006a76:	db02      	blt.n	8006a7e <_printf_float+0x22a>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	07d8      	lsls	r0, r3, #31
 8006a7c:	d510      	bpl.n	8006aa0 <_printf_float+0x24c>
 8006a7e:	ee18 3a10 	vmov	r3, s16
 8006a82:	4652      	mov	r2, sl
 8006a84:	4631      	mov	r1, r6
 8006a86:	4628      	mov	r0, r5
 8006a88:	47b8      	blx	r7
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f43f af41 	beq.w	8006912 <_printf_float+0xbe>
 8006a90:	f04f 0800 	mov.w	r8, #0
 8006a94:	f104 091a 	add.w	r9, r4, #26
 8006a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	4543      	cmp	r3, r8
 8006a9e:	dc09      	bgt.n	8006ab4 <_printf_float+0x260>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	079b      	lsls	r3, r3, #30
 8006aa4:	f100 8107 	bmi.w	8006cb6 <_printf_float+0x462>
 8006aa8:	68e0      	ldr	r0, [r4, #12]
 8006aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aac:	4298      	cmp	r0, r3
 8006aae:	bfb8      	it	lt
 8006ab0:	4618      	movlt	r0, r3
 8006ab2:	e730      	b.n	8006916 <_printf_float+0xc2>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	464a      	mov	r2, r9
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f43f af27 	beq.w	8006912 <_printf_float+0xbe>
 8006ac4:	f108 0801 	add.w	r8, r8, #1
 8006ac8:	e7e6      	b.n	8006a98 <_printf_float+0x244>
 8006aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dc39      	bgt.n	8006b44 <_printf_float+0x2f0>
 8006ad0:	4a1b      	ldr	r2, [pc, #108]	; (8006b40 <_printf_float+0x2ec>)
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	f43f af19 	beq.w	8006912 <_printf_float+0xbe>
 8006ae0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d102      	bne.n	8006aee <_printf_float+0x29a>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	07d9      	lsls	r1, r3, #31
 8006aec:	d5d8      	bpl.n	8006aa0 <_printf_float+0x24c>
 8006aee:	ee18 3a10 	vmov	r3, s16
 8006af2:	4652      	mov	r2, sl
 8006af4:	4631      	mov	r1, r6
 8006af6:	4628      	mov	r0, r5
 8006af8:	47b8      	blx	r7
 8006afa:	3001      	adds	r0, #1
 8006afc:	f43f af09 	beq.w	8006912 <_printf_float+0xbe>
 8006b00:	f04f 0900 	mov.w	r9, #0
 8006b04:	f104 0a1a 	add.w	sl, r4, #26
 8006b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0a:	425b      	negs	r3, r3
 8006b0c:	454b      	cmp	r3, r9
 8006b0e:	dc01      	bgt.n	8006b14 <_printf_float+0x2c0>
 8006b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b12:	e792      	b.n	8006a3a <_printf_float+0x1e6>
 8006b14:	2301      	movs	r3, #1
 8006b16:	4652      	mov	r2, sl
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f43f aef7 	beq.w	8006912 <_printf_float+0xbe>
 8006b24:	f109 0901 	add.w	r9, r9, #1
 8006b28:	e7ee      	b.n	8006b08 <_printf_float+0x2b4>
 8006b2a:	bf00      	nop
 8006b2c:	7fefffff 	.word	0x7fefffff
 8006b30:	08009130 	.word	0x08009130
 8006b34:	08009134 	.word	0x08009134
 8006b38:	08009138 	.word	0x08009138
 8006b3c:	0800913c 	.word	0x0800913c
 8006b40:	08009140 	.word	0x08009140
 8006b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	bfa8      	it	ge
 8006b4c:	461a      	movge	r2, r3
 8006b4e:	2a00      	cmp	r2, #0
 8006b50:	4691      	mov	r9, r2
 8006b52:	dc37      	bgt.n	8006bc4 <_printf_float+0x370>
 8006b54:	f04f 0b00 	mov.w	fp, #0
 8006b58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b5c:	f104 021a 	add.w	r2, r4, #26
 8006b60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b62:	9305      	str	r3, [sp, #20]
 8006b64:	eba3 0309 	sub.w	r3, r3, r9
 8006b68:	455b      	cmp	r3, fp
 8006b6a:	dc33      	bgt.n	8006bd4 <_printf_float+0x380>
 8006b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b70:	429a      	cmp	r2, r3
 8006b72:	db3b      	blt.n	8006bec <_printf_float+0x398>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	07da      	lsls	r2, r3, #31
 8006b78:	d438      	bmi.n	8006bec <_printf_float+0x398>
 8006b7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b7e:	eba2 0903 	sub.w	r9, r2, r3
 8006b82:	9b05      	ldr	r3, [sp, #20]
 8006b84:	1ad2      	subs	r2, r2, r3
 8006b86:	4591      	cmp	r9, r2
 8006b88:	bfa8      	it	ge
 8006b8a:	4691      	movge	r9, r2
 8006b8c:	f1b9 0f00 	cmp.w	r9, #0
 8006b90:	dc35      	bgt.n	8006bfe <_printf_float+0x3aa>
 8006b92:	f04f 0800 	mov.w	r8, #0
 8006b96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b9a:	f104 0a1a 	add.w	sl, r4, #26
 8006b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	eba3 0309 	sub.w	r3, r3, r9
 8006ba8:	4543      	cmp	r3, r8
 8006baa:	f77f af79 	ble.w	8006aa0 <_printf_float+0x24c>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4652      	mov	r2, sl
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	47b8      	blx	r7
 8006bb8:	3001      	adds	r0, #1
 8006bba:	f43f aeaa 	beq.w	8006912 <_printf_float+0xbe>
 8006bbe:	f108 0801 	add.w	r8, r8, #1
 8006bc2:	e7ec      	b.n	8006b9e <_printf_float+0x34a>
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d1c0      	bne.n	8006b54 <_printf_float+0x300>
 8006bd2:	e69e      	b.n	8006912 <_printf_float+0xbe>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	9205      	str	r2, [sp, #20]
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	f43f ae97 	beq.w	8006912 <_printf_float+0xbe>
 8006be4:	9a05      	ldr	r2, [sp, #20]
 8006be6:	f10b 0b01 	add.w	fp, fp, #1
 8006bea:	e7b9      	b.n	8006b60 <_printf_float+0x30c>
 8006bec:	ee18 3a10 	vmov	r3, s16
 8006bf0:	4652      	mov	r2, sl
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d1be      	bne.n	8006b7a <_printf_float+0x326>
 8006bfc:	e689      	b.n	8006912 <_printf_float+0xbe>
 8006bfe:	9a05      	ldr	r2, [sp, #20]
 8006c00:	464b      	mov	r3, r9
 8006c02:	4442      	add	r2, r8
 8006c04:	4631      	mov	r1, r6
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d1c1      	bne.n	8006b92 <_printf_float+0x33e>
 8006c0e:	e680      	b.n	8006912 <_printf_float+0xbe>
 8006c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c12:	2a01      	cmp	r2, #1
 8006c14:	dc01      	bgt.n	8006c1a <_printf_float+0x3c6>
 8006c16:	07db      	lsls	r3, r3, #31
 8006c18:	d53a      	bpl.n	8006c90 <_printf_float+0x43c>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4628      	mov	r0, r5
 8006c22:	47b8      	blx	r7
 8006c24:	3001      	adds	r0, #1
 8006c26:	f43f ae74 	beq.w	8006912 <_printf_float+0xbe>
 8006c2a:	ee18 3a10 	vmov	r3, s16
 8006c2e:	4652      	mov	r2, sl
 8006c30:	4631      	mov	r1, r6
 8006c32:	4628      	mov	r0, r5
 8006c34:	47b8      	blx	r7
 8006c36:	3001      	adds	r0, #1
 8006c38:	f43f ae6b 	beq.w	8006912 <_printf_float+0xbe>
 8006c3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c40:	2200      	movs	r2, #0
 8006c42:	2300      	movs	r3, #0
 8006c44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006c48:	f7f9 ff46 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c4c:	b9d8      	cbnz	r0, 8006c86 <_printf_float+0x432>
 8006c4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c52:	f108 0201 	add.w	r2, r8, #1
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d10e      	bne.n	8006c7e <_printf_float+0x42a>
 8006c60:	e657      	b.n	8006912 <_printf_float+0xbe>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4652      	mov	r2, sl
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae50 	beq.w	8006912 <_printf_float+0xbe>
 8006c72:	f108 0801 	add.w	r8, r8, #1
 8006c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	4543      	cmp	r3, r8
 8006c7c:	dcf1      	bgt.n	8006c62 <_printf_float+0x40e>
 8006c7e:	464b      	mov	r3, r9
 8006c80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c84:	e6da      	b.n	8006a3c <_printf_float+0x1e8>
 8006c86:	f04f 0800 	mov.w	r8, #0
 8006c8a:	f104 0a1a 	add.w	sl, r4, #26
 8006c8e:	e7f2      	b.n	8006c76 <_printf_float+0x422>
 8006c90:	2301      	movs	r3, #1
 8006c92:	4642      	mov	r2, r8
 8006c94:	e7df      	b.n	8006c56 <_printf_float+0x402>
 8006c96:	2301      	movs	r3, #1
 8006c98:	464a      	mov	r2, r9
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b8      	blx	r7
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	f43f ae36 	beq.w	8006912 <_printf_float+0xbe>
 8006ca6:	f108 0801 	add.w	r8, r8, #1
 8006caa:	68e3      	ldr	r3, [r4, #12]
 8006cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cae:	1a5b      	subs	r3, r3, r1
 8006cb0:	4543      	cmp	r3, r8
 8006cb2:	dcf0      	bgt.n	8006c96 <_printf_float+0x442>
 8006cb4:	e6f8      	b.n	8006aa8 <_printf_float+0x254>
 8006cb6:	f04f 0800 	mov.w	r8, #0
 8006cba:	f104 0919 	add.w	r9, r4, #25
 8006cbe:	e7f4      	b.n	8006caa <_printf_float+0x456>

08006cc0 <_printf_common>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	4699      	mov	r9, r3
 8006cc8:	688a      	ldr	r2, [r1, #8]
 8006cca:	690b      	ldr	r3, [r1, #16]
 8006ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	bfb8      	it	lt
 8006cd4:	4613      	movlt	r3, r2
 8006cd6:	6033      	str	r3, [r6, #0]
 8006cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cdc:	4607      	mov	r7, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	b10a      	cbz	r2, 8006ce6 <_printf_common+0x26>
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	0699      	lsls	r1, r3, #26
 8006cea:	bf42      	ittt	mi
 8006cec:	6833      	ldrmi	r3, [r6, #0]
 8006cee:	3302      	addmi	r3, #2
 8006cf0:	6033      	strmi	r3, [r6, #0]
 8006cf2:	6825      	ldr	r5, [r4, #0]
 8006cf4:	f015 0506 	ands.w	r5, r5, #6
 8006cf8:	d106      	bne.n	8006d08 <_printf_common+0x48>
 8006cfa:	f104 0a19 	add.w	sl, r4, #25
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	6832      	ldr	r2, [r6, #0]
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	42ab      	cmp	r3, r5
 8006d06:	dc26      	bgt.n	8006d56 <_printf_common+0x96>
 8006d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d0c:	1e13      	subs	r3, r2, #0
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	bf18      	it	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	0692      	lsls	r2, r2, #26
 8006d16:	d42b      	bmi.n	8006d70 <_printf_common+0xb0>
 8006d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	4638      	mov	r0, r7
 8006d20:	47c0      	blx	r8
 8006d22:	3001      	adds	r0, #1
 8006d24:	d01e      	beq.n	8006d64 <_printf_common+0xa4>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	6922      	ldr	r2, [r4, #16]
 8006d2a:	f003 0306 	and.w	r3, r3, #6
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	bf02      	ittt	eq
 8006d32:	68e5      	ldreq	r5, [r4, #12]
 8006d34:	6833      	ldreq	r3, [r6, #0]
 8006d36:	1aed      	subeq	r5, r5, r3
 8006d38:	68a3      	ldr	r3, [r4, #8]
 8006d3a:	bf0c      	ite	eq
 8006d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d40:	2500      	movne	r5, #0
 8006d42:	4293      	cmp	r3, r2
 8006d44:	bfc4      	itt	gt
 8006d46:	1a9b      	subgt	r3, r3, r2
 8006d48:	18ed      	addgt	r5, r5, r3
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	341a      	adds	r4, #26
 8006d4e:	42b5      	cmp	r5, r6
 8006d50:	d11a      	bne.n	8006d88 <_printf_common+0xc8>
 8006d52:	2000      	movs	r0, #0
 8006d54:	e008      	b.n	8006d68 <_printf_common+0xa8>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4652      	mov	r2, sl
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	47c0      	blx	r8
 8006d60:	3001      	adds	r0, #1
 8006d62:	d103      	bne.n	8006d6c <_printf_common+0xac>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	3501      	adds	r5, #1
 8006d6e:	e7c6      	b.n	8006cfe <_printf_common+0x3e>
 8006d70:	18e1      	adds	r1, r4, r3
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	2030      	movs	r0, #48	; 0x30
 8006d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d7a:	4422      	add	r2, r4
 8006d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d84:	3302      	adds	r3, #2
 8006d86:	e7c7      	b.n	8006d18 <_printf_common+0x58>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c0      	blx	r8
 8006d92:	3001      	adds	r0, #1
 8006d94:	d0e6      	beq.n	8006d64 <_printf_common+0xa4>
 8006d96:	3601      	adds	r6, #1
 8006d98:	e7d9      	b.n	8006d4e <_printf_common+0x8e>
	...

08006d9c <_printf_i>:
 8006d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	7e0f      	ldrb	r7, [r1, #24]
 8006da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006da4:	2f78      	cmp	r7, #120	; 0x78
 8006da6:	4691      	mov	r9, r2
 8006da8:	4680      	mov	r8, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	469a      	mov	sl, r3
 8006dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006db2:	d807      	bhi.n	8006dc4 <_printf_i+0x28>
 8006db4:	2f62      	cmp	r7, #98	; 0x62
 8006db6:	d80a      	bhi.n	8006dce <_printf_i+0x32>
 8006db8:	2f00      	cmp	r7, #0
 8006dba:	f000 80d4 	beq.w	8006f66 <_printf_i+0x1ca>
 8006dbe:	2f58      	cmp	r7, #88	; 0x58
 8006dc0:	f000 80c0 	beq.w	8006f44 <_printf_i+0x1a8>
 8006dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dcc:	e03a      	b.n	8006e44 <_printf_i+0xa8>
 8006dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dd2:	2b15      	cmp	r3, #21
 8006dd4:	d8f6      	bhi.n	8006dc4 <_printf_i+0x28>
 8006dd6:	a101      	add	r1, pc, #4	; (adr r1, 8006ddc <_printf_i+0x40>)
 8006dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e49 	.word	0x08006e49
 8006de4:	08006dc5 	.word	0x08006dc5
 8006de8:	08006dc5 	.word	0x08006dc5
 8006dec:	08006dc5 	.word	0x08006dc5
 8006df0:	08006dc5 	.word	0x08006dc5
 8006df4:	08006e49 	.word	0x08006e49
 8006df8:	08006dc5 	.word	0x08006dc5
 8006dfc:	08006dc5 	.word	0x08006dc5
 8006e00:	08006dc5 	.word	0x08006dc5
 8006e04:	08006dc5 	.word	0x08006dc5
 8006e08:	08006f4d 	.word	0x08006f4d
 8006e0c:	08006e75 	.word	0x08006e75
 8006e10:	08006f07 	.word	0x08006f07
 8006e14:	08006dc5 	.word	0x08006dc5
 8006e18:	08006dc5 	.word	0x08006dc5
 8006e1c:	08006f6f 	.word	0x08006f6f
 8006e20:	08006dc5 	.word	0x08006dc5
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006dc5 	.word	0x08006dc5
 8006e2c:	08006dc5 	.word	0x08006dc5
 8006e30:	08006f0f 	.word	0x08006f0f
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	602a      	str	r2, [r5, #0]
 8006e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e44:	2301      	movs	r3, #1
 8006e46:	e09f      	b.n	8006f88 <_printf_i+0x1ec>
 8006e48:	6820      	ldr	r0, [r4, #0]
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	0607      	lsls	r7, r0, #24
 8006e4e:	f103 0104 	add.w	r1, r3, #4
 8006e52:	6029      	str	r1, [r5, #0]
 8006e54:	d501      	bpl.n	8006e5a <_printf_i+0xbe>
 8006e56:	681e      	ldr	r6, [r3, #0]
 8006e58:	e003      	b.n	8006e62 <_printf_i+0xc6>
 8006e5a:	0646      	lsls	r6, r0, #25
 8006e5c:	d5fb      	bpl.n	8006e56 <_printf_i+0xba>
 8006e5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e62:	2e00      	cmp	r6, #0
 8006e64:	da03      	bge.n	8006e6e <_printf_i+0xd2>
 8006e66:	232d      	movs	r3, #45	; 0x2d
 8006e68:	4276      	negs	r6, r6
 8006e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6e:	485a      	ldr	r0, [pc, #360]	; (8006fd8 <_printf_i+0x23c>)
 8006e70:	230a      	movs	r3, #10
 8006e72:	e012      	b.n	8006e9a <_printf_i+0xfe>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	6820      	ldr	r0, [r4, #0]
 8006e78:	1d19      	adds	r1, r3, #4
 8006e7a:	6029      	str	r1, [r5, #0]
 8006e7c:	0605      	lsls	r5, r0, #24
 8006e7e:	d501      	bpl.n	8006e84 <_printf_i+0xe8>
 8006e80:	681e      	ldr	r6, [r3, #0]
 8006e82:	e002      	b.n	8006e8a <_printf_i+0xee>
 8006e84:	0641      	lsls	r1, r0, #25
 8006e86:	d5fb      	bpl.n	8006e80 <_printf_i+0xe4>
 8006e88:	881e      	ldrh	r6, [r3, #0]
 8006e8a:	4853      	ldr	r0, [pc, #332]	; (8006fd8 <_printf_i+0x23c>)
 8006e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e8e:	bf0c      	ite	eq
 8006e90:	2308      	moveq	r3, #8
 8006e92:	230a      	movne	r3, #10
 8006e94:	2100      	movs	r1, #0
 8006e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e9a:	6865      	ldr	r5, [r4, #4]
 8006e9c:	60a5      	str	r5, [r4, #8]
 8006e9e:	2d00      	cmp	r5, #0
 8006ea0:	bfa2      	ittt	ge
 8006ea2:	6821      	ldrge	r1, [r4, #0]
 8006ea4:	f021 0104 	bicge.w	r1, r1, #4
 8006ea8:	6021      	strge	r1, [r4, #0]
 8006eaa:	b90e      	cbnz	r6, 8006eb0 <_printf_i+0x114>
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	d04b      	beq.n	8006f48 <_printf_i+0x1ac>
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eb6:	fb03 6711 	mls	r7, r3, r1, r6
 8006eba:	5dc7      	ldrb	r7, [r0, r7]
 8006ebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ec0:	4637      	mov	r7, r6
 8006ec2:	42bb      	cmp	r3, r7
 8006ec4:	460e      	mov	r6, r1
 8006ec6:	d9f4      	bls.n	8006eb2 <_printf_i+0x116>
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d10b      	bne.n	8006ee4 <_printf_i+0x148>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	07de      	lsls	r6, r3, #31
 8006ed0:	d508      	bpl.n	8006ee4 <_printf_i+0x148>
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	6861      	ldr	r1, [r4, #4]
 8006ed6:	4299      	cmp	r1, r3
 8006ed8:	bfde      	ittt	le
 8006eda:	2330      	movle	r3, #48	; 0x30
 8006edc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ee0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ee4:	1b52      	subs	r2, r2, r5
 8006ee6:	6122      	str	r2, [r4, #16]
 8006ee8:	f8cd a000 	str.w	sl, [sp]
 8006eec:	464b      	mov	r3, r9
 8006eee:	aa03      	add	r2, sp, #12
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	f7ff fee4 	bl	8006cc0 <_printf_common>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d14a      	bne.n	8006f92 <_printf_i+0x1f6>
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	b004      	add	sp, #16
 8006f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f043 0320 	orr.w	r3, r3, #32
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	4833      	ldr	r0, [pc, #204]	; (8006fdc <_printf_i+0x240>)
 8006f10:	2778      	movs	r7, #120	; 0x78
 8006f12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	6829      	ldr	r1, [r5, #0]
 8006f1a:	061f      	lsls	r7, r3, #24
 8006f1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f20:	d402      	bmi.n	8006f28 <_printf_i+0x18c>
 8006f22:	065f      	lsls	r7, r3, #25
 8006f24:	bf48      	it	mi
 8006f26:	b2b6      	uxthmi	r6, r6
 8006f28:	07df      	lsls	r7, r3, #31
 8006f2a:	bf48      	it	mi
 8006f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f30:	6029      	str	r1, [r5, #0]
 8006f32:	bf48      	it	mi
 8006f34:	6023      	strmi	r3, [r4, #0]
 8006f36:	b91e      	cbnz	r6, 8006f40 <_printf_i+0x1a4>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	f023 0320 	bic.w	r3, r3, #32
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	2310      	movs	r3, #16
 8006f42:	e7a7      	b.n	8006e94 <_printf_i+0xf8>
 8006f44:	4824      	ldr	r0, [pc, #144]	; (8006fd8 <_printf_i+0x23c>)
 8006f46:	e7e4      	b.n	8006f12 <_printf_i+0x176>
 8006f48:	4615      	mov	r5, r2
 8006f4a:	e7bd      	b.n	8006ec8 <_printf_i+0x12c>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	6826      	ldr	r6, [r4, #0]
 8006f50:	6961      	ldr	r1, [r4, #20]
 8006f52:	1d18      	adds	r0, r3, #4
 8006f54:	6028      	str	r0, [r5, #0]
 8006f56:	0635      	lsls	r5, r6, #24
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	d501      	bpl.n	8006f60 <_printf_i+0x1c4>
 8006f5c:	6019      	str	r1, [r3, #0]
 8006f5e:	e002      	b.n	8006f66 <_printf_i+0x1ca>
 8006f60:	0670      	lsls	r0, r6, #25
 8006f62:	d5fb      	bpl.n	8006f5c <_printf_i+0x1c0>
 8006f64:	8019      	strh	r1, [r3, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	4615      	mov	r5, r2
 8006f6c:	e7bc      	b.n	8006ee8 <_printf_i+0x14c>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	1d1a      	adds	r2, r3, #4
 8006f72:	602a      	str	r2, [r5, #0]
 8006f74:	681d      	ldr	r5, [r3, #0]
 8006f76:	6862      	ldr	r2, [r4, #4]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f7f9 f930 	bl	80001e0 <memchr>
 8006f80:	b108      	cbz	r0, 8006f86 <_printf_i+0x1ea>
 8006f82:	1b40      	subs	r0, r0, r5
 8006f84:	6060      	str	r0, [r4, #4]
 8006f86:	6863      	ldr	r3, [r4, #4]
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f90:	e7aa      	b.n	8006ee8 <_printf_i+0x14c>
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	462a      	mov	r2, r5
 8006f96:	4649      	mov	r1, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	47d0      	blx	sl
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d0ad      	beq.n	8006efc <_printf_i+0x160>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	079b      	lsls	r3, r3, #30
 8006fa4:	d413      	bmi.n	8006fce <_printf_i+0x232>
 8006fa6:	68e0      	ldr	r0, [r4, #12]
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	4298      	cmp	r0, r3
 8006fac:	bfb8      	it	lt
 8006fae:	4618      	movlt	r0, r3
 8006fb0:	e7a6      	b.n	8006f00 <_printf_i+0x164>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	47d0      	blx	sl
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d09d      	beq.n	8006efc <_printf_i+0x160>
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	9903      	ldr	r1, [sp, #12]
 8006fc6:	1a5b      	subs	r3, r3, r1
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	dcf2      	bgt.n	8006fb2 <_printf_i+0x216>
 8006fcc:	e7eb      	b.n	8006fa6 <_printf_i+0x20a>
 8006fce:	2500      	movs	r5, #0
 8006fd0:	f104 0619 	add.w	r6, r4, #25
 8006fd4:	e7f5      	b.n	8006fc2 <_printf_i+0x226>
 8006fd6:	bf00      	nop
 8006fd8:	08009142 	.word	0x08009142
 8006fdc:	08009153 	.word	0x08009153

08006fe0 <std>:
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8006fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fee:	6083      	str	r3, [r0, #8]
 8006ff0:	8181      	strh	r1, [r0, #12]
 8006ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ff4:	81c2      	strh	r2, [r0, #14]
 8006ff6:	6183      	str	r3, [r0, #24]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	305c      	adds	r0, #92	; 0x5c
 8006ffe:	f000 f8f4 	bl	80071ea <memset>
 8007002:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <std+0x58>)
 8007004:	6263      	str	r3, [r4, #36]	; 0x24
 8007006:	4b0d      	ldr	r3, [pc, #52]	; (800703c <std+0x5c>)
 8007008:	62a3      	str	r3, [r4, #40]	; 0x28
 800700a:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <std+0x60>)
 800700c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <std+0x64>)
 8007010:	6323      	str	r3, [r4, #48]	; 0x30
 8007012:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <std+0x68>)
 8007014:	6224      	str	r4, [r4, #32]
 8007016:	429c      	cmp	r4, r3
 8007018:	d006      	beq.n	8007028 <std+0x48>
 800701a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800701e:	4294      	cmp	r4, r2
 8007020:	d002      	beq.n	8007028 <std+0x48>
 8007022:	33d0      	adds	r3, #208	; 0xd0
 8007024:	429c      	cmp	r4, r3
 8007026:	d105      	bne.n	8007034 <std+0x54>
 8007028:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800702c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007030:	f000 b958 	b.w	80072e4 <__retarget_lock_init_recursive>
 8007034:	bd10      	pop	{r4, pc}
 8007036:	bf00      	nop
 8007038:	08007165 	.word	0x08007165
 800703c:	08007187 	.word	0x08007187
 8007040:	080071bf 	.word	0x080071bf
 8007044:	080071e3 	.word	0x080071e3
 8007048:	20000f2c 	.word	0x20000f2c

0800704c <stdio_exit_handler>:
 800704c:	4a02      	ldr	r2, [pc, #8]	; (8007058 <stdio_exit_handler+0xc>)
 800704e:	4903      	ldr	r1, [pc, #12]	; (800705c <stdio_exit_handler+0x10>)
 8007050:	4803      	ldr	r0, [pc, #12]	; (8007060 <stdio_exit_handler+0x14>)
 8007052:	f000 b869 	b.w	8007128 <_fwalk_sglue>
 8007056:	bf00      	nop
 8007058:	20000078 	.word	0x20000078
 800705c:	08008a01 	.word	0x08008a01
 8007060:	20000084 	.word	0x20000084

08007064 <cleanup_stdio>:
 8007064:	6841      	ldr	r1, [r0, #4]
 8007066:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <cleanup_stdio+0x34>)
 8007068:	4299      	cmp	r1, r3
 800706a:	b510      	push	{r4, lr}
 800706c:	4604      	mov	r4, r0
 800706e:	d001      	beq.n	8007074 <cleanup_stdio+0x10>
 8007070:	f001 fcc6 	bl	8008a00 <_fflush_r>
 8007074:	68a1      	ldr	r1, [r4, #8]
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <cleanup_stdio+0x38>)
 8007078:	4299      	cmp	r1, r3
 800707a:	d002      	beq.n	8007082 <cleanup_stdio+0x1e>
 800707c:	4620      	mov	r0, r4
 800707e:	f001 fcbf 	bl	8008a00 <_fflush_r>
 8007082:	68e1      	ldr	r1, [r4, #12]
 8007084:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <cleanup_stdio+0x3c>)
 8007086:	4299      	cmp	r1, r3
 8007088:	d004      	beq.n	8007094 <cleanup_stdio+0x30>
 800708a:	4620      	mov	r0, r4
 800708c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007090:	f001 bcb6 	b.w	8008a00 <_fflush_r>
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	20000f2c 	.word	0x20000f2c
 800709c:	20000f94 	.word	0x20000f94
 80070a0:	20000ffc 	.word	0x20000ffc

080070a4 <global_stdio_init.part.0>:
 80070a4:	b510      	push	{r4, lr}
 80070a6:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <global_stdio_init.part.0+0x30>)
 80070a8:	4c0b      	ldr	r4, [pc, #44]	; (80070d8 <global_stdio_init.part.0+0x34>)
 80070aa:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <global_stdio_init.part.0+0x38>)
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	4620      	mov	r0, r4
 80070b0:	2200      	movs	r2, #0
 80070b2:	2104      	movs	r1, #4
 80070b4:	f7ff ff94 	bl	8006fe0 <std>
 80070b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80070bc:	2201      	movs	r2, #1
 80070be:	2109      	movs	r1, #9
 80070c0:	f7ff ff8e 	bl	8006fe0 <std>
 80070c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80070c8:	2202      	movs	r2, #2
 80070ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ce:	2112      	movs	r1, #18
 80070d0:	f7ff bf86 	b.w	8006fe0 <std>
 80070d4:	20001064 	.word	0x20001064
 80070d8:	20000f2c 	.word	0x20000f2c
 80070dc:	0800704d 	.word	0x0800704d

080070e0 <__sfp_lock_acquire>:
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <__sfp_lock_acquire+0x8>)
 80070e2:	f000 b900 	b.w	80072e6 <__retarget_lock_acquire_recursive>
 80070e6:	bf00      	nop
 80070e8:	2000106d 	.word	0x2000106d

080070ec <__sfp_lock_release>:
 80070ec:	4801      	ldr	r0, [pc, #4]	; (80070f4 <__sfp_lock_release+0x8>)
 80070ee:	f000 b8fb 	b.w	80072e8 <__retarget_lock_release_recursive>
 80070f2:	bf00      	nop
 80070f4:	2000106d 	.word	0x2000106d

080070f8 <__sinit>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	4604      	mov	r4, r0
 80070fc:	f7ff fff0 	bl	80070e0 <__sfp_lock_acquire>
 8007100:	6a23      	ldr	r3, [r4, #32]
 8007102:	b11b      	cbz	r3, 800710c <__sinit+0x14>
 8007104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007108:	f7ff bff0 	b.w	80070ec <__sfp_lock_release>
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <__sinit+0x28>)
 800710e:	6223      	str	r3, [r4, #32]
 8007110:	4b04      	ldr	r3, [pc, #16]	; (8007124 <__sinit+0x2c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f5      	bne.n	8007104 <__sinit+0xc>
 8007118:	f7ff ffc4 	bl	80070a4 <global_stdio_init.part.0>
 800711c:	e7f2      	b.n	8007104 <__sinit+0xc>
 800711e:	bf00      	nop
 8007120:	08007065 	.word	0x08007065
 8007124:	20001064 	.word	0x20001064

08007128 <_fwalk_sglue>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4607      	mov	r7, r0
 800712e:	4688      	mov	r8, r1
 8007130:	4614      	mov	r4, r2
 8007132:	2600      	movs	r6, #0
 8007134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007138:	f1b9 0901 	subs.w	r9, r9, #1
 800713c:	d505      	bpl.n	800714a <_fwalk_sglue+0x22>
 800713e:	6824      	ldr	r4, [r4, #0]
 8007140:	2c00      	cmp	r4, #0
 8007142:	d1f7      	bne.n	8007134 <_fwalk_sglue+0xc>
 8007144:	4630      	mov	r0, r6
 8007146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d907      	bls.n	8007160 <_fwalk_sglue+0x38>
 8007150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007154:	3301      	adds	r3, #1
 8007156:	d003      	beq.n	8007160 <_fwalk_sglue+0x38>
 8007158:	4629      	mov	r1, r5
 800715a:	4638      	mov	r0, r7
 800715c:	47c0      	blx	r8
 800715e:	4306      	orrs	r6, r0
 8007160:	3568      	adds	r5, #104	; 0x68
 8007162:	e7e9      	b.n	8007138 <_fwalk_sglue+0x10>

08007164 <__sread>:
 8007164:	b510      	push	{r4, lr}
 8007166:	460c      	mov	r4, r1
 8007168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716c:	f000 f86c 	bl	8007248 <_read_r>
 8007170:	2800      	cmp	r0, #0
 8007172:	bfab      	itete	ge
 8007174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007176:	89a3      	ldrhlt	r3, [r4, #12]
 8007178:	181b      	addge	r3, r3, r0
 800717a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800717e:	bfac      	ite	ge
 8007180:	6563      	strge	r3, [r4, #84]	; 0x54
 8007182:	81a3      	strhlt	r3, [r4, #12]
 8007184:	bd10      	pop	{r4, pc}

08007186 <__swrite>:
 8007186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718a:	461f      	mov	r7, r3
 800718c:	898b      	ldrh	r3, [r1, #12]
 800718e:	05db      	lsls	r3, r3, #23
 8007190:	4605      	mov	r5, r0
 8007192:	460c      	mov	r4, r1
 8007194:	4616      	mov	r6, r2
 8007196:	d505      	bpl.n	80071a4 <__swrite+0x1e>
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	2302      	movs	r3, #2
 800719e:	2200      	movs	r2, #0
 80071a0:	f000 f840 	bl	8007224 <_lseek_r>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	4632      	mov	r2, r6
 80071b2:	463b      	mov	r3, r7
 80071b4:	4628      	mov	r0, r5
 80071b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ba:	f000 b857 	b.w	800726c <_write_r>

080071be <__sseek>:
 80071be:	b510      	push	{r4, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c6:	f000 f82d 	bl	8007224 <_lseek_r>
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	bf15      	itete	ne
 80071d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80071d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071da:	81a3      	strheq	r3, [r4, #12]
 80071dc:	bf18      	it	ne
 80071de:	81a3      	strhne	r3, [r4, #12]
 80071e0:	bd10      	pop	{r4, pc}

080071e2 <__sclose>:
 80071e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e6:	f000 b80d 	b.w	8007204 <_close_r>

080071ea <memset>:
 80071ea:	4402      	add	r2, r0
 80071ec:	4603      	mov	r3, r0
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d100      	bne.n	80071f4 <memset+0xa>
 80071f2:	4770      	bx	lr
 80071f4:	f803 1b01 	strb.w	r1, [r3], #1
 80071f8:	e7f9      	b.n	80071ee <memset+0x4>
	...

080071fc <_localeconv_r>:
 80071fc:	4800      	ldr	r0, [pc, #0]	; (8007200 <_localeconv_r+0x4>)
 80071fe:	4770      	bx	lr
 8007200:	200001c4 	.word	0x200001c4

08007204 <_close_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d06      	ldr	r5, [pc, #24]	; (8007220 <_close_r+0x1c>)
 8007208:	2300      	movs	r3, #0
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	602b      	str	r3, [r5, #0]
 8007210:	f7fa fb99 	bl	8001946 <_close>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d102      	bne.n	800721e <_close_r+0x1a>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	b103      	cbz	r3, 800721e <_close_r+0x1a>
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	20001068 	.word	0x20001068

08007224 <_lseek_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d07      	ldr	r5, [pc, #28]	; (8007244 <_lseek_r+0x20>)
 8007228:	4604      	mov	r4, r0
 800722a:	4608      	mov	r0, r1
 800722c:	4611      	mov	r1, r2
 800722e:	2200      	movs	r2, #0
 8007230:	602a      	str	r2, [r5, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f7fa fbae 	bl	8001994 <_lseek>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_lseek_r+0x1e>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_lseek_r+0x1e>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20001068 	.word	0x20001068

08007248 <_read_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d07      	ldr	r5, [pc, #28]	; (8007268 <_read_r+0x20>)
 800724c:	4604      	mov	r4, r0
 800724e:	4608      	mov	r0, r1
 8007250:	4611      	mov	r1, r2
 8007252:	2200      	movs	r2, #0
 8007254:	602a      	str	r2, [r5, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	f7fa fb58 	bl	800190c <_read>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_read_r+0x1e>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_read_r+0x1e>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20001068 	.word	0x20001068

0800726c <_write_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d07      	ldr	r5, [pc, #28]	; (800728c <_write_r+0x20>)
 8007270:	4604      	mov	r4, r0
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	2200      	movs	r2, #0
 8007278:	602a      	str	r2, [r5, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	f7fa f826 	bl	80012cc <_write>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_write_r+0x1e>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_write_r+0x1e>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	20001068 	.word	0x20001068

08007290 <__errno>:
 8007290:	4b01      	ldr	r3, [pc, #4]	; (8007298 <__errno+0x8>)
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	200000d0 	.word	0x200000d0

0800729c <__libc_init_array>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4d0d      	ldr	r5, [pc, #52]	; (80072d4 <__libc_init_array+0x38>)
 80072a0:	4c0d      	ldr	r4, [pc, #52]	; (80072d8 <__libc_init_array+0x3c>)
 80072a2:	1b64      	subs	r4, r4, r5
 80072a4:	10a4      	asrs	r4, r4, #2
 80072a6:	2600      	movs	r6, #0
 80072a8:	42a6      	cmp	r6, r4
 80072aa:	d109      	bne.n	80072c0 <__libc_init_array+0x24>
 80072ac:	4d0b      	ldr	r5, [pc, #44]	; (80072dc <__libc_init_array+0x40>)
 80072ae:	4c0c      	ldr	r4, [pc, #48]	; (80072e0 <__libc_init_array+0x44>)
 80072b0:	f001 feec 	bl	800908c <_init>
 80072b4:	1b64      	subs	r4, r4, r5
 80072b6:	10a4      	asrs	r4, r4, #2
 80072b8:	2600      	movs	r6, #0
 80072ba:	42a6      	cmp	r6, r4
 80072bc:	d105      	bne.n	80072ca <__libc_init_array+0x2e>
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c4:	4798      	blx	r3
 80072c6:	3601      	adds	r6, #1
 80072c8:	e7ee      	b.n	80072a8 <__libc_init_array+0xc>
 80072ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ce:	4798      	blx	r3
 80072d0:	3601      	adds	r6, #1
 80072d2:	e7f2      	b.n	80072ba <__libc_init_array+0x1e>
 80072d4:	080094ac 	.word	0x080094ac
 80072d8:	080094ac 	.word	0x080094ac
 80072dc:	080094ac 	.word	0x080094ac
 80072e0:	080094b0 	.word	0x080094b0

080072e4 <__retarget_lock_init_recursive>:
 80072e4:	4770      	bx	lr

080072e6 <__retarget_lock_acquire_recursive>:
 80072e6:	4770      	bx	lr

080072e8 <__retarget_lock_release_recursive>:
 80072e8:	4770      	bx	lr

080072ea <memcpy>:
 80072ea:	440a      	add	r2, r1
 80072ec:	4291      	cmp	r1, r2
 80072ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80072f2:	d100      	bne.n	80072f6 <memcpy+0xc>
 80072f4:	4770      	bx	lr
 80072f6:	b510      	push	{r4, lr}
 80072f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007300:	4291      	cmp	r1, r2
 8007302:	d1f9      	bne.n	80072f8 <memcpy+0xe>
 8007304:	bd10      	pop	{r4, pc}

08007306 <quorem>:
 8007306:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	6903      	ldr	r3, [r0, #16]
 800730c:	690c      	ldr	r4, [r1, #16]
 800730e:	42a3      	cmp	r3, r4
 8007310:	4607      	mov	r7, r0
 8007312:	db7e      	blt.n	8007412 <quorem+0x10c>
 8007314:	3c01      	subs	r4, #1
 8007316:	f101 0814 	add.w	r8, r1, #20
 800731a:	f100 0514 	add.w	r5, r0, #20
 800731e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007328:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800732c:	3301      	adds	r3, #1
 800732e:	429a      	cmp	r2, r3
 8007330:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007334:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007338:	fbb2 f6f3 	udiv	r6, r2, r3
 800733c:	d331      	bcc.n	80073a2 <quorem+0x9c>
 800733e:	f04f 0e00 	mov.w	lr, #0
 8007342:	4640      	mov	r0, r8
 8007344:	46ac      	mov	ip, r5
 8007346:	46f2      	mov	sl, lr
 8007348:	f850 2b04 	ldr.w	r2, [r0], #4
 800734c:	b293      	uxth	r3, r2
 800734e:	fb06 e303 	mla	r3, r6, r3, lr
 8007352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007356:	0c1a      	lsrs	r2, r3, #16
 8007358:	b29b      	uxth	r3, r3
 800735a:	ebaa 0303 	sub.w	r3, sl, r3
 800735e:	f8dc a000 	ldr.w	sl, [ip]
 8007362:	fa13 f38a 	uxtah	r3, r3, sl
 8007366:	fb06 220e 	mla	r2, r6, lr, r2
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	9b00      	ldr	r3, [sp, #0]
 800736e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007372:	b292      	uxth	r2, r2
 8007374:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007378:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800737c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007380:	4581      	cmp	r9, r0
 8007382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007386:	f84c 3b04 	str.w	r3, [ip], #4
 800738a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800738e:	d2db      	bcs.n	8007348 <quorem+0x42>
 8007390:	f855 300b 	ldr.w	r3, [r5, fp]
 8007394:	b92b      	cbnz	r3, 80073a2 <quorem+0x9c>
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	3b04      	subs	r3, #4
 800739a:	429d      	cmp	r5, r3
 800739c:	461a      	mov	r2, r3
 800739e:	d32c      	bcc.n	80073fa <quorem+0xf4>
 80073a0:	613c      	str	r4, [r7, #16]
 80073a2:	4638      	mov	r0, r7
 80073a4:	f001 f9a6 	bl	80086f4 <__mcmp>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	db22      	blt.n	80073f2 <quorem+0xec>
 80073ac:	3601      	adds	r6, #1
 80073ae:	4629      	mov	r1, r5
 80073b0:	2000      	movs	r0, #0
 80073b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80073b6:	f8d1 c000 	ldr.w	ip, [r1]
 80073ba:	b293      	uxth	r3, r2
 80073bc:	1ac3      	subs	r3, r0, r3
 80073be:	0c12      	lsrs	r2, r2, #16
 80073c0:	fa13 f38c 	uxtah	r3, r3, ip
 80073c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80073c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073d2:	45c1      	cmp	r9, r8
 80073d4:	f841 3b04 	str.w	r3, [r1], #4
 80073d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073dc:	d2e9      	bcs.n	80073b2 <quorem+0xac>
 80073de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073e6:	b922      	cbnz	r2, 80073f2 <quorem+0xec>
 80073e8:	3b04      	subs	r3, #4
 80073ea:	429d      	cmp	r5, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	d30a      	bcc.n	8007406 <quorem+0x100>
 80073f0:	613c      	str	r4, [r7, #16]
 80073f2:	4630      	mov	r0, r6
 80073f4:	b003      	add	sp, #12
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	6812      	ldr	r2, [r2, #0]
 80073fc:	3b04      	subs	r3, #4
 80073fe:	2a00      	cmp	r2, #0
 8007400:	d1ce      	bne.n	80073a0 <quorem+0x9a>
 8007402:	3c01      	subs	r4, #1
 8007404:	e7c9      	b.n	800739a <quorem+0x94>
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	3b04      	subs	r3, #4
 800740a:	2a00      	cmp	r2, #0
 800740c:	d1f0      	bne.n	80073f0 <quorem+0xea>
 800740e:	3c01      	subs	r4, #1
 8007410:	e7eb      	b.n	80073ea <quorem+0xe4>
 8007412:	2000      	movs	r0, #0
 8007414:	e7ee      	b.n	80073f4 <quorem+0xee>
	...

08007418 <_dtoa_r>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	ed2d 8b04 	vpush	{d8-d9}
 8007420:	69c5      	ldr	r5, [r0, #28]
 8007422:	b093      	sub	sp, #76	; 0x4c
 8007424:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007428:	ec57 6b10 	vmov	r6, r7, d0
 800742c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007430:	9107      	str	r1, [sp, #28]
 8007432:	4604      	mov	r4, r0
 8007434:	920a      	str	r2, [sp, #40]	; 0x28
 8007436:	930d      	str	r3, [sp, #52]	; 0x34
 8007438:	b975      	cbnz	r5, 8007458 <_dtoa_r+0x40>
 800743a:	2010      	movs	r0, #16
 800743c:	f000 fe2a 	bl	8008094 <malloc>
 8007440:	4602      	mov	r2, r0
 8007442:	61e0      	str	r0, [r4, #28]
 8007444:	b920      	cbnz	r0, 8007450 <_dtoa_r+0x38>
 8007446:	4bae      	ldr	r3, [pc, #696]	; (8007700 <_dtoa_r+0x2e8>)
 8007448:	21ef      	movs	r1, #239	; 0xef
 800744a:	48ae      	ldr	r0, [pc, #696]	; (8007704 <_dtoa_r+0x2ec>)
 800744c:	f001 fb10 	bl	8008a70 <__assert_func>
 8007450:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007454:	6005      	str	r5, [r0, #0]
 8007456:	60c5      	str	r5, [r0, #12]
 8007458:	69e3      	ldr	r3, [r4, #28]
 800745a:	6819      	ldr	r1, [r3, #0]
 800745c:	b151      	cbz	r1, 8007474 <_dtoa_r+0x5c>
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	604a      	str	r2, [r1, #4]
 8007462:	2301      	movs	r3, #1
 8007464:	4093      	lsls	r3, r2
 8007466:	608b      	str	r3, [r1, #8]
 8007468:	4620      	mov	r0, r4
 800746a:	f000 ff07 	bl	800827c <_Bfree>
 800746e:	69e3      	ldr	r3, [r4, #28]
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	1e3b      	subs	r3, r7, #0
 8007476:	bfbb      	ittet	lt
 8007478:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800747c:	9303      	strlt	r3, [sp, #12]
 800747e:	2300      	movge	r3, #0
 8007480:	2201      	movlt	r2, #1
 8007482:	bfac      	ite	ge
 8007484:	f8c8 3000 	strge.w	r3, [r8]
 8007488:	f8c8 2000 	strlt.w	r2, [r8]
 800748c:	4b9e      	ldr	r3, [pc, #632]	; (8007708 <_dtoa_r+0x2f0>)
 800748e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007492:	ea33 0308 	bics.w	r3, r3, r8
 8007496:	d11b      	bne.n	80074d0 <_dtoa_r+0xb8>
 8007498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800749a:	f242 730f 	movw	r3, #9999	; 0x270f
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80074a4:	4333      	orrs	r3, r6
 80074a6:	f000 8593 	beq.w	8007fd0 <_dtoa_r+0xbb8>
 80074aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074ac:	b963      	cbnz	r3, 80074c8 <_dtoa_r+0xb0>
 80074ae:	4b97      	ldr	r3, [pc, #604]	; (800770c <_dtoa_r+0x2f4>)
 80074b0:	e027      	b.n	8007502 <_dtoa_r+0xea>
 80074b2:	4b97      	ldr	r3, [pc, #604]	; (8007710 <_dtoa_r+0x2f8>)
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	3308      	adds	r3, #8
 80074b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	9800      	ldr	r0, [sp, #0]
 80074be:	b013      	add	sp, #76	; 0x4c
 80074c0:	ecbd 8b04 	vpop	{d8-d9}
 80074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c8:	4b90      	ldr	r3, [pc, #576]	; (800770c <_dtoa_r+0x2f4>)
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	3303      	adds	r3, #3
 80074ce:	e7f3      	b.n	80074b8 <_dtoa_r+0xa0>
 80074d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	ec51 0b17 	vmov	r0, r1, d7
 80074da:	eeb0 8a47 	vmov.f32	s16, s14
 80074de:	eef0 8a67 	vmov.f32	s17, s15
 80074e2:	2300      	movs	r3, #0
 80074e4:	f7f9 faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80074e8:	4681      	mov	r9, r0
 80074ea:	b160      	cbz	r0, 8007506 <_dtoa_r+0xee>
 80074ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074ee:	2301      	movs	r3, #1
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8568 	beq.w	8007fca <_dtoa_r+0xbb2>
 80074fa:	4b86      	ldr	r3, [pc, #536]	; (8007714 <_dtoa_r+0x2fc>)
 80074fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	3b01      	subs	r3, #1
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	e7da      	b.n	80074bc <_dtoa_r+0xa4>
 8007506:	aa10      	add	r2, sp, #64	; 0x40
 8007508:	a911      	add	r1, sp, #68	; 0x44
 800750a:	4620      	mov	r0, r4
 800750c:	eeb0 0a48 	vmov.f32	s0, s16
 8007510:	eef0 0a68 	vmov.f32	s1, s17
 8007514:	f001 f994 	bl	8008840 <__d2b>
 8007518:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800751c:	4682      	mov	sl, r0
 800751e:	2d00      	cmp	r5, #0
 8007520:	d07f      	beq.n	8007622 <_dtoa_r+0x20a>
 8007522:	ee18 3a90 	vmov	r3, s17
 8007526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800752a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800752e:	ec51 0b18 	vmov	r0, r1, d8
 8007532:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800753a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800753e:	4619      	mov	r1, r3
 8007540:	2200      	movs	r2, #0
 8007542:	4b75      	ldr	r3, [pc, #468]	; (8007718 <_dtoa_r+0x300>)
 8007544:	f7f8 fea8 	bl	8000298 <__aeabi_dsub>
 8007548:	a367      	add	r3, pc, #412	; (adr r3, 80076e8 <_dtoa_r+0x2d0>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f9 f85b 	bl	8000608 <__aeabi_dmul>
 8007552:	a367      	add	r3, pc, #412	; (adr r3, 80076f0 <_dtoa_r+0x2d8>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f8 fea0 	bl	800029c <__adddf3>
 800755c:	4606      	mov	r6, r0
 800755e:	4628      	mov	r0, r5
 8007560:	460f      	mov	r7, r1
 8007562:	f7f8 ffe7 	bl	8000534 <__aeabi_i2d>
 8007566:	a364      	add	r3, pc, #400	; (adr r3, 80076f8 <_dtoa_r+0x2e0>)
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f7f9 f84c 	bl	8000608 <__aeabi_dmul>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4630      	mov	r0, r6
 8007576:	4639      	mov	r1, r7
 8007578:	f7f8 fe90 	bl	800029c <__adddf3>
 800757c:	4606      	mov	r6, r0
 800757e:	460f      	mov	r7, r1
 8007580:	f7f9 faf2 	bl	8000b68 <__aeabi_d2iz>
 8007584:	2200      	movs	r2, #0
 8007586:	4683      	mov	fp, r0
 8007588:	2300      	movs	r3, #0
 800758a:	4630      	mov	r0, r6
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 faad 	bl	8000aec <__aeabi_dcmplt>
 8007592:	b148      	cbz	r0, 80075a8 <_dtoa_r+0x190>
 8007594:	4658      	mov	r0, fp
 8007596:	f7f8 ffcd 	bl	8000534 <__aeabi_i2d>
 800759a:	4632      	mov	r2, r6
 800759c:	463b      	mov	r3, r7
 800759e:	f7f9 fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80075a2:	b908      	cbnz	r0, 80075a8 <_dtoa_r+0x190>
 80075a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075a8:	f1bb 0f16 	cmp.w	fp, #22
 80075ac:	d857      	bhi.n	800765e <_dtoa_r+0x246>
 80075ae:	4b5b      	ldr	r3, [pc, #364]	; (800771c <_dtoa_r+0x304>)
 80075b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	ec51 0b18 	vmov	r0, r1, d8
 80075bc:	f7f9 fa96 	bl	8000aec <__aeabi_dcmplt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d04e      	beq.n	8007662 <_dtoa_r+0x24a>
 80075c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075c8:	2300      	movs	r3, #0
 80075ca:	930c      	str	r3, [sp, #48]	; 0x30
 80075cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075ce:	1b5b      	subs	r3, r3, r5
 80075d0:	1e5a      	subs	r2, r3, #1
 80075d2:	bf45      	ittet	mi
 80075d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80075d8:	9305      	strmi	r3, [sp, #20]
 80075da:	2300      	movpl	r3, #0
 80075dc:	2300      	movmi	r3, #0
 80075de:	9206      	str	r2, [sp, #24]
 80075e0:	bf54      	ite	pl
 80075e2:	9305      	strpl	r3, [sp, #20]
 80075e4:	9306      	strmi	r3, [sp, #24]
 80075e6:	f1bb 0f00 	cmp.w	fp, #0
 80075ea:	db3c      	blt.n	8007666 <_dtoa_r+0x24e>
 80075ec:	9b06      	ldr	r3, [sp, #24]
 80075ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80075f2:	445b      	add	r3, fp
 80075f4:	9306      	str	r3, [sp, #24]
 80075f6:	2300      	movs	r3, #0
 80075f8:	9308      	str	r3, [sp, #32]
 80075fa:	9b07      	ldr	r3, [sp, #28]
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	d868      	bhi.n	80076d2 <_dtoa_r+0x2ba>
 8007600:	2b05      	cmp	r3, #5
 8007602:	bfc4      	itt	gt
 8007604:	3b04      	subgt	r3, #4
 8007606:	9307      	strgt	r3, [sp, #28]
 8007608:	9b07      	ldr	r3, [sp, #28]
 800760a:	f1a3 0302 	sub.w	r3, r3, #2
 800760e:	bfcc      	ite	gt
 8007610:	2500      	movgt	r5, #0
 8007612:	2501      	movle	r5, #1
 8007614:	2b03      	cmp	r3, #3
 8007616:	f200 8085 	bhi.w	8007724 <_dtoa_r+0x30c>
 800761a:	e8df f003 	tbb	[pc, r3]
 800761e:	3b2e      	.short	0x3b2e
 8007620:	5839      	.short	0x5839
 8007622:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007626:	441d      	add	r5, r3
 8007628:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800762c:	2b20      	cmp	r3, #32
 800762e:	bfc1      	itttt	gt
 8007630:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007634:	fa08 f803 	lslgt.w	r8, r8, r3
 8007638:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800763c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007640:	bfd6      	itet	le
 8007642:	f1c3 0320 	rsble	r3, r3, #32
 8007646:	ea48 0003 	orrgt.w	r0, r8, r3
 800764a:	fa06 f003 	lslle.w	r0, r6, r3
 800764e:	f7f8 ff61 	bl	8000514 <__aeabi_ui2d>
 8007652:	2201      	movs	r2, #1
 8007654:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007658:	3d01      	subs	r5, #1
 800765a:	920e      	str	r2, [sp, #56]	; 0x38
 800765c:	e76f      	b.n	800753e <_dtoa_r+0x126>
 800765e:	2301      	movs	r3, #1
 8007660:	e7b3      	b.n	80075ca <_dtoa_r+0x1b2>
 8007662:	900c      	str	r0, [sp, #48]	; 0x30
 8007664:	e7b2      	b.n	80075cc <_dtoa_r+0x1b4>
 8007666:	9b05      	ldr	r3, [sp, #20]
 8007668:	eba3 030b 	sub.w	r3, r3, fp
 800766c:	9305      	str	r3, [sp, #20]
 800766e:	f1cb 0300 	rsb	r3, fp, #0
 8007672:	9308      	str	r3, [sp, #32]
 8007674:	2300      	movs	r3, #0
 8007676:	930b      	str	r3, [sp, #44]	; 0x2c
 8007678:	e7bf      	b.n	80075fa <_dtoa_r+0x1e2>
 800767a:	2300      	movs	r3, #0
 800767c:	9309      	str	r3, [sp, #36]	; 0x24
 800767e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	dc52      	bgt.n	800772a <_dtoa_r+0x312>
 8007684:	2301      	movs	r3, #1
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	9304      	str	r3, [sp, #16]
 800768a:	461a      	mov	r2, r3
 800768c:	920a      	str	r2, [sp, #40]	; 0x28
 800768e:	e00b      	b.n	80076a8 <_dtoa_r+0x290>
 8007690:	2301      	movs	r3, #1
 8007692:	e7f3      	b.n	800767c <_dtoa_r+0x264>
 8007694:	2300      	movs	r3, #0
 8007696:	9309      	str	r3, [sp, #36]	; 0x24
 8007698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769a:	445b      	add	r3, fp
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	3301      	adds	r3, #1
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	bfb8      	it	lt
 80076a6:	2301      	movlt	r3, #1
 80076a8:	69e0      	ldr	r0, [r4, #28]
 80076aa:	2100      	movs	r1, #0
 80076ac:	2204      	movs	r2, #4
 80076ae:	f102 0614 	add.w	r6, r2, #20
 80076b2:	429e      	cmp	r6, r3
 80076b4:	d93d      	bls.n	8007732 <_dtoa_r+0x31a>
 80076b6:	6041      	str	r1, [r0, #4]
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 fd9f 	bl	80081fc <_Balloc>
 80076be:	9000      	str	r0, [sp, #0]
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d139      	bne.n	8007738 <_dtoa_r+0x320>
 80076c4:	4b16      	ldr	r3, [pc, #88]	; (8007720 <_dtoa_r+0x308>)
 80076c6:	4602      	mov	r2, r0
 80076c8:	f240 11af 	movw	r1, #431	; 0x1af
 80076cc:	e6bd      	b.n	800744a <_dtoa_r+0x32>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e7e1      	b.n	8007696 <_dtoa_r+0x27e>
 80076d2:	2501      	movs	r5, #1
 80076d4:	2300      	movs	r3, #0
 80076d6:	9307      	str	r3, [sp, #28]
 80076d8:	9509      	str	r5, [sp, #36]	; 0x24
 80076da:	f04f 33ff 	mov.w	r3, #4294967295
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	9304      	str	r3, [sp, #16]
 80076e2:	2200      	movs	r2, #0
 80076e4:	2312      	movs	r3, #18
 80076e6:	e7d1      	b.n	800768c <_dtoa_r+0x274>
 80076e8:	636f4361 	.word	0x636f4361
 80076ec:	3fd287a7 	.word	0x3fd287a7
 80076f0:	8b60c8b3 	.word	0x8b60c8b3
 80076f4:	3fc68a28 	.word	0x3fc68a28
 80076f8:	509f79fb 	.word	0x509f79fb
 80076fc:	3fd34413 	.word	0x3fd34413
 8007700:	08009171 	.word	0x08009171
 8007704:	08009188 	.word	0x08009188
 8007708:	7ff00000 	.word	0x7ff00000
 800770c:	0800916d 	.word	0x0800916d
 8007710:	08009164 	.word	0x08009164
 8007714:	08009141 	.word	0x08009141
 8007718:	3ff80000 	.word	0x3ff80000
 800771c:	08009278 	.word	0x08009278
 8007720:	080091e0 	.word	0x080091e0
 8007724:	2301      	movs	r3, #1
 8007726:	9309      	str	r3, [sp, #36]	; 0x24
 8007728:	e7d7      	b.n	80076da <_dtoa_r+0x2c2>
 800772a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	9304      	str	r3, [sp, #16]
 8007730:	e7ba      	b.n	80076a8 <_dtoa_r+0x290>
 8007732:	3101      	adds	r1, #1
 8007734:	0052      	lsls	r2, r2, #1
 8007736:	e7ba      	b.n	80076ae <_dtoa_r+0x296>
 8007738:	69e3      	ldr	r3, [r4, #28]
 800773a:	9a00      	ldr	r2, [sp, #0]
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	9b04      	ldr	r3, [sp, #16]
 8007740:	2b0e      	cmp	r3, #14
 8007742:	f200 80a8 	bhi.w	8007896 <_dtoa_r+0x47e>
 8007746:	2d00      	cmp	r5, #0
 8007748:	f000 80a5 	beq.w	8007896 <_dtoa_r+0x47e>
 800774c:	f1bb 0f00 	cmp.w	fp, #0
 8007750:	dd38      	ble.n	80077c4 <_dtoa_r+0x3ac>
 8007752:	4bc0      	ldr	r3, [pc, #768]	; (8007a54 <_dtoa_r+0x63c>)
 8007754:	f00b 020f 	and.w	r2, fp, #15
 8007758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800775c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007760:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007764:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007768:	d019      	beq.n	800779e <_dtoa_r+0x386>
 800776a:	4bbb      	ldr	r3, [pc, #748]	; (8007a58 <_dtoa_r+0x640>)
 800776c:	ec51 0b18 	vmov	r0, r1, d8
 8007770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007774:	f7f9 f872 	bl	800085c <__aeabi_ddiv>
 8007778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800777c:	f008 080f 	and.w	r8, r8, #15
 8007780:	2503      	movs	r5, #3
 8007782:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007a58 <_dtoa_r+0x640>
 8007786:	f1b8 0f00 	cmp.w	r8, #0
 800778a:	d10a      	bne.n	80077a2 <_dtoa_r+0x38a>
 800778c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007790:	4632      	mov	r2, r6
 8007792:	463b      	mov	r3, r7
 8007794:	f7f9 f862 	bl	800085c <__aeabi_ddiv>
 8007798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800779c:	e02b      	b.n	80077f6 <_dtoa_r+0x3de>
 800779e:	2502      	movs	r5, #2
 80077a0:	e7ef      	b.n	8007782 <_dtoa_r+0x36a>
 80077a2:	f018 0f01 	tst.w	r8, #1
 80077a6:	d008      	beq.n	80077ba <_dtoa_r+0x3a2>
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077b0:	f7f8 ff2a 	bl	8000608 <__aeabi_dmul>
 80077b4:	3501      	adds	r5, #1
 80077b6:	4606      	mov	r6, r0
 80077b8:	460f      	mov	r7, r1
 80077ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077be:	f109 0908 	add.w	r9, r9, #8
 80077c2:	e7e0      	b.n	8007786 <_dtoa_r+0x36e>
 80077c4:	f000 809f 	beq.w	8007906 <_dtoa_r+0x4ee>
 80077c8:	f1cb 0600 	rsb	r6, fp, #0
 80077cc:	4ba1      	ldr	r3, [pc, #644]	; (8007a54 <_dtoa_r+0x63c>)
 80077ce:	4fa2      	ldr	r7, [pc, #648]	; (8007a58 <_dtoa_r+0x640>)
 80077d0:	f006 020f 	and.w	r2, r6, #15
 80077d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	ec51 0b18 	vmov	r0, r1, d8
 80077e0:	f7f8 ff12 	bl	8000608 <__aeabi_dmul>
 80077e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077e8:	1136      	asrs	r6, r6, #4
 80077ea:	2300      	movs	r3, #0
 80077ec:	2502      	movs	r5, #2
 80077ee:	2e00      	cmp	r6, #0
 80077f0:	d17e      	bne.n	80078f0 <_dtoa_r+0x4d8>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1d0      	bne.n	8007798 <_dtoa_r+0x380>
 80077f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8084 	beq.w	800790a <_dtoa_r+0x4f2>
 8007802:	4b96      	ldr	r3, [pc, #600]	; (8007a5c <_dtoa_r+0x644>)
 8007804:	2200      	movs	r2, #0
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	f7f9 f96f 	bl	8000aec <__aeabi_dcmplt>
 800780e:	2800      	cmp	r0, #0
 8007810:	d07b      	beq.n	800790a <_dtoa_r+0x4f2>
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d078      	beq.n	800790a <_dtoa_r+0x4f2>
 8007818:	9b01      	ldr	r3, [sp, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dd39      	ble.n	8007892 <_dtoa_r+0x47a>
 800781e:	4b90      	ldr	r3, [pc, #576]	; (8007a60 <_dtoa_r+0x648>)
 8007820:	2200      	movs	r2, #0
 8007822:	4640      	mov	r0, r8
 8007824:	4649      	mov	r1, r9
 8007826:	f7f8 feef 	bl	8000608 <__aeabi_dmul>
 800782a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800782e:	9e01      	ldr	r6, [sp, #4]
 8007830:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007834:	3501      	adds	r5, #1
 8007836:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800783a:	4628      	mov	r0, r5
 800783c:	f7f8 fe7a 	bl	8000534 <__aeabi_i2d>
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	f7f8 fee0 	bl	8000608 <__aeabi_dmul>
 8007848:	4b86      	ldr	r3, [pc, #536]	; (8007a64 <_dtoa_r+0x64c>)
 800784a:	2200      	movs	r2, #0
 800784c:	f7f8 fd26 	bl	800029c <__adddf3>
 8007850:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007858:	9303      	str	r3, [sp, #12]
 800785a:	2e00      	cmp	r6, #0
 800785c:	d158      	bne.n	8007910 <_dtoa_r+0x4f8>
 800785e:	4b82      	ldr	r3, [pc, #520]	; (8007a68 <_dtoa_r+0x650>)
 8007860:	2200      	movs	r2, #0
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	f7f8 fd17 	bl	8000298 <__aeabi_dsub>
 800786a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800786e:	4680      	mov	r8, r0
 8007870:	4689      	mov	r9, r1
 8007872:	f7f9 f959 	bl	8000b28 <__aeabi_dcmpgt>
 8007876:	2800      	cmp	r0, #0
 8007878:	f040 8296 	bne.w	8007da8 <_dtoa_r+0x990>
 800787c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007880:	4640      	mov	r0, r8
 8007882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007886:	4649      	mov	r1, r9
 8007888:	f7f9 f930 	bl	8000aec <__aeabi_dcmplt>
 800788c:	2800      	cmp	r0, #0
 800788e:	f040 8289 	bne.w	8007da4 <_dtoa_r+0x98c>
 8007892:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007898:	2b00      	cmp	r3, #0
 800789a:	f2c0 814e 	blt.w	8007b3a <_dtoa_r+0x722>
 800789e:	f1bb 0f0e 	cmp.w	fp, #14
 80078a2:	f300 814a 	bgt.w	8007b3a <_dtoa_r+0x722>
 80078a6:	4b6b      	ldr	r3, [pc, #428]	; (8007a54 <_dtoa_r+0x63c>)
 80078a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f280 80dc 	bge.w	8007a70 <_dtoa_r+0x658>
 80078b8:	9b04      	ldr	r3, [sp, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f300 80d8 	bgt.w	8007a70 <_dtoa_r+0x658>
 80078c0:	f040 826f 	bne.w	8007da2 <_dtoa_r+0x98a>
 80078c4:	4b68      	ldr	r3, [pc, #416]	; (8007a68 <_dtoa_r+0x650>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	4640      	mov	r0, r8
 80078ca:	4649      	mov	r1, r9
 80078cc:	f7f8 fe9c 	bl	8000608 <__aeabi_dmul>
 80078d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078d4:	f7f9 f91e 	bl	8000b14 <__aeabi_dcmpge>
 80078d8:	9e04      	ldr	r6, [sp, #16]
 80078da:	4637      	mov	r7, r6
 80078dc:	2800      	cmp	r0, #0
 80078de:	f040 8245 	bne.w	8007d6c <_dtoa_r+0x954>
 80078e2:	9d00      	ldr	r5, [sp, #0]
 80078e4:	2331      	movs	r3, #49	; 0x31
 80078e6:	f805 3b01 	strb.w	r3, [r5], #1
 80078ea:	f10b 0b01 	add.w	fp, fp, #1
 80078ee:	e241      	b.n	8007d74 <_dtoa_r+0x95c>
 80078f0:	07f2      	lsls	r2, r6, #31
 80078f2:	d505      	bpl.n	8007900 <_dtoa_r+0x4e8>
 80078f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f8:	f7f8 fe86 	bl	8000608 <__aeabi_dmul>
 80078fc:	3501      	adds	r5, #1
 80078fe:	2301      	movs	r3, #1
 8007900:	1076      	asrs	r6, r6, #1
 8007902:	3708      	adds	r7, #8
 8007904:	e773      	b.n	80077ee <_dtoa_r+0x3d6>
 8007906:	2502      	movs	r5, #2
 8007908:	e775      	b.n	80077f6 <_dtoa_r+0x3de>
 800790a:	9e04      	ldr	r6, [sp, #16]
 800790c:	465f      	mov	r7, fp
 800790e:	e792      	b.n	8007836 <_dtoa_r+0x41e>
 8007910:	9900      	ldr	r1, [sp, #0]
 8007912:	4b50      	ldr	r3, [pc, #320]	; (8007a54 <_dtoa_r+0x63c>)
 8007914:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007918:	4431      	add	r1, r6
 800791a:	9102      	str	r1, [sp, #8]
 800791c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800791e:	eeb0 9a47 	vmov.f32	s18, s14
 8007922:	eef0 9a67 	vmov.f32	s19, s15
 8007926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800792a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800792e:	2900      	cmp	r1, #0
 8007930:	d044      	beq.n	80079bc <_dtoa_r+0x5a4>
 8007932:	494e      	ldr	r1, [pc, #312]	; (8007a6c <_dtoa_r+0x654>)
 8007934:	2000      	movs	r0, #0
 8007936:	f7f8 ff91 	bl	800085c <__aeabi_ddiv>
 800793a:	ec53 2b19 	vmov	r2, r3, d9
 800793e:	f7f8 fcab 	bl	8000298 <__aeabi_dsub>
 8007942:	9d00      	ldr	r5, [sp, #0]
 8007944:	ec41 0b19 	vmov	d9, r0, r1
 8007948:	4649      	mov	r1, r9
 800794a:	4640      	mov	r0, r8
 800794c:	f7f9 f90c 	bl	8000b68 <__aeabi_d2iz>
 8007950:	4606      	mov	r6, r0
 8007952:	f7f8 fdef 	bl	8000534 <__aeabi_i2d>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4640      	mov	r0, r8
 800795c:	4649      	mov	r1, r9
 800795e:	f7f8 fc9b 	bl	8000298 <__aeabi_dsub>
 8007962:	3630      	adds	r6, #48	; 0x30
 8007964:	f805 6b01 	strb.w	r6, [r5], #1
 8007968:	ec53 2b19 	vmov	r2, r3, d9
 800796c:	4680      	mov	r8, r0
 800796e:	4689      	mov	r9, r1
 8007970:	f7f9 f8bc 	bl	8000aec <__aeabi_dcmplt>
 8007974:	2800      	cmp	r0, #0
 8007976:	d164      	bne.n	8007a42 <_dtoa_r+0x62a>
 8007978:	4642      	mov	r2, r8
 800797a:	464b      	mov	r3, r9
 800797c:	4937      	ldr	r1, [pc, #220]	; (8007a5c <_dtoa_r+0x644>)
 800797e:	2000      	movs	r0, #0
 8007980:	f7f8 fc8a 	bl	8000298 <__aeabi_dsub>
 8007984:	ec53 2b19 	vmov	r2, r3, d9
 8007988:	f7f9 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800798c:	2800      	cmp	r0, #0
 800798e:	f040 80b6 	bne.w	8007afe <_dtoa_r+0x6e6>
 8007992:	9b02      	ldr	r3, [sp, #8]
 8007994:	429d      	cmp	r5, r3
 8007996:	f43f af7c 	beq.w	8007892 <_dtoa_r+0x47a>
 800799a:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <_dtoa_r+0x648>)
 800799c:	ec51 0b19 	vmov	r0, r1, d9
 80079a0:	2200      	movs	r2, #0
 80079a2:	f7f8 fe31 	bl	8000608 <__aeabi_dmul>
 80079a6:	4b2e      	ldr	r3, [pc, #184]	; (8007a60 <_dtoa_r+0x648>)
 80079a8:	ec41 0b19 	vmov	d9, r0, r1
 80079ac:	2200      	movs	r2, #0
 80079ae:	4640      	mov	r0, r8
 80079b0:	4649      	mov	r1, r9
 80079b2:	f7f8 fe29 	bl	8000608 <__aeabi_dmul>
 80079b6:	4680      	mov	r8, r0
 80079b8:	4689      	mov	r9, r1
 80079ba:	e7c5      	b.n	8007948 <_dtoa_r+0x530>
 80079bc:	ec51 0b17 	vmov	r0, r1, d7
 80079c0:	f7f8 fe22 	bl	8000608 <__aeabi_dmul>
 80079c4:	9b02      	ldr	r3, [sp, #8]
 80079c6:	9d00      	ldr	r5, [sp, #0]
 80079c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ca:	ec41 0b19 	vmov	d9, r0, r1
 80079ce:	4649      	mov	r1, r9
 80079d0:	4640      	mov	r0, r8
 80079d2:	f7f9 f8c9 	bl	8000b68 <__aeabi_d2iz>
 80079d6:	4606      	mov	r6, r0
 80079d8:	f7f8 fdac 	bl	8000534 <__aeabi_i2d>
 80079dc:	3630      	adds	r6, #48	; 0x30
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4640      	mov	r0, r8
 80079e4:	4649      	mov	r1, r9
 80079e6:	f7f8 fc57 	bl	8000298 <__aeabi_dsub>
 80079ea:	f805 6b01 	strb.w	r6, [r5], #1
 80079ee:	9b02      	ldr	r3, [sp, #8]
 80079f0:	429d      	cmp	r5, r3
 80079f2:	4680      	mov	r8, r0
 80079f4:	4689      	mov	r9, r1
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	d124      	bne.n	8007a46 <_dtoa_r+0x62e>
 80079fc:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <_dtoa_r+0x654>)
 80079fe:	ec51 0b19 	vmov	r0, r1, d9
 8007a02:	f7f8 fc4b 	bl	800029c <__adddf3>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7f9 f88b 	bl	8000b28 <__aeabi_dcmpgt>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d173      	bne.n	8007afe <_dtoa_r+0x6e6>
 8007a16:	ec53 2b19 	vmov	r2, r3, d9
 8007a1a:	4914      	ldr	r1, [pc, #80]	; (8007a6c <_dtoa_r+0x654>)
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	f7f8 fc3b 	bl	8000298 <__aeabi_dsub>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	f7f9 f85f 	bl	8000aec <__aeabi_dcmplt>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f af2f 	beq.w	8007892 <_dtoa_r+0x47a>
 8007a34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a36:	1e6b      	subs	r3, r5, #1
 8007a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a3e:	2b30      	cmp	r3, #48	; 0x30
 8007a40:	d0f8      	beq.n	8007a34 <_dtoa_r+0x61c>
 8007a42:	46bb      	mov	fp, r7
 8007a44:	e04a      	b.n	8007adc <_dtoa_r+0x6c4>
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <_dtoa_r+0x648>)
 8007a48:	f7f8 fdde 	bl	8000608 <__aeabi_dmul>
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	4689      	mov	r9, r1
 8007a50:	e7bd      	b.n	80079ce <_dtoa_r+0x5b6>
 8007a52:	bf00      	nop
 8007a54:	08009278 	.word	0x08009278
 8007a58:	08009250 	.word	0x08009250
 8007a5c:	3ff00000 	.word	0x3ff00000
 8007a60:	40240000 	.word	0x40240000
 8007a64:	401c0000 	.word	0x401c0000
 8007a68:	40140000 	.word	0x40140000
 8007a6c:	3fe00000 	.word	0x3fe00000
 8007a70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a74:	9d00      	ldr	r5, [sp, #0]
 8007a76:	4642      	mov	r2, r8
 8007a78:	464b      	mov	r3, r9
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	f7f8 feed 	bl	800085c <__aeabi_ddiv>
 8007a82:	f7f9 f871 	bl	8000b68 <__aeabi_d2iz>
 8007a86:	9001      	str	r0, [sp, #4]
 8007a88:	f7f8 fd54 	bl	8000534 <__aeabi_i2d>
 8007a8c:	4642      	mov	r2, r8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	f7f8 fdba 	bl	8000608 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	f7f8 fbfc 	bl	8000298 <__aeabi_dsub>
 8007aa0:	9e01      	ldr	r6, [sp, #4]
 8007aa2:	9f04      	ldr	r7, [sp, #16]
 8007aa4:	3630      	adds	r6, #48	; 0x30
 8007aa6:	f805 6b01 	strb.w	r6, [r5], #1
 8007aaa:	9e00      	ldr	r6, [sp, #0]
 8007aac:	1bae      	subs	r6, r5, r6
 8007aae:	42b7      	cmp	r7, r6
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	d134      	bne.n	8007b20 <_dtoa_r+0x708>
 8007ab6:	f7f8 fbf1 	bl	800029c <__adddf3>
 8007aba:	4642      	mov	r2, r8
 8007abc:	464b      	mov	r3, r9
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460f      	mov	r7, r1
 8007ac2:	f7f9 f831 	bl	8000b28 <__aeabi_dcmpgt>
 8007ac6:	b9c8      	cbnz	r0, 8007afc <_dtoa_r+0x6e4>
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	4630      	mov	r0, r6
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7f9 f802 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ad4:	b110      	cbz	r0, 8007adc <_dtoa_r+0x6c4>
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	07db      	lsls	r3, r3, #31
 8007ada:	d40f      	bmi.n	8007afc <_dtoa_r+0x6e4>
 8007adc:	4651      	mov	r1, sl
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 fbcc 	bl	800827c <_Bfree>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ae8:	702b      	strb	r3, [r5, #0]
 8007aea:	f10b 0301 	add.w	r3, fp, #1
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f43f ace2 	beq.w	80074bc <_dtoa_r+0xa4>
 8007af8:	601d      	str	r5, [r3, #0]
 8007afa:	e4df      	b.n	80074bc <_dtoa_r+0xa4>
 8007afc:	465f      	mov	r7, fp
 8007afe:	462b      	mov	r3, r5
 8007b00:	461d      	mov	r5, r3
 8007b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b06:	2a39      	cmp	r2, #57	; 0x39
 8007b08:	d106      	bne.n	8007b18 <_dtoa_r+0x700>
 8007b0a:	9a00      	ldr	r2, [sp, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d1f7      	bne.n	8007b00 <_dtoa_r+0x6e8>
 8007b10:	9900      	ldr	r1, [sp, #0]
 8007b12:	2230      	movs	r2, #48	; 0x30
 8007b14:	3701      	adds	r7, #1
 8007b16:	700a      	strb	r2, [r1, #0]
 8007b18:	781a      	ldrb	r2, [r3, #0]
 8007b1a:	3201      	adds	r2, #1
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	e790      	b.n	8007a42 <_dtoa_r+0x62a>
 8007b20:	4ba3      	ldr	r3, [pc, #652]	; (8007db0 <_dtoa_r+0x998>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	f7f8 fd70 	bl	8000608 <__aeabi_dmul>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	f7f8 ffd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d09e      	beq.n	8007a76 <_dtoa_r+0x65e>
 8007b38:	e7d0      	b.n	8007adc <_dtoa_r+0x6c4>
 8007b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	f000 80ca 	beq.w	8007cd6 <_dtoa_r+0x8be>
 8007b42:	9a07      	ldr	r2, [sp, #28]
 8007b44:	2a01      	cmp	r2, #1
 8007b46:	f300 80ad 	bgt.w	8007ca4 <_dtoa_r+0x88c>
 8007b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b4c:	2a00      	cmp	r2, #0
 8007b4e:	f000 80a5 	beq.w	8007c9c <_dtoa_r+0x884>
 8007b52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b56:	9e08      	ldr	r6, [sp, #32]
 8007b58:	9d05      	ldr	r5, [sp, #20]
 8007b5a:	9a05      	ldr	r2, [sp, #20]
 8007b5c:	441a      	add	r2, r3
 8007b5e:	9205      	str	r2, [sp, #20]
 8007b60:	9a06      	ldr	r2, [sp, #24]
 8007b62:	2101      	movs	r1, #1
 8007b64:	441a      	add	r2, r3
 8007b66:	4620      	mov	r0, r4
 8007b68:	9206      	str	r2, [sp, #24]
 8007b6a:	f000 fc3d 	bl	80083e8 <__i2b>
 8007b6e:	4607      	mov	r7, r0
 8007b70:	b165      	cbz	r5, 8007b8c <_dtoa_r+0x774>
 8007b72:	9b06      	ldr	r3, [sp, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dd09      	ble.n	8007b8c <_dtoa_r+0x774>
 8007b78:	42ab      	cmp	r3, r5
 8007b7a:	9a05      	ldr	r2, [sp, #20]
 8007b7c:	bfa8      	it	ge
 8007b7e:	462b      	movge	r3, r5
 8007b80:	1ad2      	subs	r2, r2, r3
 8007b82:	9205      	str	r2, [sp, #20]
 8007b84:	9a06      	ldr	r2, [sp, #24]
 8007b86:	1aed      	subs	r5, r5, r3
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	9306      	str	r3, [sp, #24]
 8007b8c:	9b08      	ldr	r3, [sp, #32]
 8007b8e:	b1f3      	cbz	r3, 8007bce <_dtoa_r+0x7b6>
 8007b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 80a3 	beq.w	8007cde <_dtoa_r+0x8c6>
 8007b98:	2e00      	cmp	r6, #0
 8007b9a:	dd10      	ble.n	8007bbe <_dtoa_r+0x7a6>
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 fce1 	bl	8008568 <__pow5mult>
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	4601      	mov	r1, r0
 8007baa:	4607      	mov	r7, r0
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 fc31 	bl	8008414 <__multiply>
 8007bb2:	4651      	mov	r1, sl
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fb60 	bl	800827c <_Bfree>
 8007bbc:	46c2      	mov	sl, r8
 8007bbe:	9b08      	ldr	r3, [sp, #32]
 8007bc0:	1b9a      	subs	r2, r3, r6
 8007bc2:	d004      	beq.n	8007bce <_dtoa_r+0x7b6>
 8007bc4:	4651      	mov	r1, sl
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f000 fcce 	bl	8008568 <__pow5mult>
 8007bcc:	4682      	mov	sl, r0
 8007bce:	2101      	movs	r1, #1
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 fc09 	bl	80083e8 <__i2b>
 8007bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	4606      	mov	r6, r0
 8007bdc:	f340 8081 	ble.w	8007ce2 <_dtoa_r+0x8ca>
 8007be0:	461a      	mov	r2, r3
 8007be2:	4601      	mov	r1, r0
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 fcbf 	bl	8008568 <__pow5mult>
 8007bea:	9b07      	ldr	r3, [sp, #28]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	4606      	mov	r6, r0
 8007bf0:	dd7a      	ble.n	8007ce8 <_dtoa_r+0x8d0>
 8007bf2:	f04f 0800 	mov.w	r8, #0
 8007bf6:	6933      	ldr	r3, [r6, #16]
 8007bf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007bfc:	6918      	ldr	r0, [r3, #16]
 8007bfe:	f000 fba5 	bl	800834c <__hi0bits>
 8007c02:	f1c0 0020 	rsb	r0, r0, #32
 8007c06:	9b06      	ldr	r3, [sp, #24]
 8007c08:	4418      	add	r0, r3
 8007c0a:	f010 001f 	ands.w	r0, r0, #31
 8007c0e:	f000 8094 	beq.w	8007d3a <_dtoa_r+0x922>
 8007c12:	f1c0 0320 	rsb	r3, r0, #32
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	f340 8085 	ble.w	8007d26 <_dtoa_r+0x90e>
 8007c1c:	9b05      	ldr	r3, [sp, #20]
 8007c1e:	f1c0 001c 	rsb	r0, r0, #28
 8007c22:	4403      	add	r3, r0
 8007c24:	9305      	str	r3, [sp, #20]
 8007c26:	9b06      	ldr	r3, [sp, #24]
 8007c28:	4403      	add	r3, r0
 8007c2a:	4405      	add	r5, r0
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	9b05      	ldr	r3, [sp, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dd05      	ble.n	8007c40 <_dtoa_r+0x828>
 8007c34:	4651      	mov	r1, sl
 8007c36:	461a      	mov	r2, r3
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fcef 	bl	800861c <__lshift>
 8007c3e:	4682      	mov	sl, r0
 8007c40:	9b06      	ldr	r3, [sp, #24]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dd05      	ble.n	8007c52 <_dtoa_r+0x83a>
 8007c46:	4631      	mov	r1, r6
 8007c48:	461a      	mov	r2, r3
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 fce6 	bl	800861c <__lshift>
 8007c50:	4606      	mov	r6, r0
 8007c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d072      	beq.n	8007d3e <_dtoa_r+0x926>
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f000 fd4a 	bl	80086f4 <__mcmp>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	da6c      	bge.n	8007d3e <_dtoa_r+0x926>
 8007c64:	2300      	movs	r3, #0
 8007c66:	4651      	mov	r1, sl
 8007c68:	220a      	movs	r2, #10
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 fb28 	bl	80082c0 <__multadd>
 8007c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c76:	4682      	mov	sl, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 81b0 	beq.w	8007fde <_dtoa_r+0xbc6>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	4639      	mov	r1, r7
 8007c82:	220a      	movs	r2, #10
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 fb1b 	bl	80082c0 <__multadd>
 8007c8a:	9b01      	ldr	r3, [sp, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	4607      	mov	r7, r0
 8007c90:	f300 8096 	bgt.w	8007dc0 <_dtoa_r+0x9a8>
 8007c94:	9b07      	ldr	r3, [sp, #28]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	dc59      	bgt.n	8007d4e <_dtoa_r+0x936>
 8007c9a:	e091      	b.n	8007dc0 <_dtoa_r+0x9a8>
 8007c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ca2:	e758      	b.n	8007b56 <_dtoa_r+0x73e>
 8007ca4:	9b04      	ldr	r3, [sp, #16]
 8007ca6:	1e5e      	subs	r6, r3, #1
 8007ca8:	9b08      	ldr	r3, [sp, #32]
 8007caa:	42b3      	cmp	r3, r6
 8007cac:	bfbf      	itttt	lt
 8007cae:	9b08      	ldrlt	r3, [sp, #32]
 8007cb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007cb2:	9608      	strlt	r6, [sp, #32]
 8007cb4:	1af3      	sublt	r3, r6, r3
 8007cb6:	bfb4      	ite	lt
 8007cb8:	18d2      	addlt	r2, r2, r3
 8007cba:	1b9e      	subge	r6, r3, r6
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	bfbc      	itt	lt
 8007cc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007cc2:	2600      	movlt	r6, #0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bfb7      	itett	lt
 8007cc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007ccc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007cd0:	1a9d      	sublt	r5, r3, r2
 8007cd2:	2300      	movlt	r3, #0
 8007cd4:	e741      	b.n	8007b5a <_dtoa_r+0x742>
 8007cd6:	9e08      	ldr	r6, [sp, #32]
 8007cd8:	9d05      	ldr	r5, [sp, #20]
 8007cda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cdc:	e748      	b.n	8007b70 <_dtoa_r+0x758>
 8007cde:	9a08      	ldr	r2, [sp, #32]
 8007ce0:	e770      	b.n	8007bc4 <_dtoa_r+0x7ac>
 8007ce2:	9b07      	ldr	r3, [sp, #28]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	dc19      	bgt.n	8007d1c <_dtoa_r+0x904>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	b9bb      	cbnz	r3, 8007d1c <_dtoa_r+0x904>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cf2:	b99b      	cbnz	r3, 8007d1c <_dtoa_r+0x904>
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cfa:	0d1b      	lsrs	r3, r3, #20
 8007cfc:	051b      	lsls	r3, r3, #20
 8007cfe:	b183      	cbz	r3, 8007d22 <_dtoa_r+0x90a>
 8007d00:	9b05      	ldr	r3, [sp, #20]
 8007d02:	3301      	adds	r3, #1
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	9b06      	ldr	r3, [sp, #24]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	9306      	str	r3, [sp, #24]
 8007d0c:	f04f 0801 	mov.w	r8, #1
 8007d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f47f af6f 	bne.w	8007bf6 <_dtoa_r+0x7de>
 8007d18:	2001      	movs	r0, #1
 8007d1a:	e774      	b.n	8007c06 <_dtoa_r+0x7ee>
 8007d1c:	f04f 0800 	mov.w	r8, #0
 8007d20:	e7f6      	b.n	8007d10 <_dtoa_r+0x8f8>
 8007d22:	4698      	mov	r8, r3
 8007d24:	e7f4      	b.n	8007d10 <_dtoa_r+0x8f8>
 8007d26:	d082      	beq.n	8007c2e <_dtoa_r+0x816>
 8007d28:	9a05      	ldr	r2, [sp, #20]
 8007d2a:	331c      	adds	r3, #28
 8007d2c:	441a      	add	r2, r3
 8007d2e:	9205      	str	r2, [sp, #20]
 8007d30:	9a06      	ldr	r2, [sp, #24]
 8007d32:	441a      	add	r2, r3
 8007d34:	441d      	add	r5, r3
 8007d36:	9206      	str	r2, [sp, #24]
 8007d38:	e779      	b.n	8007c2e <_dtoa_r+0x816>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	e7f4      	b.n	8007d28 <_dtoa_r+0x910>
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dc37      	bgt.n	8007db4 <_dtoa_r+0x99c>
 8007d44:	9b07      	ldr	r3, [sp, #28]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	dd34      	ble.n	8007db4 <_dtoa_r+0x99c>
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	b963      	cbnz	r3, 8007d6c <_dtoa_r+0x954>
 8007d52:	4631      	mov	r1, r6
 8007d54:	2205      	movs	r2, #5
 8007d56:	4620      	mov	r0, r4
 8007d58:	f000 fab2 	bl	80082c0 <__multadd>
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	4606      	mov	r6, r0
 8007d60:	4650      	mov	r0, sl
 8007d62:	f000 fcc7 	bl	80086f4 <__mcmp>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f73f adbb 	bgt.w	80078e2 <_dtoa_r+0x4ca>
 8007d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d6e:	9d00      	ldr	r5, [sp, #0]
 8007d70:	ea6f 0b03 	mvn.w	fp, r3
 8007d74:	f04f 0800 	mov.w	r8, #0
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fa7e 	bl	800827c <_Bfree>
 8007d80:	2f00      	cmp	r7, #0
 8007d82:	f43f aeab 	beq.w	8007adc <_dtoa_r+0x6c4>
 8007d86:	f1b8 0f00 	cmp.w	r8, #0
 8007d8a:	d005      	beq.n	8007d98 <_dtoa_r+0x980>
 8007d8c:	45b8      	cmp	r8, r7
 8007d8e:	d003      	beq.n	8007d98 <_dtoa_r+0x980>
 8007d90:	4641      	mov	r1, r8
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fa72 	bl	800827c <_Bfree>
 8007d98:	4639      	mov	r1, r7
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 fa6e 	bl	800827c <_Bfree>
 8007da0:	e69c      	b.n	8007adc <_dtoa_r+0x6c4>
 8007da2:	2600      	movs	r6, #0
 8007da4:	4637      	mov	r7, r6
 8007da6:	e7e1      	b.n	8007d6c <_dtoa_r+0x954>
 8007da8:	46bb      	mov	fp, r7
 8007daa:	4637      	mov	r7, r6
 8007dac:	e599      	b.n	80078e2 <_dtoa_r+0x4ca>
 8007dae:	bf00      	nop
 8007db0:	40240000 	.word	0x40240000
 8007db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80c8 	beq.w	8007f4c <_dtoa_r+0xb34>
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	2d00      	cmp	r5, #0
 8007dc2:	dd05      	ble.n	8007dd0 <_dtoa_r+0x9b8>
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fc27 	bl	800861c <__lshift>
 8007dce:	4607      	mov	r7, r0
 8007dd0:	f1b8 0f00 	cmp.w	r8, #0
 8007dd4:	d05b      	beq.n	8007e8e <_dtoa_r+0xa76>
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 fa0f 	bl	80081fc <_Balloc>
 8007dde:	4605      	mov	r5, r0
 8007de0:	b928      	cbnz	r0, 8007dee <_dtoa_r+0x9d6>
 8007de2:	4b83      	ldr	r3, [pc, #524]	; (8007ff0 <_dtoa_r+0xbd8>)
 8007de4:	4602      	mov	r2, r0
 8007de6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007dea:	f7ff bb2e 	b.w	800744a <_dtoa_r+0x32>
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	3202      	adds	r2, #2
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	f107 010c 	add.w	r1, r7, #12
 8007df8:	300c      	adds	r0, #12
 8007dfa:	f7ff fa76 	bl	80072ea <memcpy>
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4629      	mov	r1, r5
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 fc0a 	bl	800861c <__lshift>
 8007e08:	9b00      	ldr	r3, [sp, #0]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e12:	4413      	add	r3, r2
 8007e14:	9308      	str	r3, [sp, #32]
 8007e16:	9b02      	ldr	r3, [sp, #8]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	46b8      	mov	r8, r7
 8007e1e:	9306      	str	r3, [sp, #24]
 8007e20:	4607      	mov	r7, r0
 8007e22:	9b04      	ldr	r3, [sp, #16]
 8007e24:	4631      	mov	r1, r6
 8007e26:	3b01      	subs	r3, #1
 8007e28:	4650      	mov	r0, sl
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	f7ff fa6b 	bl	8007306 <quorem>
 8007e30:	4641      	mov	r1, r8
 8007e32:	9002      	str	r0, [sp, #8]
 8007e34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e38:	4650      	mov	r0, sl
 8007e3a:	f000 fc5b 	bl	80086f4 <__mcmp>
 8007e3e:	463a      	mov	r2, r7
 8007e40:	9005      	str	r0, [sp, #20]
 8007e42:	4631      	mov	r1, r6
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 fc71 	bl	800872c <__mdiff>
 8007e4a:	68c2      	ldr	r2, [r0, #12]
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	bb02      	cbnz	r2, 8007e92 <_dtoa_r+0xa7a>
 8007e50:	4601      	mov	r1, r0
 8007e52:	4650      	mov	r0, sl
 8007e54:	f000 fc4e 	bl	80086f4 <__mcmp>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e60:	f000 fa0c 	bl	800827c <_Bfree>
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e68:	9d04      	ldr	r5, [sp, #16]
 8007e6a:	ea43 0102 	orr.w	r1, r3, r2
 8007e6e:	9b06      	ldr	r3, [sp, #24]
 8007e70:	4319      	orrs	r1, r3
 8007e72:	d110      	bne.n	8007e96 <_dtoa_r+0xa7e>
 8007e74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e78:	d029      	beq.n	8007ece <_dtoa_r+0xab6>
 8007e7a:	9b05      	ldr	r3, [sp, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd02      	ble.n	8007e86 <_dtoa_r+0xa6e>
 8007e80:	9b02      	ldr	r3, [sp, #8]
 8007e82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007e86:	9b01      	ldr	r3, [sp, #4]
 8007e88:	f883 9000 	strb.w	r9, [r3]
 8007e8c:	e774      	b.n	8007d78 <_dtoa_r+0x960>
 8007e8e:	4638      	mov	r0, r7
 8007e90:	e7ba      	b.n	8007e08 <_dtoa_r+0x9f0>
 8007e92:	2201      	movs	r2, #1
 8007e94:	e7e1      	b.n	8007e5a <_dtoa_r+0xa42>
 8007e96:	9b05      	ldr	r3, [sp, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	db04      	blt.n	8007ea6 <_dtoa_r+0xa8e>
 8007e9c:	9907      	ldr	r1, [sp, #28]
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	9906      	ldr	r1, [sp, #24]
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	d120      	bne.n	8007ee8 <_dtoa_r+0xad0>
 8007ea6:	2a00      	cmp	r2, #0
 8007ea8:	dded      	ble.n	8007e86 <_dtoa_r+0xa6e>
 8007eaa:	4651      	mov	r1, sl
 8007eac:	2201      	movs	r2, #1
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fbb4 	bl	800861c <__lshift>
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4682      	mov	sl, r0
 8007eb8:	f000 fc1c 	bl	80086f4 <__mcmp>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	dc03      	bgt.n	8007ec8 <_dtoa_r+0xab0>
 8007ec0:	d1e1      	bne.n	8007e86 <_dtoa_r+0xa6e>
 8007ec2:	f019 0f01 	tst.w	r9, #1
 8007ec6:	d0de      	beq.n	8007e86 <_dtoa_r+0xa6e>
 8007ec8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ecc:	d1d8      	bne.n	8007e80 <_dtoa_r+0xa68>
 8007ece:	9a01      	ldr	r2, [sp, #4]
 8007ed0:	2339      	movs	r3, #57	; 0x39
 8007ed2:	7013      	strb	r3, [r2, #0]
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ede:	2a39      	cmp	r2, #57	; 0x39
 8007ee0:	d06c      	beq.n	8007fbc <_dtoa_r+0xba4>
 8007ee2:	3201      	adds	r2, #1
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	e747      	b.n	8007d78 <_dtoa_r+0x960>
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	dd07      	ble.n	8007efc <_dtoa_r+0xae4>
 8007eec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ef0:	d0ed      	beq.n	8007ece <_dtoa_r+0xab6>
 8007ef2:	9a01      	ldr	r2, [sp, #4]
 8007ef4:	f109 0301 	add.w	r3, r9, #1
 8007ef8:	7013      	strb	r3, [r2, #0]
 8007efa:	e73d      	b.n	8007d78 <_dtoa_r+0x960>
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	9a08      	ldr	r2, [sp, #32]
 8007f00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d043      	beq.n	8007f90 <_dtoa_r+0xb78>
 8007f08:	4651      	mov	r1, sl
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f9d6 	bl	80082c0 <__multadd>
 8007f14:	45b8      	cmp	r8, r7
 8007f16:	4682      	mov	sl, r0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	f04f 020a 	mov.w	r2, #10
 8007f20:	4641      	mov	r1, r8
 8007f22:	4620      	mov	r0, r4
 8007f24:	d107      	bne.n	8007f36 <_dtoa_r+0xb1e>
 8007f26:	f000 f9cb 	bl	80082c0 <__multadd>
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	4607      	mov	r7, r0
 8007f2e:	9b04      	ldr	r3, [sp, #16]
 8007f30:	3301      	adds	r3, #1
 8007f32:	9304      	str	r3, [sp, #16]
 8007f34:	e775      	b.n	8007e22 <_dtoa_r+0xa0a>
 8007f36:	f000 f9c3 	bl	80082c0 <__multadd>
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	220a      	movs	r2, #10
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f9bc 	bl	80082c0 <__multadd>
 8007f48:	4607      	mov	r7, r0
 8007f4a:	e7f0      	b.n	8007f2e <_dtoa_r+0xb16>
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	9d00      	ldr	r5, [sp, #0]
 8007f52:	4631      	mov	r1, r6
 8007f54:	4650      	mov	r0, sl
 8007f56:	f7ff f9d6 	bl	8007306 <quorem>
 8007f5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f5e:	9b00      	ldr	r3, [sp, #0]
 8007f60:	f805 9b01 	strb.w	r9, [r5], #1
 8007f64:	1aea      	subs	r2, r5, r3
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	dd07      	ble.n	8007f7c <_dtoa_r+0xb64>
 8007f6c:	4651      	mov	r1, sl
 8007f6e:	2300      	movs	r3, #0
 8007f70:	220a      	movs	r2, #10
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 f9a4 	bl	80082c0 <__multadd>
 8007f78:	4682      	mov	sl, r0
 8007f7a:	e7ea      	b.n	8007f52 <_dtoa_r+0xb3a>
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bfc8      	it	gt
 8007f82:	461d      	movgt	r5, r3
 8007f84:	9b00      	ldr	r3, [sp, #0]
 8007f86:	bfd8      	it	le
 8007f88:	2501      	movle	r5, #1
 8007f8a:	441d      	add	r5, r3
 8007f8c:	f04f 0800 	mov.w	r8, #0
 8007f90:	4651      	mov	r1, sl
 8007f92:	2201      	movs	r2, #1
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fb41 	bl	800861c <__lshift>
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	f000 fba9 	bl	80086f4 <__mcmp>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	dc96      	bgt.n	8007ed4 <_dtoa_r+0xabc>
 8007fa6:	d102      	bne.n	8007fae <_dtoa_r+0xb96>
 8007fa8:	f019 0f01 	tst.w	r9, #1
 8007fac:	d192      	bne.n	8007ed4 <_dtoa_r+0xabc>
 8007fae:	462b      	mov	r3, r5
 8007fb0:	461d      	mov	r5, r3
 8007fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fb6:	2a30      	cmp	r2, #48	; 0x30
 8007fb8:	d0fa      	beq.n	8007fb0 <_dtoa_r+0xb98>
 8007fba:	e6dd      	b.n	8007d78 <_dtoa_r+0x960>
 8007fbc:	9a00      	ldr	r2, [sp, #0]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d189      	bne.n	8007ed6 <_dtoa_r+0xabe>
 8007fc2:	f10b 0b01 	add.w	fp, fp, #1
 8007fc6:	2331      	movs	r3, #49	; 0x31
 8007fc8:	e796      	b.n	8007ef8 <_dtoa_r+0xae0>
 8007fca:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <_dtoa_r+0xbdc>)
 8007fcc:	f7ff ba99 	b.w	8007502 <_dtoa_r+0xea>
 8007fd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f47f aa6d 	bne.w	80074b2 <_dtoa_r+0x9a>
 8007fd8:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <_dtoa_r+0xbe0>)
 8007fda:	f7ff ba92 	b.w	8007502 <_dtoa_r+0xea>
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dcb5      	bgt.n	8007f50 <_dtoa_r+0xb38>
 8007fe4:	9b07      	ldr	r3, [sp, #28]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	f73f aeb1 	bgt.w	8007d4e <_dtoa_r+0x936>
 8007fec:	e7b0      	b.n	8007f50 <_dtoa_r+0xb38>
 8007fee:	bf00      	nop
 8007ff0:	080091e0 	.word	0x080091e0
 8007ff4:	08009140 	.word	0x08009140
 8007ff8:	08009164 	.word	0x08009164

08007ffc <_free_r>:
 8007ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ffe:	2900      	cmp	r1, #0
 8008000:	d044      	beq.n	800808c <_free_r+0x90>
 8008002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008006:	9001      	str	r0, [sp, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f1a1 0404 	sub.w	r4, r1, #4
 800800e:	bfb8      	it	lt
 8008010:	18e4      	addlt	r4, r4, r3
 8008012:	f000 f8e7 	bl	80081e4 <__malloc_lock>
 8008016:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <_free_r+0x94>)
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	b933      	cbnz	r3, 800802c <_free_r+0x30>
 800801e:	6063      	str	r3, [r4, #4]
 8008020:	6014      	str	r4, [r2, #0]
 8008022:	b003      	add	sp, #12
 8008024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008028:	f000 b8e2 	b.w	80081f0 <__malloc_unlock>
 800802c:	42a3      	cmp	r3, r4
 800802e:	d908      	bls.n	8008042 <_free_r+0x46>
 8008030:	6825      	ldr	r5, [r4, #0]
 8008032:	1961      	adds	r1, r4, r5
 8008034:	428b      	cmp	r3, r1
 8008036:	bf01      	itttt	eq
 8008038:	6819      	ldreq	r1, [r3, #0]
 800803a:	685b      	ldreq	r3, [r3, #4]
 800803c:	1949      	addeq	r1, r1, r5
 800803e:	6021      	streq	r1, [r4, #0]
 8008040:	e7ed      	b.n	800801e <_free_r+0x22>
 8008042:	461a      	mov	r2, r3
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	b10b      	cbz	r3, 800804c <_free_r+0x50>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d9fa      	bls.n	8008042 <_free_r+0x46>
 800804c:	6811      	ldr	r1, [r2, #0]
 800804e:	1855      	adds	r5, r2, r1
 8008050:	42a5      	cmp	r5, r4
 8008052:	d10b      	bne.n	800806c <_free_r+0x70>
 8008054:	6824      	ldr	r4, [r4, #0]
 8008056:	4421      	add	r1, r4
 8008058:	1854      	adds	r4, r2, r1
 800805a:	42a3      	cmp	r3, r4
 800805c:	6011      	str	r1, [r2, #0]
 800805e:	d1e0      	bne.n	8008022 <_free_r+0x26>
 8008060:	681c      	ldr	r4, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	6053      	str	r3, [r2, #4]
 8008066:	440c      	add	r4, r1
 8008068:	6014      	str	r4, [r2, #0]
 800806a:	e7da      	b.n	8008022 <_free_r+0x26>
 800806c:	d902      	bls.n	8008074 <_free_r+0x78>
 800806e:	230c      	movs	r3, #12
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	e7d6      	b.n	8008022 <_free_r+0x26>
 8008074:	6825      	ldr	r5, [r4, #0]
 8008076:	1961      	adds	r1, r4, r5
 8008078:	428b      	cmp	r3, r1
 800807a:	bf04      	itt	eq
 800807c:	6819      	ldreq	r1, [r3, #0]
 800807e:	685b      	ldreq	r3, [r3, #4]
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	bf04      	itt	eq
 8008084:	1949      	addeq	r1, r1, r5
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	6054      	str	r4, [r2, #4]
 800808a:	e7ca      	b.n	8008022 <_free_r+0x26>
 800808c:	b003      	add	sp, #12
 800808e:	bd30      	pop	{r4, r5, pc}
 8008090:	20001070 	.word	0x20001070

08008094 <malloc>:
 8008094:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <malloc+0xc>)
 8008096:	4601      	mov	r1, r0
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	f000 b823 	b.w	80080e4 <_malloc_r>
 800809e:	bf00      	nop
 80080a0:	200000d0 	.word	0x200000d0

080080a4 <sbrk_aligned>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	4e0e      	ldr	r6, [pc, #56]	; (80080e0 <sbrk_aligned+0x3c>)
 80080a8:	460c      	mov	r4, r1
 80080aa:	6831      	ldr	r1, [r6, #0]
 80080ac:	4605      	mov	r5, r0
 80080ae:	b911      	cbnz	r1, 80080b6 <sbrk_aligned+0x12>
 80080b0:	f000 fcce 	bl	8008a50 <_sbrk_r>
 80080b4:	6030      	str	r0, [r6, #0]
 80080b6:	4621      	mov	r1, r4
 80080b8:	4628      	mov	r0, r5
 80080ba:	f000 fcc9 	bl	8008a50 <_sbrk_r>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d00a      	beq.n	80080d8 <sbrk_aligned+0x34>
 80080c2:	1cc4      	adds	r4, r0, #3
 80080c4:	f024 0403 	bic.w	r4, r4, #3
 80080c8:	42a0      	cmp	r0, r4
 80080ca:	d007      	beq.n	80080dc <sbrk_aligned+0x38>
 80080cc:	1a21      	subs	r1, r4, r0
 80080ce:	4628      	mov	r0, r5
 80080d0:	f000 fcbe 	bl	8008a50 <_sbrk_r>
 80080d4:	3001      	adds	r0, #1
 80080d6:	d101      	bne.n	80080dc <sbrk_aligned+0x38>
 80080d8:	f04f 34ff 	mov.w	r4, #4294967295
 80080dc:	4620      	mov	r0, r4
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	20001074 	.word	0x20001074

080080e4 <_malloc_r>:
 80080e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e8:	1ccd      	adds	r5, r1, #3
 80080ea:	f025 0503 	bic.w	r5, r5, #3
 80080ee:	3508      	adds	r5, #8
 80080f0:	2d0c      	cmp	r5, #12
 80080f2:	bf38      	it	cc
 80080f4:	250c      	movcc	r5, #12
 80080f6:	2d00      	cmp	r5, #0
 80080f8:	4607      	mov	r7, r0
 80080fa:	db01      	blt.n	8008100 <_malloc_r+0x1c>
 80080fc:	42a9      	cmp	r1, r5
 80080fe:	d905      	bls.n	800810c <_malloc_r+0x28>
 8008100:	230c      	movs	r3, #12
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	2600      	movs	r6, #0
 8008106:	4630      	mov	r0, r6
 8008108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081e0 <_malloc_r+0xfc>
 8008110:	f000 f868 	bl	80081e4 <__malloc_lock>
 8008114:	f8d8 3000 	ldr.w	r3, [r8]
 8008118:	461c      	mov	r4, r3
 800811a:	bb5c      	cbnz	r4, 8008174 <_malloc_r+0x90>
 800811c:	4629      	mov	r1, r5
 800811e:	4638      	mov	r0, r7
 8008120:	f7ff ffc0 	bl	80080a4 <sbrk_aligned>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	4604      	mov	r4, r0
 8008128:	d155      	bne.n	80081d6 <_malloc_r+0xf2>
 800812a:	f8d8 4000 	ldr.w	r4, [r8]
 800812e:	4626      	mov	r6, r4
 8008130:	2e00      	cmp	r6, #0
 8008132:	d145      	bne.n	80081c0 <_malloc_r+0xdc>
 8008134:	2c00      	cmp	r4, #0
 8008136:	d048      	beq.n	80081ca <_malloc_r+0xe6>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	4631      	mov	r1, r6
 800813c:	4638      	mov	r0, r7
 800813e:	eb04 0903 	add.w	r9, r4, r3
 8008142:	f000 fc85 	bl	8008a50 <_sbrk_r>
 8008146:	4581      	cmp	r9, r0
 8008148:	d13f      	bne.n	80081ca <_malloc_r+0xe6>
 800814a:	6821      	ldr	r1, [r4, #0]
 800814c:	1a6d      	subs	r5, r5, r1
 800814e:	4629      	mov	r1, r5
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff ffa7 	bl	80080a4 <sbrk_aligned>
 8008156:	3001      	adds	r0, #1
 8008158:	d037      	beq.n	80081ca <_malloc_r+0xe6>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	442b      	add	r3, r5
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	f8d8 3000 	ldr.w	r3, [r8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d038      	beq.n	80081da <_malloc_r+0xf6>
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	42a2      	cmp	r2, r4
 800816c:	d12b      	bne.n	80081c6 <_malloc_r+0xe2>
 800816e:	2200      	movs	r2, #0
 8008170:	605a      	str	r2, [r3, #4]
 8008172:	e00f      	b.n	8008194 <_malloc_r+0xb0>
 8008174:	6822      	ldr	r2, [r4, #0]
 8008176:	1b52      	subs	r2, r2, r5
 8008178:	d41f      	bmi.n	80081ba <_malloc_r+0xd6>
 800817a:	2a0b      	cmp	r2, #11
 800817c:	d917      	bls.n	80081ae <_malloc_r+0xca>
 800817e:	1961      	adds	r1, r4, r5
 8008180:	42a3      	cmp	r3, r4
 8008182:	6025      	str	r5, [r4, #0]
 8008184:	bf18      	it	ne
 8008186:	6059      	strne	r1, [r3, #4]
 8008188:	6863      	ldr	r3, [r4, #4]
 800818a:	bf08      	it	eq
 800818c:	f8c8 1000 	streq.w	r1, [r8]
 8008190:	5162      	str	r2, [r4, r5]
 8008192:	604b      	str	r3, [r1, #4]
 8008194:	4638      	mov	r0, r7
 8008196:	f104 060b 	add.w	r6, r4, #11
 800819a:	f000 f829 	bl	80081f0 <__malloc_unlock>
 800819e:	f026 0607 	bic.w	r6, r6, #7
 80081a2:	1d23      	adds	r3, r4, #4
 80081a4:	1af2      	subs	r2, r6, r3
 80081a6:	d0ae      	beq.n	8008106 <_malloc_r+0x22>
 80081a8:	1b9b      	subs	r3, r3, r6
 80081aa:	50a3      	str	r3, [r4, r2]
 80081ac:	e7ab      	b.n	8008106 <_malloc_r+0x22>
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	6862      	ldr	r2, [r4, #4]
 80081b2:	d1dd      	bne.n	8008170 <_malloc_r+0x8c>
 80081b4:	f8c8 2000 	str.w	r2, [r8]
 80081b8:	e7ec      	b.n	8008194 <_malloc_r+0xb0>
 80081ba:	4623      	mov	r3, r4
 80081bc:	6864      	ldr	r4, [r4, #4]
 80081be:	e7ac      	b.n	800811a <_malloc_r+0x36>
 80081c0:	4634      	mov	r4, r6
 80081c2:	6876      	ldr	r6, [r6, #4]
 80081c4:	e7b4      	b.n	8008130 <_malloc_r+0x4c>
 80081c6:	4613      	mov	r3, r2
 80081c8:	e7cc      	b.n	8008164 <_malloc_r+0x80>
 80081ca:	230c      	movs	r3, #12
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	4638      	mov	r0, r7
 80081d0:	f000 f80e 	bl	80081f0 <__malloc_unlock>
 80081d4:	e797      	b.n	8008106 <_malloc_r+0x22>
 80081d6:	6025      	str	r5, [r4, #0]
 80081d8:	e7dc      	b.n	8008194 <_malloc_r+0xb0>
 80081da:	605b      	str	r3, [r3, #4]
 80081dc:	deff      	udf	#255	; 0xff
 80081de:	bf00      	nop
 80081e0:	20001070 	.word	0x20001070

080081e4 <__malloc_lock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__malloc_lock+0x8>)
 80081e6:	f7ff b87e 	b.w	80072e6 <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	2000106c 	.word	0x2000106c

080081f0 <__malloc_unlock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__malloc_unlock+0x8>)
 80081f2:	f7ff b879 	b.w	80072e8 <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	2000106c 	.word	0x2000106c

080081fc <_Balloc>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	69c6      	ldr	r6, [r0, #28]
 8008200:	4604      	mov	r4, r0
 8008202:	460d      	mov	r5, r1
 8008204:	b976      	cbnz	r6, 8008224 <_Balloc+0x28>
 8008206:	2010      	movs	r0, #16
 8008208:	f7ff ff44 	bl	8008094 <malloc>
 800820c:	4602      	mov	r2, r0
 800820e:	61e0      	str	r0, [r4, #28]
 8008210:	b920      	cbnz	r0, 800821c <_Balloc+0x20>
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <_Balloc+0x78>)
 8008214:	4818      	ldr	r0, [pc, #96]	; (8008278 <_Balloc+0x7c>)
 8008216:	216b      	movs	r1, #107	; 0x6b
 8008218:	f000 fc2a 	bl	8008a70 <__assert_func>
 800821c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008220:	6006      	str	r6, [r0, #0]
 8008222:	60c6      	str	r6, [r0, #12]
 8008224:	69e6      	ldr	r6, [r4, #28]
 8008226:	68f3      	ldr	r3, [r6, #12]
 8008228:	b183      	cbz	r3, 800824c <_Balloc+0x50>
 800822a:	69e3      	ldr	r3, [r4, #28]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008232:	b9b8      	cbnz	r0, 8008264 <_Balloc+0x68>
 8008234:	2101      	movs	r1, #1
 8008236:	fa01 f605 	lsl.w	r6, r1, r5
 800823a:	1d72      	adds	r2, r6, #5
 800823c:	0092      	lsls	r2, r2, #2
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fc34 	bl	8008aac <_calloc_r>
 8008244:	b160      	cbz	r0, 8008260 <_Balloc+0x64>
 8008246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800824a:	e00e      	b.n	800826a <_Balloc+0x6e>
 800824c:	2221      	movs	r2, #33	; 0x21
 800824e:	2104      	movs	r1, #4
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fc2b 	bl	8008aac <_calloc_r>
 8008256:	69e3      	ldr	r3, [r4, #28]
 8008258:	60f0      	str	r0, [r6, #12]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e4      	bne.n	800822a <_Balloc+0x2e>
 8008260:	2000      	movs	r0, #0
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	6802      	ldr	r2, [r0, #0]
 8008266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800826a:	2300      	movs	r3, #0
 800826c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008270:	e7f7      	b.n	8008262 <_Balloc+0x66>
 8008272:	bf00      	nop
 8008274:	08009171 	.word	0x08009171
 8008278:	080091f1 	.word	0x080091f1

0800827c <_Bfree>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	69c6      	ldr	r6, [r0, #28]
 8008280:	4605      	mov	r5, r0
 8008282:	460c      	mov	r4, r1
 8008284:	b976      	cbnz	r6, 80082a4 <_Bfree+0x28>
 8008286:	2010      	movs	r0, #16
 8008288:	f7ff ff04 	bl	8008094 <malloc>
 800828c:	4602      	mov	r2, r0
 800828e:	61e8      	str	r0, [r5, #28]
 8008290:	b920      	cbnz	r0, 800829c <_Bfree+0x20>
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <_Bfree+0x3c>)
 8008294:	4809      	ldr	r0, [pc, #36]	; (80082bc <_Bfree+0x40>)
 8008296:	218f      	movs	r1, #143	; 0x8f
 8008298:	f000 fbea 	bl	8008a70 <__assert_func>
 800829c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082a0:	6006      	str	r6, [r0, #0]
 80082a2:	60c6      	str	r6, [r0, #12]
 80082a4:	b13c      	cbz	r4, 80082b6 <_Bfree+0x3a>
 80082a6:	69eb      	ldr	r3, [r5, #28]
 80082a8:	6862      	ldr	r2, [r4, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082b0:	6021      	str	r1, [r4, #0]
 80082b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	08009171 	.word	0x08009171
 80082bc:	080091f1 	.word	0x080091f1

080082c0 <__multadd>:
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	690d      	ldr	r5, [r1, #16]
 80082c6:	4607      	mov	r7, r0
 80082c8:	460c      	mov	r4, r1
 80082ca:	461e      	mov	r6, r3
 80082cc:	f101 0c14 	add.w	ip, r1, #20
 80082d0:	2000      	movs	r0, #0
 80082d2:	f8dc 3000 	ldr.w	r3, [ip]
 80082d6:	b299      	uxth	r1, r3
 80082d8:	fb02 6101 	mla	r1, r2, r1, r6
 80082dc:	0c1e      	lsrs	r6, r3, #16
 80082de:	0c0b      	lsrs	r3, r1, #16
 80082e0:	fb02 3306 	mla	r3, r2, r6, r3
 80082e4:	b289      	uxth	r1, r1
 80082e6:	3001      	adds	r0, #1
 80082e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082ec:	4285      	cmp	r5, r0
 80082ee:	f84c 1b04 	str.w	r1, [ip], #4
 80082f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082f6:	dcec      	bgt.n	80082d2 <__multadd+0x12>
 80082f8:	b30e      	cbz	r6, 800833e <__multadd+0x7e>
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	dc19      	bgt.n	8008334 <__multadd+0x74>
 8008300:	6861      	ldr	r1, [r4, #4]
 8008302:	4638      	mov	r0, r7
 8008304:	3101      	adds	r1, #1
 8008306:	f7ff ff79 	bl	80081fc <_Balloc>
 800830a:	4680      	mov	r8, r0
 800830c:	b928      	cbnz	r0, 800831a <__multadd+0x5a>
 800830e:	4602      	mov	r2, r0
 8008310:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <__multadd+0x84>)
 8008312:	480d      	ldr	r0, [pc, #52]	; (8008348 <__multadd+0x88>)
 8008314:	21ba      	movs	r1, #186	; 0xba
 8008316:	f000 fbab 	bl	8008a70 <__assert_func>
 800831a:	6922      	ldr	r2, [r4, #16]
 800831c:	3202      	adds	r2, #2
 800831e:	f104 010c 	add.w	r1, r4, #12
 8008322:	0092      	lsls	r2, r2, #2
 8008324:	300c      	adds	r0, #12
 8008326:	f7fe ffe0 	bl	80072ea <memcpy>
 800832a:	4621      	mov	r1, r4
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ffa5 	bl	800827c <_Bfree>
 8008332:	4644      	mov	r4, r8
 8008334:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008338:	3501      	adds	r5, #1
 800833a:	615e      	str	r6, [r3, #20]
 800833c:	6125      	str	r5, [r4, #16]
 800833e:	4620      	mov	r0, r4
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	080091e0 	.word	0x080091e0
 8008348:	080091f1 	.word	0x080091f1

0800834c <__hi0bits>:
 800834c:	0c03      	lsrs	r3, r0, #16
 800834e:	041b      	lsls	r3, r3, #16
 8008350:	b9d3      	cbnz	r3, 8008388 <__hi0bits+0x3c>
 8008352:	0400      	lsls	r0, r0, #16
 8008354:	2310      	movs	r3, #16
 8008356:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800835a:	bf04      	itt	eq
 800835c:	0200      	lsleq	r0, r0, #8
 800835e:	3308      	addeq	r3, #8
 8008360:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008364:	bf04      	itt	eq
 8008366:	0100      	lsleq	r0, r0, #4
 8008368:	3304      	addeq	r3, #4
 800836a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800836e:	bf04      	itt	eq
 8008370:	0080      	lsleq	r0, r0, #2
 8008372:	3302      	addeq	r3, #2
 8008374:	2800      	cmp	r0, #0
 8008376:	db05      	blt.n	8008384 <__hi0bits+0x38>
 8008378:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800837c:	f103 0301 	add.w	r3, r3, #1
 8008380:	bf08      	it	eq
 8008382:	2320      	moveq	r3, #32
 8008384:	4618      	mov	r0, r3
 8008386:	4770      	bx	lr
 8008388:	2300      	movs	r3, #0
 800838a:	e7e4      	b.n	8008356 <__hi0bits+0xa>

0800838c <__lo0bits>:
 800838c:	6803      	ldr	r3, [r0, #0]
 800838e:	f013 0207 	ands.w	r2, r3, #7
 8008392:	d00c      	beq.n	80083ae <__lo0bits+0x22>
 8008394:	07d9      	lsls	r1, r3, #31
 8008396:	d422      	bmi.n	80083de <__lo0bits+0x52>
 8008398:	079a      	lsls	r2, r3, #30
 800839a:	bf49      	itett	mi
 800839c:	085b      	lsrmi	r3, r3, #1
 800839e:	089b      	lsrpl	r3, r3, #2
 80083a0:	6003      	strmi	r3, [r0, #0]
 80083a2:	2201      	movmi	r2, #1
 80083a4:	bf5c      	itt	pl
 80083a6:	6003      	strpl	r3, [r0, #0]
 80083a8:	2202      	movpl	r2, #2
 80083aa:	4610      	mov	r0, r2
 80083ac:	4770      	bx	lr
 80083ae:	b299      	uxth	r1, r3
 80083b0:	b909      	cbnz	r1, 80083b6 <__lo0bits+0x2a>
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	2210      	movs	r2, #16
 80083b6:	b2d9      	uxtb	r1, r3
 80083b8:	b909      	cbnz	r1, 80083be <__lo0bits+0x32>
 80083ba:	3208      	adds	r2, #8
 80083bc:	0a1b      	lsrs	r3, r3, #8
 80083be:	0719      	lsls	r1, r3, #28
 80083c0:	bf04      	itt	eq
 80083c2:	091b      	lsreq	r3, r3, #4
 80083c4:	3204      	addeq	r2, #4
 80083c6:	0799      	lsls	r1, r3, #30
 80083c8:	bf04      	itt	eq
 80083ca:	089b      	lsreq	r3, r3, #2
 80083cc:	3202      	addeq	r2, #2
 80083ce:	07d9      	lsls	r1, r3, #31
 80083d0:	d403      	bmi.n	80083da <__lo0bits+0x4e>
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	f102 0201 	add.w	r2, r2, #1
 80083d8:	d003      	beq.n	80083e2 <__lo0bits+0x56>
 80083da:	6003      	str	r3, [r0, #0]
 80083dc:	e7e5      	b.n	80083aa <__lo0bits+0x1e>
 80083de:	2200      	movs	r2, #0
 80083e0:	e7e3      	b.n	80083aa <__lo0bits+0x1e>
 80083e2:	2220      	movs	r2, #32
 80083e4:	e7e1      	b.n	80083aa <__lo0bits+0x1e>
	...

080083e8 <__i2b>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	460c      	mov	r4, r1
 80083ec:	2101      	movs	r1, #1
 80083ee:	f7ff ff05 	bl	80081fc <_Balloc>
 80083f2:	4602      	mov	r2, r0
 80083f4:	b928      	cbnz	r0, 8008402 <__i2b+0x1a>
 80083f6:	4b05      	ldr	r3, [pc, #20]	; (800840c <__i2b+0x24>)
 80083f8:	4805      	ldr	r0, [pc, #20]	; (8008410 <__i2b+0x28>)
 80083fa:	f240 1145 	movw	r1, #325	; 0x145
 80083fe:	f000 fb37 	bl	8008a70 <__assert_func>
 8008402:	2301      	movs	r3, #1
 8008404:	6144      	str	r4, [r0, #20]
 8008406:	6103      	str	r3, [r0, #16]
 8008408:	bd10      	pop	{r4, pc}
 800840a:	bf00      	nop
 800840c:	080091e0 	.word	0x080091e0
 8008410:	080091f1 	.word	0x080091f1

08008414 <__multiply>:
 8008414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	4691      	mov	r9, r2
 800841a:	690a      	ldr	r2, [r1, #16]
 800841c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008420:	429a      	cmp	r2, r3
 8008422:	bfb8      	it	lt
 8008424:	460b      	movlt	r3, r1
 8008426:	460c      	mov	r4, r1
 8008428:	bfbc      	itt	lt
 800842a:	464c      	movlt	r4, r9
 800842c:	4699      	movlt	r9, r3
 800842e:	6927      	ldr	r7, [r4, #16]
 8008430:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	6861      	ldr	r1, [r4, #4]
 8008438:	eb07 060a 	add.w	r6, r7, sl
 800843c:	42b3      	cmp	r3, r6
 800843e:	b085      	sub	sp, #20
 8008440:	bfb8      	it	lt
 8008442:	3101      	addlt	r1, #1
 8008444:	f7ff feda 	bl	80081fc <_Balloc>
 8008448:	b930      	cbnz	r0, 8008458 <__multiply+0x44>
 800844a:	4602      	mov	r2, r0
 800844c:	4b44      	ldr	r3, [pc, #272]	; (8008560 <__multiply+0x14c>)
 800844e:	4845      	ldr	r0, [pc, #276]	; (8008564 <__multiply+0x150>)
 8008450:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008454:	f000 fb0c 	bl	8008a70 <__assert_func>
 8008458:	f100 0514 	add.w	r5, r0, #20
 800845c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008460:	462b      	mov	r3, r5
 8008462:	2200      	movs	r2, #0
 8008464:	4543      	cmp	r3, r8
 8008466:	d321      	bcc.n	80084ac <__multiply+0x98>
 8008468:	f104 0314 	add.w	r3, r4, #20
 800846c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008470:	f109 0314 	add.w	r3, r9, #20
 8008474:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008478:	9202      	str	r2, [sp, #8]
 800847a:	1b3a      	subs	r2, r7, r4
 800847c:	3a15      	subs	r2, #21
 800847e:	f022 0203 	bic.w	r2, r2, #3
 8008482:	3204      	adds	r2, #4
 8008484:	f104 0115 	add.w	r1, r4, #21
 8008488:	428f      	cmp	r7, r1
 800848a:	bf38      	it	cc
 800848c:	2204      	movcc	r2, #4
 800848e:	9201      	str	r2, [sp, #4]
 8008490:	9a02      	ldr	r2, [sp, #8]
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	429a      	cmp	r2, r3
 8008496:	d80c      	bhi.n	80084b2 <__multiply+0x9e>
 8008498:	2e00      	cmp	r6, #0
 800849a:	dd03      	ble.n	80084a4 <__multiply+0x90>
 800849c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d05b      	beq.n	800855c <__multiply+0x148>
 80084a4:	6106      	str	r6, [r0, #16]
 80084a6:	b005      	add	sp, #20
 80084a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ac:	f843 2b04 	str.w	r2, [r3], #4
 80084b0:	e7d8      	b.n	8008464 <__multiply+0x50>
 80084b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80084b6:	f1ba 0f00 	cmp.w	sl, #0
 80084ba:	d024      	beq.n	8008506 <__multiply+0xf2>
 80084bc:	f104 0e14 	add.w	lr, r4, #20
 80084c0:	46a9      	mov	r9, r5
 80084c2:	f04f 0c00 	mov.w	ip, #0
 80084c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084ca:	f8d9 1000 	ldr.w	r1, [r9]
 80084ce:	fa1f fb82 	uxth.w	fp, r2
 80084d2:	b289      	uxth	r1, r1
 80084d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80084d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084dc:	f8d9 2000 	ldr.w	r2, [r9]
 80084e0:	4461      	add	r1, ip
 80084e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80084ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084ee:	b289      	uxth	r1, r1
 80084f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084f4:	4577      	cmp	r7, lr
 80084f6:	f849 1b04 	str.w	r1, [r9], #4
 80084fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084fe:	d8e2      	bhi.n	80084c6 <__multiply+0xb2>
 8008500:	9a01      	ldr	r2, [sp, #4]
 8008502:	f845 c002 	str.w	ip, [r5, r2]
 8008506:	9a03      	ldr	r2, [sp, #12]
 8008508:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800850c:	3304      	adds	r3, #4
 800850e:	f1b9 0f00 	cmp.w	r9, #0
 8008512:	d021      	beq.n	8008558 <__multiply+0x144>
 8008514:	6829      	ldr	r1, [r5, #0]
 8008516:	f104 0c14 	add.w	ip, r4, #20
 800851a:	46ae      	mov	lr, r5
 800851c:	f04f 0a00 	mov.w	sl, #0
 8008520:	f8bc b000 	ldrh.w	fp, [ip]
 8008524:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008528:	fb09 220b 	mla	r2, r9, fp, r2
 800852c:	4452      	add	r2, sl
 800852e:	b289      	uxth	r1, r1
 8008530:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008534:	f84e 1b04 	str.w	r1, [lr], #4
 8008538:	f85c 1b04 	ldr.w	r1, [ip], #4
 800853c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008540:	f8be 1000 	ldrh.w	r1, [lr]
 8008544:	fb09 110a 	mla	r1, r9, sl, r1
 8008548:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800854c:	4567      	cmp	r7, ip
 800854e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008552:	d8e5      	bhi.n	8008520 <__multiply+0x10c>
 8008554:	9a01      	ldr	r2, [sp, #4]
 8008556:	50a9      	str	r1, [r5, r2]
 8008558:	3504      	adds	r5, #4
 800855a:	e799      	b.n	8008490 <__multiply+0x7c>
 800855c:	3e01      	subs	r6, #1
 800855e:	e79b      	b.n	8008498 <__multiply+0x84>
 8008560:	080091e0 	.word	0x080091e0
 8008564:	080091f1 	.word	0x080091f1

08008568 <__pow5mult>:
 8008568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800856c:	4615      	mov	r5, r2
 800856e:	f012 0203 	ands.w	r2, r2, #3
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	d007      	beq.n	8008588 <__pow5mult+0x20>
 8008578:	4c25      	ldr	r4, [pc, #148]	; (8008610 <__pow5mult+0xa8>)
 800857a:	3a01      	subs	r2, #1
 800857c:	2300      	movs	r3, #0
 800857e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008582:	f7ff fe9d 	bl	80082c0 <__multadd>
 8008586:	4607      	mov	r7, r0
 8008588:	10ad      	asrs	r5, r5, #2
 800858a:	d03d      	beq.n	8008608 <__pow5mult+0xa0>
 800858c:	69f4      	ldr	r4, [r6, #28]
 800858e:	b97c      	cbnz	r4, 80085b0 <__pow5mult+0x48>
 8008590:	2010      	movs	r0, #16
 8008592:	f7ff fd7f 	bl	8008094 <malloc>
 8008596:	4602      	mov	r2, r0
 8008598:	61f0      	str	r0, [r6, #28]
 800859a:	b928      	cbnz	r0, 80085a8 <__pow5mult+0x40>
 800859c:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <__pow5mult+0xac>)
 800859e:	481e      	ldr	r0, [pc, #120]	; (8008618 <__pow5mult+0xb0>)
 80085a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80085a4:	f000 fa64 	bl	8008a70 <__assert_func>
 80085a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085ac:	6004      	str	r4, [r0, #0]
 80085ae:	60c4      	str	r4, [r0, #12]
 80085b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80085b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085b8:	b94c      	cbnz	r4, 80085ce <__pow5mult+0x66>
 80085ba:	f240 2171 	movw	r1, #625	; 0x271
 80085be:	4630      	mov	r0, r6
 80085c0:	f7ff ff12 	bl	80083e8 <__i2b>
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80085ca:	4604      	mov	r4, r0
 80085cc:	6003      	str	r3, [r0, #0]
 80085ce:	f04f 0900 	mov.w	r9, #0
 80085d2:	07eb      	lsls	r3, r5, #31
 80085d4:	d50a      	bpl.n	80085ec <__pow5mult+0x84>
 80085d6:	4639      	mov	r1, r7
 80085d8:	4622      	mov	r2, r4
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff ff1a 	bl	8008414 <__multiply>
 80085e0:	4639      	mov	r1, r7
 80085e2:	4680      	mov	r8, r0
 80085e4:	4630      	mov	r0, r6
 80085e6:	f7ff fe49 	bl	800827c <_Bfree>
 80085ea:	4647      	mov	r7, r8
 80085ec:	106d      	asrs	r5, r5, #1
 80085ee:	d00b      	beq.n	8008608 <__pow5mult+0xa0>
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	b938      	cbnz	r0, 8008604 <__pow5mult+0x9c>
 80085f4:	4622      	mov	r2, r4
 80085f6:	4621      	mov	r1, r4
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7ff ff0b 	bl	8008414 <__multiply>
 80085fe:	6020      	str	r0, [r4, #0]
 8008600:	f8c0 9000 	str.w	r9, [r0]
 8008604:	4604      	mov	r4, r0
 8008606:	e7e4      	b.n	80085d2 <__pow5mult+0x6a>
 8008608:	4638      	mov	r0, r7
 800860a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800860e:	bf00      	nop
 8008610:	08009340 	.word	0x08009340
 8008614:	08009171 	.word	0x08009171
 8008618:	080091f1 	.word	0x080091f1

0800861c <__lshift>:
 800861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008620:	460c      	mov	r4, r1
 8008622:	6849      	ldr	r1, [r1, #4]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	4607      	mov	r7, r0
 800862e:	4691      	mov	r9, r2
 8008630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008634:	f108 0601 	add.w	r6, r8, #1
 8008638:	42b3      	cmp	r3, r6
 800863a:	db0b      	blt.n	8008654 <__lshift+0x38>
 800863c:	4638      	mov	r0, r7
 800863e:	f7ff fddd 	bl	80081fc <_Balloc>
 8008642:	4605      	mov	r5, r0
 8008644:	b948      	cbnz	r0, 800865a <__lshift+0x3e>
 8008646:	4602      	mov	r2, r0
 8008648:	4b28      	ldr	r3, [pc, #160]	; (80086ec <__lshift+0xd0>)
 800864a:	4829      	ldr	r0, [pc, #164]	; (80086f0 <__lshift+0xd4>)
 800864c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008650:	f000 fa0e 	bl	8008a70 <__assert_func>
 8008654:	3101      	adds	r1, #1
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	e7ee      	b.n	8008638 <__lshift+0x1c>
 800865a:	2300      	movs	r3, #0
 800865c:	f100 0114 	add.w	r1, r0, #20
 8008660:	f100 0210 	add.w	r2, r0, #16
 8008664:	4618      	mov	r0, r3
 8008666:	4553      	cmp	r3, sl
 8008668:	db33      	blt.n	80086d2 <__lshift+0xb6>
 800866a:	6920      	ldr	r0, [r4, #16]
 800866c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008670:	f104 0314 	add.w	r3, r4, #20
 8008674:	f019 091f 	ands.w	r9, r9, #31
 8008678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800867c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008680:	d02b      	beq.n	80086da <__lshift+0xbe>
 8008682:	f1c9 0e20 	rsb	lr, r9, #32
 8008686:	468a      	mov	sl, r1
 8008688:	2200      	movs	r2, #0
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	fa00 f009 	lsl.w	r0, r0, r9
 8008690:	4310      	orrs	r0, r2
 8008692:	f84a 0b04 	str.w	r0, [sl], #4
 8008696:	f853 2b04 	ldr.w	r2, [r3], #4
 800869a:	459c      	cmp	ip, r3
 800869c:	fa22 f20e 	lsr.w	r2, r2, lr
 80086a0:	d8f3      	bhi.n	800868a <__lshift+0x6e>
 80086a2:	ebac 0304 	sub.w	r3, ip, r4
 80086a6:	3b15      	subs	r3, #21
 80086a8:	f023 0303 	bic.w	r3, r3, #3
 80086ac:	3304      	adds	r3, #4
 80086ae:	f104 0015 	add.w	r0, r4, #21
 80086b2:	4584      	cmp	ip, r0
 80086b4:	bf38      	it	cc
 80086b6:	2304      	movcc	r3, #4
 80086b8:	50ca      	str	r2, [r1, r3]
 80086ba:	b10a      	cbz	r2, 80086c0 <__lshift+0xa4>
 80086bc:	f108 0602 	add.w	r6, r8, #2
 80086c0:	3e01      	subs	r6, #1
 80086c2:	4638      	mov	r0, r7
 80086c4:	612e      	str	r6, [r5, #16]
 80086c6:	4621      	mov	r1, r4
 80086c8:	f7ff fdd8 	bl	800827c <_Bfree>
 80086cc:	4628      	mov	r0, r5
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80086d6:	3301      	adds	r3, #1
 80086d8:	e7c5      	b.n	8008666 <__lshift+0x4a>
 80086da:	3904      	subs	r1, #4
 80086dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80086e4:	459c      	cmp	ip, r3
 80086e6:	d8f9      	bhi.n	80086dc <__lshift+0xc0>
 80086e8:	e7ea      	b.n	80086c0 <__lshift+0xa4>
 80086ea:	bf00      	nop
 80086ec:	080091e0 	.word	0x080091e0
 80086f0:	080091f1 	.word	0x080091f1

080086f4 <__mcmp>:
 80086f4:	b530      	push	{r4, r5, lr}
 80086f6:	6902      	ldr	r2, [r0, #16]
 80086f8:	690c      	ldr	r4, [r1, #16]
 80086fa:	1b12      	subs	r2, r2, r4
 80086fc:	d10e      	bne.n	800871c <__mcmp+0x28>
 80086fe:	f100 0314 	add.w	r3, r0, #20
 8008702:	3114      	adds	r1, #20
 8008704:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008708:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800870c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008710:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008714:	42a5      	cmp	r5, r4
 8008716:	d003      	beq.n	8008720 <__mcmp+0x2c>
 8008718:	d305      	bcc.n	8008726 <__mcmp+0x32>
 800871a:	2201      	movs	r2, #1
 800871c:	4610      	mov	r0, r2
 800871e:	bd30      	pop	{r4, r5, pc}
 8008720:	4283      	cmp	r3, r0
 8008722:	d3f3      	bcc.n	800870c <__mcmp+0x18>
 8008724:	e7fa      	b.n	800871c <__mcmp+0x28>
 8008726:	f04f 32ff 	mov.w	r2, #4294967295
 800872a:	e7f7      	b.n	800871c <__mcmp+0x28>

0800872c <__mdiff>:
 800872c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008730:	460c      	mov	r4, r1
 8008732:	4606      	mov	r6, r0
 8008734:	4611      	mov	r1, r2
 8008736:	4620      	mov	r0, r4
 8008738:	4690      	mov	r8, r2
 800873a:	f7ff ffdb 	bl	80086f4 <__mcmp>
 800873e:	1e05      	subs	r5, r0, #0
 8008740:	d110      	bne.n	8008764 <__mdiff+0x38>
 8008742:	4629      	mov	r1, r5
 8008744:	4630      	mov	r0, r6
 8008746:	f7ff fd59 	bl	80081fc <_Balloc>
 800874a:	b930      	cbnz	r0, 800875a <__mdiff+0x2e>
 800874c:	4b3a      	ldr	r3, [pc, #232]	; (8008838 <__mdiff+0x10c>)
 800874e:	4602      	mov	r2, r0
 8008750:	f240 2137 	movw	r1, #567	; 0x237
 8008754:	4839      	ldr	r0, [pc, #228]	; (800883c <__mdiff+0x110>)
 8008756:	f000 f98b 	bl	8008a70 <__assert_func>
 800875a:	2301      	movs	r3, #1
 800875c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008764:	bfa4      	itt	ge
 8008766:	4643      	movge	r3, r8
 8008768:	46a0      	movge	r8, r4
 800876a:	4630      	mov	r0, r6
 800876c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008770:	bfa6      	itte	ge
 8008772:	461c      	movge	r4, r3
 8008774:	2500      	movge	r5, #0
 8008776:	2501      	movlt	r5, #1
 8008778:	f7ff fd40 	bl	80081fc <_Balloc>
 800877c:	b920      	cbnz	r0, 8008788 <__mdiff+0x5c>
 800877e:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <__mdiff+0x10c>)
 8008780:	4602      	mov	r2, r0
 8008782:	f240 2145 	movw	r1, #581	; 0x245
 8008786:	e7e5      	b.n	8008754 <__mdiff+0x28>
 8008788:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800878c:	6926      	ldr	r6, [r4, #16]
 800878e:	60c5      	str	r5, [r0, #12]
 8008790:	f104 0914 	add.w	r9, r4, #20
 8008794:	f108 0514 	add.w	r5, r8, #20
 8008798:	f100 0e14 	add.w	lr, r0, #20
 800879c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80087a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087a4:	f108 0210 	add.w	r2, r8, #16
 80087a8:	46f2      	mov	sl, lr
 80087aa:	2100      	movs	r1, #0
 80087ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80087b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087b4:	fa11 f88b 	uxtah	r8, r1, fp
 80087b8:	b299      	uxth	r1, r3
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	eba8 0801 	sub.w	r8, r8, r1
 80087c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087c8:	fa1f f888 	uxth.w	r8, r8
 80087cc:	1419      	asrs	r1, r3, #16
 80087ce:	454e      	cmp	r6, r9
 80087d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087d4:	f84a 3b04 	str.w	r3, [sl], #4
 80087d8:	d8e8      	bhi.n	80087ac <__mdiff+0x80>
 80087da:	1b33      	subs	r3, r6, r4
 80087dc:	3b15      	subs	r3, #21
 80087de:	f023 0303 	bic.w	r3, r3, #3
 80087e2:	3304      	adds	r3, #4
 80087e4:	3415      	adds	r4, #21
 80087e6:	42a6      	cmp	r6, r4
 80087e8:	bf38      	it	cc
 80087ea:	2304      	movcc	r3, #4
 80087ec:	441d      	add	r5, r3
 80087ee:	4473      	add	r3, lr
 80087f0:	469e      	mov	lr, r3
 80087f2:	462e      	mov	r6, r5
 80087f4:	4566      	cmp	r6, ip
 80087f6:	d30e      	bcc.n	8008816 <__mdiff+0xea>
 80087f8:	f10c 0203 	add.w	r2, ip, #3
 80087fc:	1b52      	subs	r2, r2, r5
 80087fe:	f022 0203 	bic.w	r2, r2, #3
 8008802:	3d03      	subs	r5, #3
 8008804:	45ac      	cmp	ip, r5
 8008806:	bf38      	it	cc
 8008808:	2200      	movcc	r2, #0
 800880a:	4413      	add	r3, r2
 800880c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008810:	b17a      	cbz	r2, 8008832 <__mdiff+0x106>
 8008812:	6107      	str	r7, [r0, #16]
 8008814:	e7a4      	b.n	8008760 <__mdiff+0x34>
 8008816:	f856 8b04 	ldr.w	r8, [r6], #4
 800881a:	fa11 f288 	uxtah	r2, r1, r8
 800881e:	1414      	asrs	r4, r2, #16
 8008820:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008824:	b292      	uxth	r2, r2
 8008826:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800882a:	f84e 2b04 	str.w	r2, [lr], #4
 800882e:	1421      	asrs	r1, r4, #16
 8008830:	e7e0      	b.n	80087f4 <__mdiff+0xc8>
 8008832:	3f01      	subs	r7, #1
 8008834:	e7ea      	b.n	800880c <__mdiff+0xe0>
 8008836:	bf00      	nop
 8008838:	080091e0 	.word	0x080091e0
 800883c:	080091f1 	.word	0x080091f1

08008840 <__d2b>:
 8008840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008844:	460f      	mov	r7, r1
 8008846:	2101      	movs	r1, #1
 8008848:	ec59 8b10 	vmov	r8, r9, d0
 800884c:	4616      	mov	r6, r2
 800884e:	f7ff fcd5 	bl	80081fc <_Balloc>
 8008852:	4604      	mov	r4, r0
 8008854:	b930      	cbnz	r0, 8008864 <__d2b+0x24>
 8008856:	4602      	mov	r2, r0
 8008858:	4b24      	ldr	r3, [pc, #144]	; (80088ec <__d2b+0xac>)
 800885a:	4825      	ldr	r0, [pc, #148]	; (80088f0 <__d2b+0xb0>)
 800885c:	f240 310f 	movw	r1, #783	; 0x30f
 8008860:	f000 f906 	bl	8008a70 <__assert_func>
 8008864:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800886c:	bb2d      	cbnz	r5, 80088ba <__d2b+0x7a>
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	f1b8 0300 	subs.w	r3, r8, #0
 8008874:	d026      	beq.n	80088c4 <__d2b+0x84>
 8008876:	4668      	mov	r0, sp
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	f7ff fd87 	bl	800838c <__lo0bits>
 800887e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008882:	b1e8      	cbz	r0, 80088c0 <__d2b+0x80>
 8008884:	f1c0 0320 	rsb	r3, r0, #32
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	430b      	orrs	r3, r1
 800888e:	40c2      	lsrs	r2, r0
 8008890:	6163      	str	r3, [r4, #20]
 8008892:	9201      	str	r2, [sp, #4]
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	61a3      	str	r3, [r4, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	bf14      	ite	ne
 800889c:	2202      	movne	r2, #2
 800889e:	2201      	moveq	r2, #1
 80088a0:	6122      	str	r2, [r4, #16]
 80088a2:	b1bd      	cbz	r5, 80088d4 <__d2b+0x94>
 80088a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088a8:	4405      	add	r5, r0
 80088aa:	603d      	str	r5, [r7, #0]
 80088ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088b0:	6030      	str	r0, [r6, #0]
 80088b2:	4620      	mov	r0, r4
 80088b4:	b003      	add	sp, #12
 80088b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088be:	e7d6      	b.n	800886e <__d2b+0x2e>
 80088c0:	6161      	str	r1, [r4, #20]
 80088c2:	e7e7      	b.n	8008894 <__d2b+0x54>
 80088c4:	a801      	add	r0, sp, #4
 80088c6:	f7ff fd61 	bl	800838c <__lo0bits>
 80088ca:	9b01      	ldr	r3, [sp, #4]
 80088cc:	6163      	str	r3, [r4, #20]
 80088ce:	3020      	adds	r0, #32
 80088d0:	2201      	movs	r2, #1
 80088d2:	e7e5      	b.n	80088a0 <__d2b+0x60>
 80088d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088dc:	6038      	str	r0, [r7, #0]
 80088de:	6918      	ldr	r0, [r3, #16]
 80088e0:	f7ff fd34 	bl	800834c <__hi0bits>
 80088e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088e8:	e7e2      	b.n	80088b0 <__d2b+0x70>
 80088ea:	bf00      	nop
 80088ec:	080091e0 	.word	0x080091e0
 80088f0:	080091f1 	.word	0x080091f1

080088f4 <__sflush_r>:
 80088f4:	898a      	ldrh	r2, [r1, #12]
 80088f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fa:	4605      	mov	r5, r0
 80088fc:	0710      	lsls	r0, r2, #28
 80088fe:	460c      	mov	r4, r1
 8008900:	d458      	bmi.n	80089b4 <__sflush_r+0xc0>
 8008902:	684b      	ldr	r3, [r1, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	dc05      	bgt.n	8008914 <__sflush_r+0x20>
 8008908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	dc02      	bgt.n	8008914 <__sflush_r+0x20>
 800890e:	2000      	movs	r0, #0
 8008910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008916:	2e00      	cmp	r6, #0
 8008918:	d0f9      	beq.n	800890e <__sflush_r+0x1a>
 800891a:	2300      	movs	r3, #0
 800891c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008920:	682f      	ldr	r7, [r5, #0]
 8008922:	6a21      	ldr	r1, [r4, #32]
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	d032      	beq.n	800898e <__sflush_r+0x9a>
 8008928:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	075a      	lsls	r2, r3, #29
 800892e:	d505      	bpl.n	800893c <__sflush_r+0x48>
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	1ac0      	subs	r0, r0, r3
 8008934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008936:	b10b      	cbz	r3, 800893c <__sflush_r+0x48>
 8008938:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800893a:	1ac0      	subs	r0, r0, r3
 800893c:	2300      	movs	r3, #0
 800893e:	4602      	mov	r2, r0
 8008940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008942:	6a21      	ldr	r1, [r4, #32]
 8008944:	4628      	mov	r0, r5
 8008946:	47b0      	blx	r6
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	d106      	bne.n	800895c <__sflush_r+0x68>
 800894e:	6829      	ldr	r1, [r5, #0]
 8008950:	291d      	cmp	r1, #29
 8008952:	d82b      	bhi.n	80089ac <__sflush_r+0xb8>
 8008954:	4a29      	ldr	r2, [pc, #164]	; (80089fc <__sflush_r+0x108>)
 8008956:	410a      	asrs	r2, r1
 8008958:	07d6      	lsls	r6, r2, #31
 800895a:	d427      	bmi.n	80089ac <__sflush_r+0xb8>
 800895c:	2200      	movs	r2, #0
 800895e:	6062      	str	r2, [r4, #4]
 8008960:	04d9      	lsls	r1, r3, #19
 8008962:	6922      	ldr	r2, [r4, #16]
 8008964:	6022      	str	r2, [r4, #0]
 8008966:	d504      	bpl.n	8008972 <__sflush_r+0x7e>
 8008968:	1c42      	adds	r2, r0, #1
 800896a:	d101      	bne.n	8008970 <__sflush_r+0x7c>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b903      	cbnz	r3, 8008972 <__sflush_r+0x7e>
 8008970:	6560      	str	r0, [r4, #84]	; 0x54
 8008972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008974:	602f      	str	r7, [r5, #0]
 8008976:	2900      	cmp	r1, #0
 8008978:	d0c9      	beq.n	800890e <__sflush_r+0x1a>
 800897a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800897e:	4299      	cmp	r1, r3
 8008980:	d002      	beq.n	8008988 <__sflush_r+0x94>
 8008982:	4628      	mov	r0, r5
 8008984:	f7ff fb3a 	bl	8007ffc <_free_r>
 8008988:	2000      	movs	r0, #0
 800898a:	6360      	str	r0, [r4, #52]	; 0x34
 800898c:	e7c0      	b.n	8008910 <__sflush_r+0x1c>
 800898e:	2301      	movs	r3, #1
 8008990:	4628      	mov	r0, r5
 8008992:	47b0      	blx	r6
 8008994:	1c41      	adds	r1, r0, #1
 8008996:	d1c8      	bne.n	800892a <__sflush_r+0x36>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0c5      	beq.n	800892a <__sflush_r+0x36>
 800899e:	2b1d      	cmp	r3, #29
 80089a0:	d001      	beq.n	80089a6 <__sflush_r+0xb2>
 80089a2:	2b16      	cmp	r3, #22
 80089a4:	d101      	bne.n	80089aa <__sflush_r+0xb6>
 80089a6:	602f      	str	r7, [r5, #0]
 80089a8:	e7b1      	b.n	800890e <__sflush_r+0x1a>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	e7ad      	b.n	8008910 <__sflush_r+0x1c>
 80089b4:	690f      	ldr	r7, [r1, #16]
 80089b6:	2f00      	cmp	r7, #0
 80089b8:	d0a9      	beq.n	800890e <__sflush_r+0x1a>
 80089ba:	0793      	lsls	r3, r2, #30
 80089bc:	680e      	ldr	r6, [r1, #0]
 80089be:	bf08      	it	eq
 80089c0:	694b      	ldreq	r3, [r1, #20]
 80089c2:	600f      	str	r7, [r1, #0]
 80089c4:	bf18      	it	ne
 80089c6:	2300      	movne	r3, #0
 80089c8:	eba6 0807 	sub.w	r8, r6, r7
 80089cc:	608b      	str	r3, [r1, #8]
 80089ce:	f1b8 0f00 	cmp.w	r8, #0
 80089d2:	dd9c      	ble.n	800890e <__sflush_r+0x1a>
 80089d4:	6a21      	ldr	r1, [r4, #32]
 80089d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089d8:	4643      	mov	r3, r8
 80089da:	463a      	mov	r2, r7
 80089dc:	4628      	mov	r0, r5
 80089de:	47b0      	blx	r6
 80089e0:	2800      	cmp	r0, #0
 80089e2:	dc06      	bgt.n	80089f2 <__sflush_r+0xfe>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	f04f 30ff 	mov.w	r0, #4294967295
 80089f0:	e78e      	b.n	8008910 <__sflush_r+0x1c>
 80089f2:	4407      	add	r7, r0
 80089f4:	eba8 0800 	sub.w	r8, r8, r0
 80089f8:	e7e9      	b.n	80089ce <__sflush_r+0xda>
 80089fa:	bf00      	nop
 80089fc:	dfbffffe 	.word	0xdfbffffe

08008a00 <_fflush_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	690b      	ldr	r3, [r1, #16]
 8008a04:	4605      	mov	r5, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	b913      	cbnz	r3, 8008a10 <_fflush_r+0x10>
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	b118      	cbz	r0, 8008a1a <_fflush_r+0x1a>
 8008a12:	6a03      	ldr	r3, [r0, #32]
 8008a14:	b90b      	cbnz	r3, 8008a1a <_fflush_r+0x1a>
 8008a16:	f7fe fb6f 	bl	80070f8 <__sinit>
 8008a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0f3      	beq.n	8008a0a <_fflush_r+0xa>
 8008a22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a24:	07d0      	lsls	r0, r2, #31
 8008a26:	d404      	bmi.n	8008a32 <_fflush_r+0x32>
 8008a28:	0599      	lsls	r1, r3, #22
 8008a2a:	d402      	bmi.n	8008a32 <_fflush_r+0x32>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f7fe fc5a 	bl	80072e6 <__retarget_lock_acquire_recursive>
 8008a32:	4628      	mov	r0, r5
 8008a34:	4621      	mov	r1, r4
 8008a36:	f7ff ff5d 	bl	80088f4 <__sflush_r>
 8008a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a3c:	07da      	lsls	r2, r3, #31
 8008a3e:	4605      	mov	r5, r0
 8008a40:	d4e4      	bmi.n	8008a0c <_fflush_r+0xc>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	059b      	lsls	r3, r3, #22
 8008a46:	d4e1      	bmi.n	8008a0c <_fflush_r+0xc>
 8008a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a4a:	f7fe fc4d 	bl	80072e8 <__retarget_lock_release_recursive>
 8008a4e:	e7dd      	b.n	8008a0c <_fflush_r+0xc>

08008a50 <_sbrk_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4d06      	ldr	r5, [pc, #24]	; (8008a6c <_sbrk_r+0x1c>)
 8008a54:	2300      	movs	r3, #0
 8008a56:	4604      	mov	r4, r0
 8008a58:	4608      	mov	r0, r1
 8008a5a:	602b      	str	r3, [r5, #0]
 8008a5c:	f7f8 ffa8 	bl	80019b0 <_sbrk>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_sbrk_r+0x1a>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_sbrk_r+0x1a>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	20001068 	.word	0x20001068

08008a70 <__assert_func>:
 8008a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a72:	4614      	mov	r4, r2
 8008a74:	461a      	mov	r2, r3
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <__assert_func+0x2c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	68d8      	ldr	r0, [r3, #12]
 8008a7e:	b14c      	cbz	r4, 8008a94 <__assert_func+0x24>
 8008a80:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <__assert_func+0x30>)
 8008a82:	9100      	str	r1, [sp, #0]
 8008a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a88:	4906      	ldr	r1, [pc, #24]	; (8008aa4 <__assert_func+0x34>)
 8008a8a:	462b      	mov	r3, r5
 8008a8c:	f000 f844 	bl	8008b18 <fiprintf>
 8008a90:	f000 f854 	bl	8008b3c <abort>
 8008a94:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <__assert_func+0x38>)
 8008a96:	461c      	mov	r4, r3
 8008a98:	e7f3      	b.n	8008a82 <__assert_func+0x12>
 8008a9a:	bf00      	nop
 8008a9c:	200000d0 	.word	0x200000d0
 8008aa0:	08009356 	.word	0x08009356
 8008aa4:	08009363 	.word	0x08009363
 8008aa8:	08009391 	.word	0x08009391

08008aac <_calloc_r>:
 8008aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aae:	fba1 2402 	umull	r2, r4, r1, r2
 8008ab2:	b94c      	cbnz	r4, 8008ac8 <_calloc_r+0x1c>
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	9201      	str	r2, [sp, #4]
 8008ab8:	f7ff fb14 	bl	80080e4 <_malloc_r>
 8008abc:	9a01      	ldr	r2, [sp, #4]
 8008abe:	4605      	mov	r5, r0
 8008ac0:	b930      	cbnz	r0, 8008ad0 <_calloc_r+0x24>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	b003      	add	sp, #12
 8008ac6:	bd30      	pop	{r4, r5, pc}
 8008ac8:	220c      	movs	r2, #12
 8008aca:	6002      	str	r2, [r0, #0]
 8008acc:	2500      	movs	r5, #0
 8008ace:	e7f8      	b.n	8008ac2 <_calloc_r+0x16>
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f7fe fb8a 	bl	80071ea <memset>
 8008ad6:	e7f4      	b.n	8008ac2 <_calloc_r+0x16>

08008ad8 <__ascii_mbtowc>:
 8008ad8:	b082      	sub	sp, #8
 8008ada:	b901      	cbnz	r1, 8008ade <__ascii_mbtowc+0x6>
 8008adc:	a901      	add	r1, sp, #4
 8008ade:	b142      	cbz	r2, 8008af2 <__ascii_mbtowc+0x1a>
 8008ae0:	b14b      	cbz	r3, 8008af6 <__ascii_mbtowc+0x1e>
 8008ae2:	7813      	ldrb	r3, [r2, #0]
 8008ae4:	600b      	str	r3, [r1, #0]
 8008ae6:	7812      	ldrb	r2, [r2, #0]
 8008ae8:	1e10      	subs	r0, r2, #0
 8008aea:	bf18      	it	ne
 8008aec:	2001      	movne	r0, #1
 8008aee:	b002      	add	sp, #8
 8008af0:	4770      	bx	lr
 8008af2:	4610      	mov	r0, r2
 8008af4:	e7fb      	b.n	8008aee <__ascii_mbtowc+0x16>
 8008af6:	f06f 0001 	mvn.w	r0, #1
 8008afa:	e7f8      	b.n	8008aee <__ascii_mbtowc+0x16>

08008afc <__ascii_wctomb>:
 8008afc:	b149      	cbz	r1, 8008b12 <__ascii_wctomb+0x16>
 8008afe:	2aff      	cmp	r2, #255	; 0xff
 8008b00:	bf85      	ittet	hi
 8008b02:	238a      	movhi	r3, #138	; 0x8a
 8008b04:	6003      	strhi	r3, [r0, #0]
 8008b06:	700a      	strbls	r2, [r1, #0]
 8008b08:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b0c:	bf98      	it	ls
 8008b0e:	2001      	movls	r0, #1
 8008b10:	4770      	bx	lr
 8008b12:	4608      	mov	r0, r1
 8008b14:	4770      	bx	lr
	...

08008b18 <fiprintf>:
 8008b18:	b40e      	push	{r1, r2, r3}
 8008b1a:	b503      	push	{r0, r1, lr}
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	4805      	ldr	r0, [pc, #20]	; (8008b38 <fiprintf+0x20>)
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	f000 f837 	bl	8008b9c <_vfiprintf_r>
 8008b2e:	b002      	add	sp, #8
 8008b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b34:	b003      	add	sp, #12
 8008b36:	4770      	bx	lr
 8008b38:	200000d0 	.word	0x200000d0

08008b3c <abort>:
 8008b3c:	b508      	push	{r3, lr}
 8008b3e:	2006      	movs	r0, #6
 8008b40:	f000 fa04 	bl	8008f4c <raise>
 8008b44:	2001      	movs	r0, #1
 8008b46:	f7f8 fed7 	bl	80018f8 <_exit>

08008b4a <__sfputc_r>:
 8008b4a:	6893      	ldr	r3, [r2, #8]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	b410      	push	{r4}
 8008b52:	6093      	str	r3, [r2, #8]
 8008b54:	da08      	bge.n	8008b68 <__sfputc_r+0x1e>
 8008b56:	6994      	ldr	r4, [r2, #24]
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	db01      	blt.n	8008b60 <__sfputc_r+0x16>
 8008b5c:	290a      	cmp	r1, #10
 8008b5e:	d103      	bne.n	8008b68 <__sfputc_r+0x1e>
 8008b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b64:	f000 b934 	b.w	8008dd0 <__swbuf_r>
 8008b68:	6813      	ldr	r3, [r2, #0]
 8008b6a:	1c58      	adds	r0, r3, #1
 8008b6c:	6010      	str	r0, [r2, #0]
 8008b6e:	7019      	strb	r1, [r3, #0]
 8008b70:	4608      	mov	r0, r1
 8008b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <__sfputs_r>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	460f      	mov	r7, r1
 8008b7e:	4614      	mov	r4, r2
 8008b80:	18d5      	adds	r5, r2, r3
 8008b82:	42ac      	cmp	r4, r5
 8008b84:	d101      	bne.n	8008b8a <__sfputs_r+0x12>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e007      	b.n	8008b9a <__sfputs_r+0x22>
 8008b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8e:	463a      	mov	r2, r7
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff ffda 	bl	8008b4a <__sfputc_r>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	d1f3      	bne.n	8008b82 <__sfputs_r+0xa>
 8008b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b9c <_vfiprintf_r>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	b09d      	sub	sp, #116	; 0x74
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	4698      	mov	r8, r3
 8008ba8:	4606      	mov	r6, r0
 8008baa:	b118      	cbz	r0, 8008bb4 <_vfiprintf_r+0x18>
 8008bac:	6a03      	ldr	r3, [r0, #32]
 8008bae:	b90b      	cbnz	r3, 8008bb4 <_vfiprintf_r+0x18>
 8008bb0:	f7fe faa2 	bl	80070f8 <__sinit>
 8008bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb6:	07d9      	lsls	r1, r3, #31
 8008bb8:	d405      	bmi.n	8008bc6 <_vfiprintf_r+0x2a>
 8008bba:	89ab      	ldrh	r3, [r5, #12]
 8008bbc:	059a      	lsls	r2, r3, #22
 8008bbe:	d402      	bmi.n	8008bc6 <_vfiprintf_r+0x2a>
 8008bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bc2:	f7fe fb90 	bl	80072e6 <__retarget_lock_acquire_recursive>
 8008bc6:	89ab      	ldrh	r3, [r5, #12]
 8008bc8:	071b      	lsls	r3, r3, #28
 8008bca:	d501      	bpl.n	8008bd0 <_vfiprintf_r+0x34>
 8008bcc:	692b      	ldr	r3, [r5, #16]
 8008bce:	b99b      	cbnz	r3, 8008bf8 <_vfiprintf_r+0x5c>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f000 f93a 	bl	8008e4c <__swsetup_r>
 8008bd8:	b170      	cbz	r0, 8008bf8 <_vfiprintf_r+0x5c>
 8008bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bdc:	07dc      	lsls	r4, r3, #31
 8008bde:	d504      	bpl.n	8008bea <_vfiprintf_r+0x4e>
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	b01d      	add	sp, #116	; 0x74
 8008be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	0598      	lsls	r0, r3, #22
 8008bee:	d4f7      	bmi.n	8008be0 <_vfiprintf_r+0x44>
 8008bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf2:	f7fe fb79 	bl	80072e8 <__retarget_lock_release_recursive>
 8008bf6:	e7f3      	b.n	8008be0 <_vfiprintf_r+0x44>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c06:	2330      	movs	r3, #48	; 0x30
 8008c08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008dbc <_vfiprintf_r+0x220>
 8008c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c10:	f04f 0901 	mov.w	r9, #1
 8008c14:	4623      	mov	r3, r4
 8008c16:	469a      	mov	sl, r3
 8008c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c1c:	b10a      	cbz	r2, 8008c22 <_vfiprintf_r+0x86>
 8008c1e:	2a25      	cmp	r2, #37	; 0x25
 8008c20:	d1f9      	bne.n	8008c16 <_vfiprintf_r+0x7a>
 8008c22:	ebba 0b04 	subs.w	fp, sl, r4
 8008c26:	d00b      	beq.n	8008c40 <_vfiprintf_r+0xa4>
 8008c28:	465b      	mov	r3, fp
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7ff ffa2 	bl	8008b78 <__sfputs_r>
 8008c34:	3001      	adds	r0, #1
 8008c36:	f000 80a9 	beq.w	8008d8c <_vfiprintf_r+0x1f0>
 8008c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c3c:	445a      	add	r2, fp
 8008c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c40:	f89a 3000 	ldrb.w	r3, [sl]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 80a1 	beq.w	8008d8c <_vfiprintf_r+0x1f0>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c54:	f10a 0a01 	add.w	sl, sl, #1
 8008c58:	9304      	str	r3, [sp, #16]
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c60:	931a      	str	r3, [sp, #104]	; 0x68
 8008c62:	4654      	mov	r4, sl
 8008c64:	2205      	movs	r2, #5
 8008c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c6a:	4854      	ldr	r0, [pc, #336]	; (8008dbc <_vfiprintf_r+0x220>)
 8008c6c:	f7f7 fab8 	bl	80001e0 <memchr>
 8008c70:	9a04      	ldr	r2, [sp, #16]
 8008c72:	b9d8      	cbnz	r0, 8008cac <_vfiprintf_r+0x110>
 8008c74:	06d1      	lsls	r1, r2, #27
 8008c76:	bf44      	itt	mi
 8008c78:	2320      	movmi	r3, #32
 8008c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c7e:	0713      	lsls	r3, r2, #28
 8008c80:	bf44      	itt	mi
 8008c82:	232b      	movmi	r3, #43	; 0x2b
 8008c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c88:	f89a 3000 	ldrb.w	r3, [sl]
 8008c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8e:	d015      	beq.n	8008cbc <_vfiprintf_r+0x120>
 8008c90:	9a07      	ldr	r2, [sp, #28]
 8008c92:	4654      	mov	r4, sl
 8008c94:	2000      	movs	r0, #0
 8008c96:	f04f 0c0a 	mov.w	ip, #10
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ca0:	3b30      	subs	r3, #48	; 0x30
 8008ca2:	2b09      	cmp	r3, #9
 8008ca4:	d94d      	bls.n	8008d42 <_vfiprintf_r+0x1a6>
 8008ca6:	b1b0      	cbz	r0, 8008cd6 <_vfiprintf_r+0x13a>
 8008ca8:	9207      	str	r2, [sp, #28]
 8008caa:	e014      	b.n	8008cd6 <_vfiprintf_r+0x13a>
 8008cac:	eba0 0308 	sub.w	r3, r0, r8
 8008cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	9304      	str	r3, [sp, #16]
 8008cb8:	46a2      	mov	sl, r4
 8008cba:	e7d2      	b.n	8008c62 <_vfiprintf_r+0xc6>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	1d19      	adds	r1, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	9103      	str	r1, [sp, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfbb      	ittet	lt
 8008cc8:	425b      	neglt	r3, r3
 8008cca:	f042 0202 	orrlt.w	r2, r2, #2
 8008cce:	9307      	strge	r3, [sp, #28]
 8008cd0:	9307      	strlt	r3, [sp, #28]
 8008cd2:	bfb8      	it	lt
 8008cd4:	9204      	strlt	r2, [sp, #16]
 8008cd6:	7823      	ldrb	r3, [r4, #0]
 8008cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8008cda:	d10c      	bne.n	8008cf6 <_vfiprintf_r+0x15a>
 8008cdc:	7863      	ldrb	r3, [r4, #1]
 8008cde:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce0:	d134      	bne.n	8008d4c <_vfiprintf_r+0x1b0>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	1d1a      	adds	r2, r3, #4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	9203      	str	r2, [sp, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bfb8      	it	lt
 8008cee:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cf2:	3402      	adds	r4, #2
 8008cf4:	9305      	str	r3, [sp, #20]
 8008cf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008dcc <_vfiprintf_r+0x230>
 8008cfa:	7821      	ldrb	r1, [r4, #0]
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	4650      	mov	r0, sl
 8008d00:	f7f7 fa6e 	bl	80001e0 <memchr>
 8008d04:	b138      	cbz	r0, 8008d16 <_vfiprintf_r+0x17a>
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	eba0 000a 	sub.w	r0, r0, sl
 8008d0c:	2240      	movs	r2, #64	; 0x40
 8008d0e:	4082      	lsls	r2, r0
 8008d10:	4313      	orrs	r3, r2
 8008d12:	3401      	adds	r4, #1
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1a:	4829      	ldr	r0, [pc, #164]	; (8008dc0 <_vfiprintf_r+0x224>)
 8008d1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d20:	2206      	movs	r2, #6
 8008d22:	f7f7 fa5d 	bl	80001e0 <memchr>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d03f      	beq.n	8008daa <_vfiprintf_r+0x20e>
 8008d2a:	4b26      	ldr	r3, [pc, #152]	; (8008dc4 <_vfiprintf_r+0x228>)
 8008d2c:	bb1b      	cbnz	r3, 8008d76 <_vfiprintf_r+0x1da>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	3307      	adds	r3, #7
 8008d32:	f023 0307 	bic.w	r3, r3, #7
 8008d36:	3308      	adds	r3, #8
 8008d38:	9303      	str	r3, [sp, #12]
 8008d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3c:	443b      	add	r3, r7
 8008d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d40:	e768      	b.n	8008c14 <_vfiprintf_r+0x78>
 8008d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d46:	460c      	mov	r4, r1
 8008d48:	2001      	movs	r0, #1
 8008d4a:	e7a6      	b.n	8008c9a <_vfiprintf_r+0xfe>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	3401      	adds	r4, #1
 8008d50:	9305      	str	r3, [sp, #20]
 8008d52:	4619      	mov	r1, r3
 8008d54:	f04f 0c0a 	mov.w	ip, #10
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d5e:	3a30      	subs	r2, #48	; 0x30
 8008d60:	2a09      	cmp	r2, #9
 8008d62:	d903      	bls.n	8008d6c <_vfiprintf_r+0x1d0>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0c6      	beq.n	8008cf6 <_vfiprintf_r+0x15a>
 8008d68:	9105      	str	r1, [sp, #20]
 8008d6a:	e7c4      	b.n	8008cf6 <_vfiprintf_r+0x15a>
 8008d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d70:	4604      	mov	r4, r0
 8008d72:	2301      	movs	r3, #1
 8008d74:	e7f0      	b.n	8008d58 <_vfiprintf_r+0x1bc>
 8008d76:	ab03      	add	r3, sp, #12
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <_vfiprintf_r+0x22c>)
 8008d7e:	a904      	add	r1, sp, #16
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7fd fd67 	bl	8006854 <_printf_float>
 8008d86:	4607      	mov	r7, r0
 8008d88:	1c78      	adds	r0, r7, #1
 8008d8a:	d1d6      	bne.n	8008d3a <_vfiprintf_r+0x19e>
 8008d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d8e:	07d9      	lsls	r1, r3, #31
 8008d90:	d405      	bmi.n	8008d9e <_vfiprintf_r+0x202>
 8008d92:	89ab      	ldrh	r3, [r5, #12]
 8008d94:	059a      	lsls	r2, r3, #22
 8008d96:	d402      	bmi.n	8008d9e <_vfiprintf_r+0x202>
 8008d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d9a:	f7fe faa5 	bl	80072e8 <__retarget_lock_release_recursive>
 8008d9e:	89ab      	ldrh	r3, [r5, #12]
 8008da0:	065b      	lsls	r3, r3, #25
 8008da2:	f53f af1d 	bmi.w	8008be0 <_vfiprintf_r+0x44>
 8008da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da8:	e71c      	b.n	8008be4 <_vfiprintf_r+0x48>
 8008daa:	ab03      	add	r3, sp, #12
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	462a      	mov	r2, r5
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <_vfiprintf_r+0x22c>)
 8008db2:	a904      	add	r1, sp, #16
 8008db4:	4630      	mov	r0, r6
 8008db6:	f7fd fff1 	bl	8006d9c <_printf_i>
 8008dba:	e7e4      	b.n	8008d86 <_vfiprintf_r+0x1ea>
 8008dbc:	08009493 	.word	0x08009493
 8008dc0:	0800949d 	.word	0x0800949d
 8008dc4:	08006855 	.word	0x08006855
 8008dc8:	08008b79 	.word	0x08008b79
 8008dcc:	08009499 	.word	0x08009499

08008dd0 <__swbuf_r>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	460e      	mov	r6, r1
 8008dd4:	4614      	mov	r4, r2
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	b118      	cbz	r0, 8008de2 <__swbuf_r+0x12>
 8008dda:	6a03      	ldr	r3, [r0, #32]
 8008ddc:	b90b      	cbnz	r3, 8008de2 <__swbuf_r+0x12>
 8008dde:	f7fe f98b 	bl	80070f8 <__sinit>
 8008de2:	69a3      	ldr	r3, [r4, #24]
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	071a      	lsls	r2, r3, #28
 8008dea:	d525      	bpl.n	8008e38 <__swbuf_r+0x68>
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	b31b      	cbz	r3, 8008e38 <__swbuf_r+0x68>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	6922      	ldr	r2, [r4, #16]
 8008df4:	1a98      	subs	r0, r3, r2
 8008df6:	6963      	ldr	r3, [r4, #20]
 8008df8:	b2f6      	uxtb	r6, r6
 8008dfa:	4283      	cmp	r3, r0
 8008dfc:	4637      	mov	r7, r6
 8008dfe:	dc04      	bgt.n	8008e0a <__swbuf_r+0x3a>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f7ff fdfc 	bl	8008a00 <_fflush_r>
 8008e08:	b9e0      	cbnz	r0, 8008e44 <__swbuf_r+0x74>
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	60a3      	str	r3, [r4, #8]
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	6022      	str	r2, [r4, #0]
 8008e16:	701e      	strb	r6, [r3, #0]
 8008e18:	6962      	ldr	r2, [r4, #20]
 8008e1a:	1c43      	adds	r3, r0, #1
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d004      	beq.n	8008e2a <__swbuf_r+0x5a>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	07db      	lsls	r3, r3, #31
 8008e24:	d506      	bpl.n	8008e34 <__swbuf_r+0x64>
 8008e26:	2e0a      	cmp	r6, #10
 8008e28:	d104      	bne.n	8008e34 <__swbuf_r+0x64>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f7ff fde7 	bl	8008a00 <_fflush_r>
 8008e32:	b938      	cbnz	r0, 8008e44 <__swbuf_r+0x74>
 8008e34:	4638      	mov	r0, r7
 8008e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f806 	bl	8008e4c <__swsetup_r>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d0d5      	beq.n	8008df0 <__swbuf_r+0x20>
 8008e44:	f04f 37ff 	mov.w	r7, #4294967295
 8008e48:	e7f4      	b.n	8008e34 <__swbuf_r+0x64>
	...

08008e4c <__swsetup_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4b2a      	ldr	r3, [pc, #168]	; (8008ef8 <__swsetup_r+0xac>)
 8008e50:	4605      	mov	r5, r0
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	460c      	mov	r4, r1
 8008e56:	b118      	cbz	r0, 8008e60 <__swsetup_r+0x14>
 8008e58:	6a03      	ldr	r3, [r0, #32]
 8008e5a:	b90b      	cbnz	r3, 8008e60 <__swsetup_r+0x14>
 8008e5c:	f7fe f94c 	bl	80070f8 <__sinit>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e66:	0718      	lsls	r0, r3, #28
 8008e68:	d422      	bmi.n	8008eb0 <__swsetup_r+0x64>
 8008e6a:	06d9      	lsls	r1, r3, #27
 8008e6c:	d407      	bmi.n	8008e7e <__swsetup_r+0x32>
 8008e6e:	2309      	movs	r3, #9
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7c:	e034      	b.n	8008ee8 <__swsetup_r+0x9c>
 8008e7e:	0758      	lsls	r0, r3, #29
 8008e80:	d512      	bpl.n	8008ea8 <__swsetup_r+0x5c>
 8008e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e84:	b141      	cbz	r1, 8008e98 <__swsetup_r+0x4c>
 8008e86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e8a:	4299      	cmp	r1, r3
 8008e8c:	d002      	beq.n	8008e94 <__swsetup_r+0x48>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f7ff f8b4 	bl	8007ffc <_free_r>
 8008e94:	2300      	movs	r3, #0
 8008e96:	6363      	str	r3, [r4, #52]	; 0x34
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6063      	str	r3, [r4, #4]
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f043 0308 	orr.w	r3, r3, #8
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	b94b      	cbnz	r3, 8008ec8 <__swsetup_r+0x7c>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ebe:	d003      	beq.n	8008ec8 <__swsetup_r+0x7c>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 f884 	bl	8008fd0 <__smakebuf_r>
 8008ec8:	89a0      	ldrh	r0, [r4, #12]
 8008eca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ece:	f010 0301 	ands.w	r3, r0, #1
 8008ed2:	d00a      	beq.n	8008eea <__swsetup_r+0x9e>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60a3      	str	r3, [r4, #8]
 8008ed8:	6963      	ldr	r3, [r4, #20]
 8008eda:	425b      	negs	r3, r3
 8008edc:	61a3      	str	r3, [r4, #24]
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	b943      	cbnz	r3, 8008ef4 <__swsetup_r+0xa8>
 8008ee2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ee6:	d1c4      	bne.n	8008e72 <__swsetup_r+0x26>
 8008ee8:	bd38      	pop	{r3, r4, r5, pc}
 8008eea:	0781      	lsls	r1, r0, #30
 8008eec:	bf58      	it	pl
 8008eee:	6963      	ldrpl	r3, [r4, #20]
 8008ef0:	60a3      	str	r3, [r4, #8]
 8008ef2:	e7f4      	b.n	8008ede <__swsetup_r+0x92>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e7f7      	b.n	8008ee8 <__swsetup_r+0x9c>
 8008ef8:	200000d0 	.word	0x200000d0

08008efc <_raise_r>:
 8008efc:	291f      	cmp	r1, #31
 8008efe:	b538      	push	{r3, r4, r5, lr}
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	d904      	bls.n	8008f10 <_raise_r+0x14>
 8008f06:	2316      	movs	r3, #22
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f12:	b112      	cbz	r2, 8008f1a <_raise_r+0x1e>
 8008f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f18:	b94b      	cbnz	r3, 8008f2e <_raise_r+0x32>
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f830 	bl	8008f80 <_getpid_r>
 8008f20:	462a      	mov	r2, r5
 8008f22:	4601      	mov	r1, r0
 8008f24:	4620      	mov	r0, r4
 8008f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f2a:	f000 b817 	b.w	8008f5c <_kill_r>
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d00a      	beq.n	8008f48 <_raise_r+0x4c>
 8008f32:	1c59      	adds	r1, r3, #1
 8008f34:	d103      	bne.n	8008f3e <_raise_r+0x42>
 8008f36:	2316      	movs	r3, #22
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	e7e7      	b.n	8008f0e <_raise_r+0x12>
 8008f3e:	2400      	movs	r4, #0
 8008f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f44:	4628      	mov	r0, r5
 8008f46:	4798      	blx	r3
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e7e0      	b.n	8008f0e <_raise_r+0x12>

08008f4c <raise>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <raise+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f7ff bfd3 	b.w	8008efc <_raise_r>
 8008f56:	bf00      	nop
 8008f58:	200000d0 	.word	0x200000d0

08008f5c <_kill_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4d07      	ldr	r5, [pc, #28]	; (8008f7c <_kill_r+0x20>)
 8008f60:	2300      	movs	r3, #0
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	602b      	str	r3, [r5, #0]
 8008f6a:	f7f8 fcb5 	bl	80018d8 <_kill>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d102      	bne.n	8008f78 <_kill_r+0x1c>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b103      	cbz	r3, 8008f78 <_kill_r+0x1c>
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20001068 	.word	0x20001068

08008f80 <_getpid_r>:
 8008f80:	f7f8 bca2 	b.w	80018c8 <_getpid>

08008f84 <__swhatbuf_r>:
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	460c      	mov	r4, r1
 8008f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	b096      	sub	sp, #88	; 0x58
 8008f90:	4615      	mov	r5, r2
 8008f92:	461e      	mov	r6, r3
 8008f94:	da0d      	bge.n	8008fb2 <__swhatbuf_r+0x2e>
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f9c:	f04f 0100 	mov.w	r1, #0
 8008fa0:	bf0c      	ite	eq
 8008fa2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fa6:	2340      	movne	r3, #64	; 0x40
 8008fa8:	2000      	movs	r0, #0
 8008faa:	6031      	str	r1, [r6, #0]
 8008fac:	602b      	str	r3, [r5, #0]
 8008fae:	b016      	add	sp, #88	; 0x58
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	466a      	mov	r2, sp
 8008fb4:	f000 f848 	bl	8009048 <_fstat_r>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	dbec      	blt.n	8008f96 <__swhatbuf_r+0x12>
 8008fbc:	9901      	ldr	r1, [sp, #4]
 8008fbe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008fc2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fc6:	4259      	negs	r1, r3
 8008fc8:	4159      	adcs	r1, r3
 8008fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fce:	e7eb      	b.n	8008fa8 <__swhatbuf_r+0x24>

08008fd0 <__smakebuf_r>:
 8008fd0:	898b      	ldrh	r3, [r1, #12]
 8008fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fd4:	079d      	lsls	r5, r3, #30
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	d507      	bpl.n	8008fec <__smakebuf_r+0x1c>
 8008fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	6123      	str	r3, [r4, #16]
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	6163      	str	r3, [r4, #20]
 8008fe8:	b002      	add	sp, #8
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	ab01      	add	r3, sp, #4
 8008fee:	466a      	mov	r2, sp
 8008ff0:	f7ff ffc8 	bl	8008f84 <__swhatbuf_r>
 8008ff4:	9900      	ldr	r1, [sp, #0]
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff f873 	bl	80080e4 <_malloc_r>
 8008ffe:	b948      	cbnz	r0, 8009014 <__smakebuf_r+0x44>
 8009000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009004:	059a      	lsls	r2, r3, #22
 8009006:	d4ef      	bmi.n	8008fe8 <__smakebuf_r+0x18>
 8009008:	f023 0303 	bic.w	r3, r3, #3
 800900c:	f043 0302 	orr.w	r3, r3, #2
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	e7e3      	b.n	8008fdc <__smakebuf_r+0xc>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	6020      	str	r0, [r4, #0]
 8009018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901c:	81a3      	strh	r3, [r4, #12]
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	6163      	str	r3, [r4, #20]
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	6120      	str	r0, [r4, #16]
 8009026:	b15b      	cbz	r3, 8009040 <__smakebuf_r+0x70>
 8009028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800902c:	4630      	mov	r0, r6
 800902e:	f000 f81d 	bl	800906c <_isatty_r>
 8009032:	b128      	cbz	r0, 8009040 <__smakebuf_r+0x70>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	f023 0303 	bic.w	r3, r3, #3
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	431d      	orrs	r5, r3
 8009044:	81a5      	strh	r5, [r4, #12]
 8009046:	e7cf      	b.n	8008fe8 <__smakebuf_r+0x18>

08009048 <_fstat_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d07      	ldr	r5, [pc, #28]	; (8009068 <_fstat_r+0x20>)
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	4611      	mov	r1, r2
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	f7f8 fc82 	bl	800195e <_fstat>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	d102      	bne.n	8009064 <_fstat_r+0x1c>
 800905e:	682b      	ldr	r3, [r5, #0]
 8009060:	b103      	cbz	r3, 8009064 <_fstat_r+0x1c>
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	bd38      	pop	{r3, r4, r5, pc}
 8009066:	bf00      	nop
 8009068:	20001068 	.word	0x20001068

0800906c <_isatty_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d06      	ldr	r5, [pc, #24]	; (8009088 <_isatty_r+0x1c>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	f7f8 fc81 	bl	800197e <_isatty>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_isatty_r+0x1a>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_isatty_r+0x1a>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	20001068 	.word	0x20001068

0800908c <_init>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr

08009098 <_fini>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	bf00      	nop
 800909c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909e:	bc08      	pop	{r3}
 80090a0:	469e      	mov	lr, r3
 80090a2:	4770      	bx	lr
